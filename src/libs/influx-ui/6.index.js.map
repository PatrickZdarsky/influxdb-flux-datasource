{"version":3,"sources":["webpack:///./src/dataLoaders/components/collectorsWizard/select/StreamingSelector.tsx","webpack:///./src/dataLoaders/components/collectorsWizard/select/SelectCollectorsStep.tsx","webpack:///./src/shared/components/URIFormElement.tsx","webpack:///./src/dataLoaders/components/configureStep/streaming/ArrayFormElement.tsx","webpack:///./src/dataLoaders/components/configureStep/streaming/ConfigFieldSwitcher.tsx","webpack:///./src/dataLoaders/components/collectorsWizard/configure/ConfigFieldHandler.tsx","webpack:///./src/dataLoaders/components/collectorsWizard/configure/PluginConfigForm.tsx","webpack:///./src/dataLoaders/components/configureStep/EmptyDataSourceState.tsx","webpack:///./src/dataLoaders/components/side_bar/SideBarTab.tsx","webpack:///./src/dataLoaders/components/side_bar/SideBarButton.tsx","webpack:///./src/dataLoaders/components/side_bar/SideBar.tsx","webpack:///./src/dataLoaders/components/collectorsWizard/configure/PluginsSideBar.tsx","webpack:///./src/dataLoaders/components/collectorsWizard/configure/TelegrafPluginInstructions.tsx","webpack:///./src/dataLoaders/components/collectorsWizard/configure/PluginConfigSwitcher.tsx","webpack:///./src/dataLoaders/components/verifyStep/ConnectionInformation.tsx","webpack:///./src/dataLoaders/components/verifyStep/DataListening.tsx","webpack:///./src/dataLoaders/components/verifyStep/DataStreaming.tsx","webpack:///./src/dataLoaders/components/collectorsWizard/verify/VerifyCollectorsStep.tsx","webpack:///./src/dataLoaders/components/collectorsWizard/CollectorsStepSwitcher.tsx"],"names":[],"mappings":"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","file":"6.index.js","sourcesContent":["// Libraries\nimport React, {PureComponent, ChangeEvent, createElement} from 'react'\nimport uuid from 'uuid'\nimport _ from 'lodash'\n\n// Components\nimport {\n  Input,\n  EmptyState,\n  FormElement,\n  Grid,\n  SelectableCard,\n  IconFont,\n  SquareGrid,\n} from '@influxdata/clockface'\nimport {ErrorHandling} from 'src/shared/decorators/errors'\n\n// Constants\nimport {\n  PLUGIN_BUNDLE_OPTIONS,\n  BUNDLE_LOGOS,\n} from 'src/dataLoaders/constants/pluginConfigs'\nimport BucketDropdown from 'src/dataLoaders/components/BucketsDropdown'\n\n// Types\nimport {TelegrafPlugin, BundleName} from 'src/types/dataLoaders'\nimport {Bucket} from 'src/types'\nimport {Columns, ComponentSize} from '@influxdata/clockface'\n\nexport interface Props {\n  buckets: Bucket[]\n  selectedBucketName: string\n  pluginBundles: BundleName[]\n  telegrafPlugins: TelegrafPlugin[]\n  onTogglePluginBundle: (telegrafPlugin: string, isSelected: boolean) => void\n  onSelectBucket: (bucket: Bucket) => void\n}\n\ninterface State {\n  gridSizerUpdateFlag: string\n  searchTerm: string\n}\n\n@ErrorHandling\nclass StreamingSelector extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      gridSizerUpdateFlag: uuid.v4(),\n      searchTerm: '',\n    }\n  }\n\n  public componentDidUpdate(prevProps) {\n    const addFirst =\n      prevProps.telegrafPlugins.length === 0 &&\n      this.props.telegrafPlugins.length > 0\n\n    const removeLast =\n      prevProps.telegrafPlugins.length > 0 &&\n      this.props.telegrafPlugins.length === 0\n\n    if (addFirst || removeLast) {\n      const gridSizerUpdateFlag = uuid.v4()\n      this.setState({gridSizerUpdateFlag})\n    }\n  }\n\n  public render() {\n    const {buckets} = this.props\n    const {searchTerm} = this.state\n\n    const cardSize = `${100 / (this.filteredBundles.length + 1)}%`\n\n    return (\n      <div className=\"wizard-step--grid-container\">\n        <Grid.Row>\n          <Grid.Column widthSM={Columns.Five}>\n            <FormElement label=\"Bucket\">\n              <BucketDropdown\n                selectedBucketID={this.selectedBucketID}\n                buckets={buckets}\n                onSelectBucket={this.handleSelectBucket}\n              />\n            </FormElement>\n          </Grid.Column>\n          <Grid.Column widthSM={Columns.Five} offsetSM={Columns.Two}>\n            <FormElement label=\"\">\n              <Input\n                className=\"wizard-step--filter\"\n                size={ComponentSize.Small}\n                icon={IconFont.Search}\n                value={searchTerm}\n                onBlur={this.handleFilterBlur}\n                onChange={this.handleFilterChange}\n                placeholder=\"Filter Plugins...\"\n              />\n            </FormElement>\n          </Grid.Column>\n        </Grid.Row>\n        <SquareGrid cardSize={cardSize} gutter={ComponentSize.Small}>\n          {this.filteredBundles.map(b => {\n            return (\n              <SquareGrid.Card key={b}>\n                <SelectableCard\n                  id={b}\n                  formName=\"telegraf-plugins\"\n                  label={b}\n                  testID={`telegraf-plugins--${b}`}\n                  selected={this.isCardChecked(b)}\n                  onClick={this.handleToggle}\n                  icon={IconFont.Checkmark}\n                >\n                  {createElement(BUNDLE_LOGOS[b])}\n                </SelectableCard>\n              </SquareGrid.Card>\n            )\n          })}\n        </SquareGrid>\n        {this.emptyState}\n      </div>\n    )\n  }\n\n  private get selectedBucketID(): string {\n    const {buckets, selectedBucketName} = this.props\n\n    return buckets.find(b => b.name === selectedBucketName).id\n  }\n\n  private handleSelectBucket = (bucket: Bucket) => {\n    this.props.onSelectBucket(bucket)\n  }\n\n  private get emptyState(): JSX.Element {\n    const {searchTerm} = this.state\n\n    const noMatches = this.filteredBundles.length === 0\n\n    if (searchTerm && noMatches) {\n      return (\n        <EmptyState size={ComponentSize.Medium}>\n          <EmptyState.Text>No plugins match your search</EmptyState.Text>\n        </EmptyState>\n      )\n    }\n  }\n\n  private get filteredBundles(): BundleName[] {\n    const {searchTerm} = this.state\n\n    return PLUGIN_BUNDLE_OPTIONS.filter(b =>\n      b.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n  }\n\n  private isCardChecked(bundle: BundleName): boolean {\n    const {pluginBundles} = this.props\n\n    if (pluginBundles.find(b => b === bundle)) {\n      return true\n    }\n    return false\n  }\n\n  private handleToggle = (bundle: BundleName): void => {\n    this.props.onTogglePluginBundle(bundle, this.isCardChecked(bundle))\n  }\n\n  private handleFilterChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    this.setState({searchTerm: e.target.value})\n  }\n\n  private handleFilterBlur = (e: ChangeEvent<HTMLInputElement>): void => {\n    this.setState({searchTerm: e.target.value})\n  }\n}\n\nexport default StreamingSelector\n","// Libraries\nimport React, {PureComponent} from 'react'\nimport {connect} from 'react-redux'\n\n// Components\nimport {Form} from '@influxdata/clockface'\nimport {ErrorHandling} from 'src/shared/decorators/errors'\nimport StreamingSelector from 'src/dataLoaders/components/collectorsWizard/select/StreamingSelector'\nimport OnboardingButtons from 'src/onboarding/components/OnboardingButtons'\nimport FancyScrollbar from 'src/shared/components/fancy_scrollbar/FancyScrollbar'\n\n// Actions\nimport {\n  addPluginBundleWithPlugins,\n  removePluginBundleWithPlugins,\n} from 'src/dataLoaders/actions/dataLoaders'\nimport {setBucketInfo} from 'src/dataLoaders/actions/steps'\n\n// Types\nimport {Bucket} from 'src/types'\nimport {ComponentStatus} from '@influxdata/clockface'\nimport {CollectorsStepProps} from 'src/dataLoaders/components/collectorsWizard/CollectorsWizard'\nimport {TelegrafPlugin, BundleName} from 'src/types/dataLoaders'\nimport {AppState} from 'src/types'\n\nexport interface OwnProps extends CollectorsStepProps {\n  buckets: Bucket[]\n}\n\nexport interface StateProps {\n  bucket: string\n  telegrafPlugins: TelegrafPlugin[]\n  pluginBundles: BundleName[]\n}\n\nexport interface DispatchProps {\n  onAddPluginBundle: typeof addPluginBundleWithPlugins\n  onRemovePluginBundle: typeof removePluginBundleWithPlugins\n  onSetBucketInfo: typeof setBucketInfo\n}\n\ntype Props = OwnProps & StateProps & DispatchProps\n\n@ErrorHandling\nexport class SelectCollectorsStep extends PureComponent<Props> {\n  public render() {\n    return (\n      <Form\n        onSubmit={this.props.onIncrementCurrentStepIndex}\n        className=\"data-loading--form\"\n      >\n        <FancyScrollbar\n          autoHide={false}\n          className=\"data-loading--scroll-content\"\n        >\n          <div>\n            <h3 className=\"wizard-step--title\">What do you want to monitor?</h3>\n            <h5 className=\"wizard-step--sub-title\">\n              Telegraf is a plugin-based data collection agent which writes\n              metrics to a bucket in InfluxDB\n            </h5>\n          </div>\n          {!!this.props.bucket && (\n            <StreamingSelector\n              pluginBundles={this.props.pluginBundles}\n              telegrafPlugins={this.props.telegrafPlugins}\n              onTogglePluginBundle={this.handleTogglePluginBundle}\n              buckets={this.props.buckets}\n              selectedBucketName={this.props.bucket}\n              onSelectBucket={this.handleSelectBucket}\n            />\n          )}\n          <h5 className=\"wizard-step--sub-title\">\n            Looking for other things to monitor? Check out our 200+ other &nbsp;\n            <a\n              href=\"https://v2.docs.influxdata.com/v2.0/reference/telegraf-plugins/#input-plugins\"\n              target=\"_blank\"\n            >\n              Telegraf Plugins\n            </a>\n            &nbsp; and how to &nbsp;\n            <a\n              href=\"https://v2.docs.influxdata.com/v2.0/write-data/use-telegraf/manual-config/\"\n              target=\"_blank\"\n            >\n              Configure these Plugins\n            </a>\n          </h5>\n        </FancyScrollbar>\n        <OnboardingButtons\n          autoFocusNext={true}\n          nextButtonStatus={this.nextButtonStatus}\n          className=\"data-loading--button-container\"\n        />\n      </Form>\n    )\n  }\n\n  private get nextButtonStatus(): ComponentStatus {\n    const {telegrafPlugins, buckets} = this.props\n\n    if (!buckets || !buckets.length) {\n      return ComponentStatus.Disabled\n    }\n\n    if (!telegrafPlugins.length) {\n      return ComponentStatus.Disabled\n    }\n\n    return ComponentStatus.Default\n  }\n\n  private handleSelectBucket = (bucket: Bucket) => {\n    const {orgID, id, name} = bucket\n\n    this.props.onSetBucketInfo(orgID, name, id)\n  }\n\n  private handleTogglePluginBundle = (\n    bundle: BundleName,\n    isSelected: boolean\n  ) => {\n    if (isSelected) {\n      this.props.onRemovePluginBundle(bundle)\n\n      return\n    }\n\n    this.props.onAddPluginBundle(bundle)\n  }\n}\n\nconst mstp = ({\n  dataLoading: {\n    dataLoaders: {telegrafPlugins, pluginBundles},\n    steps: {bucket},\n  },\n}: AppState): StateProps => ({\n  telegrafPlugins,\n  bucket,\n  pluginBundles,\n})\n\nconst mdtp: DispatchProps = {\n  onAddPluginBundle: addPluginBundleWithPlugins,\n  onRemovePluginBundle: removePluginBundleWithPlugins,\n  onSetBucketInfo: setBucketInfo,\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps>(\n  mstp,\n  mdtp\n)(SelectCollectorsStep)\n","// Libraries\nimport React, {PureComponent, ChangeEvent} from 'react'\nimport _ from 'lodash'\n\n// Components\nimport {Input, FormElement, Grid} from '@influxdata/clockface'\n\n// Utils\nimport {validateURI} from 'src/shared/utils/validateURI'\n\n// Type\nimport {Columns, ComponentStatus, ComponentSize} from '@influxdata/clockface'\n\nconst VALIDATE_DEBOUNCE_MS = 350\n\ninterface Props {\n  name: string\n  autoFocus?: boolean\n  value: string\n  helpText: string\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void\n}\n\ninterface State {\n  status: ComponentStatus\n}\n\nclass URIFormElement extends PureComponent<Props, State> {\n  private debouncedValidate: (value: string) => void\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      status: ComponentStatus.Default,\n    }\n\n    this.debouncedValidate = _.debounce(\n      this.handleValidateURI,\n      VALIDATE_DEBOUNCE_MS\n    )\n  }\n\n  public render() {\n    const {name, value, autoFocus, helpText} = this.props\n\n    return (\n      <Grid>\n        <Grid.Row>\n          <Grid.Column widthXS={Columns.Eight} offsetXS={Columns.Two}>\n            <FormElement\n              label={name}\n              key={name}\n              errorMessage={this.errorMessage}\n              helpText={helpText}\n            >\n              <Input\n                name={name}\n                autoFocus={autoFocus}\n                status={this.state.status}\n                onChange={this.handleChange}\n                size={ComponentSize.Medium}\n                value={value}\n              />\n            </FormElement>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    )\n  }\n\n  private get errorMessage(): string | null {\n    const {status} = this.state\n\n    if (status === ComponentStatus.Error) {\n      return 'Must be a valid URI.'\n    }\n  }\n\n  private handleChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    const {onChange} = this.props\n    const {value} = e.target\n\n    onChange(e)\n    this.debouncedValidate(value)\n  }\n\n  private handleValidateURI = (value: string): void => {\n    if (validateURI(value)) {\n      this.setState({status: ComponentStatus.Valid})\n    } else {\n      this.setState({status: ComponentStatus.Error})\n    }\n  }\n}\n\nexport default URIFormElement\n","// Libraries\nimport React, {PureComponent} from 'react'\nimport _ from 'lodash'\n\n// Components\nimport {MultipleInput, MultiInputType} from 'src/clockface'\n\n// Actions\nimport {setConfigArrayValue} from 'src/dataLoaders/actions/dataLoaders'\n\n// Types\nimport {TelegrafPluginName, ConfigFieldType} from 'src/types'\n\ninterface Props {\n  fieldName: string\n  fieldType: ConfigFieldType\n  addTagValue: (item: string, fieldName: string) => void\n  removeTagValue: (item: string, fieldName: string) => void\n  autoFocus: boolean\n  value: string[]\n  helpText: string\n  onSetConfigArrayValue: typeof setConfigArrayValue\n  telegrafPluginName: TelegrafPluginName\n}\n\nclass ArrayFormElement extends PureComponent<Props> {\n  public render() {\n    const {fieldName, autoFocus, helpText} = this.props\n\n    return (\n      <div className=\"multiple-input-index\">\n        <MultipleInput\n          title={fieldName}\n          helpText={helpText}\n          inputType={this.inputType}\n          autoFocus={autoFocus}\n          onAddRow={this.handleAddRow}\n          onDeleteRow={this.handleRemoveRow}\n          onEditRow={this.handleEditRow}\n          tags={this.tags}\n        />\n      </div>\n    )\n  }\n\n  private get inputType(): MultiInputType {\n    switch (this.props.fieldType) {\n      case ConfigFieldType.Uri:\n      case ConfigFieldType.UriArray:\n        return MultiInputType.URI\n      case ConfigFieldType.String:\n      case ConfigFieldType.StringArray:\n        return MultiInputType.String\n    }\n  }\n\n  private handleAddRow = (item: string) => {\n    this.props.addTagValue(item, this.props.fieldName)\n  }\n\n  private handleRemoveRow = (item: string) => {\n    const {removeTagValue, fieldName} = this.props\n\n    removeTagValue(item, fieldName)\n  }\n\n  private handleEditRow = (index: number, item: string) => {\n    const {onSetConfigArrayValue, telegrafPluginName, fieldName} = this.props\n\n    onSetConfigArrayValue(telegrafPluginName, fieldName, index, item)\n  }\n\n  private get tags(): Array<{name: string; text: string}> {\n    const {value} = this.props\n    return value.map(v => {\n      return {text: v, name: v}\n    })\n  }\n}\n\nexport default ArrayFormElement\n","// Libraries\nimport React, {PureComponent, ChangeEvent} from 'react'\nimport _ from 'lodash'\n\n// Components\nimport {Form, Input, Grid} from '@influxdata/clockface'\nimport URIFormElement from 'src/shared/components/URIFormElement'\nimport ArrayFormElement from 'src/dataLoaders/components/configureStep/streaming/ArrayFormElement'\n\n// Types\nimport {ConfigFieldType, TelegrafPluginName} from 'src/types/dataLoaders'\nimport {Columns, ComponentSize} from '@influxdata/clockface'\n\n// Actions\nimport {setConfigArrayValue} from 'src/dataLoaders/actions/dataLoaders'\n\ninterface Props {\n  fieldName: string\n  fieldType: ConfigFieldType\n  index: number\n  onChange: (e: ChangeEvent<HTMLElement>) => void\n  addTagValue: (item: string, fieldName: string) => void\n  removeTagValue: (item: string, fieldName: string) => void\n  value: string | string[]\n  isRequired: boolean\n  onSetConfigArrayValue: typeof setConfigArrayValue\n  telegrafPluginName: TelegrafPluginName\n}\n\nclass ConfigFieldSwitcher extends PureComponent<Props> {\n  public render() {\n    const {\n      fieldType,\n      fieldName,\n      onChange,\n      value,\n      onSetConfigArrayValue,\n      telegrafPluginName,\n    } = this.props\n\n    switch (fieldType) {\n      case ConfigFieldType.Uri:\n        return (\n          <URIFormElement\n            name={fieldName}\n            key={name}\n            autoFocus={this.autoFocus}\n            onChange={onChange}\n            value={value as string}\n            helpText={this.optionalText}\n          />\n        )\n      case ConfigFieldType.UriArray:\n      case ConfigFieldType.StringArray:\n        return (\n          <ArrayFormElement\n            fieldName={fieldName}\n            fieldType={fieldType}\n            addTagValue={this.props.addTagValue}\n            removeTagValue={this.props.removeTagValue}\n            autoFocus={this.autoFocus}\n            value={value as string[]}\n            helpText={this.optionalText}\n            onSetConfigArrayValue={onSetConfigArrayValue}\n            telegrafPluginName={telegrafPluginName}\n          />\n        )\n      case ConfigFieldType.String:\n        return (\n          <Grid>\n            <Grid.Row>\n              <Grid.Column widthXS={Columns.Eight} offsetXS={Columns.Two}>\n                <Form.Element\n                  label={fieldName}\n                  key={fieldName}\n                  helpText={this.optionalText}\n                >\n                  <Input\n                    name={fieldName}\n                    autoFocus={this.autoFocus}\n                    onChange={onChange}\n                    size={ComponentSize.Medium}\n                    value={value as string}\n                  />\n                </Form.Element>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        )\n      default:\n        return <div />\n    }\n  }\n\n  private get optionalText(): string {\n    if (!this.props.isRequired) {\n      return 'optional'\n    }\n\n    return ''\n  }\n\n  private get autoFocus(): boolean {\n    const {index} = this.props\n    return index === 0\n  }\n}\n\nexport default ConfigFieldSwitcher\n","// Libraries\nimport React, {PureComponent, ChangeEvent} from 'react'\nimport {connect} from 'react-redux'\nimport _ from 'lodash'\n\n// Components\nimport ConfigFieldSwitcher from 'src/dataLoaders/components/configureStep/streaming/ConfigFieldSwitcher'\n\n// Actions\nimport {\n  updateTelegrafPluginConfig,\n  addConfigValue,\n  removeConfigValue,\n  setConfigArrayValue,\n} from 'src/dataLoaders/actions/dataLoaders'\n\n// Types\nimport {\n  TelegrafPlugin,\n  ConfigFields,\n  ConfigFieldType,\n} from 'src/types/dataLoaders'\n\ninterface OwnProps {\n  configFields: ConfigFields\n  telegrafPlugin: TelegrafPlugin\n}\n\ninterface DispatchProps {\n  onUpdateTelegrafPluginConfig: typeof updateTelegrafPluginConfig\n  onAddConfigValue: typeof addConfigValue\n  onRemoveConfigValue: typeof removeConfigValue\n  onSetConfigArrayValue: typeof setConfigArrayValue\n}\n\ntype Props = OwnProps & DispatchProps\n\nexport class ConfigFieldHandler extends PureComponent<Props> {\n  public render() {\n    return <div>{this.formFields}</div>\n  }\n\n  private get formFields(): JSX.Element[] | JSX.Element {\n    const {configFields, telegrafPlugin, onSetConfigArrayValue} = this.props\n\n    if (!configFields) {\n      return <p data-testid=\"no-config\">No configuration required.</p>\n    }\n\n    return Object.entries(configFields).map(\n      ([fieldName, {type: fieldType, isRequired}], i) => {\n        return (\n          <ConfigFieldSwitcher\n            key={fieldName}\n            fieldName={fieldName}\n            fieldType={fieldType}\n            index={i}\n            onChange={this.handleUpdateConfigField}\n            value={this.getFieldValue(telegrafPlugin, fieldName, fieldType)}\n            isRequired={isRequired}\n            addTagValue={this.handleAddConfigFieldValue}\n            removeTagValue={this.handleRemoveConfigFieldValue}\n            onSetConfigArrayValue={onSetConfigArrayValue}\n            telegrafPluginName={telegrafPlugin.name}\n          />\n        )\n      }\n    )\n  }\n\n  private handleAddConfigFieldValue = (\n    value: string,\n    fieldName: string\n  ): void => {\n    const {onAddConfigValue, telegrafPlugin} = this.props\n\n    onAddConfigValue(telegrafPlugin.name, fieldName, value)\n  }\n\n  private handleRemoveConfigFieldValue = (value: string, fieldName: string) => {\n    const {onRemoveConfigValue, telegrafPlugin} = this.props\n\n    onRemoveConfigValue(telegrafPlugin.name, fieldName, value)\n  }\n\n  private getFieldValue(\n    telegrafPlugin: TelegrafPlugin,\n    fieldName: string,\n    fieldType: ConfigFieldType\n  ): string | string[] {\n    let defaultEmpty: string | string[]\n    if (\n      fieldType === ConfigFieldType.String ||\n      fieldType === ConfigFieldType.Uri\n    ) {\n      defaultEmpty = ''\n    } else {\n      defaultEmpty = []\n    }\n    return _.get(telegrafPlugin, `plugin.config.${fieldName}`, defaultEmpty)\n  }\n\n  private handleUpdateConfigField = (e: ChangeEvent<HTMLInputElement>) => {\n    const {onUpdateTelegrafPluginConfig, telegrafPlugin} = this.props\n    const {name, value} = e.target\n\n    onUpdateTelegrafPluginConfig(telegrafPlugin.name, name, value)\n  }\n}\n\nconst mdtp: DispatchProps = {\n  onUpdateTelegrafPluginConfig: updateTelegrafPluginConfig,\n  onAddConfigValue: addConfigValue,\n  onRemoveConfigValue: removeConfigValue,\n  onSetConfigArrayValue: setConfigArrayValue,\n}\n\nexport default connect<null, DispatchProps, OwnProps>(\n  null,\n  mdtp\n)(ConfigFieldHandler)\n","// Libraries\nimport React, {PureComponent} from 'react'\nimport {connect} from 'react-redux'\nimport _ from 'lodash'\n\n// Components\nimport {Form} from '@influxdata/clockface'\nimport ConfigFieldHandler from 'src/dataLoaders/components/collectorsWizard/configure/ConfigFieldHandler'\nimport FancyScrollbar from 'src/shared/components/fancy_scrollbar/FancyScrollbar'\n\n// Actions\nimport {\n  setActiveTelegrafPlugin,\n  setPluginConfiguration,\n} from 'src/dataLoaders/actions/dataLoaders'\n\n// Types\nimport {TelegrafPlugin, ConfigFields} from 'src/types/dataLoaders'\nimport OnboardingButtons from 'src/onboarding/components/OnboardingButtons'\nimport {AppState} from 'src/types'\n\ninterface OwnProps {\n  telegrafPlugin: TelegrafPlugin\n  configFields: ConfigFields\n}\n\ninterface DispatchProps {\n  onSetActiveTelegrafPlugin: typeof setActiveTelegrafPlugin\n  onSetPluginConfiguration: typeof setPluginConfiguration\n}\n\ninterface StateProps {\n  telegrafPlugins: TelegrafPlugin[]\n}\n\ntype Props = OwnProps & StateProps & DispatchProps\n\nexport class PluginConfigForm extends PureComponent<Props> {\n  public render() {\n    const {configFields, telegrafPlugin} = this.props\n    return (\n      <Form onSubmit={this.handleSubmitForm} className=\"data-loading--form\">\n        <FancyScrollbar\n          autoHide={false}\n          className=\"data-loading--scroll-content\"\n        >\n          <div>\n            <h3 className=\"wizard-step--title\">\n              {_.startCase(telegrafPlugin.name)}\n            </h3>\n            <h5 className=\"wizard-step--sub-title\">\n              For more information about this plugin, see{' '}\n              <a\n                target=\"_blank\"\n                data-testid=\"docs-link\"\n                href={`https://github.com/influxdata/telegraf/tree/master/plugins/inputs/${\n                  telegrafPlugin.name\n                }`}\n              >\n                Documentation\n              </a>\n            </h5>\n          </div>\n          <ConfigFieldHandler\n            configFields={configFields}\n            telegrafPlugin={telegrafPlugin}\n          />\n        </FancyScrollbar>\n        <OnboardingButtons\n          autoFocusNext={this.autoFocus}\n          nextButtonText=\"Done\"\n          className=\"data-loading--button-container\"\n        />\n      </Form>\n    )\n  }\n\n  private get autoFocus(): boolean {\n    const {configFields} = this.props\n    return !configFields\n  }\n\n  private handleSubmitForm = () => {\n    const {\n      telegrafPlugins,\n      onSetPluginConfiguration,\n      onSetActiveTelegrafPlugin,\n    } = this.props\n\n    const activeTelegrafPlugin = telegrafPlugins.find(tp => tp.active)\n    if (!!activeTelegrafPlugin) {\n      if (!activeTelegrafPlugin.hasOwnProperty('plugin')) {\n        return\n      }\n      onSetPluginConfiguration(activeTelegrafPlugin.name)\n    }\n\n    onSetActiveTelegrafPlugin('')\n  }\n}\n\nconst mstp = ({\n  dataLoading: {\n    dataLoaders: {telegrafPlugins},\n  },\n}: AppState): StateProps => ({\n  telegrafPlugins,\n})\n\nconst mdtp: DispatchProps = {\n  onSetActiveTelegrafPlugin: setActiveTelegrafPlugin,\n  onSetPluginConfiguration: setPluginConfiguration,\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps>(\n  mstp,\n  mdtp\n)(PluginConfigForm)\n","// Libraries\nimport React, {PureComponent} from 'react'\n\nclass EmptyDataSourceState extends PureComponent {\n  public render() {\n    return <div>Must select a data source.</div>\n  }\n}\n\nexport default EmptyDataSourceState\n","// Libraries\nimport React, {Component} from 'react'\nimport classnames from 'classnames'\n\n// Types\nimport {IconFont} from 'src/clockface'\nimport {SideBarTabStatus as TabStatus} from 'src/dataLoaders/components/side_bar/SideBar'\n\ninterface Props {\n  label: string\n  id: string\n  active: boolean\n  status: TabStatus\n  onClick: (tabID: string) => void\n}\n\nclass SideBarTab extends Component<Props> {\n  public render() {\n    const {label} = this.props\n\n    return (\n      <div className={this.className} onClick={this.handleClick}>\n        {this.icon}\n        {label}\n      </div>\n    )\n  }\n\n  private handleClick = (): void => {\n    const {id, onClick} = this.props\n\n    onClick(id)\n  }\n\n  private get className(): string {\n    const {status, active} = this.props\n\n    return classnames('side-bar--tab', {\n      active,\n      'side-bar--tab__success': status === TabStatus.Success,\n      'side-bar--tab__error': status === TabStatus.Error,\n      'side-bar--tab__pending': status === TabStatus.Pending,\n    })\n  }\n\n  private get icon(): JSX.Element {\n    const {status} = this.props\n    let icon\n\n    switch (status) {\n      case TabStatus.Pending:\n      case TabStatus.Success:\n        icon = `side-bar--icon icon ${IconFont.Checkmark}`\n        break\n      case TabStatus.Error:\n        icon = `side-bar--icon icon ${IconFont.Remove}`\n        break\n      case TabStatus.Default:\n        icon = `side-bar--icon icon ${IconFont.CircleThick}`\n        break\n      default:\n        icon = `side-bar--icon`\n    }\n\n    return <span className={icon} />\n  }\n}\n\nexport default SideBarTab\n","// Libraries\nimport React, {Component} from 'react'\n\n// Components\nimport {\n  Button,\n  ComponentColor,\n  ComponentSize,\n  IconFont,\n} from '@influxdata/clockface'\n\ninterface Props {\n  text: string\n  titleText: string\n  color: ComponentColor\n  icon?: IconFont\n  onClick?: () => void\n}\n\nclass SideBarButton extends Component<Props> {\n  public render() {\n    const {text, titleText, color, onClick, icon} = this.props\n\n    return (\n      <Button\n        className=\"side-bar--button\"\n        text={text}\n        titleText={titleText}\n        onClick={onClick}\n        size={ComponentSize.Small}\n        color={color}\n        icon={icon}\n      />\n    )\n  }\n}\n\nexport default SideBarButton\n","// Libraries\nimport React, {Component} from 'react'\nimport classnames from 'classnames'\n\n// Components\nimport SideBarTab from 'src/dataLoaders/components/side_bar/SideBarTab'\nimport SideBarButton from 'src/dataLoaders/components/side_bar/SideBarButton'\nimport FancyScrollbar from 'src/shared/components/fancy_scrollbar/FancyScrollbar'\n\nexport enum SideBarTabStatus {\n  Default = 'default',\n  Error = 'error',\n  Success = 'success',\n  Pending = 'pending',\n  Blank = 'blank',\n}\n\ninterface Props {\n  title: string\n  children: JSX.Element[]\n  visible: boolean\n}\n\nclass SideBar extends Component<Props> {\n  public static Tab = SideBarTab\n  public static Button = SideBarButton\n\n  public render() {\n    const {title} = this.props\n\n    return (\n      <div className={this.containerClassName}>\n        <div className=\"side-bar--container\">\n          <h3 className=\"side-bar--title\">{title}</h3>\n          <FancyScrollbar autoHide={false}>\n            <div className=\"side-bar--tabs\">{this.childTabs}</div>\n          </FancyScrollbar>\n        </div>\n      </div>\n    )\n  }\n\n  private get containerClassName(): string {\n    const {visible} = this.props\n\n    return classnames('side-bar', {show: visible})\n  }\n\n  private get childTabs(): JSX.Element[] {\n    const {children} = this.props\n    return React.Children.map(children, (child: JSX.Element) => {\n      if (child.type === SideBarTab) {\n        return child\n      }\n    })\n  }\n}\n\nexport default SideBar\n","import React, {Component} from 'react'\n\n// Components\nimport SideBar from 'src/dataLoaders/components/side_bar/SideBar'\nimport {SideBarTabStatus as TabStatus} from 'src/dataLoaders/components/side_bar/SideBar'\n\nimport {TelegrafPlugin, ConfigurationState} from 'src/types/dataLoaders'\n\ninterface Props {\n  title: string\n  visible: boolean\n  telegrafPlugins: TelegrafPlugin[]\n  onTabClick: (tabID: string) => void\n}\n\nconst configStateToTabStatus = (cs: ConfigurationState): TabStatus => {\n  switch (cs) {\n    case ConfigurationState.Unconfigured:\n      return TabStatus.Default\n    case ConfigurationState.InvalidConfiguration:\n      return TabStatus.Error\n    case ConfigurationState.Configured:\n      return TabStatus.Success\n  }\n}\n\nclass PluginsSideBar extends Component<Props> {\n  public render() {\n    const {title, visible} = this.props\n    return (\n      <SideBar title={title} visible={visible}>\n        {this.tabs}\n      </SideBar>\n    )\n  }\n\n  private get tabs(): JSX.Element[] {\n    const {telegrafPlugins, onTabClick} = this.props\n    return telegrafPlugins.map(t => (\n      <SideBar.Tab\n        label={t.name}\n        key={t.name}\n        id={t.name}\n        active={t.active}\n        status={configStateToTabStatus(t.configured)}\n        onClick={onTabClick}\n      />\n    ))\n  }\n}\n\nexport default PluginsSideBar\n","// Libraries\nimport React, {PureComponent, ChangeEvent} from 'react'\nimport {connect} from 'react-redux'\nimport {includes, get} from 'lodash'\n\n// Components\nimport {Form, Input} from '@influxdata/clockface'\nimport FancyScrollbar from 'src/shared/components/fancy_scrollbar/FancyScrollbar'\nimport OnboardingButtons from 'src/onboarding/components/OnboardingButtons'\nimport PluginsSideBar from 'src/dataLoaders/components/collectorsWizard/configure/PluginsSideBar'\n\n// Actions\nimport {\n  setTelegrafConfigName,\n  setTelegrafConfigDescription,\n  setActiveTelegrafPlugin,\n  setPluginConfiguration,\n  createOrUpdateTelegrafConfigAsync,\n} from 'src/dataLoaders/actions/dataLoaders'\nimport {\n  incrementCurrentStepIndex,\n  decrementCurrentStepIndex,\n} from 'src/dataLoaders/actions/steps'\nimport {notify as notifyAction} from 'src/shared/actions/notifications'\n\n// APIs\nimport {createDashboardFromTemplate as createDashboardFromTemplateAJAX} from 'src/templates/api'\n\n// Constants\nimport {\n  TelegrafDashboardCreated,\n  TelegrafDashboardFailed,\n} from 'src/shared/copy/notifications'\n\n// Types\nimport {AppState, TelegrafPlugin, ConfigurationState} from 'src/types'\nimport {InputType, ComponentSize} from '@influxdata/clockface'\nimport {influxdbTemplateList} from 'src/templates/constants/defaultTemplates'\n\n// Selectors\nimport {getOrg} from 'src/organizations/selectors'\nimport {getDataLoaders} from 'src/dataLoaders/selectors'\n\ninterface DispatchProps {\n  onSetTelegrafConfigName: typeof setTelegrafConfigName\n  onSetTelegrafConfigDescription: typeof setTelegrafConfigDescription\n  onSetActiveTelegrafPlugin: typeof setActiveTelegrafPlugin\n  onSetPluginConfiguration: typeof setPluginConfiguration\n  onIncrementStep: typeof incrementCurrentStepIndex\n  onDecrementStep: typeof decrementCurrentStepIndex\n  notify: typeof notifyAction\n  onSaveTelegrafConfig: typeof createOrUpdateTelegrafConfigAsync\n}\n\ninterface StateProps {\n  telegrafConfigName: string\n  telegrafConfigDescription: string\n  telegrafPlugins: TelegrafPlugin[]\n  telegrafConfigID: string\n  orgID: string\n}\n\ntype Props = DispatchProps & StateProps\n\nexport class TelegrafPluginInstructions extends PureComponent<Props> {\n  public render() {\n    const {\n      telegrafConfigName,\n      telegrafConfigDescription,\n      telegrafPlugins,\n      onDecrementStep,\n    } = this.props\n\n    return (\n      <Form onSubmit={this.handleFormSubmit} className=\"data-loading--form\">\n        <div className=\"data-loading--scroll-content\">\n          <div>\n            <h3 className=\"wizard-step--title\">Configure Plugins</h3>\n            <h5 className=\"wizard-step--sub-title\">\n              Configure each plugin from the menu on the left. Some plugins do\n              not require any configuration.\n            </h5>\n          </div>\n          <div className=\"data-loading--columns\">\n            <PluginsSideBar\n              telegrafPlugins={telegrafPlugins}\n              onTabClick={this.handleClickSideBarTab}\n              title=\"Plugins\"\n              visible={this.sideBarVisible}\n            />\n            <div className=\"data-loading--column-panel\">\n              <FancyScrollbar\n                autoHide={false}\n                className=\"data-loading--scroll-content\"\n              >\n                <Form.Element label=\"Telegraf Configuration Name\">\n                  <Input\n                    type={InputType.Text}\n                    value={telegrafConfigName}\n                    name=\"name\"\n                    onChange={this.handleNameInput}\n                    titleText=\"Telegraf Configuration Name\"\n                    size={ComponentSize.Medium}\n                    autoFocus={true}\n                  />\n                </Form.Element>\n                <Form.Element label=\"Telegraf Configuration Description\">\n                  <Input\n                    type={InputType.Text}\n                    value={telegrafConfigDescription}\n                    name=\"description\"\n                    onChange={this.handleDescriptionInput}\n                    titleText=\"Telegraf Configuration Description\"\n                    size={ComponentSize.Medium}\n                  />\n                </Form.Element>\n              </FancyScrollbar>\n            </div>\n          </div>\n        </div>\n\n        <OnboardingButtons\n          onClickBack={onDecrementStep}\n          nextButtonText=\"Create and Verify\"\n          className=\"data-loading--button-container\"\n        />\n      </Form>\n    )\n  }\n\n  private handleFormSubmit = () => {\n    const {onSaveTelegrafConfig, telegrafConfigID} = this.props\n\n    onSaveTelegrafConfig()\n\n    if (!telegrafConfigID) {\n      this.handleCreateDashboardsForPlugins()\n    }\n\n    this.props.onIncrementStep()\n  }\n\n  private async handleCreateDashboardsForPlugins() {\n    const {notify, telegrafPlugins, orgID} = this.props\n    try {\n      const configuredPlugins = telegrafPlugins.filter(\n        tp => tp.configured === ConfigurationState.Configured\n      )\n\n      const configuredPluginTemplateIdentifiers = configuredPlugins\n        .map(t => t.templateID)\n        .filter(t => t)\n\n      const templatesToInstantiate = influxdbTemplateList.filter(t => {\n        return includes(\n          configuredPluginTemplateIdentifiers,\n          get(t, 'meta.templateID')\n        )\n      })\n\n      const pendingDashboards = templatesToInstantiate.map(t =>\n        createDashboardFromTemplateAJAX(t, orgID)\n      )\n\n      const pendingDashboardNames = templatesToInstantiate.map(t =>\n        t.meta.name.toLowerCase()\n      )\n\n      const dashboards = await Promise.all(pendingDashboards)\n\n      if (dashboards.length) {\n        notify(TelegrafDashboardCreated(pendingDashboardNames))\n      }\n    } catch (err) {\n      notify(TelegrafDashboardFailed())\n    }\n  }\n\n  private get sideBarVisible() {\n    const {telegrafPlugins} = this.props\n\n    return telegrafPlugins.length > 0\n  }\n\n  private handleNameInput = (e: ChangeEvent<HTMLInputElement>) => {\n    this.props.onSetTelegrafConfigName(e.target.value)\n  }\n\n  private handleDescriptionInput = (e: ChangeEvent<HTMLInputElement>) => {\n    this.props.onSetTelegrafConfigDescription(e.target.value)\n  }\n\n  private handleClickSideBarTab = (tabID: string) => {\n    const {\n      onSetActiveTelegrafPlugin,\n      telegrafPlugins,\n      onSetPluginConfiguration,\n    } = this.props\n\n    const activeTelegrafPlugin = telegrafPlugins.find(tp => tp.active)\n    if (!!activeTelegrafPlugin) {\n      onSetPluginConfiguration(activeTelegrafPlugin.name)\n    }\n\n    onSetActiveTelegrafPlugin(tabID)\n  }\n}\n\nconst mstp = (state: AppState): StateProps => {\n  const {\n    telegrafConfigName,\n    telegrafConfigDescription,\n    telegrafPlugins,\n    telegrafConfigID,\n  } = getDataLoaders(state)\n\n  const {id: orgID} = getOrg(state)\n\n  return {\n    telegrafConfigName,\n    telegrafConfigDescription,\n    telegrafPlugins,\n    telegrafConfigID,\n    orgID,\n  }\n}\n\nconst mdtp: DispatchProps = {\n  onSetTelegrafConfigName: setTelegrafConfigName,\n  onSetTelegrafConfigDescription: setTelegrafConfigDescription,\n  onIncrementStep: incrementCurrentStepIndex,\n  onDecrementStep: decrementCurrentStepIndex,\n  onSetActiveTelegrafPlugin: setActiveTelegrafPlugin,\n  onSetPluginConfiguration: setPluginConfiguration,\n  onSaveTelegrafConfig: createOrUpdateTelegrafConfigAsync,\n  notify: notifyAction,\n}\n\nexport default connect<StateProps, DispatchProps, {}>(\n  mstp,\n  mdtp\n)(TelegrafPluginInstructions)\n","// Libraries\nimport React, {PureComponent} from 'react'\nimport {connect} from 'react-redux'\nimport _ from 'lodash'\n\n// Components\nimport PluginConfigForm from 'src/dataLoaders/components/collectorsWizard/configure/PluginConfigForm'\nimport EmptyDataSourceState from 'src/dataLoaders/components/configureStep/EmptyDataSourceState'\n\n// Utils\nimport {getConfigFields} from 'src/dataLoaders/utils/pluginConfigs'\n\n// Types\nimport {TelegrafPlugin, ConfigFields} from 'src/types/dataLoaders'\nimport {AppState} from 'src/types'\nimport TelegrafPluginInstructions from 'src/dataLoaders/components/collectorsWizard/configure/TelegrafPluginInstructions'\n\ninterface StateProps {\n  telegrafPlugins: TelegrafPlugin[]\n}\n\ntype Props = StateProps\n\nexport class PluginConfigSwitcher extends PureComponent<Props> {\n  public render() {\n    const {telegrafPlugins} = this.props\n\n    if (this.activeTelegrafPlugin) {\n      return (\n        <PluginConfigForm\n          telegrafPlugin={this.activeTelegrafPlugin}\n          configFields={this.configFields}\n        />\n      )\n    } else if (!telegrafPlugins || !telegrafPlugins.length) {\n      return <EmptyDataSourceState />\n    }\n\n    return <TelegrafPluginInstructions />\n  }\n\n  private get activeTelegrafPlugin(): TelegrafPlugin {\n    const {telegrafPlugins} = this.props\n    return telegrafPlugins.find(tp => tp.active)\n  }\n\n  private get configFields(): ConfigFields {\n    if (this.activeTelegrafPlugin) {\n      return getConfigFields(this.activeTelegrafPlugin.name)\n    }\n  }\n}\n\nconst mstp = ({\n  dataLoading: {\n    dataLoaders: {telegrafPlugins},\n  },\n}: AppState): StateProps => ({\n  telegrafPlugins,\n})\n\nexport default connect<StateProps>(\n  mstp,\n  null\n)(PluginConfigSwitcher)\n","// Libraries\nimport React, {PureComponent} from 'react'\nimport _ from 'lodash'\n\n// Decorator\nimport {ErrorHandling} from 'src/shared/decorators/errors'\n\nexport enum LoadingState {\n  NotStarted = 'NotStarted',\n  Loading = 'Loading',\n  Done = 'Done',\n  NotFound = 'NotFound',\n  Error = 'Error',\n}\n\nexport interface Props {\n  loading: LoadingState\n  bucket: string\n  countDownSeconds: number\n}\n\n@ErrorHandling\nclass ConnectionInformation extends PureComponent<Props> {\n  public render() {\n    return (\n      <div>\n        <h4 className={`wizard-step--text-state ${this.className}`}>\n          {this.header}\n        </h4>\n        <p>{this.additionalText}</p>\n      </div>\n    )\n  }\n\n  private get className(): string {\n    switch (this.props.loading) {\n      case LoadingState.Loading:\n        return 'loading'\n      case LoadingState.Done:\n        return 'success'\n      case LoadingState.NotFound:\n      case LoadingState.Error:\n        return 'error'\n    }\n  }\n\n  private get header(): string {\n    switch (this.props.loading) {\n      case LoadingState.Loading:\n        return 'Awaiting Connection...'\n      case LoadingState.Done:\n        return 'Connection Found!'\n      case LoadingState.NotFound:\n        return 'Data Not Found'\n      case LoadingState.Error:\n        return 'Error Listening for Data'\n    }\n  }\n\n  private get additionalText(): string {\n    switch (this.props.loading) {\n      case LoadingState.Loading:\n        return `Timeout in ${this.props.countDownSeconds} seconds`\n      case LoadingState.Done:\n        return `${this.props.bucket} is receiving data loud and clear!`\n      case LoadingState.NotFound:\n      case LoadingState.Error:\n        return 'Check config and try again'\n    }\n  }\n}\n\nexport default ConnectionInformation\n","// Libraries\nimport React, {PureComponent} from 'react'\nimport {withRouter, WithRouterProps} from 'react-router'\nimport _ from 'lodash'\n\n// Apis\nimport {runQuery} from 'src/shared/apis/query'\n\n// Components\nimport {ErrorHandling} from 'src/shared/decorators/errors'\nimport {\n  Button,\n  ComponentColor,\n  ComponentSize,\n  ComponentStatus,\n} from '@influxdata/clockface'\nimport ConnectionInformation, {\n  LoadingState,\n} from 'src/dataLoaders/components/verifyStep/ConnectionInformation'\n\ninterface OwnProps {\n  bucket: string\n}\n\ninterface State {\n  loading: LoadingState\n  timePassedInSeconds: number\n  secondsLeft: number\n}\n\nconst MINUTE = 60000\nconst FETCH_WAIT = 5000\nconst SECONDS = 60\nconst TIMER_WAIT = 1000\n\n@ErrorHandling\nclass DataListening extends PureComponent<OwnProps & WithRouterProps, State> {\n  private intervalID: NodeJS.Timer\n  private startTime: number\n  private timer: NodeJS.Timer\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      loading: LoadingState.NotStarted,\n      timePassedInSeconds: 0,\n      secondsLeft: SECONDS,\n    }\n  }\n\n  public componentWillUnmount() {\n    clearInterval(this.intervalID)\n    clearInterval(this.timer)\n    this.setState({\n      timePassedInSeconds: 0,\n      secondsLeft: SECONDS,\n    })\n  }\n\n  public render() {\n    return (\n      <div className=\"wizard-step--body-streaming\" data-testid=\"streaming\">\n        {this.connectionInfo}\n        {this.listenButton}\n      </div>\n    )\n  }\n\n  private get connectionInfo(): JSX.Element {\n    const {loading} = this.state\n\n    if (loading === LoadingState.NotStarted) {\n      return\n    }\n\n    return (\n      <ConnectionInformation\n        loading={this.state.loading}\n        bucket={this.props.bucket}\n        countDownSeconds={this.state.secondsLeft}\n      />\n    )\n  }\n\n  private get listenButton(): JSX.Element {\n    const {loading} = this.state\n\n    if (loading === LoadingState.Loading || loading === LoadingState.Done) {\n      return\n    }\n\n    return (\n      <Button\n        color={ComponentColor.Primary}\n        text=\"Listen for Data\"\n        size={ComponentSize.Medium}\n        onClick={this.handleClick}\n        status={ComponentStatus.Default}\n        titleText=\"Listen for Data\"\n      />\n    )\n  }\n\n  private handleClick = (): void => {\n    this.startTimer()\n    this.setState({loading: LoadingState.Loading})\n    this.startTime = Number(new Date())\n    this.checkForData()\n  }\n\n  private checkForData = async (): Promise<void> => {\n    const {\n      bucket,\n      params: {orgID},\n    } = this.props\n    const {secondsLeft} = this.state\n    const script = `from(bucket: \"${bucket}\")\n      |> range(start: -1m)`\n\n    let responseLength: number\n    let timePassed: number\n\n    try {\n      const result = await runQuery(orgID, script).promise\n\n      if (result.type !== 'SUCCESS') {\n        throw new Error(result.message)\n      }\n\n      responseLength = result.csv.length\n      timePassed = Number(new Date()) - this.startTime\n    } catch (err) {\n      this.setState({loading: LoadingState.Error})\n      return\n    }\n\n    if (responseLength > 1) {\n      this.setState({loading: LoadingState.Done})\n      return\n    }\n\n    if (timePassed >= MINUTE || secondsLeft <= 0) {\n      this.setState({loading: LoadingState.NotFound})\n      return\n    }\n\n    this.intervalID = setTimeout(() => {\n      this.checkForData()\n    }, FETCH_WAIT)\n  }\n\n  private startTimer() {\n    this.setState({timePassedInSeconds: 0, secondsLeft: SECONDS})\n\n    this.timer = setInterval(this.countDown, TIMER_WAIT)\n  }\n\n  private countDown = () => {\n    const {secondsLeft} = this.state\n    const secs = secondsLeft - 1\n    this.setState({\n      timePassedInSeconds: SECONDS - secs,\n      secondsLeft: secs,\n    })\n\n    if (secs === 0) {\n      clearInterval(this.timer)\n    }\n  }\n}\n\nexport default withRouter(DataListening)\n","// Libraries\nimport React, {PureComponent} from 'react'\nimport _ from 'lodash'\n\n// Components\nimport TelegrafInstructions from 'src/dataLoaders/components/verifyStep/TelegrafInstructions'\nimport DataListening from 'src/dataLoaders/components/verifyStep/DataListening'\n\n// Decorator\nimport {ErrorHandling} from 'src/shared/decorators/errors'\n\ninterface Props {\n  bucket: string\n  org: string\n  configID: string\n  token: string\n}\n\n@ErrorHandling\nclass DataStreaming extends PureComponent<Props> {\n  public render() {\n    const {token, configID, bucket} = this.props\n\n    return (\n      <div className=\"streaming\">\n        <TelegrafInstructions token={token} configID={configID} />\n\n        <DataListening bucket={bucket} />\n      </div>\n    )\n  }\n}\n\nexport default DataStreaming\n","// Libraries\nimport React, {PureComponent} from 'react'\nimport {connect} from 'react-redux'\n\n// Components\nimport {Form} from '@influxdata/clockface'\nimport DataStreaming from 'src/dataLoaders/components/verifyStep/DataStreaming'\nimport OnboardingButtons from 'src/onboarding/components/OnboardingButtons'\nimport FancyScrollbar from 'src/shared/components/fancy_scrollbar/FancyScrollbar'\n\n// Types\nimport {CollectorsStepProps} from 'src/dataLoaders/components/collectorsWizard/CollectorsWizard'\nimport {AppState} from 'src/types'\n\n// Decorators\nimport {ErrorHandling} from 'src/shared/decorators/errors'\n\ntype OwnProps = CollectorsStepProps\n\ninterface StateProps {\n  username: string\n  telegrafConfigID: string\n  bucket: string\n  org: string\n  token: string\n}\n\nexport type Props = StateProps & OwnProps\n\n@ErrorHandling\nexport class VerifyCollectorStep extends PureComponent<Props> {\n  public render() {\n    const {\n      telegrafConfigID,\n      bucket,\n      org,\n      onDecrementCurrentStepIndex,\n      onExit,\n      token,\n    } = this.props\n\n    return (\n      <Form onSubmit={onExit} className=\"data-loading--form\">\n        <FancyScrollbar\n          autoHide={false}\n          className=\"data-loading--scroll-content\"\n        >\n          <div>\n            <h3 className=\"wizard-step--title\">Test your Configuration</h3>\n            <h5 className=\"wizard-step--sub-title\">\n              Start Telegraf and ensure data is being written to InfluxDB\n            </h5>\n          </div>\n          <DataStreaming\n            org={org}\n            bucket={bucket}\n            token={token}\n            configID={telegrafConfigID}\n          />\n        </FancyScrollbar>\n        <OnboardingButtons\n          onClickBack={onDecrementCurrentStepIndex}\n          nextButtonText=\"Finish\"\n          className=\"data-loading--button-container\"\n        />\n      </Form>\n    )\n  }\n}\n\nconst mstp = ({\n  dataLoading: {\n    dataLoaders: {telegrafConfigID, token},\n    steps: {bucket, org},\n  },\n  me: {name},\n}: AppState): StateProps => ({\n  username: name,\n  telegrafConfigID,\n  bucket,\n  org,\n  token,\n})\n\nexport default connect<StateProps, {}, OwnProps>(mstp)(VerifyCollectorStep)\n","// Libraries\nimport React, {PureComponent} from 'react'\nimport _ from 'lodash'\n\n// Components\nimport SelectCollectorsStep from 'src/dataLoaders/components/collectorsWizard/select/SelectCollectorsStep'\nimport PluginConfigSwitcher from 'src/dataLoaders/components/collectorsWizard/configure/PluginConfigSwitcher'\nimport VerifyCollectorsStep from 'src/dataLoaders/components/collectorsWizard/verify/VerifyCollectorsStep'\nimport {ErrorHandling} from 'src/shared/decorators/errors'\n\n// Types\nimport {CollectorsStep} from 'src/types/dataLoaders'\nimport {CollectorsStepProps} from 'src/dataLoaders/components/collectorsWizard/CollectorsWizard'\nimport {Bucket} from 'src/types'\n\ninterface Props {\n  stepProps: CollectorsStepProps\n  buckets: Bucket[]\n}\n\n@ErrorHandling\nclass StepSwitcher extends PureComponent<Props> {\n  public render() {\n    const {stepProps, buckets} = this.props\n\n    switch (stepProps.currentStepIndex) {\n      case CollectorsStep.Select:\n        return <SelectCollectorsStep {...stepProps} buckets={buckets} />\n      case CollectorsStep.Configure:\n        return <PluginConfigSwitcher />\n      case CollectorsStep.Verify:\n        return <VerifyCollectorsStep {...stepProps} />\n      default:\n        return <div />\n    }\n  }\n}\n\nexport default StepSwitcher\n"],"sourceRoot":""}