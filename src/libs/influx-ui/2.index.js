(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[2],{

/***/ 1:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/babel-polyfill/lib/index.js
var lib = __webpack_require__(848);

// EXTERNAL MODULE: ./node_modules/abortcontroller-polyfill/dist/polyfill-patch-fetch.js
var polyfill_patch_fetch = __webpack_require__(1050);

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(2);
var react_default = /*#__PURE__*/__webpack_require__.n(react);

// EXTERNAL MODULE: ./node_modules/react-dom/index.js
var react_dom = __webpack_require__(108);

// EXTERNAL MODULE: ./node_modules/react-redux/es/index.js + 19 modules
var es = __webpack_require__(4);

// EXTERNAL MODULE: ./node_modules/react-router/es/index.js + 32 modules
var react_router_es = __webpack_require__(12);

// EXTERNAL MODULE: ./node_modules/history/lib/index.js
var history_lib = __webpack_require__(1069);

// EXTERNAL MODULE: ./src/shared/constants/index.ts
var constants = __webpack_require__(32);

// EXTERNAL MODULE: ./node_modules/redux/es/redux.js
var redux = __webpack_require__(207);

// EXTERNAL MODULE: ./node_modules/react-router-redux/lib/index.js
var react_router_redux_lib = __webpack_require__(209);

// EXTERNAL MODULE: ./node_modules/redux-thunk/es/index.js
var redux_thunk_es = __webpack_require__(1075);

// CONCATENATED MODULE: ./src/shared/middleware/resizeLayout.ts
const resizeLayout = () => (next) => (action) => {
    next(action);
    if (action.type === 'ENABLE_PRESENTATION_MODE' ||
        action.type === 'DISABLE_PRESENTATION_MODE') {
        const evt = document.createEvent('HTMLEvents');
        evt.initEvent('resize', false, true);
        window.dispatchEvent(evt);
    }
};

// EXTERNAL MODULE: ./node_modules/qs/lib/index.js
var qs_lib = __webpack_require__(399);
var qs_lib_default = /*#__PURE__*/__webpack_require__.n(qs_lib);

// EXTERNAL MODULE: ./src/shared/actions/notifications.ts
var actions_notifications = __webpack_require__(33);

// EXTERNAL MODULE: ./src/shared/copy/notifications.ts + 1 modules
var copy_notifications = __webpack_require__(35);

// CONCATENATED MODULE: ./src/types/actions/app.ts
var ActionTypes;
(function (ActionTypes) {
    ActionTypes["EnablePresentationMode"] = "ENABLE_PRESENTATION_MODE";
    ActionTypes["DisablePresentationMode"] = "DISABLE_PRESENTATION_MODE";
    ActionTypes["SetAutoRefresh"] = "SET_AUTOREFRESH";
    ActionTypes["SetTimeZone"] = "SET_APP_TIME_ZONE";
    ActionTypes["TemplateControlBarVisibilityToggled"] = "TemplateControlBarVisibilityToggledAction";
    ActionTypes["Noop"] = "NOOP";
})(ActionTypes || (ActionTypes = {}));

// CONCATENATED MODULE: ./src/shared/actions/app.ts




const enablePresentationMode = () => ({
    type: ActionTypes.EnablePresentationMode,
});
const disablePresentationMode = () => ({
    type: ActionTypes.DisablePresentationMode,
});
const delayEnablePresentationMode = () => (dispatch) => setTimeout(() => {
    dispatch(enablePresentationMode());
    Object(actions_notifications["c" /* notify */])(Object(copy_notifications["Vb" /* presentationMode */])());
}, constants["E" /* PRESENTATION_MODE_ANIMATION_DELAY */]);
const setAutoRefresh = (milliseconds) => ({
    type: ActionTypes.SetAutoRefresh,
    payload: {
        milliseconds,
    },
});
const setTimeZone = (timeZone) => ({
    type: ActionTypes.SetTimeZone,
    payload: { timeZone },
});
const templateControlBarVisibilityToggled = () => ({
    type: ActionTypes.TemplateControlBarVisibilityToggled,
});

// CONCATENATED MODULE: ./src/shared/middleware/queryStringConfig.ts


const queryStringConfig = () => (dispatch) => (action) => {
    dispatch(action);
    const urlQueryParams = qs_lib_default.a.parse(window.location.search, {
        ignoreQueryPrefix: true,
    });
    if (urlQueryParams.present === 'true') {
        dispatch(enablePresentationMode());
    }
};

// CONCATENATED MODULE: ./src/shared/reducers/app.ts



const app_initialState = {
    ephemeral: {
        inPresentationMode: false,
    },
    persisted: {
        autoRefresh: constants["c" /* AUTOREFRESH_DEFAULT_INTERVAL */],
        showTemplateControlBar: false,
        timeZone: 'Local',
    },
};
const { ephemeral: initialAppEphemeralState, persisted: initialAppPersistedState, } = app_initialState;
const appEphemeralReducer = (state = initialAppEphemeralState, action) => {
    switch (action.type) {
        case ActionTypes.EnablePresentationMode: {
            return Object.assign(Object.assign({}, state), { inPresentationMode: true });
        }
        case ActionTypes.DisablePresentationMode: {
            return Object.assign(Object.assign({}, state), { inPresentationMode: false });
        }
        default:
            return state;
    }
};
const appPersistedReducer = (state = initialAppPersistedState, action) => {
    switch (action.type) {
        case ActionTypes.SetAutoRefresh: {
            return Object.assign(Object.assign({}, state), { autoRefresh: action.payload.milliseconds });
        }
        case ActionTypes.TemplateControlBarVisibilityToggled: {
            const { showTemplateControlBar } = state;
            return Object.assign(Object.assign({}, state), { showTemplateControlBar: !showTemplateControlBar });
        }
        case ActionTypes.SetTimeZone: {
            const { timeZone } = action.payload;
            return Object.assign(Object.assign({}, state), { timeZone });
        }
        default:
            return state;
    }
};
const appReducer = Object(redux["c" /* combineReducers */])({
    ephemeral: appEphemeralReducer,
    persisted: appPersistedReducer,
});
/* harmony default export */ var reducers_app = (appReducer);

// EXTERNAL MODULE: ./src/utils/ajax.ts
var ajax = __webpack_require__(400);

// CONCATENATED MODULE: ./src/shared/apis/links.ts

const linksURI = '/api/v2';
const getLinks = async () => {
    try {
        const { data } = await Object(ajax["b" /* getAJAX */])(linksURI);
        return data;
    }
    catch (error) {
        console.error(error);
        throw error;
    }
};

// CONCATENATED MODULE: ./src/shared/actions/links.ts

var links_ActionTypes;
(function (ActionTypes) {
    ActionTypes["LinksGetRequested"] = "LINKS_GET_REQUESTED";
    ActionTypes["LinksGetCompleted"] = "LINKS_GET_COMPLETED";
    ActionTypes["LinksGetFailed"] = "LINKS_GET_FAILED";
})(links_ActionTypes || (links_ActionTypes = {}));
const linksGetRequested = () => ({
    type: links_ActionTypes.LinksGetRequested,
});
const linksGetCompleted = (links) => ({
    type: links_ActionTypes.LinksGetCompleted,
    payload: { links },
});
const linksGetFailed = () => ({
    type: links_ActionTypes.LinksGetFailed,
});
const links_getLinks = () => async (dispatch) => {
    dispatch(linksGetRequested());
    try {
        const links = await getLinks();
        dispatch(linksGetCompleted(links));
    }
    catch (error) {
        dispatch(linksGetFailed());
    }
};

// CONCATENATED MODULE: ./src/shared/reducers/links.ts

const links_initialState = {
    authorizations: '',
    buckets: '',
    dashboards: '',
    external: {
        statusFeed: '',
    },
    query: {
        self: '',
        ast: '',
        suggestions: '',
    },
    orgs: '',
    setup: '',
    signin: '',
    signout: '',
    sources: '',
    system: { debug: '', health: '', metrics: '' },
    tasks: '',
    users: '',
    write: '',
    variables: '',
    views: '',
    defaultDashboard: '',
    me: '',
};
const linksReducer = (state = links_initialState, action) => {
    switch (action.type) {
        case links_ActionTypes.LinksGetCompleted: {
            const { links } = action.payload;
            return Object.assign(Object.assign({}, links), { defaultDashboard: '/v2/dashboards/029d13fda9c5b000' });
        }
    }
    return state;
};
/* harmony default export */ var reducers_links = (linksReducer);

// CONCATENATED MODULE: ./src/shared/actions/currentDashboard.ts
const SET_CURRENT_DASHBOARD = 'SET_CURRENT_DASHBOARD';
const setDashboard = (id) => ({
    type: SET_CURRENT_DASHBOARD,
    id,
});

// CONCATENATED MODULE: ./src/shared/reducers/currentDashboard.ts

const currentDashboard_initialState = {
    id: '',
};
const currentDashboard_reducer = (state = currentDashboard_initialState, action) => {
    switch (action.type) {
        case SET_CURRENT_DASHBOARD:
            state.id = action.id;
            return Object.assign({}, state);
        default:
            return state;
    }
};
/* harmony default export */ var currentDashboard = (currentDashboard_reducer);

// EXTERNAL MODULE: ./node_modules/immer/dist/immer.module.js
var immer_module = __webpack_require__(56);

// EXTERNAL MODULE: ./node_modules/uuid/index.js
var uuid = __webpack_require__(109);
var uuid_default = /*#__PURE__*/__webpack_require__.n(uuid);

// CONCATENATED MODULE: ./src/shared/reducers/notifications.ts


const notifications_initialState = [];
const notificationsReducer = (state = notifications_initialState, action) => Object(immer_module["b" /* produce */])(state, draftState => {
    switch (action.type) {
        case 'PUBLISH_NOTIFICATION': {
            const { notification } = action.payload;
            const publishedNotification = Object.assign(Object.assign({}, notification), { id: uuid_default.a.v4() });
            const matchIndex = state.findIndex(n => n.type && notification.type && n.type === notification.type);
            const isUnique = matchIndex === -1;
            if (isUnique) {
                draftState.unshift(publishedNotification);
            }
            return;
        }
        case 'DISMISS_NOTIFICATION': {
            const { id } = action.payload;
            return draftState.filter(n => n.id !== id);
        }
        case 'DISMISS_ALL_NOTIFICATIONS': {
            return [];
        }
    }
});

// CONCATENATED MODULE: ./src/shared/reducers/index.ts




/* harmony default export */ var reducers = ({
    app: reducers_app,
    links: reducers_links,
    currentDashboard: currentDashboard,
    notifications: notificationsReducer,
});

// EXTERNAL MODULE: ./node_modules/lodash/lodash.js
var lodash = __webpack_require__(6);
var lodash_default = /*#__PURE__*/__webpack_require__.n(lodash);

// EXTERNAL MODULE: ./src/dashboards/utils/time.ts
var utils_time = __webpack_require__(599);

// CONCATENATED MODULE: ./src/normalizers/localStorage/dashboardTime.ts


const isCorrectType = (bound) => Object(lodash["isString"])(bound) || Object(lodash["isNull"])(bound);
const getLocalStateRangesAsArray = (ranges) => {
    const normalizedRanges = ranges.filter(r => {
        if (!Object(lodash["isObject"])(r)) {
            return false;
        }
        if (!r.hasOwnProperty('dashboardID') ||
            !r.hasOwnProperty('lower') ||
            !r.hasOwnProperty('upper')) {
            return false;
        }
        const { dashboardID, lower, upper } = r;
        if (!dashboardID || typeof dashboardID !== 'string') {
            return false;
        }
        if (!lower && !upper) {
            return false;
        }
        if (!isCorrectType(lower) || !isCorrectType(upper)) {
            return false;
        }
        return true;
    });
    const rangesObject = {};
    normalizedRanges.forEach((range) => {
        const { dashboardID, lower, upper } = range;
        const timeRange = Object(utils_time["a" /* validateAndTypeRange */])({ lower, upper });
        if (timeRange) {
            rangesObject[dashboardID] = timeRange;
        }
    });
    return rangesObject;
};
const normalizeRangesState = (ranges) => {
    const normalized = {};
    for (const key in ranges) {
        if (Object(lodash["isObject"])(ranges[key]) &&
            ranges[key].hasOwnProperty('upper') &&
            ranges[key].hasOwnProperty('lower') &&
            isCorrectType(ranges[key].lower) &&
            isCorrectType(ranges[key].upper)) {
            const typedRange = Object(utils_time["a" /* validateAndTypeRange */])(ranges[key]);
            if (typedRange) {
                normalized[key] = typedRange;
            }
        }
    }
    return normalized;
};
const getLocalStateRanges = (ranges) => {
    if (Array.isArray(ranges)) {
        return getLocalStateRangesAsArray(ranges);
    }
    else if (Object(lodash["isObject"])(ranges)) {
        return normalizeRangesState(ranges);
    }
    else {
        return {};
    }
};
const setLocalStateRanges = (ranges) => {
    return normalizeRangesState(ranges);
};

// EXTERNAL MODULE: ./src/types/timeZones.ts
var timeZones = __webpack_require__(398);

// CONCATENATED MODULE: ./src/normalizers/localStorage/appPersisted.ts

const normalizeApp = (app) => {
    return Object.assign(Object.assign({}, app), { persisted: normalizeAppPersisted(app.persisted) });
};
const normalizeAppPersisted = (persisted) => {
    return Object.assign(Object.assign({}, persisted), { timeZone: normalizeTimeZone(persisted.timeZone) });
};
const normalizeTimeZone = timeZone => {
    const validTimeZone = timeZones["a" /* timeZones */].find(tz => tz === timeZone);
    if (!validTimeZone) {
        return 'Local';
    }
    return timeZone;
};

// EXTERNAL MODULE: ./src/types/index.ts
var types = __webpack_require__(5);

// CONCATENATED MODULE: ./src/normalizers/localStorage/resources.ts

const normalizeResources = (state) => {
    return {
        variables: state.resources.variables,
        orgs: normalizeOrgs(state.resources.orgs),
    };
};
const normalizeOrgs = (orgs) => {
    return Object.assign(Object.assign({}, orgs), { org: orgs.org, status: types["RemoteDataState"].NotStarted });
};

// CONCATENATED MODULE: ./src/normalizers/localStorage/localStorage.ts




const normalizeGetLocalStorage = (state) => {
    let newState = state;
    if (state.ranges) {
        newState = Object.assign(Object.assign({}, newState), { ranges: getLocalStateRanges(state.ranges) });
    }
    const appPersisted = Object(lodash["get"])(newState, 'app.persisted', false);
    if (appPersisted) {
        newState = Object.assign(Object.assign({}, newState), { app: normalizeApp(newState.app) });
    }
    return newState;
};
const normalizeSetLocalStorage = (state) => {
    const { app, ranges, autoRefresh, userSettings } = state;
    return {
        VERSION: constants["G" /* VERSION */],
        autoRefresh,
        userSettings,
        app: normalizeApp(app),
        ranges: setLocalStateRanges(ranges),
        resources: normalizeResources(state),
    };
};

// CONCATENATED MODULE: ./src/normalizers/localStorage/index.ts





// CONCATENATED MODULE: ./src/localStorage.ts



const loadLocalStorage = () => {
    try {
        const serializedState = localStorage.getItem('state');
        const state = JSON.parse(serializedState) || {};
        if (state.VERSION && state.VERSION !== constants["G" /* VERSION */]) {
            const version = constants["G" /* VERSION */] ? ` (${constants["G" /* VERSION */]})` : '';
            console.log(Object(copy_notifications["Mb" /* newVersion */])(version).message);
        }
        delete state.VERSION;
        return normalizeGetLocalStorage(state);
    }
    catch (error) {
        console.error(Object(copy_notifications["Hb" /* loadLocalSettingsFailed */])(error).message);
    }
};
const saveToLocalStorage = (state) => {
    try {
        window.localStorage.setItem('state', JSON.stringify(normalizeSetLocalStorage(state)));
    }
    catch (err) {
        console.error('Unable to save state to local storage: ', JSON.parse(err));
    }
};

// CONCATENATED MODULE: ./src/store/persistStateEnhancer.ts


function persistState() {
    return next => (reducer, initialState, enhancer) => {
        const store = next(reducer, initialState, enhancer);
        const throttleMs = 1000;
        store.subscribe(lodash_default.a.throttle(() => {
            saveToLocalStorage(store.getState());
        }, throttleMs));
        return store;
    };
}

// EXTERNAL MODULE: ./src/utils/api.ts
var api = __webpack_require__(87);

// EXTERNAL MODULE: ./node_modules/honeybadger-js/dist/honeybadger.js
var honeybadger = __webpack_require__(401);
var honeybadger_default = /*#__PURE__*/__webpack_require__.n(honeybadger);

// CONCATENATED MODULE: ./src/shared/actions/me.ts


var me_ActionTypes;
(function (ActionTypes) {
    ActionTypes["SetMe"] = "SET_ME";
})(me_ActionTypes || (me_ActionTypes = {}));
const setMe = me => ({
    type: me_ActionTypes.SetMe,
    payload: {
        me,
    },
});
const getMe = () => async (dispatch) => {
    try {
        const user = await api["a" /* client */].users.me();
        honeybadger_default.a.setContext({
            user_id: user.id,
        });
        dispatch(setMe(user));
    }
    catch (error) {
        console.error(error);
    }
};

// CONCATENATED MODULE: ./src/shared/reducers/me.ts

const me_defaultState = {
    id: '',
    name: '',
    links: {
        self: '',
        log: '',
    },
};
/* harmony default export */ var reducers_me = ((state = me_defaultState, action) => {
    switch (action.type) {
        case me_ActionTypes.SetMe:
            return action.payload.me;
        default:
            return state;
    }
});

// EXTERNAL MODULE: ./src/tasks/actions/creators.ts
var creators = __webpack_require__(211);

// CONCATENATED MODULE: ./src/tasks/reducers/helpers.ts

const helpers_initialState = () => ({
    allIDs: [],
    byID: {},
    status: types["RemoteDataState"].NotStarted,
    newScript: '',
    currentTask: null,
    currentScript: '',
    searchTerm: '',
    showInactive: true,
    taskOptions: defaultOptions,
    runStatus: types["RemoteDataState"].NotStarted,
    runs: [],
    logs: [],
});
const defaultOptions = {
    name: '',
    interval: '',
    offset: '',
    cron: '',
    taskScheduleType: types["TaskSchedule"].unselected,
    orgID: '',
    toBucketName: '',
    toOrgName: '',
};

// CONCATENATED MODULE: ./src/resources/reducers/helpers.ts

const setResourceAtID = (draftState, action, resource) => {
    const { schema, status, id } = action;
    const prevResource = Object(lodash["get"])(draftState, ['byID', id], {});
    const currentResource = Object(lodash["get"])(schema, ['entities', resource, id], {});
    if (!draftState.allIDs.includes(id)) {
        draftState.allIDs.push(id);
    }
    draftState.byID[id] = Object.assign(Object.assign(Object.assign({}, prevResource), currentResource), { status });
};
const setResource = (draftState, action, resource) => {
    const { status, schema } = action;
    draftState.status = status;
    if (Object(lodash["get"])(schema, ['entities', resource])) {
        draftState.byID = schema.entities[resource];
        draftState.allIDs = schema.result;
    }
    return;
};
const addResource = (draftState, action, resource) => {
    const { result, entities } = action.schema;
    draftState.byID[result] = entities[resource][result];
    draftState.allIDs.push(result);
};
const editResource = (draftState, action, resource) => {
    const { entities, result } = action.schema;
    draftState.byID[result] = entities[resource][result];
};
const removeResource = (draftState, action) => {
    const { id } = action;
    delete draftState.byID[id];
    draftState.allIDs = draftState.allIDs.filter(uuid => uuid !== id);
    return;
};
const setRelation = (draftState, childType, childID, parentID) => {
    const resource = draftState.byID[parentID];
    if (!resource) {
        return;
    }
    const child = draftState.byID[parentID][childType];
    if (!child) {
        return;
    }
    draftState.byID[parentID][childType].push(childID);
};

// CONCATENATED MODULE: ./src/tasks/reducers/index.ts





/* harmony default export */ var tasks_reducers = ((state = helpers_initialState(), action) => Object(immer_module["b" /* produce */])(state, draftState => {
    switch (action.type) {
        case creators["n" /* SET_TASKS */]: {
            setResource(draftState, action, types["ResourceType"].Tasks);
            return;
        }
        case creators["d" /* EDIT_TASK */]: {
            editResource(draftState, action, types["ResourceType"].Tasks);
            return;
        }
        case creators["e" /* REMOVE_TASK */]: {
            removeResource(draftState, action);
            return;
        }
        case creators["a" /* ADD_TASK */]: {
            addResource(draftState, action, types["ResourceType"].Tasks);
            return;
        }
        case creators["c" /* CLEAR_TASK */]: {
            draftState.taskOptions = defaultOptions;
            draftState.currentScript = '';
            draftState.newScript = '';
            return;
        }
        case creators["b" /* CLEAR_CURRENT_TASK */]: {
            draftState.currentScript = '';
            draftState.currentTask = null;
            return;
        }
        case creators["f" /* SET_ALL_TASK_OPTIONS */]: {
            const { schema } = action;
            const { entities, result } = schema;
            const { name, every, cron, orgID, offset } = entities.tasks[result];
            let taskScheduleType = types["TaskSchedule"].interval;
            if (cron) {
                taskScheduleType = types["TaskSchedule"].cron;
            }
            draftState.taskOptions = Object.assign(Object.assign({}, state.taskOptions), { name,
                cron, interval: every, orgID,
                taskScheduleType,
                offset });
            return;
        }
        case creators["o" /* SET_TASK_OPTION */]: {
            const { key, value } = action;
            draftState.taskOptions[`${key}`] = value;
            return;
        }
        case creators["j" /* SET_NEW_SCRIPT */]: {
            draftState.newScript = action.script;
            return;
        }
        case creators["g" /* SET_CURRENT_SCRIPT */]: {
            draftState.currentScript = action.script;
            return;
        }
        case creators["h" /* SET_CURRENT_TASK */]: {
            const { schema } = action;
            const { entities, result } = schema;
            const task = entities.tasks[result];
            const currentScript = task.flux || '';
            draftState.currentScript = currentScript;
            draftState.currentTask = task;
            return;
        }
        case creators["l" /* SET_SEARCH_TERM */]: {
            const { searchTerm } = action;
            draftState.searchTerm = searchTerm;
            return;
        }
        case creators["m" /* SET_SHOW_INACTIVE */]: {
            draftState.showInactive = !state.showInactive;
            return;
        }
        case creators["k" /* SET_RUNS */]: {
            const { runs, runStatus } = action;
            draftState.runs = runs;
            draftState.runStatus = runStatus;
            return;
        }
        case creators["i" /* SET_LOGS */]: {
            draftState.logs = action.logs;
            return;
        }
    }
}));

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(10);

// EXTERNAL MODULE: ./src/dashboards/actions/ranges.ts
var actions_ranges = __webpack_require__(240);

// CONCATENATED MODULE: ./src/dashboards/reducers/ranges.ts


const ranges_initialState = {};
/* harmony default export */ var reducers_ranges = ((state = ranges_initialState, action) => {
    switch (action.type) {
        case actions_ranges["a" /* ActionTypes */].DeleteTimeRange: {
            const { dashboardID } = action.payload;
            const _a = dashboardID, _ = state[_a], filteredRanges = Object(tslib_es6["c" /* __rest */])(state, [typeof _a === "symbol" ? _a : _a + ""]);
            return filteredRanges;
        }
        case actions_ranges["a" /* ActionTypes */].RetainRangesDashboardTimeV1: {
            const { dashboardIDs } = action.payload;
            const ranges = {};
            for (const key in state) {
                if (dashboardIDs.includes(key)) {
                    ranges[key] = state[key];
                }
            }
            return ranges;
        }
        case actions_ranges["a" /* ActionTypes */].SetDashboardTimeRange: {
            const { dashboardID, timeRange } = action.payload;
            return Object.assign(Object.assign({}, state), { [dashboardID]: timeRange });
        }
    }
    return state;
});

// EXTERNAL MODULE: ./src/dashboards/actions/creators.ts
var actions_creators = __webpack_require__(299);

// EXTERNAL MODULE: ./src/cells/actions/creators.ts
var cells_actions_creators = __webpack_require__(402);

// EXTERNAL MODULE: ./src/labels/actions/creators.ts
var labels_actions_creators = __webpack_require__(135);

// CONCATENATED MODULE: ./src/dashboards/reducers/dashboards.ts






const dashboards_initialState = () => ({
    byID: {},
    allIDs: [],
    status: types["RemoteDataState"].NotStarted,
});
const dashboardsReducer = (state = dashboards_initialState(), action) => {
    return Object(immer_module["b" /* produce */])(state, draftState => {
        switch (action.type) {
            case actions_creators["SET_DASHBOARDS"]: {
                setResource(draftState, action, types["ResourceType"].Dashboards);
                return;
            }
            case actions_creators["REMOVE_DASHBOARD"]: {
                removeResource(draftState, action);
                return;
            }
            case actions_creators["SET_DASHBOARD"]: {
                setResourceAtID(draftState, action, types["ResourceType"].Dashboards);
                return;
            }
            case actions_creators["EDIT_DASHBOARD"]: {
                editResource(draftState, action, types["ResourceType"].Dashboards);
                return;
            }
            case cells_actions_creators["a" /* REMOVE_CELL */]: {
                const { dashboardID, id } = action;
                const { cells } = draftState.byID[dashboardID];
                draftState.byID[dashboardID].cells = cells.filter(cID => cID !== id);
                return;
            }
            case cells_actions_creators["b" /* SET_CELL */]: {
                const { schema } = action;
                const cellID = schema.result;
                const cell = schema.entities.cells[cellID];
                const { cells } = draftState.byID[cell.dashboardID];
                if (cells.includes(cellID)) {
                    return;
                }
                draftState.byID[cell.dashboardID].cells.push(cellID);
                return;
            }
            case cells_actions_creators["c" /* SET_CELLS */]: {
                const { dashboardID, schema } = action;
                const cellIDs = schema && schema.result;
                if (!cellIDs) {
                    return;
                }
                draftState.byID[dashboardID].cells = cellIDs;
                return;
            }
            case labels_actions_creators["d" /* SET_LABEL_ON_RESOURCE */]: {
                const { resourceID, schema } = action;
                const labelID = schema.result;
                setRelation(draftState, types["ResourceType"].Labels, labelID, resourceID);
                return;
            }
            case actions_creators["REMOVE_DASHBOARD_LABEL"]: {
                const { dashboardID, labelID } = action;
                const { labels } = draftState.byID[dashboardID];
                draftState.byID[dashboardID].labels = labels.filter(label => label !== labelID);
                return;
            }
        }
    });
};

// CONCATENATED MODULE: ./src/cells/reducers/index.ts





const reducers_initialState = () => ({
    byID: {},
    status: types["RemoteDataState"].NotStarted,
});
const cellsReducer = (state = reducers_initialState(), action) => Object(immer_module["b" /* produce */])(state, draftState => {
    switch (action.type) {
        case actions_creators["SET_DASHBOARD"]: {
            const { schema, status } = action;
            draftState.status = status;
            if (Object(lodash["get"])(schema, ['entities', 'cells'])) {
                draftState.byID = schema.entities.cells;
            }
            return;
        }
        case cells_actions_creators["c" /* SET_CELLS */]: {
            const { status, schema } = action;
            draftState.status = status;
            if (Object(lodash["get"])(schema, ['entities', 'cells'])) {
                draftState.byID = schema.entities['cells'];
            }
            return;
        }
        case cells_actions_creators["b" /* SET_CELL */]: {
            const { id, schema, status } = action;
            const cell = Object(lodash["get"])(schema, ['entities', 'cells', id]);
            const cellExists = !!draftState.byID[id];
            if (cell || !cellExists) {
                draftState.byID[id] = Object.assign(Object.assign({}, cell), { status });
            }
            else {
                draftState.byID[id].status = status;
            }
            return;
        }
        case cells_actions_creators["a" /* REMOVE_CELL */]: {
            delete draftState.byID[action.id];
            return;
        }
    }
});

// EXTERNAL MODULE: ./src/views/actions/creators.ts
var views_actions_creators = __webpack_require__(241);

// CONCATENATED MODULE: ./src/views/reducers/index.ts





const views_reducers_initialState = () => ({
    status: types["RemoteDataState"].NotStarted,
    byID: {},
    allIDs: [],
});
const viewsReducer = (state = views_reducers_initialState(), action) => Object(immer_module["b" /* produce */])(state, draftState => {
    switch (action.type) {
        case actions_creators["SET_DASHBOARD"]: {
            setResource(draftState, action, types["ResourceType"].Views);
        }
        case views_actions_creators["c" /* SET_VIEWS */]: {
            setResource(draftState, action, types["ResourceType"].Views);
            return;
        }
        case views_actions_creators["b" /* SET_VIEW */]: {
            setResourceAtID(draftState, action, types["ResourceType"].Views);
            return;
        }
        case views_actions_creators["a" /* RESET_VIEWS */]: {
            return views_reducers_initialState();
        }
    }
});
/* harmony default export */ var views_reducers = (viewsReducer);

// EXTERNAL MODULE: ./src/views/helpers/index.ts
var helpers = __webpack_require__(150);

// EXTERNAL MODULE: ./src/timeMachine/utils/queryBuilder.ts
var utils_queryBuilder = __webpack_require__(300);

// EXTERNAL MODULE: ./src/shared/constants/thresholds.ts
var constants_thresholds = __webpack_require__(213);

// EXTERNAL MODULE: ./src/shared/constants/timeRanges.ts
var timeRanges = __webpack_require__(134);

// CONCATENATED MODULE: ./src/timeMachine/reducers/index.ts









const initialStateHelper = () => ({
    timeRange: timeRanges["e" /* pastHourTimeRange */],
    autoRefresh: constants["b" /* AUTOREFRESH_DEFAULT */],
    view: Object(helpers["a" /* createView */])(),
    draftQueries: [Object.assign(Object.assign({}, Object(helpers["d" /* defaultViewQuery */])()), { hidden: false })],
    isViewingRawData: false,
    isViewingVisOptions: false,
    activeTab: 'queries',
    activeQueryIndex: 0,
    queryResults: initialQueryResultsState(),
    queryBuilder: {
        buckets: [],
        bucketsStatus: types["RemoteDataState"].NotStarted,
        aggregateWindow: { period: 'auto' },
        functions: [],
        tags: [
            {
                aggregateFunctionType: 'filter',
                keys: [],
                keysSearchTerm: '',
                keysStatus: types["RemoteDataState"].NotStarted,
                values: [],
                valuesSearchTerm: '',
                valuesStatus: types["RemoteDataState"].NotStarted,
            },
        ],
    },
});
const timeMachine_reducers_initialState = () => ({
    activeTimeMachineID: 'de',
    timeMachines: {
        veo: initialStateHelper(),
        de: initialStateHelper(),
        alerting: initialStateHelper(),
    },
});
const getTableProperties = (view, files) => {
    if (!files || !files[0]) {
        return Object.assign(Object.assign({}, view.properties), { fieldOptions: [] });
    }
    const csv = files[0];
    let pointer = 0, ni;
    for (ni = 0; ni < 3; ni++) {
        pointer = csv.indexOf('\r\n', pointer) + 2;
    }
    const existing = (view.properties.fieldOptions || []).reduce((prev, curr) => {
        prev[curr.internalName] = curr;
        return prev;
    }, {});
    csv
        .slice(pointer, csv.indexOf('\r\n', pointer))
        .split(',')
        .filter(o => !existing.hasOwnProperty(o))
        .filter(o => !['result', '', 'table', 'time'].includes(o))
        .forEach(o => {
        existing[o] = {
            internalName: o,
            displayName: o,
            visible: true,
        };
    });
    const fieldOptions = Object.keys(existing).map(e => existing[e]);
    const properties = Object.assign(Object.assign({}, view.properties), { fieldOptions });
    return properties;
};
const timeMachinesReducer = (state = timeMachine_reducers_initialState(), action) => {
    if (action.type === 'SET_ACTIVE_TIME_MACHINE') {
        const { activeTimeMachineID, initialState } = action.payload;
        const activeTimeMachine = state.timeMachines[activeTimeMachineID];
        const view = initialState.view || activeTimeMachine.view;
        const draftQueries = Object(lodash["map"])(Object(lodash["cloneDeep"])(view.properties.queries), q => (Object.assign(Object.assign({}, q), { hidden: false })));
        const queryBuilder = initialQueryBuilderState(draftQueries[0].builderConfig);
        const queryResults = initialQueryResultsState();
        const timeRange = activeTimeMachineID === 'alerting'
            ? timeRanges["b" /* DEFAULT_TIME_RANGE */]
            : activeTimeMachine.timeRange;
        return Object.assign(Object.assign({}, state), { activeTimeMachineID, timeMachines: Object.assign(Object.assign({}, state.timeMachines), { [activeTimeMachineID]: Object.assign(Object.assign(Object.assign(Object.assign({}, activeTimeMachine), { activeTab: 'queries', timeRange }), initialState), { isViewingRawData: false, activeQueryIndex: 0, draftQueries,
                    queryBuilder,
                    queryResults }) }) });
    }
    const { activeTimeMachineID, timeMachines } = state;
    const activeTimeMachine = timeMachines[activeTimeMachineID];
    if (!activeTimeMachine) {
        return state;
    }
    const newActiveTimeMachine = timeMachineReducer(activeTimeMachine, action);
    const s = Object.assign(Object.assign({}, state), { timeMachines: Object.assign(Object.assign({}, timeMachines), { [activeTimeMachineID]: newActiveTimeMachine }) });
    return s;
};
const timeMachineReducer = (state, action) => {
    switch (action.type) {
        case 'SET_VIEW_NAME': {
            const { name } = action.payload;
            const view = Object.assign(Object.assign({}, state.view), { name });
            return Object.assign(Object.assign({}, state), { view });
        }
        case 'SET_TIME_RANGE': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                draftState.timeRange = action.payload.timeRange;
                buildAllQueries(draftState);
            });
        }
        case 'SET_AUTO_REFRESH': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                draftState.autoRefresh = action.payload.autoRefresh;
                buildAllQueries(draftState);
            });
        }
        case 'SET_VIEW_TYPE': {
            const { type } = action.payload;
            const view = convertView(state.view, state.queryResults.files, type);
            return Object.assign(Object.assign({}, state), { view });
        }
        case 'SET_ACTIVE_QUERY_TEXT': {
            const { text } = action.payload;
            const draftQueries = [...state.draftQueries];
            draftQueries[state.activeQueryIndex] = Object.assign(Object.assign({}, draftQueries[state.activeQueryIndex]), { text });
            return Object.assign(Object.assign({}, state), { draftQueries });
        }
        case 'SET_QUERY_RESULTS': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                const { status, files, fetchDuration, errorMessage, statuses, } = action.payload;
                draftState.queryResults.status = status;
                draftState.queryResults.errorMessage = errorMessage;
                if (files) {
                    if (state.view &&
                        state.view.properties &&
                        state.view.properties.type === 'table') {
                        const properties = getTableProperties(state.view, files);
                        draftState.view = Object.assign(Object.assign({}, state.view), { properties });
                    }
                    draftState.queryResults.files = files;
                    draftState.queryResults.isInitialFetch = false;
                }
                if (statuses) {
                    draftState.queryResults.statuses = statuses;
                }
                if (Object(lodash["isNumber"])(fetchDuration)) {
                    draftState.queryResults.fetchDuration = fetchDuration;
                }
            });
        }
        case 'SET_IS_VIEWING_RAW_DATA': {
            const { isViewingRawData } = action.payload;
            return Object.assign(Object.assign({}, state), { isViewingRawData });
        }
        case 'SET_ACTIVE_TAB': {
            const { activeTab } = action.payload;
            return Object.assign(Object.assign({}, state), { activeTab });
        }
        case 'TOGGLE_VIS_OPTIONS': {
            return Object.assign(Object.assign({}, state), { isViewingVisOptions: !state.isViewingVisOptions });
        }
        case 'SET_AXES': {
            const { axes } = action.payload;
            return setViewProperties(state, { axes });
        }
        case 'SET_GEOM': {
            const { geom } = action.payload;
            return setViewProperties(state, { geom });
        }
        case 'SET_Y_AXIS_BOUNDS': {
            const { bounds } = action.payload;
            return setYAxis(state, { bounds });
        }
        case 'SET_AXIS_PREFIX': {
            const { prefix, axis } = action.payload;
            const viewType = state.view.properties.type;
            if (viewType === 'heatmap' || viewType == 'scatter') {
                if (axis === 'x') {
                    return setViewProperties(state, { xPrefix: prefix });
                }
                return setViewProperties(state, { yPrefix: prefix });
            }
            return setYAxis(state, { prefix });
        }
        case 'SET_AXIS_SUFFIX': {
            const { suffix, axis } = action.payload;
            const viewType = state.view.properties.type;
            if (viewType === 'heatmap' || viewType === 'scatter') {
                if (axis === 'x') {
                    return setViewProperties(state, { xSuffix: suffix });
                }
                return setViewProperties(state, { ySuffix: suffix });
            }
            return setYAxis(state, { suffix });
        }
        case 'SET_Y_AXIS_BASE': {
            const { base } = action.payload;
            return setYAxis(state, { base });
        }
        case 'SET_Y_AXIS_SCALE': {
            const { scale } = action.payload;
            return setYAxis(state, { scale });
        }
        case 'SET_X_COLUMN': {
            const { xColumn } = action.payload;
            return setViewProperties(state, { xColumn });
        }
        case 'SET_Y_COLUMN': {
            const { yColumn } = action.payload;
            return setViewProperties(state, { yColumn });
        }
        case 'SET_X_AXIS_LABEL': {
            const { xAxisLabel } = action.payload;
            switch (state.view.properties.type) {
                case 'histogram':
                case 'heatmap':
                case 'scatter':
                    return setViewProperties(state, { xAxisLabel });
                default:
                    return setYAxis(state, { label: xAxisLabel });
            }
        }
        case 'SET_Y_AXIS_LABEL': {
            const { yAxisLabel } = action.payload;
            switch (state.view.properties.type) {
                case 'histogram':
                case 'heatmap':
                case 'scatter':
                    return setViewProperties(state, { yAxisLabel });
                default:
                    return setYAxis(state, { label: yAxisLabel });
            }
        }
        case 'SET_FILL_COLUMNS': {
            const { fillColumns } = action.payload;
            return setViewProperties(state, { fillColumns });
        }
        case 'SET_SYMBOL_COLUMNS': {
            const { symbolColumns } = action.payload;
            return setViewProperties(state, { symbolColumns });
        }
        case 'SET_HISTOGRAM_POSITION': {
            const { position } = action.payload;
            return setViewProperties(state, { position });
        }
        case 'SET_LINE_POSITION': {
            const { position } = action.payload;
            return setViewProperties(state, { position });
        }
        case 'SET_BIN_COUNT': {
            const { binCount } = action.payload;
            return setViewProperties(state, { binCount });
        }
        case 'SET_BIN_SIZE': {
            const { binSize } = action.payload;
            return setViewProperties(state, { binSize });
        }
        case 'SET_COLOR_HEXES': {
            const { colors } = action.payload;
            return setViewProperties(state, { colors });
        }
        case 'SET_VIEW_X_DOMAIN': {
            const { xDomain } = action.payload;
            return setViewProperties(state, { xDomain });
        }
        case 'SET_VIEW_Y_DOMAIN': {
            const { yDomain } = action.payload;
            return setViewProperties(state, { yDomain });
        }
        case 'SET_PREFIX': {
            const { prefix } = action.payload;
            switch (state.view.properties.type) {
                case 'gauge':
                case 'single-stat':
                case 'line-plus-single-stat':
                    return setViewProperties(state, { prefix });
                case 'check':
                case 'xy':
                    return setYAxis(state, { prefix });
                default:
                    return state;
            }
        }
        case 'SET_TICK_PREFIX': {
            const { tickPrefix } = action.payload;
            switch (state.view.properties.type) {
                case 'gauge':
                case 'single-stat':
                case 'line-plus-single-stat':
                    return setViewProperties(state, { tickPrefix });
                case 'check':
                case 'xy':
                    return setYAxis(state, { tickPrefix });
                default:
                    return state;
            }
        }
        case 'SET_SUFFIX': {
            const { suffix } = action.payload;
            switch (state.view.properties.type) {
                case 'gauge':
                case 'single-stat':
                case 'line-plus-single-stat':
                    return setViewProperties(state, { suffix });
                case 'check':
                case 'xy':
                    return setYAxis(state, { suffix });
                default:
                    return state;
            }
        }
        case 'SET_TICK_SUFFIX': {
            const { tickSuffix } = action.payload;
            switch (state.view.properties.type) {
                case 'gauge':
                case 'single-stat':
                case 'line-plus-single-stat':
                    return setViewProperties(state, { tickSuffix });
                case 'check':
                case 'xy':
                    return setYAxis(state, { tickSuffix });
                default:
                    return state;
            }
        }
        case 'SET_COLORS': {
            const { colors } = action.payload;
            switch (state.view.properties.type) {
                case 'gauge':
                case 'table':
                case 'single-stat':
                case 'scatter':
                case 'check':
                case 'xy':
                case 'histogram':
                    return setViewProperties(state, { colors });
                case 'line-plus-single-stat':
                    return setViewProperties(state, {
                        colors: updateCorrectColors(state, colors),
                    });
                default:
                    return state;
            }
        }
        case 'SET_DECIMAL_PLACES': {
            const { decimalPlaces } = action.payload;
            return setViewProperties(state, { decimalPlaces });
        }
        case 'SET_SHADE_BELOW': {
            const { shadeBelow } = action.payload;
            return setViewProperties(state, { shadeBelow });
        }
        case 'SET_BACKGROUND_THRESHOLD_COLORING': {
            const viewColors = state.view.properties.colors;
            const colors = viewColors.map(color => {
                if (color.type !== 'scale') {
                    return Object.assign(Object.assign({}, color), { type: constants_thresholds["l" /* THRESHOLD_TYPE_BG */] });
                }
                return color;
            });
            return setViewProperties(state, { colors });
        }
        case 'SET_TEXT_THRESHOLD_COLORING': {
            const viewColors = state.view.properties.colors;
            const colors = viewColors.map(color => {
                if (color.type !== 'scale') {
                    return Object.assign(Object.assign({}, color), { type: constants_thresholds["m" /* THRESHOLD_TYPE_TEXT */] });
                }
                return color;
            });
            return setViewProperties(state, { colors });
        }
        case 'SET_STATIC_LEGEND': {
            const { staticLegend } = action.payload;
            return setViewProperties(state, { staticLegend });
        }
        case 'EDIT_ACTIVE_QUERY_WITH_BUILDER': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                const query = draftState.draftQueries[draftState.activeQueryIndex];
                query.editMode = 'builder';
                query.hidden = false;
                buildAllQueries(draftState);
            });
        }
        case 'EDIT_ACTIVE_QUERY_AS_FLUX': {
            const { activeQueryIndex } = state;
            const draftQueries = [...state.draftQueries];
            draftQueries[activeQueryIndex] = Object.assign(Object.assign({}, draftQueries[activeQueryIndex]), { editMode: 'advanced' });
            return Object.assign(Object.assign({}, state), { draftQueries });
        }
        case 'SET_ACTIVE_QUERY_INDEX': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                const { activeQueryIndex } = action.payload;
                if (activeQueryIndex < draftState.draftQueries.length) {
                    draftState.activeQueryIndex = activeQueryIndex;
                    resetBuilderState(draftState);
                }
            });
        }
        case 'ADD_QUERY': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                draftState.draftQueries = [
                    ...state.draftQueries,
                    Object.assign(Object.assign({}, Object(helpers["d" /* defaultViewQuery */])()), { hidden: false }),
                ];
                draftState.activeQueryIndex = draftState.draftQueries.length - 1;
                resetBuilderState(draftState);
            });
        }
        case 'REMOVE_QUERY': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                const { queryIndex } = action.payload;
                draftState.draftQueries.splice(queryIndex, 1);
                const queryLength = draftState.draftQueries.length;
                let activeQueryIndex;
                if (queryIndex < queryLength) {
                    activeQueryIndex = queryIndex;
                }
                else if (queryLength === queryIndex && queryLength > 0) {
                    activeQueryIndex = queryLength - 1;
                }
                else {
                    activeQueryIndex = 0;
                }
                draftState.activeQueryIndex = activeQueryIndex;
                resetBuilderState(draftState);
            });
        }
        case 'TOGGLE_QUERY': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                const draftQuery = draftState.draftQueries[action.payload.queryIndex];
                draftQuery.hidden = !draftQuery.hidden;
            });
        }
        case 'SET_BUILDER_AGGREGATE_FUNCTION_TYPE': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                const { index, builderAggregateFunctionType } = action.payload;
                const draftQuery = draftState.draftQueries[draftState.activeQueryIndex];
                buildActiveQuery(draftState);
                if (draftQuery &&
                    draftQuery.builderConfig &&
                    draftQuery.builderConfig.tags[index]) {
                    draftQuery.builderConfig.tags[index].values = [];
                    draftQuery.builderConfig.tags[index].aggregateFunctionType = builderAggregateFunctionType;
                }
            });
        }
        case 'SET_BUILDER_BUCKET_SELECTION': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                const builderConfig = draftState.draftQueries[draftState.activeQueryIndex].builderConfig;
                builderConfig.buckets = [action.payload.bucket];
                if (action.payload.resetSelections) {
                    const defaultAggregateFunctionType = initialStateHelper().queryBuilder
                        .tags[0].aggregateFunctionType;
                    builderConfig.tags = [
                        {
                            key: '',
                            values: [],
                            aggregateFunctionType: defaultAggregateFunctionType,
                        },
                    ];
                    buildActiveQuery(draftState);
                }
            });
        }
        case 'SET_BUILDER_BUCKETS': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                draftState.queryBuilder.buckets = action.payload.buckets;
                draftState.queryBuilder.bucketsStatus = types["RemoteDataState"].Done;
            });
        }
        case 'SET_BUILDER_BUCKETS_STATUS': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                draftState.queryBuilder.bucketsStatus = action.payload.bucketsStatus;
            });
        }
        case 'SET_BUILDER_TAGS_STATUS': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                const { status } = action.payload;
                const tags = draftState.queryBuilder.tags;
                for (const tag of tags) {
                    tag.keysStatus = status;
                    tag.valuesStatus = status;
                }
            });
        }
        case 'SET_BUILDER_TAG_KEYS': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                const { index, keys } = action.payload;
                draftState.queryBuilder.tags[index].keys = keys;
                draftState.queryBuilder.tags[index].keysStatus = types["RemoteDataState"].Done;
            });
        }
        case 'SET_BUILDER_TAG_KEYS_STATUS': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                const { index, status } = action.payload;
                const tags = draftState.queryBuilder.tags;
                tags[index].keysStatus = status;
                if (status === types["RemoteDataState"].Loading) {
                    for (let i = index + 1; i < tags.length; i++) {
                        tags[i].keysStatus = types["RemoteDataState"].NotStarted;
                    }
                }
            });
        }
        case 'SET_BUILDER_TAG_VALUES': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                const { index, values } = action.payload;
                draftState.queryBuilder.tags[index].values = values;
                draftState.queryBuilder.tags[index].valuesStatus = types["RemoteDataState"].Done;
            });
        }
        case 'SET_BUILDER_TAG_VALUES_STATUS': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                const { index, status } = action.payload;
                draftState.queryBuilder.tags[index].valuesStatus = status;
            });
        }
        case 'SET_BUILDER_TAG_KEY_SELECTION': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                const { index, key } = action.payload;
                const draftQuery = draftState.draftQueries[draftState.activeQueryIndex];
                const tag = draftQuery.builderConfig.tags[index];
                tag.key = key;
                tag.values = [];
            });
        }
        case 'SET_BUILDER_TAG_VALUES_SELECTION': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                const { index, values } = action.payload;
                const draftQuery = draftState.draftQueries[draftState.activeQueryIndex];
                draftQuery.builderConfig.tags[index].values = values;
                buildActiveQuery(draftState);
            });
        }
        case 'SET_BUILDER_VALUES_SEARCH_TERM': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                const { index, searchTerm } = action.payload;
                draftState.queryBuilder.tags[index].valuesSearchTerm = searchTerm;
            });
        }
        case 'SET_BUILDER_KEYS_SEARCH_TERM': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                const { index, searchTerm } = action.payload;
                draftState.queryBuilder.tags[index].keysSearchTerm = searchTerm;
            });
        }
        case 'ADD_TAG_SELECTOR': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                const draftQuery = draftState.draftQueries[draftState.activeQueryIndex];
                const [initialTags] = initialStateHelper().queryBuilder.tags;
                draftQuery.builderConfig.tags.push({
                    key: '',
                    values: [],
                    aggregateFunctionType: initialTags.aggregateFunctionType,
                });
                draftState.queryBuilder.tags.push(initialTags);
            });
        }
        case 'REMOVE_TAG_SELECTOR': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                const { index } = action.payload;
                const draftQuery = draftState.draftQueries[draftState.activeQueryIndex];
                let selectedValues = [];
                if (draftQuery) {
                    selectedValues = draftQuery.builderConfig.tags[index].values;
                    draftQuery.builderConfig.tags.splice(index, 1);
                    draftState.queryBuilder.tags.splice(index, 1);
                }
                if (selectedValues.length) {
                    buildActiveQuery(draftState);
                }
            });
        }
        case 'SELECT_BUILDER_FUNCTION': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                const { functions } = action.payload;
                draftState.draftQueries[draftState.activeQueryIndex].builderConfig.functions = functions;
                buildActiveQuery(draftState);
            });
        }
        case 'SET_AGGREGATE_WINDOW': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                const { activeQueryIndex, draftQueries } = draftState;
                const { period } = action.payload;
                draftQueries[activeQueryIndex].builderConfig.aggregateWindow = { period };
                buildActiveQuery(draftState);
            });
        }
        case 'UPDATE_ACTIVE_QUERY_NAME': {
            const { activeQueryIndex } = state;
            const { queryName } = action.payload;
            const draftQueries = [...state.draftQueries];
            draftQueries[activeQueryIndex] = Object.assign(Object.assign({}, draftQueries[activeQueryIndex]), { name: queryName });
            return Object.assign(Object.assign({}, state), { draftQueries });
        }
        case 'SET_FIELD_OPTIONS': {
            const workingView = state.view;
            const { fieldOptions } = action.payload;
            const properties = Object.assign(Object.assign({}, workingView.properties), { fieldOptions });
            const view = Object.assign(Object.assign({}, state.view), { properties });
            return Object.assign(Object.assign({}, state), { view });
        }
        case 'UPDATE_FIELD_OPTION': {
            const workingView = state.view;
            const { option } = action.payload;
            const field = option.internalName;
            const properties = Object.assign({}, workingView.properties);
            properties.fieldOptions = properties.fieldOptions.slice(0);
            const names = workingView.properties.fieldOptions.map(o => o.internalName);
            const idx = names.indexOf(field);
            if (idx < 0) {
                return state;
            }
            properties.fieldOptions[idx] = option;
            const view = Object.assign(Object.assign({}, state.view), { properties });
            return Object.assign(Object.assign({}, state), { view });
        }
        case 'SET_TABLE_OPTIONS': {
            const workingView = state.view;
            const { tableOptions } = action.payload;
            const properties = Object.assign(Object.assign({}, workingView.properties), { tableOptions });
            const view = Object.assign(Object.assign({}, state.view), { properties });
            return Object.assign(Object.assign({}, state), { view });
        }
        case 'SET_TIME_FORMAT': {
            const workingView = state.view;
            const { timeFormat } = action.payload;
            const properties = Object.assign(Object.assign({}, workingView.properties), { timeFormat });
            const view = Object.assign(Object.assign({}, state.view), { properties });
            return Object.assign(Object.assign({}, state), { view });
        }
        case 'SAVE_DRAFT_QUERIES': {
            return Object(immer_module["b" /* produce */])(state, draftState => {
                draftState.view.properties.queries = draftState.draftQueries.filter(q => !q.hidden);
            });
        }
    }
    return state;
};
const setViewProperties = (state, update) => {
    const view = state.view;
    const properties = view.properties;
    return Object.assign(Object.assign({}, state), { view: Object.assign(Object.assign({}, view), { properties: Object.assign(Object.assign({}, properties), update) }) });
};
const setYAxis = (state, update) => {
    const view = state.view;
    const properties = view.properties;
    const axes = Object(lodash["get"])(properties, 'axes', {});
    const yAxis = Object(lodash["get"])(axes, 'y', {});
    return Object.assign(Object.assign({}, state), { view: Object.assign(Object.assign({}, view), { properties: Object.assign(Object.assign({}, properties), { axes: Object.assign(Object.assign({}, axes), { y: Object.assign(Object.assign({}, yAxis), update) }) }) }) });
};
const updateCorrectColors = (state, update) => {
    const view = state.view;
    const colors = view.properties.colors;
    if (Object(lodash["get"])(update, '0.type', '') === 'scale') {
        return [...colors.filter(c => c.type !== 'scale'), ...update];
    }
    return [...colors.filter(c => c.type === 'scale'), ...update];
};
const convertView = (view, files, outType) => {
    const newView = Object(helpers["a" /* createView */])(outType);
    newView.properties.queries = Object(lodash["cloneDeep"])(view.properties.queries);
    if (outType === 'table' && files) {
        newView.properties = getTableProperties(newView, files);
    }
    newView.name = view.name;
    newView.cellID = view.cellID;
    newView.dashboardID = view.dashboardID;
    newView.id = view.id;
    newView.links = view.links;
    return newView;
};
const initialQueryBuilderState = (builderConfig) => {
    return {
        buckets: builderConfig.buckets,
        bucketsStatus: types["RemoteDataState"].NotStarted,
        functions: [],
        aggregateWindow: { period: 'auto' },
        tags: builderConfig.tags.map(() => {
            const [defaultTag] = initialStateHelper().queryBuilder.tags;
            return defaultTag;
        }),
    };
};
const initialQueryResultsState = () => ({
    files: null,
    status: types["RemoteDataState"].NotStarted,
    isInitialFetch: true,
    fetchDuration: null,
    errorMessage: null,
    statuses: null,
});
const buildActiveQuery = (draftState) => {
    const draftQuery = draftState.draftQueries[draftState.activeQueryIndex];
    if (Object(utils_queryBuilder["e" /* isConfigValid */])(draftQuery.builderConfig)) {
        draftQuery.text = Object(utils_queryBuilder["b" /* buildQuery */])(draftQuery.builderConfig);
    }
    else if (!draftQuery.text) {
        draftQuery.text = '';
    }
};
const buildAllQueries = (draftState) => {
    draftState.draftQueries
        .filter(query => query.editMode === 'builder')
        .forEach(query => {
        if (Object(utils_queryBuilder["e" /* isConfigValid */])(query.builderConfig)) {
            query.text = Object(utils_queryBuilder["b" /* buildQuery */])(query.builderConfig);
        }
        else {
            query.text = '';
        }
    });
};
const resetBuilderState = (draftState) => {
    const newBuilderConfig = draftState.draftQueries[draftState.activeQueryIndex].builderConfig;
    draftState.queryBuilder = initialQueryBuilderState(newBuilderConfig);
};

// CONCATENATED MODULE: ./src/organizations/actions/creators.ts

const SET_ORGS = 'SET_ORGS';
const SET_ORG = 'SET_ORG';
const ADD_ORG = 'ADD_ORG';
const REMOVE_ORG = 'REMOVE_ORG';
const EDIT_ORG = 'EDIT_ORG';
const setOrgs = (status, schema) => {
    return {
        type: SET_ORGS,
        schema,
        status,
    };
};
const creators_setOrg = (org) => {
    honeybadger_default.a.setContext({
        orgID: org.id,
    });
    return {
        type: SET_ORG,
        org,
    };
};
const addOrg = (schema) => ({
    type: ADD_ORG,
    schema,
});
const removeOrg = (id) => ({
    type: REMOVE_ORG,
    id,
});
const editOrg = (schema) => ({
    type: EDIT_ORG,
    schema,
});

// CONCATENATED MODULE: ./src/organizations/reducers/index.ts




const { Orgs } = types["ResourceType"];
const organizations_reducers_initialState = () => ({
    byID: {},
    allIDs: [],
    status: types["RemoteDataState"].NotStarted,
    org: null,
});
const orgsReducer = (state = organizations_reducers_initialState(), action) => Object(immer_module["b" /* produce */])(state, draftState => {
    switch (action.type) {
        case SET_ORGS: {
            setResource(draftState, action, Orgs);
            return;
        }
        case ADD_ORG: {
            addResource(draftState, action, Orgs);
            return;
        }
        case REMOVE_ORG: {
            removeResource(draftState, action);
            return;
        }
        case EDIT_ORG: {
            editResource(draftState, action, Orgs);
            if (action.schema.result === draftState.org.id) {
                draftState.org = action.schema.entities.orgs[action.schema.result];
            }
            return;
        }
        case SET_ORG: {
            draftState.org = action.org;
            return;
        }
    }
});

// CONCATENATED MODULE: ./src/overlays/actions/overlays.ts
var overlays_ActionTypes;
(function (ActionTypes) {
    ActionTypes["ShowOverlay"] = "SHOW_OVERLAY";
    ActionTypes["DismissOverlay"] = "DISMISS_OVERLAY";
})(overlays_ActionTypes || (overlays_ActionTypes = {}));
const showOverlay = (overlayID, overlayParams, onClose) => {
    return {
        type: overlays_ActionTypes.ShowOverlay,
        payload: { overlayID, overlayParams, onClose },
    };
};
const dismissOverlay = () => {
    return {
        type: overlays_ActionTypes.DismissOverlay,
    };
};

// CONCATENATED MODULE: ./src/overlays/reducers/overlays.ts


const nullParams = {};
const overlays_defaultState = {
    id: null,
    params: nullParams,
    onClose: () => { },
};
const overlaysReducer = (state = overlays_defaultState, action) => Object(immer_module["b" /* produce */])(state, draftState => {
    switch (action.type) {
        case overlays_ActionTypes.ShowOverlay: {
            const { overlayID, overlayParams, onClose } = action.payload;
            draftState.id = overlayID;
            draftState.params = overlayParams;
            draftState.onClose = onClose;
            return;
        }
        case overlays_ActionTypes.DismissOverlay: {
            draftState.id = null;
            draftState.params = nullParams;
            draftState.onClose = () => { };
            return;
        }
    }
});
/* harmony default export */ var reducers_overlays = (overlaysReducer);

// EXTERNAL MODULE: ./src/clockface/constants/wizard.ts
var wizard = __webpack_require__(244);

// CONCATENATED MODULE: ./src/onboarding/reducers/index.ts

const INITIAL_STATE = {
    stepStatuses: new Array(3).fill(wizard["b" /* StepStatus */].Incomplete),
    setupParams: null,
    orgID: '',
    bucketID: '',
};
/* harmony default export */ var onboarding_reducers = ((state = INITIAL_STATE, action) => {
    switch (action.type) {
        case 'SET_SETUP_PARAMS':
            return Object.assign(Object.assign({}, state), { setupParams: action.payload.setupParams });
        case 'SET_STEP_STATUS':
            const stepStatuses = [...state.stepStatuses];
            stepStatuses[action.payload.index] = action.payload.status;
            return Object.assign(Object.assign({}, state), { stepStatuses });
        case 'SET_ORG_ID':
            return Object.assign(Object.assign({}, state), { orgID: action.payload.orgID });
        case 'SET_ONBOARDING_BUCKET_ID':
            return Object.assign(Object.assign({}, state), { bucketID: action.payload.bucketID });
        default:
            return state;
    }
});

// EXTERNAL MODULE: ./src/types/dashboards.ts
var types_dashboards = __webpack_require__(394);

// CONCATENATED MODULE: ./src/dashboards/reducers/notes.ts

const notes_initialState = () => ({
    mode: types_dashboards["a" /* NoteEditorMode */].Adding,
    note: '',
    showNoteWhenEmpty: false,
    isPreviewing: false,
});
const noteEditorReducer = (state = notes_initialState(), action) => {
    switch (action.type) {
        case 'RESET_NOTE_STATE': {
            return notes_initialState();
        }
        case 'SET_NOTE_STATE': {
            const initialState = action.payload;
            return Object.assign(Object.assign(Object.assign({}, state), initialState), { isPreviewing: false });
        }
        case 'CLOSE_NOTE_EDITOR': {
            return Object.assign(Object.assign({}, state), { overlayVisible: false });
        }
        case 'SET_IS_PREVIEWING': {
            const { isPreviewing } = action.payload;
            return Object.assign(Object.assign({}, state), { isPreviewing });
        }
        case 'TOGGLE_SHOW_NOTE_WHEN_EMPTY': {
            const { showNoteWhenEmpty } = state;
            return Object.assign(Object.assign({}, state), { showNoteWhenEmpty: !showNoteWhenEmpty });
        }
        case 'SET_NOTE': {
            const { note } = action.payload;
            return Object.assign(Object.assign({}, state), { note });
        }
    }
    return state;
};
/* harmony default export */ var reducers_notes = (noteEditorReducer);

// EXTERNAL MODULE: ./src/dataLoaders/utils/pluginConfigs.ts
var pluginConfigs = __webpack_require__(403);

// CONCATENATED MODULE: ./src/utils/wrappers.ts

function getDeep(obj, path, fallback) {
    return lodash_default.a.get(obj, path, fallback);
}

// EXTERNAL MODULE: ./src/shared/utils/validateURI.ts
var validateURI = __webpack_require__(404);

// EXTERNAL MODULE: ./src/types/dataLoaders.ts
var dataLoaders = __webpack_require__(126);

// EXTERNAL MODULE: ./node_modules/@influxdata/influx/dist/index.mjs
var dist = __webpack_require__(98);

// EXTERNAL MODULE: ./src/dataLoaders/constants/pluginConfigs.ts + 18 modules
var constants_pluginConfigs = __webpack_require__(233);

// CONCATENATED MODULE: ./src/dataLoaders/reducers/dataLoaders.ts








const dataLoaders_INITIAL_STATE = {
    telegrafPlugins: [],
    type: dataLoaders["e" /* DataLoaderType */].Empty,
    lineProtocolBody: '',
    activeLPTab: dataLoaders["g" /* LineProtocolTab */].UploadFile,
    lpStatus: types["RemoteDataState"].NotStarted,
    lpError: '',
    precision: dist["A" /* WritePrecision */].Ns,
    telegrafConfigID: null,
    pluginBundles: [],
    scraperTarget: {
        bucket: '',
        url: constants_pluginConfigs["c" /* QUICKSTART_SCRAPER_TARGET_URL */],
        name: 'Name this Scraper Target',
    },
    telegrafConfigName: 'Name this Configuration',
    telegrafConfigDescription: '',
    token: '',
};
/* harmony default export */ var reducers_dataLoaders = ((state = dataLoaders_INITIAL_STATE, action) => {
    switch (action.type) {
        case 'CLEAR_DATA_LOADERS':
            return Object.assign({}, dataLoaders_INITIAL_STATE);
        case 'SET_DATA_LOADERS_TYPE':
            return Object.assign(Object.assign({}, state), { type: action.payload.type });
        case 'SET_TELEGRAF_CONFIG_ID':
            return Object.assign(Object.assign({}, state), { telegrafConfigID: action.payload.id });
        case 'ADD_PLUGIN_BUNDLE':
            return Object.assign(Object.assign({}, state), { pluginBundles: [...state.pluginBundles, action.payload.bundle] });
        case 'REMOVE_PLUGIN_BUNDLE':
            return Object.assign(Object.assign({}, state), { pluginBundles: state.pluginBundles.filter(b => b !== action.payload.bundle) });
        case 'REMOVE_BUNDLE_PLUGINS':
            return Object.assign(Object.assign({}, state), { telegrafPlugins: state.telegrafPlugins.filter(tp => {
                    if (Object(pluginConfigs["c" /* isPluginInBundle */])(tp.name, action.payload.bundle)) {
                        return !Object(pluginConfigs["d" /* isPluginUniqueToBundle */])(tp.name, action.payload.bundle, state.pluginBundles);
                    }
                    return true;
                }) });
        case 'ADD_TELEGRAF_PLUGINS':
            return Object.assign(Object.assign({}, state), { telegrafPlugins: lodash_default.a.sortBy(lodash_default.a.uniqBy([...state.telegrafPlugins, ...action.payload.telegrafPlugins], 'name'), ['name']) });
        case 'UPDATE_TELEGRAF_PLUGIN':
            return Object.assign(Object.assign({}, state), { telegrafPlugins: state.telegrafPlugins.map(tp => {
                    if (tp.name === action.payload.plugin.name) {
                        return Object.assign(Object.assign({}, tp), { plugin: action.payload.plugin });
                    }
                    return tp;
                }) });
        case 'UPDATE_TELEGRAF_PLUGIN_CONFIG':
            return Object.assign(Object.assign({}, state), { telegrafPlugins: state.telegrafPlugins.map(tp => {
                    if (tp.name === action.payload.name) {
                        const plugin = lodash_default.a.get(tp, 'plugin', Object(pluginConfigs["a" /* createNewPlugin */])(tp.name));
                        return Object.assign(Object.assign({}, tp), { plugin: Object(pluginConfigs["e" /* updateConfigFields */])(plugin, action.payload.field, action.payload.value) });
                    }
                    return tp;
                }) });
        case 'ADD_TELEGRAF_PLUGIN_CONFIG_VALUE':
            return Object.assign(Object.assign({}, state), { telegrafPlugins: state.telegrafPlugins.map(tp => {
                    if (tp.name === action.payload.pluginName) {
                        const plugin = lodash_default.a.get(tp, 'plugin', Object(pluginConfigs["a" /* createNewPlugin */])(tp.name));
                        const config = lodash_default.a.get(plugin, ['config', action.payload.fieldName], []);
                        const updatedConfigFieldValue = [
                            ...config,
                            action.payload.value,
                        ];
                        return Object.assign(Object.assign({}, tp), { plugin: Object(pluginConfigs["e" /* updateConfigFields */])(plugin, action.payload.fieldName, updatedConfigFieldValue) });
                    }
                    return tp;
                }) });
        case 'REMOVE_TELEGRAF_PLUGIN_CONFIG_VALUE':
            return Object.assign(Object.assign({}, state), { telegrafPlugins: state.telegrafPlugins.map(tp => {
                    if (tp.name === action.payload.pluginName) {
                        const plugin = lodash_default.a.get(tp, 'plugin', Object(pluginConfigs["a" /* createNewPlugin */])(tp.name));
                        const configFieldValues = lodash_default.a.get(plugin, `config.${action.payload.fieldName}`, []);
                        const filteredConfigFieldValue = configFieldValues.filter(v => v !== action.payload.value);
                        return Object.assign(Object.assign({}, tp), { plugin: Object(pluginConfigs["e" /* updateConfigFields */])(plugin, action.payload.fieldName, filteredConfigFieldValue) });
                    }
                    return tp;
                }) });
        case 'SET_TELEGRAF_PLUGIN_CONFIG_VALUE':
            return Object.assign(Object.assign({}, state), { telegrafPlugins: state.telegrafPlugins.map(tp => {
                    if (tp.name === action.payload.pluginName) {
                        const plugin = lodash_default.a.get(tp, 'plugin', Object(pluginConfigs["a" /* createNewPlugin */])(tp.name));
                        const configValues = lodash_default.a.get(plugin, `config.${action.payload.field}`, []);
                        configValues[action.payload.valueIndex] = action.payload.value;
                        return Object.assign(Object.assign({}, tp), { plugin: Object(pluginConfigs["e" /* updateConfigFields */])(plugin, action.payload.field, [
                                ...configValues,
                            ]) });
                    }
                    return tp;
                }) });
        case 'SET_ACTIVE_TELEGRAF_PLUGIN':
            return Object.assign(Object.assign({}, state), { telegrafPlugins: state.telegrafPlugins.map(tp => {
                    if (tp.name === action.payload.telegrafPlugin) {
                        return Object.assign(Object.assign({}, tp), { active: true });
                    }
                    return Object.assign(Object.assign({}, tp), { active: false });
                }) });
        case 'SET_PLUGIN_CONFIGURATION_STATE':
            return Object.assign(Object.assign({}, state), { telegrafPlugins: state.telegrafPlugins.map(tp => {
                    const name = lodash_default.a.get(tp, 'name');
                    if (name === action.payload.telegrafPlugin) {
                        const configFields = Object(pluginConfigs["b" /* getConfigFields */])(name);
                        if (!configFields) {
                            return Object.assign(Object.assign({}, tp), { configured: dataLoaders["d" /* ConfigurationState */].Configured });
                        }
                        const plugin = getDeep(tp, 'plugin', Object(pluginConfigs["a" /* createNewPlugin */])(name));
                        const config = lodash_default.a.get(plugin, 'config', {});
                        let isValidConfig = true;
                        Object.entries(configFields).forEach(([fieldName, { type: fieldType, isRequired }]) => {
                            if (isRequired) {
                                const fieldValue = config[fieldName];
                                switch (fieldType) {
                                    case dataLoaders["c" /* ConfigFieldType */].Uri:
                                        isValidConfig = Object(validateURI["a" /* validateURI */])(fieldValue);
                                        break;
                                    case dataLoaders["c" /* ConfigFieldType */].String:
                                        isValidConfig = fieldValue !== '';
                                        break;
                                    case dataLoaders["c" /* ConfigFieldType */].StringArray:
                                        isValidConfig = !!fieldValue.length;
                                        break;
                                    case dataLoaders["c" /* ConfigFieldType */].UriArray:
                                        isValidConfig =
                                            !!fieldValue.length &&
                                                !fieldValue.find(uri => !Object(validateURI["a" /* validateURI */])(uri));
                                        break;
                                }
                            }
                        });
                        if (!isValidConfig || lodash_default.a.isEmpty(config)) {
                            return Object.assign(Object.assign({}, tp), { configured: dataLoaders["d" /* ConfigurationState */].InvalidConfiguration });
                        }
                        else {
                            return Object.assign(Object.assign({}, tp), { configured: dataLoaders["d" /* ConfigurationState */].Configured });
                        }
                    }
                    return Object.assign({}, tp);
                }) });
        case 'SET_TELEGRAF_CONFIG_NAME':
            return Object.assign(Object.assign({}, state), { telegrafConfigName: action.payload.name });
        case 'SET_TELEGRAF_CONFIG_DESCRIPTION':
            return Object.assign(Object.assign({}, state), { telegrafConfigDescription: action.payload.description });
        case 'SET_SCRAPER_TARGET_NAME':
            const { name } = action.payload;
            return Object.assign(Object.assign({}, state), { scraperTarget: Object.assign(Object.assign({}, state.scraperTarget), { name }) });
        case 'SET_SCRAPER_TARGET_BUCKET':
            const { bucket } = action.payload;
            return Object.assign(Object.assign({}, state), { scraperTarget: Object.assign(Object.assign({}, state.scraperTarget), { bucket }) });
        case 'SET_SCRAPER_TARGET_URL':
            const { url } = action.payload;
            return Object.assign(Object.assign({}, state), { scraperTarget: Object.assign(Object.assign({}, state.scraperTarget), { url }) });
        case 'SET_SCRAPER_TARGET_ID':
            const { id } = action.payload;
            return Object.assign(Object.assign({}, state), { scraperTarget: Object.assign(Object.assign({}, state.scraperTarget), { id }) });
        case 'SET_LINE_PROTOCOL_BODY':
            return Object.assign(Object.assign({}, state), { lineProtocolBody: action.payload.lineProtocolBody });
        case 'SET_ACTIVE_LP_TAB':
            return Object.assign(Object.assign({}, state), { activeLPTab: action.payload.activeLPTab });
        case 'SET_LP_STATUS':
            const { lpStatus, lpError } = action.payload;
            if (lpStatus === types["RemoteDataState"].Error) {
                return Object.assign(Object.assign({}, state), { lpStatus,
                    lpError });
            }
            return Object.assign(Object.assign({}, state), { lpStatus, lpError: '' });
        case 'SET_PRECISION':
            return Object.assign(Object.assign({}, state), { precision: action.payload.precision });
        case 'SET_TOKEN':
            return Object.assign(Object.assign({}, state), { token: action.payload.token });
        default:
            return state;
    }
});

// CONCATENATED MODULE: ./src/dataLoaders/reducers/steps.ts
const steps_INITIAL_STATE = {
    org: '',
    bucket: '',
    orgID: '',
    bucketID: '',
    currentStep: 0,
};
/* harmony default export */ var steps = ((state = steps_INITIAL_STATE, action) => {
    switch (action.type) {
        case 'CLEAR_STEPS':
            return Object.assign({}, steps_INITIAL_STATE);
        case 'INCREMENT_CURRENT_STEP_INDEX':
            return Object.assign(Object.assign({}, state), { currentStep: state.currentStep + 1 });
        case 'DECREMENT_CURRENT_STEP_INDEX':
            return Object.assign(Object.assign({}, state), { currentStep: state.currentStep - 1 });
        case 'SET_CURRENT_STEP_INDEX':
            return Object.assign(Object.assign({}, state), { currentStep: action.payload.index });
        case 'SET_SUBSTEP_INDEX':
            return Object.assign(Object.assign({}, state), { currentStep: action.payload.stepIndex, substep: action.payload.substep });
        case 'SET_BUCKET_INFO':
            return Object.assign(Object.assign({}, state), action.payload);
        case 'SET_BUCKET_ID':
            return Object.assign(Object.assign({}, state), { bucketID: action.payload.bucketID });
        default:
            return state;
    }
});

// CONCATENATED MODULE: ./src/dataLoaders/reducers/index.tsx



/* harmony default export */ var dataLoaders_reducers = (Object(redux["c" /* combineReducers */])({
    steps: steps,
    dataLoaders: reducers_dataLoaders,
}));

// EXTERNAL MODULE: ./src/variables/actions/creators.ts
var variables_actions_creators = __webpack_require__(164);

// CONCATENATED MODULE: ./src/variables/reducers/editor.ts


const initialEditorState = () => ({
    name: '',
    selected: 'query',
    argsQuery: null,
    argsMap: null,
    argsConstant: null,
});
const variableEditorReducer = (state = initialEditorState(), action) => Object(immer_module["b" /* produce */])(state, draftState => {
    switch (action.type) {
        case variables_actions_creators["b" /* CLEAR_VARIABLE_EDITOR */]: {
            return initialEditorState();
        }
        case variables_actions_creators["a" /* CHANGE_VARIABLE_EDITOR_TYPE */]: {
            draftState.selected = action.editorType;
            return;
        }
        case variables_actions_creators["k" /* UPDATE_VARIABLE_EDITOR_NAME */]: {
            draftState.name = action.name;
            return;
        }
        case variables_actions_creators["l" /* UPDATE_VARIABLE_EDITOR_QUERY */]: {
            draftState.argsQuery = action.payload;
            return;
        }
        case variables_actions_creators["j" /* UPDATE_VARIABLE_EDITOR_MAP */]: {
            draftState.argsMap = action.payload;
            return;
        }
        case variables_actions_creators["i" /* UPDATE_VARIABLE_EDITOR_CONSTANT */]: {
            draftState.argsConstant = action.payload;
            return;
        }
        default:
            return;
    }
});

// CONCATENATED MODULE: ./src/variables/reducers/index.ts





const variables_reducers_initialState = () => ({
    status: types["RemoteDataState"].NotStarted,
    byID: {},
    allIDs: [],
    values: {},
});
const variablesReducer = (state = variables_reducers_initialState(), action) => Object(immer_module["b" /* produce */])(state, draftState => {
    switch (action.type) {
        case variables_actions_creators["g" /* SET_VARIABLES */]: {
            setResource(draftState, action, types["ResourceType"].Variables);
            return;
        }
        case variables_actions_creators["f" /* SET_VARIABLE */]: {
            const { id, status, schema } = action;
            const variable = Object(lodash["get"])(schema, ['entities', 'variables', id]);
            const variableExists = !!draftState.byID[id];
            if (variable || !variableExists) {
                draftState.byID[id] = Object.assign(Object.assign({}, variable), { status });
                draftState.allIDs.push(id);
            }
            else {
                draftState.byID[id].status = status;
            }
            return;
        }
        case variables_actions_creators["d" /* REMOVE_VARIABLE */]: {
            removeResource(draftState, action);
            return;
        }
        case variables_actions_creators["h" /* SET_VARIABLE_VALUES */]: {
            const { contextID, status, values } = action;
            const prevOrder = Object(lodash["get"])(draftState, `values.${contextID}.order`, []);
            if (values) {
                const order = Object.keys(values).sort((a, b) => prevOrder.indexOf(a) - prevOrder.indexOf(b));
                draftState.values[contextID] = {
                    status,
                    values,
                    order,
                };
            }
            else if (draftState.values[contextID]) {
                draftState.values[contextID].status = status;
            }
            else {
                draftState.values[contextID] = { status, values: null, order: [] };
            }
            return;
        }
        case variables_actions_creators["e" /* SELECT_VARIABLE_VALUE */]: {
            const { contextID, variableID, selectedValue } = action;
            const valuesExist = !!Object(lodash["get"])(draftState, `values.${contextID}.values.${variableID}`);
            if (!valuesExist) {
                return;
            }
            draftState.values[contextID].values[variableID].selectedValue = selectedValue;
            return;
        }
        case variables_actions_creators["c" /* MOVE_VARIABLE */]: {
            const { originalIndex, newIndex, contextID } = action;
            const variableIDToMove = Object(lodash["get"])(draftState, `values.${contextID}.order[${originalIndex}]`);
            const variableIDToSwap = Object(lodash["get"])(draftState, `values.${contextID}.order[${newIndex}]`);
            draftState.values[contextID].order[originalIndex] = variableIDToSwap;
            draftState.values[contextID].order[newIndex] = variableIDToMove;
            return;
        }
    }
});


// CONCATENATED MODULE: ./src/labels/reducers/index.ts




const labels_reducers_initialState = () => ({
    status: types["RemoteDataState"].NotStarted,
    byID: {},
    allIDs: [],
});
const labelsReducer = (state = labels_reducers_initialState(), action) => Object(immer_module["b" /* produce */])(state, draftState => {
    switch (action.type) {
        case labels_actions_creators["c" /* SET_LABELS */]: {
            setResource(draftState, action, types["ResourceType"].Labels);
            return;
        }
        case labels_actions_creators["b" /* SET_LABEL */]: {
            setResourceAtID(draftState, action, types["ResourceType"].Labels);
            return;
        }
        case labels_actions_creators["a" /* REMOVE_LABEL */]: {
            removeResource(draftState, action);
            return;
        }
    }
});

// EXTERNAL MODULE: ./src/buckets/actions/creators.ts
var buckets_actions_creators = __webpack_require__(723);

// CONCATENATED MODULE: ./src/buckets/reducers/index.ts




const { Buckets } = types["ResourceType"];
const buckets_reducers_initialState = () => ({
    status: types["RemoteDataState"].NotStarted,
    byID: {},
    allIDs: [],
});
const bucketsReducer = (state = buckets_reducers_initialState(), action) => Object(immer_module["b" /* produce */])(state, draftState => {
    switch (action.type) {
        case buckets_actions_creators["d" /* SET_BUCKETS */]: {
            setResource(draftState, action, Buckets);
            return;
        }
        case buckets_actions_creators["a" /* ADD_BUCKET */]: {
            addResource(draftState, action, Buckets);
            return;
        }
        case buckets_actions_creators["b" /* EDIT_BUCKET */]: {
            editResource(draftState, action, Buckets);
            return;
        }
        case buckets_actions_creators["c" /* REMOVE_BUCKET */]: {
            removeResource(draftState, action);
            return;
        }
    }
});

// EXTERNAL MODULE: ./src/telegrafs/actions/creators.ts
var telegrafs_actions_creators = __webpack_require__(405);

// CONCATENATED MODULE: ./src/telegrafs/reducers/index.ts




const { Telegrafs } = types["ResourceType"];
const telegrafs_reducers_initialState = () => ({
    status: types["RemoteDataState"].NotStarted,
    byID: {},
    allIDs: [],
    currentConfig: { status: types["RemoteDataState"].NotStarted, item: '' },
});
const telegrafsReducer = (state = telegrafs_reducers_initialState(), action) => Object(immer_module["b" /* produce */])(state, draftState => {
    switch (action.type) {
        case telegrafs_actions_creators["e" /* SET_TELEGRAFS */]: {
            setResource(draftState, action, Telegrafs);
            return;
        }
        case telegrafs_actions_creators["a" /* ADD_TELEGRAF */]: {
            addResource(draftState, action, Telegrafs);
            return;
        }
        case telegrafs_actions_creators["b" /* EDIT_TELEGRAF */]: {
            editResource(draftState, action, Telegrafs);
            return;
        }
        case telegrafs_actions_creators["c" /* REMOVE_TELEGRAF */]: {
            removeResource(draftState, action);
            return;
        }
        case telegrafs_actions_creators["d" /* SET_CURRENT_CONFIG */]: {
            const { status, item } = action;
            draftState.currentConfig.status = status;
            if (item) {
                draftState.currentConfig.item = item;
            }
            else {
                draftState.currentConfig.item = '';
            }
            return;
        }
    }
});

// EXTERNAL MODULE: ./src/authorizations/actions/creators.ts
var authorizations_actions_creators = __webpack_require__(406);

// CONCATENATED MODULE: ./src/authorizations/reducers/index.ts




const { Authorizations } = types["ResourceType"];
const authorizations_reducers_initialState = () => ({
    status: types["RemoteDataState"].NotStarted,
    byID: {},
    allIDs: [],
});
const authsReducer = (state = authorizations_reducers_initialState(), action) => Object(immer_module["b" /* produce */])(state, draftState => {
    switch (action.type) {
        case authorizations_actions_creators["d" /* SET_AUTH */]: {
            setResource(draftState, action, Authorizations);
            return;
        }
        case authorizations_actions_creators["a" /* ADD_AUTH */]: {
            addResource(draftState, action, Authorizations);
            return;
        }
        case authorizations_actions_creators["c" /* REMOVE_AUTH */]: {
            removeResource(draftState, action);
            return;
        }
        case authorizations_actions_creators["b" /* EDIT_AUTH */]: {
            editResource(draftState, action, Authorizations);
            return;
        }
    }
});

// EXTERNAL MODULE: ./src/templates/actions/creators.ts
var templates_actions_creators = __webpack_require__(245);

// CONCATENATED MODULE: ./src/templates/reducers/index.ts




const reducers_defaultState = () => ({
    status: types["RemoteDataState"].NotStarted,
    byID: {},
    allIDs: [],
    exportTemplate: {
        status: types["RemoteDataState"].NotStarted,
        item: null,
    },
});
const templatesReducer = (state = reducers_defaultState(), action) => Object(immer_module["b" /* produce */])(state, draftState => {
    switch (action.type) {
        case templates_actions_creators["b" /* POPULATE_TEMPLATE_SUMMARIES */]: {
            setResource(draftState, action, types["ResourceType"].Templates);
            return;
        }
        case templates_actions_creators["e" /* SET_TEMPLATES_STATUS */]: {
            const { status } = action;
            draftState.status = status;
            return;
        }
        case templates_actions_creators["f" /* SET_TEMPLATE_SUMMARY */]: {
            setResourceAtID(draftState, action, types["ResourceType"].Templates);
            return;
        }
        case templates_actions_creators["d" /* SET_EXPORT_TEMPLATE */]: {
            const { status, item } = action;
            draftState.exportTemplate.status = status;
            if (item) {
                draftState.exportTemplate.item = item;
            }
            else {
                draftState.exportTemplate.item = null;
            }
            return;
        }
        case templates_actions_creators["c" /* REMOVE_TEMPLATE_SUMMARY */]: {
            removeResource(draftState, action);
            return;
        }
        case templates_actions_creators["a" /* ADD_TEMPLATE_SUMMARY */]: {
            addResource(draftState, action, types["ResourceType"].Templates);
            return;
        }
    }
});
/* harmony default export */ var templates_reducers = (templatesReducer);

// EXTERNAL MODULE: ./src/scrapers/actions/creators.ts
var scrapers_actions_creators = __webpack_require__(724);

// CONCATENATED MODULE: ./src/scrapers/reducers/index.ts




const { Scrapers: reducers_Scrapers } = types["ResourceType"];
const scrapers_reducers_initialState = () => ({
    status: types["RemoteDataState"].NotStarted,
    byID: {},
    allIDs: [],
});
const scrapersReducer = (state = scrapers_reducers_initialState(), action) => Object(immer_module["b" /* produce */])(state, draftState => {
    switch (action.type) {
        case scrapers_actions_creators["d" /* SET_SCRAPERS */]: {
            setResource(draftState, action, reducers_Scrapers);
            return;
        }
        case scrapers_actions_creators["a" /* ADD_SCRAPER */]: {
            addResource(draftState, action, reducers_Scrapers);
            return;
        }
        case scrapers_actions_creators["b" /* EDIT_SCRAPER */]: {
            editResource(draftState, action, reducers_Scrapers);
            return;
        }
        case scrapers_actions_creators["c" /* REMOVE_SCRAPER */]: {
            removeResource(draftState, action);
            return;
        }
    }
});

// CONCATENATED MODULE: ./src/userSettings/reducers/index.ts
const userSettings_reducers_initialState = () => ({
    showVariablesControls: true,
});
const userSettingsReducer = (state = userSettings_reducers_initialState(), action) => {
    switch (action.type) {
        case 'TOGGLE_SHOW_VARIABLES_CONTROLS':
            return Object.assign(Object.assign({}, state), { showVariablesControls: !state.showVariablesControls });
        default:
            return state;
    }
};

// EXTERNAL MODULE: ./src/members/actions/creators.ts
var members_actions_creators = __webpack_require__(725);

// CONCATENATED MODULE: ./src/members/reducers/index.ts




const { Members: reducers_Members } = types["ResourceType"];
const members_reducers_initialState = () => ({
    byID: {},
    allIDs: [],
    status: types["RemoteDataState"].NotStarted,
});
const membersReducer = (state = members_reducers_initialState(), action) => Object(immer_module["b" /* produce */])(state, draftState => {
    switch (action.type) {
        case members_actions_creators["c" /* SET_MEMBERS */]: {
            setResource(draftState, action, reducers_Members);
            return;
        }
        case members_actions_creators["a" /* ADD_MEMBER */]: {
            addResource(draftState, action, reducers_Members);
            return;
        }
        case members_actions_creators["b" /* REMOVE_MEMBER */]: {
            removeResource(draftState, action);
            return;
        }
    }
});

// CONCATENATED MODULE: ./src/shared/reducers/autoRefresh.ts


const autoRefresh_initialState = () => {
    return {};
};
const autoRefreshReducer = (state = autoRefresh_initialState(), action) => Object(immer_module["b" /* produce */])(state, draftState => {
    switch (action.type) {
        case 'SET_AUTO_REFRESH_INTERVAL': {
            const { dashboardID, milliseconds } = action.payload;
            if (!draftState[dashboardID]) {
                draftState[dashboardID] = constants["b" /* AUTOREFRESH_DEFAULT */];
            }
            draftState[dashboardID].interval = milliseconds;
            return;
        }
        case 'SET_AUTO_REFRESH_STATUS': {
            const { dashboardID, status } = action.payload;
            if (!draftState[dashboardID]) {
                draftState[dashboardID] = constants["b" /* AUTOREFRESH_DEFAULT */];
            }
            draftState[dashboardID].status = status;
            return;
        }
    }
});

// EXTERNAL MODULE: ./src/cloud/actions/limits.ts + 1 modules
var actions_limits = __webpack_require__(72);

// CONCATENATED MODULE: ./src/cloud/reducers/limits.ts




const defaultLimit = {
    maxAllowed: Infinity,
    limitStatus: actions_limits["b" /* LimitStatus */].OK,
};
const defaultLimitWithBlocked = Object.assign(Object.assign({}, defaultLimit), { blocked: [] });
const limits_defaultState = {
    dashboards: defaultLimit,
    tasks: defaultLimit,
    buckets: Object.assign(Object.assign({}, defaultLimit), { maxRetentionSeconds: null }),
    checks: defaultLimit,
    rules: defaultLimitWithBlocked,
    endpoints: defaultLimitWithBlocked,
    rate: {
        readKBs: defaultLimit,
        writeKBs: defaultLimit,
        cardinality: defaultLimit,
    },
    status: types["RemoteDataState"].NotStarted,
};
const limitsReducer = (state = limits_defaultState, action) => Object(immer_module["b" /* produce */])(state, draftState => {
    switch (action.type) {
        case actions_limits["a" /* ActionTypes */].SetLimitsStatus: {
            const { status } = action.payload;
            draftState.status = status;
            return;
        }
        case actions_limits["a" /* ActionTypes */].SetLimits: {
            const { limits } = action.payload;
            const { maxBuckets, maxRetentionDuration } = limits.bucket;
            const { maxDashboards } = limits.dashboard;
            const { maxTasks } = limits.task;
            const { maxChecks } = limits.check;
            const { maxNotifications, blockedNotificationRules, } = limits.notificationRule;
            const { blockedNotificationEndpoints } = limits.notificationEndpoint;
            const { readKBs, writeKBs, cardinality } = limits.rate;
            draftState.buckets.maxAllowed = maxBuckets;
            draftState.buckets.maxRetentionSeconds = maxRetentionDuration / 1e9;
            draftState.dashboards.maxAllowed = maxDashboards;
            draftState.tasks.maxAllowed = maxTasks;
            draftState.checks.maxAllowed = maxChecks;
            draftState.rules.maxAllowed = maxNotifications;
            draftState.rules.blocked = blockedNotificationRules
                .split(',')
                .map(r => r.trim());
            draftState.endpoints.blocked = blockedNotificationEndpoints
                .split(',')
                .map(r => r.trim());
            draftState.rate.readKBs.maxAllowed = readKBs;
            draftState.rate.writeKBs.maxAllowed = writeKBs;
            draftState.rate.cardinality.maxAllowed = cardinality;
            return;
        }
        case actions_limits["a" /* ActionTypes */].SetDashboardLimitStatus: {
            draftState.dashboards.limitStatus = action.payload.limitStatus;
            return;
        }
        case actions_limits["a" /* ActionTypes */].SetBucketLimitStatus: {
            draftState.buckets.limitStatus = action.payload.limitStatus;
            return;
        }
        case actions_limits["a" /* ActionTypes */].SetTaskLimitStatus: {
            draftState.tasks.limitStatus = action.payload.limitStatus;
            return;
        }
        case actions_limits["a" /* ActionTypes */].SetChecksLimitStatus: {
            draftState.checks.limitStatus = action.payload.limitStatus;
            return;
        }
        case actions_limits["a" /* ActionTypes */].SetRulesLimitStatus: {
            draftState.rules.limitStatus = action.payload.limitStatus;
            return;
        }
        case actions_limits["a" /* ActionTypes */].SetEndpointsLimitStatus: {
            draftState.endpoints.limitStatus = action.payload.limitStatus;
            return;
        }
        case actions_limits["a" /* ActionTypes */].SetReadRateLimitStatus: {
            draftState.rate.readKBs.limitStatus = action.payload.limitStatus;
            return;
        }
        case actions_limits["a" /* ActionTypes */].SetWriteRateLimitStatus: {
            draftState.rate.writeKBs.limitStatus = action.payload.limitStatus;
            return;
        }
        case actions_limits["a" /* ActionTypes */].SetCardinalityLimitStatus: {
            draftState.rate.cardinality.limitStatus = action.payload.limitStatus;
            return;
        }
    }
});
/* harmony default export */ var reducers_limits = (limitsReducer);

// EXTERNAL MODULE: ./src/checks/actions/creators.ts
var checks_actions_creators = __webpack_require__(727);

// CONCATENATED MODULE: ./src/checks/reducers/index.ts





const defaultChecksState = {
    status: types["RemoteDataState"].NotStarted,
    byID: {},
    allIDs: [],
};
/* harmony default export */ var checks_reducers = ((state = defaultChecksState, action) => Object(immer_module["b" /* produce */])(state, draftState => {
    switch (action.type) {
        case checks_actions_creators["d" /* SET_CHECKS */]: {
            setResource(draftState, action, types["ResourceType"].Checks);
            return;
        }
        case checks_actions_creators["c" /* SET_CHECK */]: {
            setResourceAtID(draftState, action, types["ResourceType"].Checks);
            return;
        }
        case checks_actions_creators["a" /* REMOVE_CHECK */]: {
            removeResource(draftState, action);
            return;
        }
        case labels_actions_creators["d" /* SET_LABEL_ON_RESOURCE */]: {
            const { resourceID, schema } = action;
            const labelID = schema.result;
            setRelation(draftState, types["ResourceType"].Labels, labelID, resourceID);
            return;
        }
        case checks_actions_creators["b" /* REMOVE_LABEL_FROM_CHECK */]: {
            const { checkID, labelID } = action;
            const labels = draftState.byID[checkID].labels;
            draftState.byID[checkID].labels = labels.filter(id => id !== labelID);
            return;
        }
    }
}));

// EXTERNAL MODULE: ./src/notifications/rules/actions/creators.ts
var rules_actions_creators = __webpack_require__(728);

// CONCATENATED MODULE: ./src/notifications/rules/reducers/index.ts





const defaultNotificationRulesState = {
    status: types["RemoteDataState"].NotStarted,
    byID: {},
    allIDs: [],
    current: { status: types["RemoteDataState"].NotStarted, rule: null },
};
/* harmony default export */ var rules_reducers = ((state = defaultNotificationRulesState, action) => Object(immer_module["b" /* produce */])(state, draftState => {
    switch (action.type) {
        case rules_actions_creators["e" /* SET_RULES */]: {
            setResource(draftState, action, types["ResourceType"].NotificationRules);
            return;
        }
        case rules_actions_creators["d" /* SET_RULE */]: {
            setResourceAtID(draftState, action, types["ResourceType"].NotificationRules);
            return;
        }
        case rules_actions_creators["b" /* REMOVE_RULE */]: {
            removeResource(draftState, action);
            return;
        }
        case rules_actions_creators["c" /* SET_CURRENT_RULE */]: {
            const { schema, status } = action;
            const ruleID = schema.result;
            draftState.current.status = status;
            const rule = schema.entities.rules[ruleID];
            if (rule) {
                draftState.current.rule = rule;
            }
            return;
        }
        case labels_actions_creators["d" /* SET_LABEL_ON_RESOURCE */]: {
            const { resourceID, schema } = action;
            const labelID = schema.result;
            setRelation(draftState, types["ResourceType"].Labels, labelID, resourceID);
            return;
        }
        case rules_actions_creators["a" /* REMOVE_LABEL_FROM_RULE */]: {
            const { ruleID, labelID } = action;
            const labels = draftState.byID[ruleID].labels;
            draftState.byID[ruleID].labels = labels.filter(label => label.id !== labelID);
            return;
        }
    }
}));

// EXTERNAL MODULE: ./src/notifications/endpoints/actions/creators.ts
var endpoints_actions_creators = __webpack_require__(729);

// CONCATENATED MODULE: ./src/notifications/endpoints/reducers/index.ts





const endpoints_reducers_initialState = {
    status: types["RemoteDataState"].NotStarted,
    byID: {},
    allIDs: [],
};
/* harmony default export */ var endpoints_reducers = ((state = endpoints_reducers_initialState, action) => Object(immer_module["a" /* default */])(state, draftState => {
    switch (action.type) {
        case endpoints_actions_creators["d" /* SET_ENDPOINTS */]: {
            setResource(draftState, action, types["ResourceType"].NotificationEndpoints);
            return;
        }
        case endpoints_actions_creators["c" /* SET_ENDPOINT */]: {
            setResourceAtID(draftState, action, types["ResourceType"].NotificationEndpoints);
            return;
        }
        case endpoints_actions_creators["a" /* REMOVE_ENDPOINT */]: {
            removeResource(draftState, action);
            return;
        }
        case labels_actions_creators["d" /* SET_LABEL_ON_RESOURCE */]: {
            const { resourceID, schema } = action;
            const labelID = schema.result;
            setRelation(draftState, types["ResourceType"].Labels, labelID, resourceID);
            return;
        }
        case endpoints_actions_creators["b" /* REMOVE_LABEL_FROM_ENDPOINT */]: {
            const { endpointID, labelID } = action;
            const labels = draftState.byID[endpointID].labels;
            draftState.byID[endpointID].labels = labels.filter(id => id !== labelID);
            return;
        }
    }
}));

// CONCATENATED MODULE: ./src/dataLoaders/reducers/telegrafEditor.ts

const INITIAL_PLUGINS = [
    {
        name: 'system',
        type: 'bundle',
        description: 'collect all the basic local metrics',
        include: ['cpu', 'disk', 'diskio', 'memory', 'network'],
    },
    {
        name: 'agent',
        type: 'system',
        description: 'configures Telegraf and the defaults used across all plugins',
        config: `[agent]
## Default data collection interval for all inputs
interval = "10s"
## Rounds collection interval to 'interval'
## ie, if interval="10s" then always collect on :00, :10, :20, etc.
round_interval = true
## Telegraf will send metrics to outputs in batches of at most
## metric_batch_size metrics.
## This controls the size of writes that Telegraf sends to output plugins.
metric_batch_size = 1000
## For failed writes, telegraf will cache metric_buffer_limit metrics for each
## output, and will flush this buffer on a successful write. Oldest metrics
## are dropped first when this buffer fills.
## This buffer only fills when writes fail to output plugin(s).
metric_buffer_limit = 10000
## Collection jitter is used to jitter the collection by a random amount.
## Each plugin will sleep for a random time within jitter before collecting.
## This can be used to avoid many plugins querying things like sysfs at the
## same time, which can have a measurable effect on the system.
collection_jitter = "0s"
## Default flushing interval for all outputs. Maximum flush_interval will be
## flush_interval + flush_jitter
flush_interval = "10s"
## Jitter the flush interval by a random amount. This is primarily to avoid
## large write spikes for users running a large number of telegraf instances.
## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
flush_jitter = "0s"
## By default or when set to "0s", precision will be set to the same
## timestamp order as the collection interval, with the maximum being 1s.
##   ie, when interval = "10s", precision will be "1s"
##       when interval = "250ms", precision will be "1ms"
## Precision will NOT be used for service inputs. It is up to each individual
## service input to set the timestamp at the appropriate precision.
## Valid time units are "ns", "us" (or "µs"), "ms", "s".
precision = ""
## Logging configuration:
## Run telegraf with debug log messages.
debug = false
## Run telegraf in quiet mode (error log messages only).
quiet = false
## Specify the log file name. The empty string means to log to stderr.
logfile = ""
## Override default hostname, if empty use os.Hostname()
hostname = ""
## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false
`,
    },
    {
        name: '__default__',
        type: 'bundle',
        description: 'default data for a blank telegraf',
        include: ['agent', 'influxdb_v2'],
    },
];
const INITIAL_EDITOR = {
    showLookup: true,
    showList: true,
    bucket: null,
    text: '',
    filter: '',
};
function pluginsReducer(state = INITIAL_PLUGINS, action) {
    switch (action.type) {
        case 'SET_TELEGRAF_EDITOR_PLUGINS':
            const plugs = INITIAL_PLUGINS.slice(0);
            plugs.push(...action.payload.slice(0));
            return plugs;
        default:
            return state;
    }
}
function pluginsResourceReducer(state = { status: types["RemoteDataState"].NotStarted }, action) {
    switch (action.type) {
        case 'SET_TELEGRAF_EDITOR_PLUGINS_LOADING_STATE':
            return Object.assign(Object.assign({}, state), { status: action.payload });
        default:
            return state;
    }
}
function activePluginsReducer(state = [], action) {
    switch (action.type) {
        case 'SET_TELEGRAF_EDITOR_ACTIVE_PLUGINS':
            return action.payload.slice(0);
        default:
            return state;
    }
}
function editorReducer(state = INITIAL_EDITOR, action) {
    switch (action.type) {
        case 'SET_TELEGRAF_EDITOR_LOOKUP':
            return Object.assign(Object.assign({}, state), { showLookup: action.payload });
        case 'SET_TELEGRAF_EDITOR_LIST':
            return Object.assign(Object.assign({}, state), { showList: action.payload });
        case 'SET_TELEGRAF_EDITOR_TEXT':
            return Object.assign(Object.assign({}, state), { text: action.payload });
        case 'SET_TELEGRAF_EDITOR_ACTIVE_BUCKET':
            return Object.assign(Object.assign({}, state), { bucket: action.payload });
        case 'SET_TELEGRAF_EDITOR_FILTER':
            return Object.assign(Object.assign({}, state), { filter: action.payload });
        case 'RESET_TELEGRAF_EDITOR':
            return Object.assign({}, INITIAL_EDITOR);
        default:
            return state;
    }
}

// CONCATENATED MODULE: ./src/shared/reducers/predicates.ts

const predicates_initialState = {
    bucketName: '',
    deletionStatus: types["RemoteDataState"].NotStarted,
    files: [],
    filters: [],
    isSerious: false,
    keys: [],
    previewStatus: types["RemoteDataState"].NotStarted,
    timeRange: null,
    values: [],
};
const predicatesReducer = (state = predicates_initialState, action) => {
    switch (action.type) {
        case 'RESET_FILTERS':
            return Object.assign(Object.assign({}, state), { filters: [] });
        case 'SET_IS_SERIOUS':
            return Object.assign(Object.assign({}, state), { isSerious: action.payload.isSerious });
        case 'SET_BUCKET_NAME':
            return Object.assign(Object.assign({}, state), { bucketName: action.payload.bucketName });
        case 'SET_DELETE_TIME_RANGE':
            return Object.assign(Object.assign({}, state), { timeRange: action.payload.timeRange });
        case 'SET_FILTER':
            if (action.payload.index >= state.filters.length) {
                return Object.assign(Object.assign({}, state), { filters: [...state.filters, action.payload.filter] });
            }
            return Object.assign(Object.assign({}, state), { filters: state.filters.map((filter, i) => i === action.payload.index ? action.payload.filter : filter) });
        case 'DELETE_FILTER':
            return Object.assign(Object.assign({}, state), { filters: state.filters.filter((_, i) => i !== action.payload.index) });
        case 'SET_DELETION_STATUS':
            return Object.assign(Object.assign({}, state), { deletionStatus: action.payload.deletionStatus });
        case 'SET_FILES':
            return Object.assign(Object.assign({}, state), { files: action.payload.files, previewStatus: types["RemoteDataState"].Done });
        case 'SET_KEYS_BY_BUCKET':
            return Object.assign(Object.assign({}, state), { keys: action.payload.keys });
        case 'SET_PREVIEW_STATUS':
            return Object.assign(Object.assign({}, state), { previewStatus: action.payload.previewStatus });
        case 'SET_VALUES_BY_KEY':
            return Object.assign(Object.assign({}, state), { values: action.payload.values });
        case 'SET_PREDICATE_DEFAULT':
            return Object.assign({}, predicates_initialState);
        default:
            return state;
    }
};

// EXTERNAL MODULE: ./src/alerting/constants/index.ts
var alerting_constants = __webpack_require__(75);

// CONCATENATED MODULE: ./src/alerting/reducers/alertBuilder.ts


const alertBuilder_initialState = () => ({
    id: null,
    activeStatus: 'active',
    status: types["RemoteDataState"].NotStarted,
    type: 'threshold',
    name: alerting_constants["d" /* DEFAULT_CHECK_NAME */],
    every: alerting_constants["c" /* DEFAULT_CHECK_EVERY */],
    offset: alerting_constants["e" /* DEFAULT_CHECK_OFFSET */],
    tags: alerting_constants["g" /* DEFAULT_CHECK_TAGS */],
    statusMessageTemplate: alerting_constants["k" /* DEFAULT_STATUS_MESSAGE */],
    timeSince: '90s',
    reportZero: alerting_constants["f" /* DEFAULT_CHECK_REPORT_ZERO */],
    staleTime: '10m',
    level: alerting_constants["h" /* DEFAULT_DEADMAN_LEVEL */],
    thresholds: [],
});
/* harmony default export */ var alertBuilder = ((state = alertBuilder_initialState(), action) => {
    switch (action.type) {
        case 'RESET_ALERT_BUILDER': {
            return alertBuilder_initialState();
        }
        case 'INIT_ALERT_BUILDER': {
            return Object.assign(Object.assign({}, alertBuilder_initialState()), { type: action.payload.type, status: types["RemoteDataState"].Done });
        }
        case 'CONVERT_CHECK_TO_CUSTOM': {
            return Object.assign(Object.assign({}, state), { type: 'custom' });
        }
        case 'SET_ALERT_BUILDER_CHECK': {
            const { id, type, name, query } = action.payload.check;
            const newState = Object.assign(Object.assign({}, alertBuilder_initialState()), { status: types["RemoteDataState"].Done, id,
                name,
                query,
                type });
            if (action.payload.check.type === 'custom') {
                return newState;
            }
            if (action.payload.check.type === 'threshold') {
                const { every, offset, statusMessageTemplate, tags, thresholds, } = action.payload.check;
                return Object.assign(Object.assign({}, newState), { every,
                    offset,
                    statusMessageTemplate,
                    tags,
                    thresholds });
            }
            if (action.payload.check.type === 'deadman') {
                const { every, level, offset, reportZero, staleTime, statusMessageTemplate, tags, timeSince, } = action.payload.check;
                return Object.assign(Object.assign({}, newState), { every,
                    level,
                    offset,
                    reportZero,
                    staleTime,
                    statusMessageTemplate,
                    tags,
                    timeSince });
            }
            throw new Error('Incorrect check type provided to SET_ALERT_BUILDER_CHECK');
        }
        case 'SET_ALERT_BUILDER_STATUS': {
            return Object.assign(Object.assign({}, state), { status: action.payload.status });
        }
        case 'SET_ALERT_BUILDER_EVERY': {
            return Object.assign(Object.assign({}, state), { every: action.payload.every });
        }
        case 'SET_ALERT_BUILDER_OFFSET': {
            return Object.assign(Object.assign({}, state), { offset: action.payload.offset });
        }
        case 'SET_ALERT_BUILDER_STALETIME': {
            return Object.assign(Object.assign({}, state), { staleTime: action.payload.staleTime });
        }
        case 'SET_ALERT_BUILDER_TIMESINCE': {
            return Object.assign(Object.assign({}, state), { timeSince: action.payload.timeSince });
        }
        case 'SET_ALERT_BUILDER_LEVEL': {
            return Object.assign(Object.assign({}, state), { level: action.payload.level });
        }
        case 'SET_ALERT_BUILDER_MESSAGE_TEMPLATE': {
            return Object.assign(Object.assign({}, state), { statusMessageTemplate: action.payload.statusMessageTemplate });
        }
        case 'EDIT_ALERT_BUILDER_TAGSET': {
            const newTags = [...state.tags];
            newTags[action.payload.index] = action.payload.tagSet;
            return Object.assign(Object.assign({}, state), { tags: newTags });
        }
        case 'REMOVE_ALERT_BUILDER_TAGSET': {
            return Object.assign(Object.assign({}, state), { tags: state.tags.filter((_, i) => i !== action.payload.index) });
        }
        case 'UPDATE_ALERT_BUILDER_THRESHOLD': {
            const thresholds = state.thresholds;
            const filteredThresholds = thresholds.filter(t => t.level !== action.payload.threshold.level);
            return Object.assign(Object.assign({}, state), { thresholds: [...filteredThresholds, action.payload.threshold] });
        }
        case 'UPDATE_ALERT_BUILDER_THRESHOLDS': {
            return Object.assign(Object.assign({}, state), { thresholds: action.payload.thresholds });
        }
        case 'REMOVE_ALERT_BUILDER_THRESHOLD': {
            const thresholds = state.thresholds;
            return Object.assign(Object.assign({}, state), { thresholds: thresholds.filter(t => t.level !== action.payload.level) });
        }
        case 'UPDATE_ALERT_BUILDER_NAME': {
            return Object.assign(Object.assign({}, state), { name: action.payload.name });
        }
        default:
            return state;
    }
});

// CONCATENATED MODULE: ./src/store/configureStore.ts






































const rootReducer = Object(redux["c" /* combineReducers */])(Object.assign(Object.assign({}, reducers), { autoRefresh: autoRefreshReducer, alertBuilder: alertBuilder, cloud: Object(redux["c" /* combineReducers */])({ limits: limitsReducer }), currentDashboard: currentDashboard, dataLoading: dataLoaders_reducers, me: reducers_me, noteEditor: reducers_notes, onboarding: onboarding_reducers, overlays: reducers_overlays, plugins: pluginsResourceReducer, predicates: predicatesReducer, ranges: reducers_ranges, resources: Object(redux["c" /* combineReducers */])({
        buckets: bucketsReducer,
        cells: cellsReducer,
        checks: checks_reducers,
        dashboards: dashboardsReducer,
        endpoints: endpoints_reducers,
        labels: labelsReducer,
        members: membersReducer,
        orgs: orgsReducer,
        rules: rules_reducers,
        scrapers: scrapersReducer,
        tasks: tasks_reducers,
        telegrafs: telegrafsReducer,
        templates: templates_reducers,
        tokens: authsReducer,
        variables: variablesReducer,
        views: views_reducers,
    }), routing: react_router_redux_lib["routerReducer"], telegrafEditor: editorReducer, telegrafEditorActivePlugins: activePluginsReducer, telegrafEditorPlugins: pluginsReducer, timeMachines: timeMachinesReducer, userSettings: userSettingsReducer, variableEditor: variableEditorReducer, VERSION: () => '' }));
const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || redux["d" /* compose */];
function configureStore(initialState, history) {
    const routingMiddleware = Object(react_router_redux_lib["routerMiddleware"])(history);
    const createPersistentStore = composeEnhancers(persistState(), Object(redux["a" /* applyMiddleware */])(redux_thunk_es["a" /* default */], routingMiddleware, resizeLayout, queryStringConfig))(redux["e" /* createStore */]);
    return createPersistentStore(rootReducer, initialState);
}

// EXTERNAL MODULE: ./src/utils/nodes.ts
var nodes = __webpack_require__(549);

// EXTERNAL MODULE: ./src/utils/basepath.ts
var basepath = __webpack_require__(239);

// EXTERNAL MODULE: ./node_modules/@influxdata/clockface/dist/index.js
var clockface_dist = __webpack_require__(3);

// CONCATENATED MODULE: ./src/shared/components/sorting_hat/SortingHat.tsx


class SortingHat_SortingHat extends react["PureComponent"] {
    render() {
        return this.props.children(this.sorted);
    }
    get sorted() {
        const { list, sortKey, direction } = this.props;
        return Object(lodash["orderBy"])(list, [sortKey], [direction]);
    }
}

// CONCATENATED MODULE: ./src/shared/components/cloud/CloudExclude.tsx


/* harmony default export */ var CloudExclude = (class extends react["PureComponent"] {
    render() {
        const { children } = this.props;
        if (!constants["e" /* CLOUD */]) {
            return children;
        }
        return null;
    }
});

// CONCATENATED MODULE: ./src/pageLayout/components/AccountNavSubItem.tsx





class AccountNavSubItem_AccountNavSubItem extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.orgs = (orgs) => {
            const { closeOrganizationsView } = this.props;
            return (react_default.a.createElement(react_default.a.Fragment, null, orgs.reduce((acc, org) => {
                acc.push(react_default.a.createElement(clockface_dist["NavMenu"].SubItem, { titleLink: className => (react_default.a.createElement("a", { className: className, href: `/orgs/${org.id}`, style: { display: 'block' } }, org.name)), key: org.id, active: false }));
                return acc;
            }, [
                react_default.a.createElement(clockface_dist["NavMenu"].SubItem, { titleLink: className => (react_default.a.createElement("div", { className: className, onClick: closeOrganizationsView }, '< Back')), active: false, key: "back-button", className: "back-button" }),
            ])));
        };
    }
    render() {
        const { orgs, isShowingOrganizations, showOrganizationsView } = this.props;
        if (isShowingOrganizations) {
            return (react_default.a.createElement(SortingHat_SortingHat, { list: orgs, sortKey: "name" }, this.orgs));
        }
        return (react_default.a.createElement(CloudExclude, { key: "feature-flag" },
            orgs.length > 1 && (react_default.a.createElement(clockface_dist["NavMenu"].SubItem, { titleLink: className => (react_default.a.createElement("div", { onClick: showOrganizationsView, className: className }, "Switch Organizations")), active: false, key: "switch-orgs" })),
            react_default.a.createElement(clockface_dist["NavMenu"].SubItem, { titleLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { to: "/orgs/new", className: className }, "Create Organization")), active: false }),
            react_default.a.createElement(clockface_dist["NavMenu"].SubItem, { titleLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { to: "/logout", className: className }, "Logout")), active: false, key: "logout" })));
    }
}
/* harmony default export */ var components_AccountNavSubItem = (AccountNavSubItem_AccountNavSubItem);

// CONCATENATED MODULE: ./src/shared/components/cloud/CloudOnly.tsx


/* harmony default export */ var CloudOnly = (class extends react["PureComponent"] {
    render() {
        const { children } = this.props;
        if (constants["e" /* CLOUD */]) {
            return children;
        }
        return null;
    }
});

// EXTERNAL MODULE: ./src/shared/utils/featureFlag.ts
var featureFlag = __webpack_require__(110);

// CONCATENATED MODULE: ./src/pageLayout/utils/index.ts

const getNavItemActivation = (keywords, location) => {
    const ignoreOrgAndOrgID = 3;
    const parentPath = location.split('/').slice(ignoreOrgAndOrgID);
    if (!parentPath.length) {
        parentPath.push(constants["x" /* HOMEPAGE_PATHNAME */]);
    }
    return keywords.some(path => parentPath.includes(path));
};

// EXTERNAL MODULE: ./src/shared/decorators/errors.tsx
var decorators_errors = __webpack_require__(11);

// EXTERNAL MODULE: ./src/organizations/selectors/index.ts
var selectors = __webpack_require__(19);

// EXTERNAL MODULE: ./src/resources/selectors/index.ts
var resources_selectors = __webpack_require__(24);

// CONCATENATED MODULE: ./src/pageLayout/containers/Nav.tsx

















let Nav_SideNav = class SideNav extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.showOrganizationsView = () => {
            this.setState({ isShowingOrganizations: true });
        };
        this.closeOrganizationsView = () => {
            this.setState({ isShowingOrganizations: false });
        };
        this.state = {
            isShowingOrganizations: false,
        };
    }
    render() {
        const { isHidden, me, params: { orgID }, orgs, orgName, } = this.props;
        if (isHidden) {
            return null;
        }
        const orgPrefix = `/orgs/${orgID}`;
        const dataExplorerLink = `${orgPrefix}/data-explorer`;
        const dashboardsLink = `${orgPrefix}/dashboards`;
        const tasksLink = `${orgPrefix}/tasks`;
        const alertingLink = `${orgPrefix}/alerting`;
        const alertHistoryLink = `${orgPrefix}/alert-history`;
        const loadDataLink = `${orgPrefix}/load-data/buckets`;
        const bucketsLink = `${orgPrefix}/load-data/buckets`;
        const telegrafsLink = `${orgPrefix}/load-data/telegrafs`;
        const scrapersLink = `${orgPrefix}/load-data/scrapers`;
        const tokensLink = `${orgPrefix}/load-data/tokens`;
        const clientLibrariesLink = `${orgPrefix}/load-data/client-libraries`;
        const settingsLink = `${orgPrefix}/settings`;
        const membersLink = `${orgPrefix}/settings/members`;
        const variablesLink = `${orgPrefix}/settings/variables`;
        const templatesLink = `${orgPrefix}/settings/templates`;
        const labelsLink = `${orgPrefix}/settings/labels`;
        const profileLink = `${orgPrefix}/settings/profile`;
        const feedbackLink = 'https://docs.google.com/forms/d/e/1FAIpQLSdGJpnIZGotN1VFJPkgZEhrt4t4f6QY1lMgMSRUnMeN3FjCKA/viewform?usp=sf_link';
        const cloudUsersLink = `${constants["k" /* CLOUD_URL */]}/${constants["m" /* CLOUD_USERS_PATH */]}`;
        return (react_default.a.createElement(clockface_dist["NavMenu"], null,
            react_default.a.createElement("div", { onMouseLeave: this.closeOrganizationsView, className: "find-me" },
                react_default.a.createElement(clockface_dist["NavMenu"].Item, { titleLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { className: className, to: orgPrefix },
                        react_default.a.createElement(CloudOnly, null, "Getting Started"),
                        react_default.a.createElement(CloudExclude, null, `${me.name} (${orgName})`))), iconLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { to: orgPrefix, className: className },
                        react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].CuboNav }))), active: getNavItemActivation([constants["x" /* HOMEPAGE_PATHNAME */], 'account'], location.pathname) },
                    react_default.a.createElement(components_AccountNavSubItem, { orgs: orgs, isShowingOrganizations: this.state.isShowingOrganizations, showOrganizationsView: this.showOrganizationsView, closeOrganizationsView: this.closeOrganizationsView }))),
            react_default.a.createElement(clockface_dist["NavMenu"].Item, { titleLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { className: className, to: dataExplorerLink }, "Data Explorer")), iconLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { to: dataExplorerLink, className: className },
                    react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].GraphLine }))), active: getNavItemActivation(['data-explorer'], location.pathname) }),
            react_default.a.createElement(clockface_dist["NavMenu"].Item, { titleLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { className: className, to: dashboardsLink, "data-testid": "nav-menu_dashboard" }, "Dashboards")), iconLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { to: dashboardsLink, className: className },
                    react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].Dashboards }))), active: getNavItemActivation(['dashboards'], location.pathname) }),
            react_default.a.createElement(clockface_dist["NavMenu"].Item, { titleLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { className: className, to: tasksLink }, "Tasks")), iconLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { to: tasksLink, className: className },
                    react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].Calendar }))), active: getNavItemActivation(['tasks'], location.pathname) }),
            react_default.a.createElement(clockface_dist["NavMenu"].Item, { titleLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { className: className, to: alertingLink }, "Monitoring & Alerting")), iconLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { to: alertingLink, className: className },
                    react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].Bell }))), active: getNavItemActivation(['alerting'], location.pathname) },
                react_default.a.createElement(clockface_dist["NavMenu"].SubItem, { titleLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { to: alertHistoryLink, className: className }, "History")), active: getNavItemActivation(['alert-history'], location.pathname), key: "alert-history" })),
            react_default.a.createElement(clockface_dist["NavMenu"].Item, { titleLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { className: className, to: loadDataLink }, "Load Data")), iconLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { to: loadDataLink, className: className },
                    react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].DisksNav }))), active: getNavItemActivation(['load-data'], location.pathname) },
                react_default.a.createElement(clockface_dist["NavMenu"].SubItem, { titleLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { to: bucketsLink, className: className }, "Buckets")), active: getNavItemActivation(['buckets'], location.pathname), key: "buckets" }),
                react_default.a.createElement(clockface_dist["NavMenu"].SubItem, { titleLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { to: telegrafsLink, className: className }, "Telegraf")), active: getNavItemActivation(['telegrafs'], location.pathname), key: "telegrafs" }),
                react_default.a.createElement(CloudExclude, null,
                    react_default.a.createElement(clockface_dist["NavMenu"].SubItem, { titleLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { to: scrapersLink, className: className }, "Scrapers")), active: getNavItemActivation(['scrapers'], location.pathname), key: "scrapers" })),
                react_default.a.createElement(clockface_dist["NavMenu"].SubItem, { titleLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { to: tokensLink, className: className }, "Tokens")), active: getNavItemActivation(['tokens'], location.pathname), key: "tokens" }),
                react_default.a.createElement(clockface_dist["NavMenu"].SubItem, { titleLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { to: clientLibrariesLink, className: className }, "Client Libraries")), active: getNavItemActivation(['client-libraries'], location.pathname), key: "client-libraries" })),
            react_default.a.createElement(featureFlag["a" /* FeatureFlag */], { name: "multiUser" },
                react_default.a.createElement(CloudOnly, null,
                    react_default.a.createElement(clockface_dist["NavMenu"].Item, { titleLink: className => (react_default.a.createElement("a", { className: className, href: cloudUsersLink }, "Team Members")), iconLink: className => (react_default.a.createElement("a", { href: cloudUsersLink, className: className },
                            react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].UsersTrio }))), active: getNavItemActivation(['users'], location.pathname) }))),
            react_default.a.createElement(clockface_dist["NavMenu"].Item, { titleLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { className: className, to: settingsLink }, "Settings")), iconLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { to: settingsLink, className: className },
                    react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].WrenchNav }))), active: getNavItemActivation(['settings'], location.pathname) },
                react_default.a.createElement(CloudExclude, null,
                    react_default.a.createElement(clockface_dist["NavMenu"].SubItem, { titleLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { to: membersLink, className: className }, "Members")), active: getNavItemActivation(['members'], location.pathname), key: "members" })),
                react_default.a.createElement(clockface_dist["NavMenu"].SubItem, { titleLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { to: variablesLink, className: className }, "Variables")), active: getNavItemActivation(['variables'], location.pathname), key: "variables" }),
                react_default.a.createElement(clockface_dist["NavMenu"].SubItem, { titleLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { to: templatesLink, className: className }, "Templates")), active: getNavItemActivation(['templates'], location.pathname), key: "templates" }),
                react_default.a.createElement(clockface_dist["NavMenu"].SubItem, { titleLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { to: labelsLink, className: className }, "Labels")), active: getNavItemActivation(['labels'], location.pathname), key: "labels" }),
                react_default.a.createElement(clockface_dist["NavMenu"].SubItem, { titleLink: className => (react_default.a.createElement(react_router_es["b" /* Link */], { to: profileLink, className: className }, "Profile")), active: getNavItemActivation(['profile'], location.pathname), key: "profile" })),
            react_default.a.createElement(clockface_dist["NavMenu"].Item, { titleLink: className => (react_default.a.createElement("a", { className: className, href: feedbackLink, target: "_blank" }, "Feedback")), iconLink: className => (react_default.a.createElement("a", { href: feedbackLink, className: className, target: "_blank" },
                    react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].NavChat }))), active: getNavItemActivation(['feedback'], location.pathname) })));
    }
};
Nav_SideNav = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], Nav_SideNav);
const mstp = (state) => {
    const isHidden = state.app.ephemeral.inPresentationMode;
    const orgs = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Orgs);
    const org = Object(selectors["a" /* getOrg */])(state);
    const { me } = state;
    return { isHidden, me, orgs, orgName: Object(lodash["get"])(org, 'name', '') };
};
/* harmony default export */ var Nav = (Object(es["b" /* connect */])(mstp)(Object(react_router_es["g" /* withRouter */])(Nav_SideNav)));

// CONCATENATED MODULE: ./src/pageLayout/index.ts

/* harmony default export */ var pageLayout = (Nav);

// CONCATENATED MODULE: ./src/portals/TooltipPortal.tsx

const TOOLTIP_PORTAL_ID = 'tooltip-portal';
const TooltipPortal = () => {
    return react_default.a.createElement("div", { id: TOOLTIP_PORTAL_ID });
};
/* harmony default export */ var portals_TooltipPortal = (TooltipPortal);

// CONCATENATED MODULE: ./src/portals/NotesPortal.tsx

const NOTES_PORTAL_ID = 'notes-portal';
function NotesPortal() {
    return react_default.a.createElement("div", { id: NOTES_PORTAL_ID });
}

// EXTERNAL MODULE: ./node_modules/classnames/index.js
var classnames = __webpack_require__(34);
var classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);

// CONCATENATED MODULE: ./src/shared/components/notifications/Notification.tsx








let Notification_Notification = class Notification extends react["Component"] {
    constructor(props) {
        super(props);
        this.updateHeight = () => {
            if (this.notificationRef) {
                const { height } = this.notificationRef.getBoundingClientRect();
                this.setState({ height });
            }
        };
        this.handleDismiss = () => {
            const { notification: { id }, dismissNotification, } = this.props;
            this.setState({ dismissed: true });
            this.deletionTimer = window.setTimeout(() => dismissNotification(id), constants["D" /* NOTIFICATION_TRANSITION */]);
        };
        this.handleNotificationRef = (ref) => {
            this.notificationRef = ref;
            this.updateHeight();
        };
        this.state = {
            opacity: 1,
            height: 0,
            dismissed: false,
        };
    }
    componentDidMount() {
        const { notification: { duration }, } = this.props;
        this.updateHeight();
        if (duration >= 0) {
            this.dismissalTimer = window.setTimeout(this.handleDismiss, duration);
        }
    }
    componentWillUnmount() {
        clearTimeout(this.dismissalTimer);
        clearTimeout(this.deletionTimer);
    }
    render() {
        const { notification: { message, icon }, } = this.props;
        return (react_default.a.createElement("div", { className: this.containerClassname, style: this.notificationStyle },
            react_default.a.createElement("div", { className: this.notificationClassname, ref: this.handleNotificationRef, "data-testid": this.dataTestID },
                react_default.a.createElement("span", { className: `icon ${icon}` }),
                react_default.a.createElement("div", { className: "notification-message" }, message),
                react_default.a.createElement("button", { className: "notification-close", onClick: this.handleDismiss }))));
    }
    get dataTestID() {
        const { style } = this.props.notification;
        return `notification-${style}`;
    }
    get notificationClassname() {
        const { notification: { style }, } = this.props;
        return `notification notification-${style}`;
    }
    get containerClassname() {
        const { height, dismissed } = this.state;
        return classnames_default()('notification-container', {
            show: !!height,
            'notification-dismissed': dismissed,
        });
    }
    get notificationStyle() {
        return { height: '100%' };
    }
};
Notification_Notification = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], Notification_Notification);
const mapDispatchToProps = dispatch => ({
    dismissNotification: Object(redux["b" /* bindActionCreators */])(actions_notifications["b" /* dismissNotification */], dispatch),
});
/* harmony default export */ var notifications_Notification = (Object(es["b" /* connect */])(null, mapDispatchToProps)(Notification_Notification));

// CONCATENATED MODULE: ./src/shared/components/notifications/Notifications.tsx



class Notifications_Notifications extends react["PureComponent"] {
    render() {
        const { notifications } = this.props;
        return (react_default.a.createElement("div", { className: this.className }, notifications.map(n => (react_default.a.createElement(notifications_Notification, { key: n.id, notification: n })))));
    }
    get className() {
        const { inPresentationMode } = this.props;
        if (inPresentationMode) {
            return 'notification-center__presentation-mode';
        }
        return 'notification-center';
    }
}
Notifications_Notifications.defaultProps = {
    inPresentationMode: false,
    notifications: [],
};
const mapStateToProps = ({ notifications, app: { ephemeral: { inPresentationMode }, }, }) => ({
    notifications,
    inPresentationMode,
});
/* harmony default export */ var notifications_Notifications = (Object(es["b" /* connect */])(mapStateToProps, null)(Notifications_Notifications));

// EXTERNAL MODULE: ./node_modules/react-codemirror2/index.js
var react_codemirror2 = __webpack_require__(407);

// CONCATENATED MODULE: ./src/dashboards/utils/notes.ts
const humanizeNote = (text) => {
    return text.replace(/&gt;/g, '>').replace(/&#39;/g, "'");
};

// CONCATENATED MODULE: ./src/dashboards/components/NoteEditorText.tsx



const OPTIONS = {
    mode: 'markdown',
    theme: 'markdown',
    tabIndex: 1,
    readonly: false,
    lineNumbers: false,
    autoRefresh: true,
    completeSingle: false,
    lineWrapping: true,
    placeholder: 'You can use Markdown syntax to format your note',
};
const noOp = () => { };
class NoteEditorText_NoteEditorText extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleMount = (instance) => {
            instance.focus();
            this.editor = instance;
        };
        this.handleChange = (_, __, note) => {
            const { onChangeNote } = this.props;
            onChangeNote(note);
        };
        this.handleScroll = (__, scrollInfo) => {
            const { onScroll } = this.props;
            onScroll(scrollInfo.top);
        };
    }
    componentDidUpdate() {
        const currentScrollTop = this.editor.getScrollInfo().top;
        if (this.props.scrollTop !== currentScrollTop) {
            this.editor.scrollTo(0, this.props.scrollTop);
        }
    }
    render() {
        const { note } = this.props;
        return (react_default.a.createElement(react_codemirror2["Controlled"], { autoCursor: true, value: humanizeNote(note), options: OPTIONS, onBeforeChange: this.handleChange, onTouchStart: noOp, editorDidMount: this.handleMount, onScroll: this.handleScroll }));
    }
}
/* harmony default export */ var components_NoteEditorText = (NoteEditorText_NoteEditorText);

// EXTERNAL MODULE: ./node_modules/react-markdown/lib/react-markdown.js
var react_markdown = __webpack_require__(408);
var react_markdown_default = /*#__PURE__*/__webpack_require__.n(react_markdown);

// EXTERNAL MODULE: ./src/shared/components/fancy_scrollbar/FancyScrollbar.tsx
var FancyScrollbar = __webpack_require__(67);

// CONCATENATED MODULE: ./src/dashboards/components/NoteEditorPreview.tsx



const NoteEditorPreview = props => {
    return (react_default.a.createElement("div", { className: "note-editor--preview" },
        react_default.a.createElement(FancyScrollbar["a" /* default */], { className: "note-editor--preview-scroll", scrollTop: props.scrollTop, setScrollTop: props.onScroll },
            react_default.a.createElement("div", { className: "note-editor--markdown-container" },
                react_default.a.createElement(react_markdown_default.a, { source: props.note, escapeHtml: true, className: "markdown-format" })))));
};
/* harmony default export */ var components_NoteEditorPreview = (NoteEditorPreview);

// EXTERNAL MODULE: ./src/cells/actions/thunks.ts + 1 modules
var thunks = __webpack_require__(277);

// EXTERNAL MODULE: ./src/views/actions/thunks.ts
var actions_thunks = __webpack_require__(415);

// CONCATENATED MODULE: ./src/dashboards/actions/notes.ts






const closeNoteEditor = () => ({
    type: 'CLOSE_NOTE_EDITOR',
});
const setIsPreviewing = (isPreviewing) => ({
    type: 'SET_IS_PREVIEWING',
    payload: { isPreviewing },
});
const toggleShowNoteWhenEmpty = () => ({
    type: 'TOGGLE_SHOW_NOTE_WHEN_EMPTY',
});
const setNote = (note) => ({
    type: 'SET_NOTE',
    payload: { note },
});
const createNoteCell = (dashboardID) => (dispatch, getState) => {
    const dashboard = Object(resources_selectors["b" /* getByID */])(getState(), types["ResourceType"].Dashboards, dashboardID);
    if (!dashboard) {
        throw new Error(`could not find dashboard with id "${dashboardID}"`);
    }
    const { note } = getState().noteEditor;
    const view = Object(helpers["a" /* createView */])('markdown');
    view.properties.note = note;
    return dispatch(Object(thunks["a" /* createCellWithView */])(dashboard.id, view));
};
const resetNoteState = () => ({
    type: 'RESET_NOTE_STATE',
});
const setNoteState = (noteState) => ({
    type: 'SET_NOTE_STATE',
    payload: noteState,
});
const loadNote = (id) => (dispatch, getState) => {
    const state = getState();
    const currentViewState = Object(resources_selectors["b" /* getByID */])(state, types["ResourceType"].Views, id);
    if (!currentViewState) {
        return;
    }
    const view = currentViewState;
    const note = Object(lodash["get"])(view, 'properties.note', '');
    const showNoteWhenEmpty = Object(lodash["get"])(view, 'properties.showNoteWhenEmpty', false);
    const initialState = {
        viewID: view.id,
        note,
        showNoteWhenEmpty,
        mode: types["NoteEditorMode"].Editing,
    };
    dispatch(setNoteState(initialState));
};
const updateViewNote = (id) => (dispatch, getState) => {
    const state = getState();
    const { note, showNoteWhenEmpty } = state.noteEditor;
    const view = Object(resources_selectors["b" /* getByID */])(state, types["ResourceType"].Views, id);
    if (view.properties.type === 'check') {
        throw new Error(`view type "${view.properties.type}" does not support notes`);
    }
    const updatedView = Object.assign(Object.assign({}, view), { properties: Object.assign(Object.assign({}, view.properties), { note, showNoteWhenEmpty }) });
    return dispatch(Object(actions_thunks["b" /* updateView */])(view.dashboardID, updatedView));
};

// CONCATENATED MODULE: ./src/dashboards/components/NoteEditor.tsx






class NoteEditor_NoteEditor extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = { scrollTop: 0 };
        this.handleEditorScroll = (scrollTop) => {
            this.setState({ scrollTop });
        };
        this.handlePreviewScroll = (e) => {
            const target = e.target;
            const { scrollTop } = target;
            this.setState({ scrollTop });
        };
    }
    render() {
        const { note, onSetNote } = this.props;
        const { scrollTop } = this.state;
        return (react_default.a.createElement("div", { className: "note-editor" },
            react_default.a.createElement("div", { className: "note-editor--controls" },
                react_default.a.createElement("div", { className: "note-editor--helper" },
                    "Need help using Markdown? Check out",
                    ' ',
                    react_default.a.createElement("a", { href: "https://www.markdownguide.org/cheat-sheet", target: "_blank" }, "this handy guide")),
                this.visibilityToggle),
            react_default.a.createElement("div", { className: "note-editor--body" },
                react_default.a.createElement(components_NoteEditorText, { note: note, onChangeNote: onSetNote, onScroll: this.handleEditorScroll, scrollTop: scrollTop }),
                react_default.a.createElement(components_NoteEditorPreview, { note: note, scrollTop: scrollTop, onScroll: this.handlePreviewScroll }))));
    }
    get visibilityToggle() {
        const { showNoteWhenEmpty, onToggleShowNoteWhenEmpty } = this.props;
        return (react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, justifyContent: clockface_dist["JustifyContent"].FlexEnd },
            react_default.a.createElement(clockface_dist["InputLabel"], null, "Show note when query returns no data"),
            react_default.a.createElement(clockface_dist["SlideToggle"], { active: showNoteWhenEmpty, size: clockface_dist["ComponentSize"].ExtraSmall, onChange: onToggleShowNoteWhenEmpty })));
    }
}
const NoteEditor_mstp = (state) => {
    const { note, isPreviewing, showNoteWhenEmpty } = state.noteEditor;
    return { note, isPreviewing, showNoteWhenEmpty };
};
const mdtp = {
    onSetIsPreviewing: setIsPreviewing,
    onToggleShowNoteWhenEmpty: toggleShowNoteWhenEmpty,
    onSetNote: setNote,
};
/* harmony default export */ var components_NoteEditor = (Object(es["b" /* connect */])(NoteEditor_mstp, mdtp)(NoteEditor_NoteEditor));

// CONCATENATED MODULE: ./src/dashboards/components/NoteEditorOverlay.tsx










class NoteEditorOverlay_NoteEditorOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            savingStatus: types["RemoteDataState"].NotStarted,
        };
        this.handleDismiss = () => {
            const { onClose } = this.props;
            onClose();
        };
        this.handleSave = () => {
            const { cellID, dashboardID, onCreateNoteCell, onUpdateViewNote, onNotify, } = this.props;
            this.setState({ savingStatus: types["RemoteDataState"].Loading });
            try {
                if (cellID) {
                    onUpdateViewNote(cellID);
                }
                else {
                    onCreateNoteCell(dashboardID);
                }
                this.handleDismiss();
            }
            catch (error) {
                onNotify(Object(copy_notifications["jc" /* savingNoteFailed */])(error.message));
                console.error(error);
                this.setState({ savingStatus: types["RemoteDataState"].Error });
            }
        };
    }
    componentDidMount() {
        const { cellID } = this.props;
        if (cellID) {
            this.props.loadNote(cellID);
        }
        else {
            this.props.resetNote();
        }
    }
    componentDidUpdate(prevProps) {
        const { cellID, viewsStatus } = this.props;
        if (prevProps.viewsStatus !== types["RemoteDataState"].Done &&
            viewsStatus === types["RemoteDataState"].Done) {
            if (cellID) {
                this.props.loadNote(cellID);
            }
            else {
                this.props.resetNote();
            }
        }
    }
    render() {
        const { dashboardID } = this.props;
        if (!dashboardID) {
            return (react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 360 },
                react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Oh no!", onDismiss: this.handleDismiss }),
                react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                    react_default.a.createElement("h5", null,
                        "This page does not allow creation or editing of notes, better head",
                        ' ',
                        "to a dashboard to do that."))));
        }
        return (react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 900 },
            react_default.a.createElement(clockface_dist["Overlay"].Header, { title: this.overlayTitle, onDismiss: this.handleDismiss }),
            react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                react_default.a.createElement(clockface_dist["SpinnerContainer"], { loading: this.props.viewsStatus, spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null) },
                    react_default.a.createElement(components_NoteEditor, null))),
            react_default.a.createElement(clockface_dist["Overlay"].Footer, null,
                react_default.a.createElement(clockface_dist["Button"], { text: "Cancel", onClick: this.handleDismiss }),
                react_default.a.createElement(clockface_dist["Button"], { text: "Save", color: clockface_dist["ComponentColor"].Success, status: this.saveButtonStatus, onClick: this.handleSave }))));
    }
    get overlayTitle() {
        const { mode } = this.props;
        let overlayTitle;
        if (mode === types["NoteEditorMode"].Editing) {
            overlayTitle = 'Edit Note';
        }
        else {
            overlayTitle = 'Add Note';
        }
        return overlayTitle;
    }
    get saveButtonStatus() {
        const { savingStatus } = this.state;
        if (savingStatus === types["RemoteDataState"].Loading) {
            return clockface_dist["ComponentStatus"].Loading;
        }
        return clockface_dist["ComponentStatus"].Default;
    }
}
const NoteEditorOverlay_mstp = ({ noteEditor, resources, overlays }) => {
    const { params } = overlays;
    const { mode } = noteEditor;
    const { status } = resources.views;
    const cellID = Object(lodash["get"])(params, 'cellID', undefined);
    const dashboardID = Object(lodash["get"])(params, 'dashboardID', undefined);
    return { mode, viewsStatus: status, cellID, dashboardID };
};
const NoteEditorOverlay_mdtp = {
    onNotify: actions_notifications["c" /* notify */],
    onCreateNoteCell: createNoteCell,
    onUpdateViewNote: updateViewNote,
    resetNote: resetNoteState,
    loadNote: loadNote,
};
/* harmony default export */ var components_NoteEditorOverlay = (Object(es["b" /* connect */])(NoteEditorOverlay_mstp, NoteEditorOverlay_mdtp)(NoteEditorOverlay_NoteEditorOverlay));

// EXTERNAL MODULE: ./src/authorizations/actions/thunks.ts
var authorizations_actions_thunks = __webpack_require__(313);

// CONCATENATED MODULE: ./src/authorizations/utils/permissions.ts
function assertNever(x) {
    throw new Error('Unexpected object: ' + x);
}
const allPermissionTypes = [
    'authorizations',
    'buckets',
    'checks',
    'dashboards',
    'documents',
    'labels',
    'notificationRules',
    'notificationEndpoints',
    'orgs',
    'secrets',
    'scrapers',
    'sources',
    'tasks',
    'telegrafs',
    'users',
    'variables',
    'views',
];
const ensureT = (orgID) => (t) => {
    switch (t) {
        case 'authorizations':
        case 'buckets':
        case 'checks':
        case 'dashboards':
        case 'documents':
        case 'labels':
        case 'notificationRules':
        case 'notificationEndpoints':
        case 'secrets':
        case 'scrapers':
        case 'sources':
        case 'tasks':
        case 'telegrafs':
        case 'users':
        case 'variables':
        case 'views':
            return [
                {
                    action: 'read',
                    resource: { type: t, orgID },
                },
                {
                    action: 'write',
                    resource: { type: t, orgID },
                },
            ];
        case 'orgs':
            return [
                {
                    action: 'read',
                    resource: { type: t, id: orgID },
                },
            ];
        default:
            return assertNever(t);
    }
};
const allAccessPermissions = (orgID) => {
    const withOrgID = ensureT(orgID);
    return allPermissionTypes.flatMap(withOrgID);
};
const specificBucketsPermissions = (buckets, permission) => {
    return buckets.map(b => {
        return {
            action: permission,
            resource: {
                type: 'buckets',
                orgID: b.orgID,
                id: b.id,
            },
        };
    });
};
const allBucketsPermissions = (orgID, permission) => {
    return [
        {
            action: permission,
            resource: { type: 'buckets', orgID },
        },
    ];
};
const selectBucket = (bucketName, selectedBuckets) => {
    const isSelected = selectedBuckets.find(n => n === bucketName);
    if (isSelected) {
        return selectedBuckets.filter(n => n !== bucketName);
    }
    return [...selectedBuckets, bucketName];
};
var BucketTab;
(function (BucketTab) {
    BucketTab["AllBuckets"] = "All Buckets";
    BucketTab["Scoped"] = "Scoped";
})(BucketTab || (BucketTab = {}));

// CONCATENATED MODULE: ./src/authorizations/components/AllAccessTokenOverlay.tsx








let AllAccessTokenOverlay_AllAccessTokenOverlay = class AllAccessTokenOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = { description: '' };
        this.handleSave = () => {
            const { orgID, onCreateAuthorization } = this.props;
            const token = {
                orgID,
                description: this.state.description,
                permissions: allAccessPermissions(orgID),
            };
            onCreateAuthorization(token);
            this.handleDismiss();
        };
        this.handleInputChange = (e) => {
            const { value } = e.target;
            this.setState({ description: value });
        };
        this.handleDismiss = () => {
            this.props.onClose();
        };
    }
    render() {
        const { description } = this.state;
        return (react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 500 },
            react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Generate All Access Token", onDismiss: this.handleDismiss }),
            react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                react_default.a.createElement(clockface_dist["Form"], { onSubmit: this.handleSave },
                    react_default.a.createElement(clockface_dist["FlexBox"], { alignItems: clockface_dist["AlignItems"].Center, direction: clockface_dist["FlexDirection"].Column, margin: clockface_dist["ComponentSize"].Large },
                        react_default.a.createElement(clockface_dist["Alert"], { icon: clockface_dist["IconFont"].AlertTriangle, color: clockface_dist["ComponentColor"].Warning }, "This token will be able to create, update, delete, read, and write to anything in this organization"),
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Description" },
                            react_default.a.createElement(clockface_dist["Input"], { placeholder: "Describe this new token", value: description, onChange: this.handleInputChange })),
                        react_default.a.createElement(clockface_dist["Form"].Footer, null,
                            react_default.a.createElement(clockface_dist["Button"], { text: "Cancel", icon: clockface_dist["IconFont"].Remove, onClick: this.handleDismiss }),
                            react_default.a.createElement(clockface_dist["Button"], { text: "Save", icon: clockface_dist["IconFont"].Checkmark, color: clockface_dist["ComponentColor"].Success, type: clockface_dist["ButtonType"].Submit })))))));
    }
};
AllAccessTokenOverlay_AllAccessTokenOverlay = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], AllAccessTokenOverlay_AllAccessTokenOverlay);
const AllAccessTokenOverlay_mstp = (state) => {
    return {
        orgID: Object(selectors["a" /* getOrg */])(state).id,
    };
};
const AllAccessTokenOverlay_mdtp = {
    onCreateAuthorization: authorizations_actions_thunks["a" /* createAuthorization */],
};
/* harmony default export */ var components_AllAccessTokenOverlay = (Object(es["b" /* connect */])(AllAccessTokenOverlay_mstp, AllAccessTokenOverlay_mdtp)(AllAccessTokenOverlay_AllAccessTokenOverlay));

// CONCATENATED MODULE: ./src/shared/components/selectorList/SelectorListHeader.tsx

class SelectorListHeader_SelectorListHeader extends react["PureComponent"] {
    render() {
        const { testID, children } = this.props;
        return (react_default.a.createElement("div", { className: "selector-list--header", "data-testid": testID },
            this.title,
            children,
            this.deleteButton));
    }
    get title() {
        const { onDragStart, title } = this.props;
        if (onDragStart) {
            return (react_default.a.createElement("div", { className: "selector-list--draggable", onDragStart: onDragStart },
                react_default.a.createElement("div", { className: "selector-list--hamburger" }),
                react_default.a.createElement("h2", { className: "selector-list--title" }, title)));
        }
        return react_default.a.createElement("h2", { className: "selector-list--title" }, title);
    }
    get deleteButton() {
        const { onDelete } = this.props;
        if (onDelete) {
            return react_default.a.createElement("div", { className: "selector-list--delete", onClick: onDelete });
        }
    }
}
SelectorListHeader_SelectorListHeader.defaultProps = {
    testID: 'selector-list--header',
};

// CONCATENATED MODULE: ./src/shared/components/selectorList/SelectorListMenu.tsx

class SelectorListMenu_SelectorListMenu extends react["PureComponent"] {
    render() {
        const { testID, children } = this.props;
        return (react_default.a.createElement("div", { className: "selector-list--menu", "data-testid": testID }, children));
    }
}
SelectorListMenu_SelectorListMenu.defaultProps = {
    testID: 'selector-list--menu',
};

// CONCATENATED MODULE: ./src/shared/components/selectorList/SelectorListBody.tsx


class SelectorListBody_SelectorListBody extends react["PureComponent"] {
    render() {
        const { scrollable, testID } = this.props;
        if (scrollable) {
            return (react_default.a.createElement(clockface_dist["DapperScrollbars"], { className: "selector-list--body", style: { maxWidth: '100%', maxHeight: '100%' }, testID: testID }, this.children));
        }
        return (react_default.a.createElement("div", { className: "selector-list--body", "data-testid": testID }, this.children));
    }
    get children() {
        const { addPadding, children } = this.props;
        if (addPadding) {
            return react_default.a.createElement("div", { className: "selector-list--contents" }, children);
        }
        return children;
    }
}
SelectorListBody_SelectorListBody.defaultProps = {
    scrollable: true,
    addPadding: true,
    testID: 'selector-list--body',
};

// CONCATENATED MODULE: ./src/shared/components/selectorList/SelectorListEmpty.tsx

class SelectorListEmpty_SelectorListEmpty extends react["PureComponent"] {
    render() {
        const { testID, children } = this.props;
        return (react_default.a.createElement("div", { className: "selector-list--body selector-list--empty", "data-testid": testID }, children));
    }
}
SelectorListEmpty_SelectorListEmpty.defaultProps = {
    testID: 'selector-list--empty',
};

// CONCATENATED MODULE: ./src/shared/components/selectorList/SelectorList.tsx






class SelectorList_SelectorList extends react["PureComponent"] {
    render() {
        const { children, testID, className } = this.props;
        const classname = classnames_default()('selector-list', { [`${className}`]: className });
        return (react_default.a.createElement("div", { className: classname, "data-testid": testID }, children));
    }
}
SelectorList_SelectorList.Header = SelectorListHeader_SelectorListHeader;
SelectorList_SelectorList.Menu = SelectorListMenu_SelectorListMenu;
SelectorList_SelectorList.Body = SelectorListBody_SelectorListBody;
SelectorList_SelectorList.Empty = SelectorListEmpty_SelectorListEmpty;
SelectorList_SelectorList.defaultProps = {
    testID: 'selector-list',
};

// CONCATENATED MODULE: ./src/timeMachine/components/builderCard/BuilderCardHeader.tsx

class BuilderCardHeader_BuilderCardHeader extends react["PureComponent"] {
    render() {
        const { testID, children } = this.props;
        return (react_default.a.createElement("div", { className: "builder-card--header", "data-testid": testID },
            this.title,
            children,
            this.deleteButton));
    }
    get title() {
        const { onDragStart, title } = this.props;
        if (onDragStart) {
            return (react_default.a.createElement("div", { className: "builder-card--draggable", onDragStart: onDragStart },
                react_default.a.createElement("div", { className: "builder-card--hamburger" }),
                react_default.a.createElement("h2", { className: "builder-card--title" }, title)));
        }
        return react_default.a.createElement("h2", { className: "builder-card--title" }, title);
    }
    get deleteButton() {
        const { onDelete } = this.props;
        if (onDelete) {
            return react_default.a.createElement("div", { className: "builder-card--delete", onClick: onDelete });
        }
    }
}
BuilderCardHeader_BuilderCardHeader.defaultProps = {
    testID: 'builder-card--header',
};

// CONCATENATED MODULE: ./src/timeMachine/components/builderCard/BuilderCardDropdownHeader.tsx


const emptyFunction = () => { };
class BuilderCardDropdownHeader_BuilderCardDropdownHeader extends react["PureComponent"] {
    render() {
        const { children, options, onSelect, selectedOption, testID } = this.props;
        return (react_default.a.createElement("div", { className: "builder-card--header", "data-testid": testID },
            react_default.a.createElement(clockface_dist["SelectDropdown"], { options: options, selectedOption: selectedOption, testID: "select-option-dropdown", onSelect: onSelect ? onSelect : emptyFunction }),
            children,
            this.deleteButton));
    }
    get deleteButton() {
        const { onDelete } = this.props;
        if (onDelete) {
            return react_default.a.createElement("div", { className: "builder-card--delete", onClick: onDelete });
        }
    }
}
BuilderCardDropdownHeader_BuilderCardDropdownHeader.defaultProps = {
    testID: 'builder-card--header',
};

// CONCATENATED MODULE: ./src/timeMachine/components/builderCard/BuilderCardMenu.tsx

class BuilderCardMenu_BuilderCardMenu extends react["PureComponent"] {
    render() {
        const { testID, children } = this.props;
        return (react_default.a.createElement("div", { className: "builder-card--menu", "data-testid": testID }, children));
    }
}
BuilderCardMenu_BuilderCardMenu.defaultProps = {
    testID: 'builder-card--menu',
};

// CONCATENATED MODULE: ./src/timeMachine/components/builderCard/BuilderCardBody.tsx


class BuilderCardBody_BuilderCardBody extends react["PureComponent"] {
    render() {
        const { scrollable, testID, autoHideScrollbars } = this.props;
        if (scrollable) {
            return (react_default.a.createElement(clockface_dist["DapperScrollbars"], { className: "builder-card--body", style: { maxWidth: '100%', maxHeight: '100%' }, testID: testID, autoHide: autoHideScrollbars }, this.children));
        }
        return (react_default.a.createElement("div", { className: "builder-card--body", "data-testid": testID }, this.children));
    }
    get children() {
        const { addPadding, children } = this.props;
        if (addPadding) {
            return react_default.a.createElement("div", { className: "builder-card--contents" }, children);
        }
        return children;
    }
}
BuilderCardBody_BuilderCardBody.defaultProps = {
    scrollable: true,
    addPadding: true,
    testID: 'builder-card--body',
    autoHideScrollbars: false,
};

// CONCATENATED MODULE: ./src/timeMachine/components/builderCard/BuilderCardEmpty.tsx

class BuilderCardEmpty_BuilderCardEmpty extends react["PureComponent"] {
    render() {
        const { testID, children } = this.props;
        return (react_default.a.createElement("div", { className: "builder-card--body builder-card--empty", "data-testid": testID }, children));
    }
}
BuilderCardEmpty_BuilderCardEmpty.defaultProps = {
    testID: 'builder-card--empty',
};

// CONCATENATED MODULE: ./src/timeMachine/components/builderCard/BuilderCard.tsx







class BuilderCard_BuilderCard extends react["PureComponent"] {
    render() {
        const { children, testID, className, widthPixels } = this.props;
        const classname = classnames_default()('builder-card', { [`${className}`]: className });
        const style = { flex: `0 0 ${widthPixels}px` };
        return (react_default.a.createElement("div", { className: classname, "data-testid": testID, style: style }, children));
    }
}
BuilderCard_BuilderCard.Header = BuilderCardHeader_BuilderCardHeader;
BuilderCard_BuilderCard.DropdownHeader = BuilderCardDropdownHeader_BuilderCardDropdownHeader;
BuilderCard_BuilderCard.Menu = BuilderCardMenu_BuilderCardMenu;
BuilderCard_BuilderCard.Body = BuilderCardBody_BuilderCardBody;
BuilderCard_BuilderCard.Empty = BuilderCardEmpty_BuilderCardEmpty;
BuilderCard_BuilderCard.defaultProps = {
    testID: 'builder-card',
    widthPixels: 228,
};

// CONCATENATED MODULE: ./src/timeMachine/components/SelectorList.tsx



const components_SelectorList_SelectorList = props => {
    const { items, selectedItems, onSelectItem, multiSelect } = props;
    return (react_default.a.createElement(BuilderCard_BuilderCard.Body, { addPadding: false, autoHideScrollbars: true }, items.map(item => {
        const className = classnames_default()('selector-list--item', {
            selected: selectedItems.includes(item),
            'selector-list--checkbox': multiSelect,
        });
        const title = selectedItems.includes(item)
            ? 'Click to remove this filter'
            : `Click to filter by ${item}`;
        return (react_default.a.createElement("div", { className: className, "data-testid": `selector-list ${item}`, key: item, onClick: () => onSelectItem(item), title: title }, item));
    })));
};
/* harmony default export */ var components_SelectorList = (components_SelectorList_SelectorList);

// CONCATENATED MODULE: ./src/shared/components/Filter.tsx


const INEXACT_PATH = /\w+\[\]/g;
const EMPTY_ARRAY_BRACKETS = /\[\]?\./;
class Filter_FilterList extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.createIndex = (terms) => {
            return Object(lodash["flatMap"])(terms, this.extractSuffixes).sort();
        };
        this.checkIndex = (sortedSuffixes, searchTerm) => {
            const index = Object(lodash["sortedIndex"])(sortedSuffixes, searchTerm);
            const nearestSuffix = sortedSuffixes[index];
            if (!!nearestSuffix && nearestSuffix.includes(searchTerm)) {
                return true;
            }
            return false;
        };
        this.extractSuffixes = (term) => {
            const suffixes = new Array(term.length);
            const lowerTerm = term.toLocaleLowerCase();
            for (let i = 0; i < suffixes.length; i++) {
                suffixes[i] = lowerTerm.slice(i);
            }
            return suffixes;
        };
    }
    render() {
        return this.props.children(this.sorted);
    }
    get sorted() {
        return Object(lodash["sortBy"])(this.filtered, [
            (item) => {
                const value = Object(lodash["get"])(item, this.props.sortByKey);
                if (!!value && Object(lodash["isString"])(value)) {
                    return value.toLocaleLowerCase();
                }
                return value;
            },
        ]);
    }
    get filtered() {
        const { list, labels, searchKeys } = this.props;
        const { formattedSearchTerm } = this;
        if (Object(lodash["isEmpty"])(formattedSearchTerm)) {
            return list;
        }
        const filtered = list.filter(listItem => {
            const item = Object.assign(Object.assign({}, listItem), { labels: Object(lodash["get"])(listItem, 'labels', []).map(labelID => labels[labelID]) });
            const isInList = searchKeys.some(key => {
                const value = this.getKey(item, key);
                const isStringArray = this.isStringArray(value);
                if (!isStringArray && Object(lodash["isObject"])(value)) {
                    throw new Error(`The value at key "${key}" is an object.  Take a look at "searchKeys" and
             make sure you're indexing onto a primitive value`);
                }
                if (isStringArray) {
                    const searchIndex = this.createIndex(value);
                    return this.checkIndex(searchIndex, formattedSearchTerm);
                }
                return String(value)
                    .toLocaleLowerCase()
                    .includes(formattedSearchTerm);
            });
            return isInList;
        });
        return filtered;
    }
    isStringArray(value) {
        if (!Object(lodash["isArray"])(value)) {
            return false;
        }
        if (Object(lodash["isEmpty"])(value) || Object(lodash["isString"])(value[0])) {
            return true;
        }
        return false;
    }
    get formattedSearchTerm() {
        return this.props.searchTerm.trimLeft().toLocaleLowerCase();
    }
    getKey(item, key) {
        const isInexact = key.match(INEXACT_PATH);
        if (!isInexact) {
            return Object(lodash["get"])(item, key, '');
        }
        else {
            return this.getInExactKey(item, key);
        }
    }
    getInExactKey(item, key) {
        const paths = key.split(EMPTY_ARRAY_BRACKETS);
        const values = paths.reduce((results, path) => Object(lodash["flatMap"])(results, r => Object(lodash["get"])(r, path, [])), [item]);
        return values;
    }
}

// CONCATENATED MODULE: ./src/shared/components/FilterList.tsx


const FilterList_mstp = (state) => {
    return { labels: state.resources.labels.byID };
};
function FilterListContainer() {
    return Object(es["b" /* connect */])(FilterList_mstp)(Filter_FilterList);
}

// CONCATENATED MODULE: ./src/authorizations/components/BucketsTabBody.tsx






const FilterBuckets = FilterListContainer();
class BucketsTabBody_BucketsTabBody extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = { searchTerm: '' };
        this.handleSetSearchTerm = (e) => {
            this.setState({ searchTerm: e.target.value });
        };
    }
    render() {
        const { selectedBuckets, onSelect, buckets } = this.props;
        const { searchTerm } = this.state;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(BuilderCard_BuilderCard.Menu, null,
                react_default.a.createElement(clockface_dist["Input"], { value: searchTerm, onChange: this.handleSetSearchTerm, placeholder: "Search buckets..." })),
            react_default.a.createElement(FilterBuckets, { list: buckets, searchTerm: searchTerm, searchKeys: ['name'] }, filteredBuckets => (react_default.a.createElement(SortingHat_SortingHat, { list: filteredBuckets, sortKey: "name" }, sortedBuckets => (react_default.a.createElement(components_SelectorList, { items: sortedBuckets.map(b => b.name), selectedItems: selectedBuckets, onSelectItem: onSelect, multiSelect: false })))))));
    }
}
/* harmony default export */ var components_BucketsTabBody = (BucketsTabBody_BucketsTabBody);

// CONCATENATED MODULE: ./src/authorizations/components/BucketsTabSelector.tsx


class BucketsTabSelector_BucketsTabSelector extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleTabClick = (tab) => {
            const { activeTab, onClick } = this.props;
            if (tab !== activeTab) {
                onClick(tab);
            }
        };
    }
    render() {
        const { tabs, activeTab } = this.props;
        return (react_default.a.createElement(clockface_dist["SelectGroup"], { shape: clockface_dist["ButtonShape"].StretchToFit }, tabs.map(tab => (react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "bucket-selector", key: tab, id: tab, titleText: tab, value: tab, active: activeTab === tab, onClick: this.handleTabClick }, tab)))));
    }
}

// CONCATENATED MODULE: ./src/authorizations/components/BucketsSelector.tsx






class BucketsSelector_BucketsSelector extends react["PureComponent"] {
    render() {
        const { title, activeTab, onTabClick } = this.props;
        return (react_default.a.createElement(clockface_dist["FlexBox"], { alignItems: clockface_dist["AlignItems"].Stretch, direction: clockface_dist["FlexDirection"].Column, margin: clockface_dist["ComponentSize"].Medium },
            react_default.a.createElement("div", { className: "title" }, title),
            react_default.a.createElement(BucketsTabSelector_BucketsTabSelector, { tabs: this.bucketTabs, activeTab: activeTab, onClick: onTabClick }),
            this.builderCard));
    }
    get titlePreposition() {
        const { title } = this.props;
        switch (title.toLowerCase()) {
            case 'read':
                return 'from';
            case 'write':
                return 'to';
            default:
                return 'on';
        }
    }
    get bucketTabs() {
        return [BucketTab.AllBuckets, BucketTab.Scoped];
    }
    get builderCard() {
        const { selectedBuckets, onSelect, onSelectAll, onDeselectAll, buckets, activeTab, title, } = this.props;
        switch (activeTab) {
            case BucketTab.AllBuckets:
                return (react_default.a.createElement(react_default.a.Fragment, null,
                    react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Small },
                        react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                            "This token will be able to ",
                            title.toLowerCase(),
                            ' ',
                            this.titlePreposition,
                            " all existing buckets as well as",
                            ' ',
                            this.titlePreposition,
                            " any bucket created in the future"))));
            case BucketTab.Scoped:
                return (react_default.a.createElement(SelectorList_SelectorList, { className: "bucket-selectors" },
                    react_default.a.createElement(SelectorList_SelectorList.Header, { title: "Buckets" },
                        react_default.a.createElement("div", { className: "bucket-selectors--buttons" },
                            react_default.a.createElement(clockface_dist["FlexBox"], { alignItems: clockface_dist["AlignItems"].Center, direction: clockface_dist["FlexDirection"].Row, margin: clockface_dist["ComponentSize"].Small },
                                react_default.a.createElement(clockface_dist["Button"], { text: "Select All", size: clockface_dist["ComponentSize"].ExtraSmall, className: "bucket-selectors--button", onClick: onSelectAll }),
                                react_default.a.createElement(clockface_dist["Button"], { text: "Deselect All", size: clockface_dist["ComponentSize"].ExtraSmall, className: "bucket-selectors--button", onClick: onDeselectAll })))),
                    react_default.a.createElement(components_BucketsTabBody, { buckets: buckets, onSelect: onSelect, selectedBuckets: selectedBuckets })));
        }
    }
}
/* harmony default export */ var components_BucketsSelector = (BucketsSelector_BucketsSelector);

// EXTERNAL MODULE: ./src/resources/components/GetResources.tsx + 1 modules
var GetResources = __webpack_require__(51);

// EXTERNAL MODULE: ./src/buckets/constants/index.ts
var buckets_constants = __webpack_require__(218);

// CONCATENATED MODULE: ./src/authorizations/components/BucketsTokenOverlay.tsx













let BucketsTokenOverlay_BucketsTokenOverlay = class BucketsTokenOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            description: '',
            readBuckets: [],
            writeBuckets: [],
            activeTabRead: BucketTab.Scoped,
            activeTabWrite: BucketTab.Scoped,
        };
        this.handleReadTabClick = (tab) => {
            this.setState({ activeTabRead: tab });
        };
        this.handleWriteTabClick = (tab) => {
            this.setState({ activeTabWrite: tab });
        };
        this.handleSelectReadBucket = (bucketName) => {
            const readBuckets = selectBucket(bucketName, this.state.readBuckets);
            this.setState({ readBuckets });
        };
        this.handleSelectWriteBucket = (bucketName) => {
            const writeBuckets = selectBucket(bucketName, this.state.writeBuckets);
            this.setState({ writeBuckets });
        };
        this.handleReadSelectAllBuckets = () => {
            const readBuckets = this.props.buckets.map(b => b.name);
            this.setState({ readBuckets });
        };
        this.handleReadDeselectAllBuckets = () => {
            this.setState({ readBuckets: [] });
        };
        this.handleWriteSelectAllBuckets = () => {
            const writeBuckets = this.props.buckets.map(b => b.name);
            this.setState({ writeBuckets });
        };
        this.handleWriteDeselectAllBuckets = () => {
            this.setState({ writeBuckets: [] });
        };
        this.handleSave = () => {
            const { orgID, onCreateAuthorization } = this.props;
            const { activeTabRead, activeTabWrite } = this.state;
            let permissions = [];
            if (activeTabRead === BucketTab.Scoped) {
                permissions = [...this.readBucketPermissions];
            }
            else {
                permissions = [...this.allReadBucketPermissions];
            }
            if (activeTabWrite === BucketTab.Scoped) {
                permissions = [...permissions, ...this.writeBucketPermissions];
            }
            else {
                permissions = [...permissions, ...this.allWriteBucketPermissions];
            }
            const token = {
                orgID,
                description: this.state.description,
                permissions,
            };
            onCreateAuthorization(token);
            this.handleDismiss();
        };
        this.handleInputChange = (e) => {
            const { value } = e.target;
            this.setState({ description: value });
        };
        this.handleDismiss = () => {
            this.props.onClose();
        };
    }
    render() {
        const { description, readBuckets, writeBuckets, activeTabRead, activeTabWrite, } = this.state;
        return (react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 700 },
            react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Generate Read/Write Token", onDismiss: this.handleDismiss }),
            react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                react_default.a.createElement(clockface_dist["Form"], { onSubmit: this.handleSave },
                    react_default.a.createElement(clockface_dist["FlexBox"], { alignItems: clockface_dist["AlignItems"].Center, direction: clockface_dist["FlexDirection"].Column, margin: clockface_dist["ComponentSize"].Large },
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Description" },
                            react_default.a.createElement(clockface_dist["Input"], { placeholder: "Describe this new token", value: description, onChange: this.handleInputChange, testID: "input-field--descr" })),
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "" },
                            react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Buckets] },
                                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve, widthSM: clockface_dist["Columns"].Six },
                                        react_default.a.createElement(components_BucketsSelector, { onSelect: this.handleSelectReadBucket, buckets: this.nonSystemBuckets, selectedBuckets: readBuckets, title: "Read", onSelectAll: this.handleReadSelectAllBuckets, onDeselectAll: this.handleReadDeselectAllBuckets, activeTab: activeTabRead, onTabClick: this.handleReadTabClick })),
                                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve, widthSM: clockface_dist["Columns"].Six },
                                        react_default.a.createElement(components_BucketsSelector, { onSelect: this.handleSelectWriteBucket, buckets: this.nonSystemBuckets, selectedBuckets: writeBuckets, title: "Write", onSelectAll: this.handleWriteSelectAllBuckets, onDeselectAll: this.handleWriteDeselectAllBuckets, activeTab: activeTabWrite, onTabClick: this.handleWriteTabClick }))))),
                        react_default.a.createElement(clockface_dist["Form"].Footer, null,
                            react_default.a.createElement(clockface_dist["Button"], { text: "Cancel", icon: clockface_dist["IconFont"].Remove, onClick: this.handleDismiss, testID: "button--cancel" }),
                            react_default.a.createElement(clockface_dist["Button"], { text: "Save", icon: clockface_dist["IconFont"].Checkmark, color: clockface_dist["ComponentColor"].Success, type: clockface_dist["ButtonType"].Submit, testID: "button--save" })))))));
    }
    get writeBucketPermissions() {
        const { buckets } = this.props;
        const writeBuckets = this.state.writeBuckets.map(bucketName => {
            return buckets.find(b => b.name === bucketName);
        });
        return specificBucketsPermissions(writeBuckets, 'write');
    }
    get readBucketPermissions() {
        const { buckets } = this.props;
        const readBuckets = this.state.readBuckets.map(bucketName => {
            return buckets.find(b => b.name === bucketName);
        });
        return specificBucketsPermissions(readBuckets, 'read');
    }
    get allReadBucketPermissions() {
        const { orgID } = this.props;
        return allBucketsPermissions(orgID, 'read');
    }
    get allWriteBucketPermissions() {
        const { orgID } = this.props;
        return allBucketsPermissions(orgID, 'write');
    }
    get nonSystemBuckets() {
        const { buckets } = this.props;
        return buckets.filter(bucket => !Object(buckets_constants["b" /* isSystemBucket */])(bucket.name));
    }
};
BucketsTokenOverlay_BucketsTokenOverlay = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], BucketsTokenOverlay_BucketsTokenOverlay);
const BucketsTokenOverlay_mstp = (state) => {
    return {
        orgID: Object(selectors["a" /* getOrg */])(state).id,
        buckets: Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Buckets),
    };
};
const BucketsTokenOverlay_mdtp = {
    onCreateAuthorization: authorizations_actions_thunks["a" /* createAuthorization */],
};
/* harmony default export */ var components_BucketsTokenOverlay = (Object(es["b" /* connect */])(BucketsTokenOverlay_mstp, BucketsTokenOverlay_mdtp)(BucketsTokenOverlay_BucketsTokenOverlay));

// EXTERNAL MODULE: ./src/shared/components/TomlMonacoEditor.tsx + 2 modules
var TomlMonacoEditor = __webpack_require__(846);

// EXTERNAL MODULE: ./src/telegrafs/actions/thunks.ts
var telegrafs_actions_thunks = __webpack_require__(254);

// CONCATENATED MODULE: ./src/telegrafs/components/TelegrafConfig.tsx







let TelegrafConfig_TelegrafConfig = class TelegrafConfig extends react["PureComponent"] {
    componentDidMount() {
        const { params: { id }, getTelegrafConfigToml, } = this.props;
        getTelegrafConfigToml(id);
    }
    render() {
        return react_default.a.createElement(react_default.a.Fragment, null, this.overlayBody);
    }
    get overlayBody() {
        const { telegrafConfig } = this.props;
        return react_default.a.createElement(TomlMonacoEditor["a" /* default */], { script: telegrafConfig, readOnly: true });
    }
};
TelegrafConfig_TelegrafConfig = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], TelegrafConfig_TelegrafConfig);

const TelegrafConfig_mstp = ({ resources }) => ({
    telegrafConfig: resources.telegrafs.currentConfig.item,
    status: resources.telegrafs.currentConfig.status,
});
const TelegrafConfig_mdtp = {
    getTelegrafConfigToml: telegrafs_actions_thunks["c" /* getTelegrafConfigToml */],
};
/* harmony default export */ var components_TelegrafConfig = (Object(es["b" /* connect */])(TelegrafConfig_mstp, TelegrafConfig_mdtp)(Object(react_router_es["g" /* withRouter */])(TelegrafConfig_TelegrafConfig)));

// CONCATENATED MODULE: ./src/shared/utils/download.ts
const formatDownloadName = (filename, extension) => {
    return `${filename
        .trim()
        .toLowerCase()
        .replace(/\s/g, '_')}${extension}`;
};
const downloadTextFile = (text, filename, extension, mimeType = 'text/plain') => {
    const formattedName = formatDownloadName(filename, extension);
    const blob = new Blob([text], { type: mimeType });
    const a = document.createElement('a');
    a.href = window.URL.createObjectURL(blob);
    a.target = '_blank';
    a.download = formattedName;
    document.body.appendChild(a);
    a.click();
    a.parentNode.removeChild(a);
};

// CONCATENATED MODULE: ./src/telegrafs/components/TelegrafConfigOverlay.tsx










let TelegrafConfigOverlay_TelegrafConfigOverlay = class TelegrafConfigOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleDismiss = () => {
            this.props.onClose();
        };
        this.handleDownloadConfig = () => {
            const { telegrafConfig, telegraf: { name }, } = this.props;
            downloadTextFile(telegrafConfig, name || 'telegraf', '.conf');
        };
    }
    render() {
        return react_default.a.createElement(react_default.a.Fragment, null, this.overlay);
    }
    get overlay() {
        const { telegraf, status } = this.props;
        return (react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 1200 },
            react_default.a.createElement(clockface_dist["Overlay"].Header, { title: `Telegraf Configuration - ${lodash_default.a.get(telegraf, 'name', '')}`, onDismiss: this.handleDismiss }),
            react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                react_default.a.createElement(clockface_dist["SpinnerContainer"], { loading: status, spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null) },
                    react_default.a.createElement("div", { className: "config-overlay" },
                        react_default.a.createElement(components_TelegrafConfig, null)))),
            react_default.a.createElement(clockface_dist["Overlay"].Footer, null,
                react_default.a.createElement(clockface_dist["Button"], { color: clockface_dist["ComponentColor"].Secondary, text: "Download Config", onClick: this.handleDownloadConfig, status: this.buttonStatus }))));
    }
    get buttonStatus() {
        const { configStatus } = this.props;
        if (configStatus === clockface_dist["RemoteDataState"].Done) {
            return clockface_dist["ComponentStatus"].Default;
        }
        return clockface_dist["ComponentStatus"].Disabled;
    }
};
TelegrafConfigOverlay_TelegrafConfigOverlay = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], TelegrafConfigOverlay_TelegrafConfigOverlay);
const TelegrafConfigOverlay_mstp = (state) => {
    const { overlays, resources } = state;
    const { status, currentConfig } = resources.telegrafs;
    const { id } = overlays.params;
    return {
        telegraf: Object(resources_selectors["b" /* getByID */])(state, types["ResourceType"].Telegrafs, id),
        status,
        telegrafConfig: currentConfig.item,
        configStatus: currentConfig.status,
    };
};
/* harmony default export */ var components_TelegrafConfigOverlay = (Object(es["b" /* connect */])(TelegrafConfigOverlay_mstp, null)(TelegrafConfigOverlay_TelegrafConfigOverlay));

// EXTERNAL MODULE: ./src/shared/components/CodeSnippet.tsx
var CodeSnippet = __webpack_require__(336);

// CONCATENATED MODULE: ./src/shared/components/TemplatedCodeSnippet.tsx




function transform(template, vars) {
    const output = new Function('vars', 'var output=' +
        JSON.stringify(template).replace(/<%=(.+?)%>/g, '"+(vars["$1".trim()])+"') +
        ';return output;');
    return output(vars);
}
let TemplatedCodeSnippet_TemplatedCodeSnippet = class TemplatedCodeSnippet extends react["PureComponent"] {
    transform() {
        const text = this.props.template;
        const vars = Object.assign({}, this.props.defaults, this.props.values);
        return transform(text, vars);
    }
    render() {
        const { label, testID } = this.props;
        const props = {
            label,
            testID,
            copyText: this.transform(),
        };
        return react_default.a.createElement(CodeSnippet["a" /* default */], Object.assign({}, props));
    }
};
TemplatedCodeSnippet_TemplatedCodeSnippet = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], TemplatedCodeSnippet_TemplatedCodeSnippet);

/* harmony default export */ var components_TemplatedCodeSnippet = (TemplatedCodeSnippet_TemplatedCodeSnippet);

// EXTERNAL MODULE: ./src/dataLoaders/components/BucketsDropdown.tsx
var BucketsDropdown = __webpack_require__(452);

// CONCATENATED MODULE: ./src/telegrafs/components/TelegrafOutputOverlay.tsx












const TELEGRAF_OUTPUT = ` [[outputs.influxdb_v2]]
  ## The URLs of the InfluxDB cluster nodes.
  ##
  ## Multiple URLs can be specified for a single cluster, only ONE of the
  ## urls will be written to each interval.
  ## urls exp: http://127.0.0.1:9999
  urls = ["<%= server %>"]

  ## Token for authentication.
  token = "<%= token %>"

  ## Organization is the name of the organization you wish to write to; must exist.
  organization = "<%= org %>"

  ## Destination bucket to write into.
  bucket = "<%= bucket %>"
`;
const OUTPUT_DEFAULTS = {
    server: 'http://127.0.0.1:9999',
    token: '$INFLUX_TOKEN',
    org: 'orgID',
    bucket: 'bucketID',
};
let TelegrafOutputOverlay_TelegrafOutputOverlay = class TelegrafOutputOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            selectedBucket: null,
        };
        this.handleDismiss = () => {
            this.props.onClose();
        };
        this.handleSelectBucket = bucket => {
            this.setState({
                selectedBucket: bucket,
            });
        };
        this.handleDownloadConfig = () => {
            const { server, org } = this.props;
            const bucket = this.currentBucket;
            const config = transform(TELEGRAF_OUTPUT, Object.assign({}, OUTPUT_DEFAULTS, {
                server,
                org,
                bucket: bucket ? bucket.name : OUTPUT_DEFAULTS.bucket,
            }));
            downloadTextFile(config, 'outputs.influxdb_v2', '.conf');
        };
    }
    render() {
        return react_default.a.createElement(react_default.a.Fragment, null, this.overlay);
    }
    get buckets() {
        const { buckets } = this.props;
        return (buckets || [])
            .filter(item => item.type !== 'system')
            .sort((a, b) => {
            const _a = a.name.toLowerCase();
            const _b = b.name.toLowerCase();
            return _a > _b ? 1 : _a < _b ? -1 : 0;
        });
    }
    get currentBucket() {
        const _buckets = this.buckets;
        const { selectedBucket } = this.state;
        if (_buckets.length) {
            return selectedBucket ? selectedBucket : _buckets[0];
        }
        return null;
    }
    get overlay() {
        const { server, org, orgID } = this.props;
        const _buckets = this.buckets;
        const bucket = this.currentBucket;
        let bucket_dd = null;
        if (_buckets.length) {
            bucket_dd = (react_default.a.createElement(BucketsDropdown["a" /* default */], { selectedBucketID: this.currentBucket.id, buckets: _buckets, onSelectBucket: this.handleSelectBucket }));
        }
        return (react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 1200 },
            react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Telegraf Output Configuration", onDismiss: this.handleDismiss }),
            react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                react_default.a.createElement("p", { style: { marginTop: '-18px' } },
                    "The $INFLUX_TOKEN can be generated on the",
                    react_default.a.createElement(react_router_es["b" /* Link */], { to: `/orgs/${orgID}/load-data/tokens` }, "\u00A0Tokens tab"),
                    "."),
                bucket_dd,
                react_default.a.createElement("div", { className: "output-overlay" },
                    react_default.a.createElement(components_TemplatedCodeSnippet, { template: TELEGRAF_OUTPUT, label: "telegraf.conf", testID: "telegraf-output-overlay--code-snippet", values: {
                            server,
                            org,
                            bucket: bucket ? bucket.name : OUTPUT_DEFAULTS.bucket,
                        }, defaults: OUTPUT_DEFAULTS }))),
            react_default.a.createElement(clockface_dist["Overlay"].Footer, null,
                react_default.a.createElement(clockface_dist["Button"], { color: clockface_dist["ComponentColor"].Secondary, text: "Download Config", onClick: this.handleDownloadConfig }))));
    }
};
TelegrafOutputOverlay_TelegrafOutputOverlay = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], TelegrafOutputOverlay_TelegrafOutputOverlay);
const TelegrafOutputOverlay_mstp = (state) => {
    const { name, id } = Object(selectors["a" /* getOrg */])(state);
    const server = window.location.origin;
    const buckets = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Buckets);
    return {
        org: name,
        orgID: id,
        server,
        buckets,
    };
};

/* harmony default export */ var components_TelegrafOutputOverlay = (Object(es["b" /* connect */])(TelegrafOutputOverlay_mstp, null)(TelegrafOutputOverlay_TelegrafOutputOverlay));

// CONCATENATED MODULE: ./src/overlays/components/OverlayController.tsx









const OverlayController = props => {
    let activeOverlay = react_default.a.createElement(react_default.a.Fragment, null);
    let visibility = true;
    const { overlayID, onClose, clearOverlayControllerState } = props;
    const closer = () => {
        clearOverlayControllerState();
        if (onClose) {
            onClose();
        }
    };
    switch (overlayID) {
        case 'add-note':
        case 'edit-note':
            activeOverlay = react_default.a.createElement(components_NoteEditorOverlay, { onClose: closer });
            break;
        case 'add-master-token':
            activeOverlay = react_default.a.createElement(components_AllAccessTokenOverlay, { onClose: closer });
            break;
        case 'add-token':
            activeOverlay = react_default.a.createElement(components_BucketsTokenOverlay, { onClose: closer });
            break;
        case 'telegraf-config':
            activeOverlay = react_default.a.createElement(components_TelegrafConfigOverlay, { onClose: closer });
            break;
        case 'telegraf-output':
            activeOverlay = react_default.a.createElement(components_TelegrafOutputOverlay, { onClose: closer });
            break;
        default:
            visibility = false;
    }
    return react_default.a.createElement(clockface_dist["Overlay"], { visible: visibility }, activeOverlay);
};
const OverlayController_mstp = (state) => {
    const id = state.overlays.id;
    const onClose = state.overlays.onClose;
    return {
        overlayID: id,
        onClose,
    };
};
const OverlayController_mdtp = {
    clearOverlayControllerState: dismissOverlay,
};
/* harmony default export */ var components_OverlayController = (Object(es["b" /* connect */])(OverlayController_mstp, OverlayController_mdtp)(OverlayController));

// CONCATENATED MODULE: ./src/pageLayout/components/CloudNav.tsx







const Logo = __webpack_require__(1301);
const CloudNav = ({ org, me }) => {
    const usageURL = `${constants["k" /* CLOUD_URL */]}${constants["l" /* CLOUD_USAGE_PATH */]}`;
    const billingURL = `${constants["k" /* CLOUD_URL */]}${constants["f" /* CLOUD_BILLING_PATH */]}`;
    const checkoutURL = `${constants["k" /* CLOUD_URL */]}${constants["h" /* CLOUD_CHECKOUT_PATH */]}`;
    const logoutURL = `${constants["k" /* CLOUD_URL */]}${constants["i" /* CLOUD_LOGOUT_PATH */]}`;
    const handleUpgradeClick = () => {
        window.location.assign(checkoutURL);
    };
    if (!org) {
        return (react_default.a.createElement(clockface_dist["AppHeader"], { className: "cloud-nav" },
            react_default.a.createElement(clockface_dist["AppHeader"].Logo, null,
                react_default.a.createElement("img", { className: "cloud-nav--logo", alt: "InfluxData Logo", src: Logo }))));
    }
    return (react_default.a.createElement(clockface_dist["AppHeader"], { className: "cloud-nav" },
        react_default.a.createElement(clockface_dist["AppHeader"].Logo, null,
            react_default.a.createElement(react_router_es["b" /* Link */], { to: `/orgs/${org.id}`, className: "cloud-nav--logo-link" },
                react_default.a.createElement("img", { className: "cloud-nav--logo", alt: "InfluxData Logo", src: Logo }))),
        react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, margin: clockface_dist["ComponentSize"].Medium },
            react_default.a.createElement(clockface_dist["Button"], { color: clockface_dist["ComponentColor"].Success, text: "Upgrade", onClick: handleUpgradeClick, className: "upgrade-payg--button" }),
            react_default.a.createElement(clockface_dist["PopNav"], null,
                react_default.a.createElement("p", { className: "cloud-nav--account" },
                    "Logged in as ",
                    react_default.a.createElement("strong", null, me.name)),
                react_default.a.createElement(clockface_dist["PopNav"].Item, { active: false, titleLink: className => (react_default.a.createElement("a", { className: className, href: usageURL }, "Usage")) }),
                react_default.a.createElement(featureFlag["a" /* FeatureFlag */], { name: "cloudBilling" },
                    react_default.a.createElement(clockface_dist["PopNav"].Item, { active: false, titleLink: className => (react_default.a.createElement("a", { className: className, href: billingURL }, "Billing")) })),
                react_default.a.createElement(clockface_dist["PopNav"].Item, { active: false, titleLink: className => (react_default.a.createElement("a", { className: className, href: logoutURL }, "Logout")) })))));
};
const CloudNav_mstp = (state) => {
    const org = Object(selectors["a" /* getOrg */])(state);
    const me = state.me;
    return { org, me };
};
/* harmony default export */ var components_CloudNav = (Object(es["b" /* connect */])(CloudNav_mstp)(CloudNav));

// CONCATENATED MODULE: ./src/App.tsx










const App = ({ children, inPresentationMode }) => (react_default.a.createElement(react_default.a.Fragment, null,
    react_default.a.createElement(CloudOnly, null,
        react_default.a.createElement(components_CloudNav, null)),
    react_default.a.createElement(clockface_dist["AppWrapper"], { presentationMode: inPresentationMode },
        react_default.a.createElement(notifications_Notifications, null),
        react_default.a.createElement(portals_TooltipPortal, null),
        react_default.a.createElement(NotesPortal, null),
        react_default.a.createElement(components_OverlayController, null),
        react_default.a.createElement(pageLayout, null),
        children)));
const App_mstp = (state) => {
    const { app: { ephemeral: { inPresentationMode }, }, } = state;
    return { inPresentationMode };
};
/* harmony default export */ var src_App = (Object(es["b" /* connect */])(App_mstp, null)(App));

// EXTERNAL MODULE: ./node_modules/normalizr/dist/normalizr.es.js
var normalizr_es = __webpack_require__(41);

// EXTERNAL MODULE: ./src/client/index.ts + 1 modules
var client = __webpack_require__(14);

// EXTERNAL MODULE: ./src/schemas/index.ts + 4 modules
var schemas = __webpack_require__(175);

// CONCATENATED MODULE: ./src/organizations/actions/thunks.ts









const thunks_getOrganizations = () => async (dispatch) => {
    try {
        dispatch(setOrgs(types["RemoteDataState"].Loading));
        const resp = await client["G" /* getOrgs */]({});
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const { orgs } = resp.data;
        const organizations = Object(normalizr_es["a" /* normalize */])(orgs, schemas["e" /* arrayOfOrgs */]);
        dispatch(setOrgs(types["RemoteDataState"].Done, organizations));
        return orgs;
    }
    catch (error) {
        console.error(error);
        dispatch(setOrgs(types["RemoteDataState"].Error, null));
    }
};
const createOrgWithBucket = (org, bucket) => async (dispatch) => {
    let createdOrg;
    try {
        const orgResp = await client["ob" /* postOrg */]({ data: org });
        if (orgResp.status !== 201) {
            throw new Error(orgResp.data.message);
        }
        createdOrg = orgResp.data;
        dispatch(Object(actions_notifications["c" /* notify */])(Object(copy_notifications["Ob" /* orgCreateSuccess */])()));
        const normOrg = Object(normalizr_es["a" /* normalize */])(createdOrg, schemas["n" /* orgSchema */]);
        dispatch(addOrg(normOrg));
        dispatch(Object(react_router_redux_lib["push"])(`/orgs/${createdOrg.id}`));
        const bucketResp = await client["bb" /* postBucket */]({
            data: Object.assign(Object.assign({}, bucket), { orgID: createdOrg.id }),
        });
        if (bucketResp.status !== 201) {
            throw new Error(bucketResp.data.message);
        }
        dispatch(Object(actions_notifications["c" /* notify */])(Object(copy_notifications["B" /* bucketCreateSuccess */])()));
    }
    catch (error) {
        console.error(error);
        if (!createdOrg) {
            dispatch(Object(actions_notifications["c" /* notify */])(Object(copy_notifications["Nb" /* orgCreateFailed */])()));
        }
        const message = Object(api["b" /* getErrorMessage */])(error);
        dispatch(Object(actions_notifications["c" /* notify */])(Object(copy_notifications["A" /* bucketCreateFailed */])(message)));
    }
};
const createOrg = (org) => async (dispatch) => {
    try {
        const resp = await client["ob" /* postOrg */]({ data: org });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        const createdOrg = resp.data;
        const normOrg = Object(normalizr_es["a" /* normalize */])(createdOrg, schemas["n" /* orgSchema */]);
        dispatch(addOrg(normOrg));
        dispatch(Object(react_router_redux_lib["push"])(`/orgs/${createdOrg.id}`));
        dispatch(Object(actions_notifications["c" /* notify */])(Object(copy_notifications["Ob" /* orgCreateSuccess */])()));
    }
    catch (e) {
        console.error(e);
        dispatch(Object(actions_notifications["c" /* notify */])(Object(copy_notifications["Nb" /* orgCreateFailed */])()));
    }
};
const deleteOrg = (org) => async (dispatch) => {
    try {
        const resp = await client["n" /* deleteOrg */]({ orgID: org.id });
        if (resp.status !== 204) {
            throw new Error(resp.data.message);
        }
        dispatch(removeOrg(org.id));
    }
    catch (e) {
        console.error(e);
    }
};
const updateOrg = (org) => async (dispatch) => {
    try {
        const resp = await client["Y" /* patchOrg */]({ orgID: org.id, data: org });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const updatedOrg = resp.data;
        const normOrg = Object(normalizr_es["a" /* normalize */])(updatedOrg, schemas["n" /* orgSchema */]);
        dispatch(editOrg(normOrg));
        dispatch(Object(actions_notifications["c" /* notify */])(Object(copy_notifications["Qb" /* orgEditSuccess */])()));
    }
    catch (error) {
        dispatch(Object(actions_notifications["c" /* notify */])(Object(copy_notifications["Pb" /* orgEditFailed */])()));
        console.error(error);
    }
};
const renameOrg = (originalName, org) => async (dispatch) => {
    try {
        const resp = await client["Y" /* patchOrg */]({ orgID: org.id, data: org });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const updatedOrg = resp.data;
        const normOrg = Object(normalizr_es["a" /* normalize */])(updatedOrg, schemas["n" /* orgSchema */]);
        dispatch(editOrg(normOrg));
        dispatch(Object(actions_notifications["c" /* notify */])(Object(copy_notifications["Sb" /* orgRenameSuccess */])(updatedOrg.name)));
    }
    catch (error) {
        dispatch(Object(actions_notifications["c" /* notify */])(Object(copy_notifications["Rb" /* orgRenameFailed */])(originalName)));
        console.error(error);
    }
};

// CONCATENATED MODULE: ./src/shared/containers/GetOrganizations.tsx





const GetOrganizations = ({ status, getOrganizations, children, }) => {
    Object(react["useEffect"])(() => {
        if (status === types["RemoteDataState"].NotStarted) {
            getOrganizations();
        }
    }, []);
    return (react_default.a.createElement(clockface_dist["SpinnerContainer"], { loading: status, spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null) }, children && react_default.a.cloneElement(children)));
};
const GetOrganizations_mdtp = {
    getOrganizations: thunks_getOrganizations,
};
const GetOrganizations_mstp = ({ resources }) => ({
    status: resources.orgs.status,
});
/* harmony default export */ var containers_GetOrganizations = (Object(es["b" /* connect */])(GetOrganizations_mstp, GetOrganizations_mdtp)(GetOrganizations));

// CONCATENATED MODULE: ./src/onboarding/utils/index.ts
const isOnboardingURL = () => {
    return !!window.location.pathname.match(/\/onboarding/);
};

// CONCATENATED MODULE: ./src/Setup.tsx







let Setup_Setup = class Setup extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.state = {
            loading: types["RemoteDataState"].NotStarted,
            isSetupComplete: false,
        };
    }
    async componentDidMount() {
        const { router } = this.props;
        if (isOnboardingURL()) {
            this.setState({
                loading: types["RemoteDataState"].Done,
            });
            return;
        }
        const { allowed } = await api["a" /* client */].setup.status();
        this.setState({
            loading: types["RemoteDataState"].Done,
        });
        if (!allowed) {
            return;
        }
        router.push('/onboarding/0');
    }
    render() {
        const { loading } = this.state;
        return (react_default.a.createElement(clockface_dist["SpinnerContainer"], { loading: loading, spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null) }, this.props.children && react_default.a.cloneElement(this.props.children)));
    }
};
Setup_Setup = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], Setup_Setup);

/* harmony default export */ var src_Setup = (Setup_Setup);

// CONCATENATED MODULE: ./src/Signin.tsx











const FETCH_WAIT = 60000;
let Signin_Signin = class Signin extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = { loading: types["RemoteDataState"].NotStarted };
        this.hasMounted = false;
        this.checkForLogin = async () => {
            try {
                await api["a" /* client */].users.me();
            }
            catch (error) {
                const { location: { pathname }, } = this.props;
                clearInterval(this.intervalID);
                if (constants["e" /* CLOUD */]) {
                    window.location.pathname = constants["j" /* CLOUD_SIGNIN_PATHNAME */];
                    throw error;
                }
                if (pathname.startsWith('/signin')) {
                    return;
                }
                let returnTo = '';
                if (pathname !== '/') {
                    returnTo = `?returnTo=${pathname}`;
                    this.props.notify(Object(copy_notifications["qc" /* sessionTimedOut */])());
                }
                this.props.router.replace(`/signin${returnTo}`);
            }
        };
    }
    async componentDidMount() {
        this.hasMounted = true;
        this.setState({ loading: types["RemoteDataState"].Loading });
        await this.checkForLogin();
        if (this.hasMounted) {
            this.setState({ loading: types["RemoteDataState"].Done });
            this.intervalID = setInterval(() => {
                this.checkForLogin();
            }, FETCH_WAIT);
        }
    }
    componentWillUnmount() {
        clearInterval(this.intervalID);
        this.hasMounted = false;
    }
    render() {
        const { loading } = this.state;
        return (react_default.a.createElement(clockface_dist["SpinnerContainer"], { loading: loading, spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null) }, this.props.children && react_default.a.cloneElement(this.props.children)));
    }
};
Signin_Signin = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], Signin_Signin);

const Signin_mdtp = {
    notify: actions_notifications["c" /* notify */],
};
/* harmony default export */ var src_Signin = (Object(es["b" /* connect */])(null, Signin_mdtp)(Object(react_router_es["g" /* withRouter */])(Signin_Signin)));

// CONCATENATED MODULE: ./src/shared/components/splash_page/SplashLogo.tsx

const SplashLogo = () => react_default.a.createElement("div", { className: "splash-page--logo" });
/* harmony default export */ var splash_page_SplashLogo = (SplashLogo);

// CONCATENATED MODULE: ./src/shared/components/splash_page/SplashPanel.tsx

const SplashPanel = ({ children }) => (react_default.a.createElement("div", { className: "splash-page--panel" }, children));
/* harmony default export */ var splash_page_SplashPanel = (SplashPanel);

// CONCATENATED MODULE: ./src/shared/components/splash_page/SplashHeader.tsx

const SplashHeader = ({ title }) => (react_default.a.createElement("h3", { className: "splash-page--heading" }, title));
/* harmony default export */ var splash_page_SplashHeader = (SplashHeader);

// CONCATENATED MODULE: ./src/shared/components/splash_page/SplashPage.tsx




class SplashPage_SplashPage extends react["Component"] {
    render() {
        const { children } = this.props;
        return (react_default.a.createElement("div", { className: "splash-page" },
            react_default.a.createElement("div", { className: "splash-page--child" }, children),
            react_default.a.createElement("p", { className: "splash-page--credits" },
                "Powered by ",
                react_default.a.createElement("span", { className: "icon cubo-uniform" }),
                ' ',
                react_default.a.createElement("a", { href: "https://www.influxdata.com/", target: "_blank" }, "InfluxData")),
            react_default.a.createElement("div", { className: "splash-page--image" })));
    }
}
SplashPage_SplashPage.Logo = splash_page_SplashLogo;
SplashPage_SplashPage.Panel = splash_page_SplashPanel;
SplashPage_SplashPage.Header = splash_page_SplashHeader;
/* harmony default export */ var splash_page_SplashPage = (SplashPage_SplashPage);

// CONCATENATED MODULE: ./src/onboarding/components/SigninForm.tsx











let SigninForm_SigninForm = class SigninForm extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            username: '',
            password: '',
        };
        this.handleUsername = (e) => {
            const username = e.target.value;
            this.setState({ username });
        };
        this.handlePassword = (e) => {
            const password = e.target.value;
            this.setState({ password });
        };
        this.handleSignIn = async () => {
            const { notify } = this.props;
            const { username, password } = this.state;
            try {
                const resp = await Object(client["rb" /* postSignin */])({ auth: { username, password } });
                if (resp.status !== 204) {
                    throw new Error(resp.data.message);
                }
                this.handleRedirect();
            }
            catch (error) {
                const message = Object(lodash["get"])(error, 'response.data.msg', '');
                const status = Object(lodash["get"])(error, 'response.status', '');
                if (status === 401) {
                    notify(Object.assign(Object.assign({}, copy_notifications["g" /* SigninError */]), { message: 'Login failed: username or password is invalid' }));
                    return;
                }
                if (!message) {
                    notify(copy_notifications["g" /* SigninError */]);
                    return;
                }
                notify(Object.assign(Object.assign({}, copy_notifications["g" /* SigninError */]), { message }));
            }
        };
    }
    render() {
        const { username, password } = this.state;
        return (react_default.a.createElement(clockface_dist["Form"], { onSubmit: this.handleSignIn },
            react_default.a.createElement(clockface_dist["Grid"], null,
                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Username" },
                            react_default.a.createElement(clockface_dist["Input"], { name: "username", value: username, onChange: this.handleUsername, size: clockface_dist["ComponentSize"].Medium, autoFocus: true, testID: "username" }))),
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Password" },
                            react_default.a.createElement(clockface_dist["Input"], { name: "password", value: password, onChange: this.handlePassword, size: clockface_dist["ComponentSize"].Medium, type: clockface_dist["InputType"].Password, testID: "password" }))),
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
                        react_default.a.createElement(clockface_dist["Form"].Footer, null,
                            react_default.a.createElement(clockface_dist["Button"], { color: clockface_dist["ComponentColor"].Primary, text: "Sign In", size: clockface_dist["ComponentSize"].Medium, type: clockface_dist["ButtonType"].Submit })))))));
    }
    handleRedirect() {
        const { router } = this.props;
        const { query } = this.props.location;
        if (query && query.returnTo) {
            router.replace(query.returnTo);
        }
        else {
            router.push('/');
        }
    }
};
SigninForm_SigninForm = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], SigninForm_SigninForm);
const SigninForm_mstp = ({ links }) => ({
    links,
});
const SigninForm_mdtp = {
    notify: actions_notifications["c" /* notify */],
};
/* harmony default export */ var components_SigninForm = (Object(es["b" /* connect */])(SigninForm_mstp, SigninForm_mdtp)(Object(react_router_es["g" /* withRouter */])(SigninForm_SigninForm)));

// CONCATENATED MODULE: ./src/shared/components/VersionInfo.tsx


class VersionInfo_VersionInfo extends react["PureComponent"] {
    render() {
        return (react_default.a.createElement("div", { className: "version-info", style: this.style },
            react_default.a.createElement("p", null,
                "Version ",
                constants["G" /* VERSION */],
                " ",
                constants["s" /* GIT_SHA */] && react_default.a.createElement("code", null,
                    "(",
                    constants["s" /* GIT_SHA */].slice(0, 7),
                    ")"))));
    }
    get style() {
        if (this.props.widthPixels) {
            return { width: `${this.props.widthPixels}px` };
        }
    }
}
/* harmony default export */ var components_VersionInfo = (VersionInfo_VersionInfo);

// CONCATENATED MODULE: ./src/onboarding/containers/SigninPage.tsx













let SigninPage_SigninPage = class SigninPage extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.state = {
            status: types["RemoteDataState"].Loading,
        };
    }
    async componentDidMount() {
        const { allowed } = await api["a" /* client */].setup.status();
        if (allowed) {
            this.props.router.push('/onboarding/0');
        }
        else if (constants["e" /* CLOUD */]) {
            window.location.pathname = constants["j" /* CLOUD_SIGNIN_PATHNAME */];
            return;
        }
        this.setState({ status: types["RemoteDataState"].Done });
    }
    componentWillUnmount() {
        this.props.dismissAllNotifications();
    }
    render() {
        return (react_default.a.createElement(clockface_dist["SpinnerContainer"], { loading: this.state.status, spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null) },
            react_default.a.createElement(splash_page_SplashPage, null,
                react_default.a.createElement(clockface_dist["Panel"], { className: "signin-panel" },
                    react_default.a.createElement(clockface_dist["Panel"].Body, { alignItems: clockface_dist["AlignItems"].Center },
                        react_default.a.createElement(splash_page_SplashPage.Logo, null),
                        react_default.a.createElement(splash_page_SplashPage.Header, { title: "InfluxData" }),
                        react_default.a.createElement(components_SigninForm, null)),
                    react_default.a.createElement(clockface_dist["Panel"].Footer, null,
                        react_default.a.createElement(components_VersionInfo, null))))));
    }
};
SigninPage_SigninPage = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], SigninPage_SigninPage);
const SigninPage_mdtp = {
    dismissAllNotifications: actions_notifications["a" /* dismissAllNotifications */],
};
/* harmony default export */ var containers_SigninPage = (Object(es["b" /* connect */])(null, SigninPage_mdtp)(Object(react_router_es["g" /* withRouter */])(SigninPage_SigninPage)));

// CONCATENATED MODULE: ./src/Logout.tsx






let Logout_Logout = class Logout extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleSignOut = async () => {
            if (constants["e" /* CLOUD */]) {
                window.location.href = `${constants["k" /* CLOUD_URL */]}${constants["i" /* CLOUD_LOGOUT_PATH */]}`;
                return;
            }
            else {
                const resp = await Object(client["sb" /* postSignout */])({});
                if (resp.status !== 204) {
                    throw new Error(resp.data.message);
                }
                this.props.router.push(`/signin`);
            }
        };
    }
    componentDidMount() {
        this.handleSignOut();
    }
    render() {
        return null;
    }
};
Logout_Logout = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], Logout_Logout);

/* harmony default export */ var src_Logout = (Object(react_router_es["g" /* withRouter */])(Logout_Logout));

// CONCATENATED MODULE: ./src/tasks/components/TaskScheduleFormField.tsx




class TaskScheduleFormField_TaskScheduleFormFields extends react["PureComponent"] {
    render() {
        const { offset, onChangeInput, interval, cron, schedule } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Six },
                react_default.a.createElement(clockface_dist["Form"].Element, { label: schedule === types["TaskSchedule"].interval ? 'Every' : 'Cron' },
                    react_default.a.createElement(clockface_dist["Input"], { name: schedule, type: clockface_dist["InputType"].Text, placeholder: schedule === types["TaskSchedule"].interval ? '3h30s' : '0 2 * * *', value: schedule === types["TaskSchedule"].interval ? interval : cron, onChange: this.props.onChangeInput, testID: "task-form-schedule-input" }))),
            react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Six },
                react_default.a.createElement(clockface_dist["Form"].Element, { label: "Offset" },
                    react_default.a.createElement(clockface_dist["Input"], { name: "offset", type: clockface_dist["InputType"].Text, value: offset, placeholder: "20m", onChange: onChangeInput, testID: "task-form-offset-input" })))));
    }
}

// CONCATENATED MODULE: ./src/tasks/components/TasksOptionsBucketDropdown.tsx







class TasksOptionsBucketDropdown_TaskOptionsBucketDropdown extends react["PureComponent"] {
    componentDidMount() {
        this.setSelectedToFirst();
    }
    componentDidUpdate(prevProps) {
        if (this.props.buckets !== prevProps.buckets) {
            this.setSelectedToFirst();
        }
    }
    render() {
        const { selectedBucketName } = this.props;
        return (react_default.a.createElement(clockface_dist["Dropdown"], { button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { active: active, onClick: onClick, status: this.status, testID: "task-options-bucket-dropdown--button" }, selectedBucketName)), menu: onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse }, this.dropdownItems)) }));
    }
    get dropdownItems() {
        const { buckets } = this.props;
        if (!buckets || !buckets.length) {
            return [
                react_default.a.createElement(clockface_dist["Dropdown"].Item, { id: "no-buckets", key: "no-buckets", value: "no-buckets" }, "No Buckets found in Org"),
            ];
        }
        const nonSystemBuckets = buckets.filter(bucket => !Object(buckets_constants["b" /* isSystemBucket */])(bucket.name));
        return nonSystemBuckets.map(bucket => {
            return (react_default.a.createElement(clockface_dist["Dropdown"].Item, { id: bucket.name, key: bucket.name, value: bucket.name, onClick: this.props.onChangeBucketName, selected: bucket.name === this.selectedName }, bucket.name));
        });
    }
    get status() {
        const { status, buckets } = this.props;
        if (status === types["RemoteDataState"].Loading) {
            return clockface_dist["ComponentStatus"].Loading;
        }
        if (!buckets || !buckets.length) {
            return clockface_dist["ComponentStatus"].Disabled;
        }
        return clockface_dist["ComponentStatus"].Default;
    }
    get selectedName() {
        const { selectedBucketName, buckets } = this.props;
        if (buckets && buckets.length) {
            if (selectedBucketName) {
                return selectedBucketName;
            }
            return Object(lodash["get"])(buckets, '0.name', '');
        }
        return 'no-buckets';
    }
    setSelectedToFirst() {
        const { buckets, selectedBucketName, onChangeBucketName } = this.props;
        const firstBucketNameInList = Object(lodash["get"])(buckets, '0.name', '');
        if (selectedBucketName) {
            return;
        }
        onChangeBucketName(firstBucketNameInList);
    }
}
const TasksOptionsBucketDropdown_mstp = (state) => {
    const buckets = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Buckets).filter((bucket) => bucket.type !== 'system');
    const status = Object(resources_selectors["d" /* getStatus */])(state, types["ResourceType"].Buckets);
    return {
        buckets,
        status,
    };
};
/* harmony default export */ var TasksOptionsBucketDropdown = (Object(es["b" /* connect */])(TasksOptionsBucketDropdown_mstp, null)(TasksOptionsBucketDropdown_TaskOptionsBucketDropdown));

// CONCATENATED MODULE: ./src/tasks/components/TaskForm.tsx







class TaskForm_TaskForm extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleChangeScheduleType = (schedule) => {
            this.props.onChangeScheduleType(schedule);
        };
        this.state = {
            schedule: props.taskOptions.taskScheduleType,
        };
    }
    render() {
        const { onChangeInput, onChangeToBucketName, taskOptions: { name, taskScheduleType, interval, offset, cron, toBucketName, }, isInOverlay, } = this.props;
        return (react_default.a.createElement(clockface_dist["Form"], null,
            react_default.a.createElement(clockface_dist["Grid"], null,
                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Name" },
                            react_default.a.createElement(clockface_dist["Input"], { name: "name", placeholder: "Name your task", onChange: onChangeInput, value: name, testID: "task-form-name" }))),
                    react_default.a.createElement(clockface_dist["Grid"].Column, null,
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Schedule Task" },
                            react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Column, alignItems: clockface_dist["AlignItems"].FlexStart, margin: clockface_dist["ComponentSize"].Small },
                                react_default.a.createElement(clockface_dist["SelectGroup"], { shape: clockface_dist["ButtonShape"].StretchToFit },
                                    react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "task-schedule", id: "every", active: taskScheduleType === types["TaskSchedule"].interval, value: types["TaskSchedule"].interval, titleText: "Run task at regular intervals", onClick: this.handleChangeScheduleType, testID: "task-card-every-btn" }, "Every"),
                                    react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "task-schedule", id: "cron", active: taskScheduleType === types["TaskSchedule"].cron, value: types["TaskSchedule"].cron, titleText: "Use cron syntax for more control over scheduling", onClick: this.handleChangeScheduleType, testID: "task-card-cron-btn" }, "Cron")),
                                this.cronHelper))),
                    react_default.a.createElement(TaskScheduleFormField_TaskScheduleFormFields, { onChangeInput: onChangeInput, schedule: taskScheduleType, interval: interval, offset: offset, cron: cron }),
                    isInOverlay && (react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Output Bucket" },
                            react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Buckets] },
                                react_default.a.createElement(TasksOptionsBucketDropdown, { selectedBucketName: toBucketName, onChangeBucketName: onChangeToBucketName }))))),
                    isInOverlay && this.buttons))));
    }
    get buttons() {
        const { onSubmit, canSubmit, dismiss } = this.props;
        return (react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
            react_default.a.createElement(clockface_dist["Form"].Footer, null,
                react_default.a.createElement(clockface_dist["Button"], { text: "Cancel", onClick: dismiss, titleText: "Cancel save", type: clockface_dist["ButtonType"].Button }),
                react_default.a.createElement(clockface_dist["Button"], { text: "Save as Task", color: clockface_dist["ComponentColor"].Success, type: clockface_dist["ButtonType"].Submit, onClick: onSubmit, status: canSubmit ? clockface_dist["ComponentStatus"].Default : clockface_dist["ComponentStatus"].Disabled, testID: "task-form-save" }))));
    }
    get cronHelper() {
        const { taskOptions } = this.props;
        if (taskOptions.taskScheduleType === types["TaskSchedule"].cron) {
            return (react_default.a.createElement(clockface_dist["Form"].Box, null,
                react_default.a.createElement("p", { className: "time-format--helper" },
                    "For more information on cron syntax,",
                    ' ',
                    react_default.a.createElement("a", { href: "https://crontab.guru/", target: "_blank" }, "click here"))));
        }
    }
}
TaskForm_TaskForm.defaultProps = {
    isInOverlay: false,
    canSubmit: true,
    onSubmit: () => { },
    dismiss: () => { },
    onChangeToBucketName: () => { },
};

// CONCATENATED MODULE: ./src/shared/components/PageTitleWithOrg.tsx






let PageTitleWithOrg_PageTitleWithOrg = class PageTitleWithOrg extends react["PureComponent"] {
    render() {
        const { orgName, title, altText } = this.props;
        return (react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Column, alignItems: clockface_dist["AlignItems"].FlexStart, margin: clockface_dist["ComponentSize"].Small },
            react_default.a.createElement(clockface_dist["Page"].Title, { title: title, altText: altText }),
            react_default.a.createElement(clockface_dist["Page"].SubTitle, { title: orgName })));
    }
};
PageTitleWithOrg_PageTitleWithOrg = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], PageTitleWithOrg_PageTitleWithOrg);
const PageTitleWithOrg_mstp = (state) => {
    return { orgName: Object(selectors["a" /* getOrg */])(state).name };
};
/* harmony default export */ var components_PageTitleWithOrg = (Object(es["b" /* connect */])(PageTitleWithOrg_mstp)(PageTitleWithOrg_PageTitleWithOrg));

// CONCATENATED MODULE: ./src/tasks/components/TaskHeader.tsx



class TaskHeader_TaskHeader extends react["PureComponent"] {
    render() {
        const { onCancel, onSave, title } = this.props;
        return (react_default.a.createElement(clockface_dist["Page"].Header, { fullWidth: true },
            react_default.a.createElement(clockface_dist["Page"].HeaderLeft, null,
                react_default.a.createElement(components_PageTitleWithOrg, { title: title })),
            react_default.a.createElement(clockface_dist["Page"].HeaderRight, null,
                react_default.a.createElement(clockface_dist["Button"], { color: clockface_dist["ComponentColor"].Default, text: "Cancel", onClick: onCancel, testID: "task-cancel-btn" }),
                react_default.a.createElement(clockface_dist["Button"], { color: clockface_dist["ComponentColor"].Success, text: "Save", status: this.status, onClick: onSave, testID: "task-save-btn" }))));
    }
    get status() {
        return this.props.canSubmit
            ? clockface_dist["ComponentStatus"].Default
            : clockface_dist["ComponentStatus"].Disabled;
    }
}

// EXTERNAL MODULE: ./node_modules/@influxdata/flux-lsp-browser/flux-lsp-browser.js
var flux_lsp_browser = __webpack_require__(458);

// EXTERNAL MODULE: ./node_modules/react-monaco-editor/lib/index.js
var react_monaco_editor_lib = __webpack_require__(750);
var react_monaco_editor_lib_default = /*#__PURE__*/__webpack_require__.n(react_monaco_editor_lib);

// CONCATENATED MODULE: ./src/external/monaco.fluxTheme.ts
const THEME_NAME = 'baseTheme';
/* harmony default export */ var monaco_fluxTheme = (function (monaco) {
    monaco.editor.defineTheme(THEME_NAME, {
        base: 'vs-dark',
        inherit: false,
        rules: [
            {
                token: 'support.function',
                foreground: '#9394FF',
            },
            {
                token: 'keyword.operator.new',
                foreground: '#9394FF',
            },
            {
                token: 'keyword.control.flux',
                foreground: '#9394FF',
            },
            {
                token: 'comment.line.double-slash',
                foreground: '#676978',
            },
            {
                token: 'string.quoted.double.flux',
                foreground: '#7CE490',
            },
            {
                token: 'string.regexp',
                foreground: '#FFB6A0',
            },
            {
                token: 'constant.time',
                foreground: '#6BDFFF',
            },
            {
                token: 'constant.numeric',
                foreground: '#6BDFFF',
            },
            {
                token: 'constant.language',
                foreground: '#32B08C',
            },
            {
                token: 'keyword.operator',
                foreground: '#ff4d96',
            },
            {
                token: '',
                foreground: '#f8f8f8',
                background: '#202028',
            },
        ],
        colors: {
            'editor.foreground': '#F8F8F8',
            'editor.background': '#202028',
            'editorGutter.background': '#25252e',
            'editor.selectionBackground': '#353640',
            'editorLineNumber.foreground': '#666978',
            'editor.lineHighlightBackground': '#353640',
            'editorCursor.foreground': '#ffffff',
            'editorActiveLineNumber.foreground': '#bec2cc',
        },
    });
});

// CONCATENATED MODULE: ./src/external/constants.ts
const FLUXLANGID = 'flux';

// CONCATENATED MODULE: ./src/external/monaco.lspMessages.ts


const URI = 'monacoeditor';
const JSONRPC = '2.0';
const initialize = {
    jsonrpc: JSONRPC,
    id: 1,
    method: 'initialize',
    params: {},
};
const didOpen = (text) => ({
    jsonrpc: JSONRPC,
    id: 2,
    method: 'textDocument/didOpen',
    params: {
        textDocument: {
            uri: URI,
            languageId: FLUXLANGID,
            version: 1,
            text,
        },
    },
});
const didChange = (newText, version, messageID) => ({
    jsonrpc: JSONRPC,
    id: messageID,
    method: 'textDocument/didChange',
    params: {
        textDocument: {
            uri: URI,
            version: version,
        },
        contentChanges: [
            {
                text: newText,
            },
        ],
    },
});
const completion = (position, context) => ({
    jsonrpc: JSONRPC,
    id: 100,
    method: 'textDocument/completion',
    params: {
        textDocument: { uri: URI },
        position,
        context,
    },
});
const parseResponse = (response) => {
    const message = response.get_message();
    if (message) {
        const split = message.split('\n');
        const parsed_msg = Object(lodash["get"])(split, '2', null);
        return JSON.parse(parsed_msg);
    }
    else {
        const error = response.get_error();
        const split = error.split('\n');
        const parsed_err = Object(lodash["get"])(split, '2', null);
        return JSON.parse(parsed_err);
    }
};
const sendMessage = (message, server) => {
    const stringifiedMessage = JSON.stringify(message);
    const size = stringifiedMessage.length;
    const resp = server.process(`Content-Length: ${size}\r\n\r\n` + stringifiedMessage);
    return parseResponse(resp);
};

// EXTERNAL MODULE: ./node_modules/monaco-languageclient/lib/monaco-converter.js
var monaco_converter = __webpack_require__(1302);

// CONCATENATED MODULE: ./src/external/monaco.fluxCompletions.ts




const m2p = new monaco_converter["MonacoToProtocolConverter"]();
const p2m = new monaco_converter["ProtocolToMonacoConverter"]();
const registerCompletion = (monaco, server) => {
    const completionProvider = monaco.languages.registerCompletionItemProvider(FLUXLANGID, {
        provideCompletionItems: (model, position, context) => {
            const wordUntil = model.getWordUntilPosition(position);
            const defaultRange = new monaco.Range(position.lineNumber, wordUntil.startColumn, position.lineNumber, wordUntil.endColumn);
            const response = sendMessage(completion(m2p.asPosition(position.lineNumber, position.column), context), server);
            const completionItems = Object(lodash["get"])(response, 'result.items', null);
            if (!completionItems) {
                return;
            }
            return p2m.asCompletionResult(completionItems, defaultRange);
        },
        triggerCharacters: [
            '.',
            'a',
            'b',
            'c',
            'd',
            'e',
            'f',
            'g',
            'h',
            'i',
            'j',
            'k',
            'l',
            'm',
            'n',
            'o',
            'p',
            'q',
            'r',
            's',
            't',
            'u',
            'v',
            'w',
            'x',
            'y',
            'z',
        ],
    });
    return completionProvider;
};

// EXTERNAL MODULE: ./src/external/monaco.onigasm.ts
var monaco_onigasm = __webpack_require__(781);

// EXTERNAL MODULE: ./node_modules/monaco-textmate/dist/main.js
var main = __webpack_require__(449);

// EXTERNAL MODULE: ./node_modules/monaco-editor-textmate/dist/index.js
var monaco_editor_textmate_dist = __webpack_require__(789);

// CONCATENATED MODULE: ./src/external/monaco.fluxSyntax.ts




async function addSyntax(monaco) {
    await Object(monaco_onigasm["a" /* default */])();
    const registry = new main["Registry"]({
        getGrammarDefinition: async () => ({
            format: 'json',
            content: await __webpack_require__.e(/* import() */ 7).then(__webpack_require__.t.bind(null, 1550, 3)).then(data => {
                return JSON.stringify(data);
            }),
        }),
    });
    const grammars = new Map();
    grammars.set(FLUXLANGID, FLUXLANGID);
    monaco.languages.setLanguageConfiguration(FLUXLANGID, {
        autoClosingPairs: [
            { open: '"', close: '"' },
            { open: '[', close: ']' },
            { open: "'", close: "'" },
            { open: '{', close: '}' },
            { open: '(', close: ')' },
        ],
    });
    await Object(monaco_editor_textmate_dist["wireTmGrammars"])(monaco, registry, grammars);
}

// CONCATENATED MODULE: ./src/external/monaco.keyBindings.ts
const toggleCommenting = (s, isTogglingOn) => {
    if (isTogglingOn) {
        return `// ${s}`;
    }
    return s.replace(/\/\/\s*/, '');
};
const isCommented = (s) => !!s.match(/^\s*(\/\/(.*)$)/g);
function addKeyBindings(editor, monaco) {
    editor.addAction({
        id: 'toggle-comment',
        label: 'toggling comments',
        keybindings: [monaco.KeyMod.CtrlCmd | monaco.KeyCode.US_SLASH],
        run: function (ed) {
            const values = ed.getValue().split('\n');
            const selection = ed.getSelection();
            const { startLineNumber, endLineNumber, positionColumn, selectionStartColumn, } = selection;
            const isTogglingCommentingOn = values
                .slice(startLineNumber - 1, endLineNumber)
                .some((v) => !(v === '') && !isCommented(v));
            const updatedValues = values.map((v, i) => i >= startLineNumber - 1 && i <= endLineNumber - 1
                ? toggleCommenting(v, isTogglingCommentingOn)
                : v);
            ed.setValue(updatedValues.join('\n'));
            ed.setSelection(Object.assign(Object.assign({}, selection), { selectionStartColumn: isTogglingCommentingOn
                    ? selectionStartColumn + 3
                    : selectionStartColumn - 3, positionColumn: isTogglingCommentingOn
                    ? positionColumn + 3
                    : positionColumn - 3 }));
            return null;
        },
    });
}

// EXTERNAL MODULE: ./src/shared/components/FluxMonacoEditor.scss
var FluxMonacoEditor = __webpack_require__(790);

// CONCATENATED MODULE: ./src/shared/components/FluxMonacoEditor.tsx










const FluxEditorMonaco = ({ script, onChangeScript, onSubmitScript, setEditorInstance, }) => {
    let completionProvider = { dispose: () => { } };
    const lspServer = Object(react["useRef"])(new flux_lsp_browser["a" /* Server */](false));
    const [docVersion, setdocVersion] = Object(react["useState"])(2);
    const [msgID, setmsgID] = Object(react["useState"])(3);
    Object(react["useEffect"])(() => {
        sendMessage(initialize, lspServer.current);
        sendMessage(didOpen(script), lspServer.current);
        return () => {
            completionProvider.dispose();
        };
    }, []);
    const editorWillMount = (monaco) => {
        monaco.languages.register({ id: FLUXLANGID });
        monaco_fluxTheme(monaco);
        addSyntax(monaco);
        completionProvider = registerCompletion(monaco, lspServer.current);
    };
    const editorDidMount = (editor, monaco) => {
        if (setEditorInstance) {
            setEditorInstance(editor);
        }
        addKeyBindings(editor, monaco);
        editor.focus();
        editor.onKeyUp(evt => {
            const { ctrlKey, code } = evt;
            if (ctrlKey && code === 'Enter') {
                if (onSubmitScript) {
                    onSubmitScript();
                }
            }
        });
    };
    const onChange = (text) => {
        sendMessage(didChange(text, docVersion, msgID), lspServer.current);
        setdocVersion(docVersion + 1);
        setmsgID(msgID + 1);
        onChangeScript(text);
    };
    return (react_default.a.createElement("div", { className: "time-machine-editor", "data-testid": "flux-editor" },
        react_default.a.createElement(react_monaco_editor_lib_default.a, { language: FLUXLANGID, theme: THEME_NAME, value: script, onChange: onChange, options: {
                fontSize: 13,
                fontFamily: '"RobotoMono", monospace',
                cursorWidth: 2,
                lineNumbersMinChars: 4,
                lineDecorationsWidth: 0,
                minimap: {
                    renderCharacters: false,
                },
                overviewRulerBorder: false,
                automaticLayout: true,
            }, editorWillMount: editorWillMount, editorDidMount: editorDidMount })));
};
/* harmony default export */ var components_FluxMonacoEditor = (FluxEditorMonaco);

// EXTERNAL MODULE: ./src/tasks/actions/thunks.ts + 1 modules
var tasks_actions_thunks = __webpack_require__(121);

// CONCATENATED MODULE: ./src/utils/taskOptionsToFluxScript.ts


const taskOptionsToFluxScript = (options) => {
    let fluxScript = `option task = { \n  name: "${options.name}",\n`;
    if (options.taskScheduleType === types["TaskSchedule"].interval) {
        fluxScript = `${fluxScript}  every: ${options.interval},\n`;
    }
    else if (options.taskScheduleType === types["TaskSchedule"].cron) {
        fluxScript = `${fluxScript}  cron: "${options.cron}",\n`;
    }
    if (options.offset) {
        fluxScript = `${fluxScript}  offset: ${options.offset}\n`;
    }
    fluxScript = `${fluxScript}}`;
    return fluxScript;
};
const addDestinationToFluxScript = (script, options) => {
    const { toOrgName, toBucketName } = options;
    if (toOrgName && toBucketName) {
        const trimmedScript = Object(lodash["trimEnd"])(script);
        const trimmedOrgName = toOrgName.trim();
        const trimmedBucketName = toBucketName.trim();
        return `${trimmedScript}\n  |> to(bucket: "${trimmedBucketName}", org: "${trimmedOrgName}")`;
    }
    return script;
};

// CONCATENATED MODULE: ./src/shared/utils/pageTitles.ts


const pageTitleSuffixer = (pageTitles) => {
    const state = src_store.getState();
    const { name } = Object(selectors["a" /* getOrg */])(state) || null;
    const titles = [...pageTitles, name, 'InfluxDB 2.0'];
    return titles.join(' | ');
};

// CONCATENATED MODULE: ./src/tasks/containers/TaskPage.tsx











class TaskPage_TaskPage extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleChangeScript = (script) => {
            this.props.setNewScript(script);
        };
        this.handleChangeScheduleType = (value) => {
            this.props.setTaskOption({ key: 'taskScheduleType', value });
        };
        this.handleSave = () => {
            const { newScript, taskOptions } = this.props;
            const taskOption = taskOptionsToFluxScript(taskOptions);
            const script = addDestinationToFluxScript(newScript, taskOptions);
            const preamble = `${taskOption}`;
            this.props.saveNewScript(script, preamble);
        };
        this.handleCancel = () => {
            this.props.cancel();
        };
        this.handleChangeInput = (e) => {
            const { name, value } = e.target;
            const key = name;
            this.props.setTaskOption({ key, value });
        };
    }
    componentDidMount() {
        this.props.setTaskOption({
            key: 'taskScheduleType',
            value: types["TaskSchedule"].interval,
        });
    }
    componentWillUnmount() {
        this.props.clearTask();
    }
    render() {
        const { newScript, taskOptions } = this.props;
        return (react_default.a.createElement(clockface_dist["Page"], { titleTag: pageTitleSuffixer(['Create Task']) },
            react_default.a.createElement(TaskHeader_TaskHeader, { title: "Create Task", canSubmit: this.isFormValid, onCancel: this.handleCancel, onSave: this.handleSave }),
            react_default.a.createElement(clockface_dist["Page"].Contents, { fullWidth: true, scrollable: false },
                react_default.a.createElement("div", { className: "task-form" },
                    react_default.a.createElement("div", { className: "task-form--options" },
                        react_default.a.createElement(TaskForm_TaskForm, { taskOptions: taskOptions, canSubmit: this.isFormValid, onChangeInput: this.handleChangeInput, onChangeScheduleType: this.handleChangeScheduleType })),
                    react_default.a.createElement("div", { className: "task-form--editor" },
                        react_default.a.createElement(components_FluxMonacoEditor, { script: newScript, onChangeScript: this.handleChangeScript }))))));
    }
    get isFormValid() {
        const { taskOptions: { name, cron, interval }, newScript, } = this.props;
        const hasSchedule = !!cron || !!interval;
        return hasSchedule && !!name && !!newScript;
    }
}
const TaskPage_mstp = (state) => {
    const { tasks } = state.resources;
    const { taskOptions, newScript } = tasks;
    return {
        taskOptions,
        newScript,
    };
};
const TaskPage_mdtp = {
    setNewScript: creators["y" /* setNewScript */],
    saveNewScript: tasks_actions_thunks["l" /* saveNewScript */],
    setTaskOption: creators["C" /* setTaskOption */],
    clearTask: creators["r" /* clearTask */],
    cancel: tasks_actions_thunks["b" /* cancel */],
};
/* harmony default export */ var containers_TaskPage = (Object(es["b" /* connect */])(TaskPage_mstp, TaskPage_mdtp)(TaskPage_TaskPage));

// CONCATENATED MODULE: ./src/shared/components/AddResourceDropdown.tsx


class AddResourceDropdown_AddResourceDropdown extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleSelect = (selection) => {
            const { onSelectNew, onSelectImport, onSelectTemplate } = this.props;
            if (selection === this.newOption) {
                onSelectNew();
            }
            if (selection === this.importOption) {
                onSelectImport();
            }
            if (selection == this.templateOption) {
                onSelectTemplate();
            }
        };
    }
    render() {
        const { titleText, status } = this.props;
        return (react_default.a.createElement(clockface_dist["Dropdown"], { style: { width: `${160}px` }, testID: "add-resource-dropdown", button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { testID: "add-resource-dropdown--button", active: active, onClick: onClick, color: clockface_dist["ComponentColor"].Primary, size: clockface_dist["ComponentSize"].Small, icon: clockface_dist["IconFont"].Plus, status: status }, titleText || `Create ${this.props.resourceName}`)), menu: onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse, testID: "add-resource-dropdown--menu" }, this.optionItems)) }, this.optionItems));
    }
    get optionItems() {
        const importOption = this.importOption;
        const newOption = this.newOption;
        const templateOption = this.templateOption;
        const items = [
            react_default.a.createElement(clockface_dist["Dropdown"].Item, { id: newOption, key: newOption, onClick: this.handleSelect, value: newOption, testID: "add-resource-dropdown--new" }, newOption),
            react_default.a.createElement(clockface_dist["Dropdown"].Item, { id: importOption, key: importOption, onClick: this.handleSelect, value: importOption, testID: "add-resource-dropdown--import" }, importOption),
        ];
        if (!!this.props.canImportFromTemplate) {
            items.push(react_default.a.createElement(clockface_dist["Dropdown"].Item, { id: templateOption, key: templateOption, onClick: this.handleSelect, value: templateOption, testID: "add-resource-dropdown--template" }, templateOption));
        }
        return items;
    }
    get newOption() {
        return `New ${this.props.resourceName}`;
    }
    get importOption() {
        return `Import ${this.props.resourceName}`;
    }
    get templateOption() {
        return `From a Template`;
    }
}
AddResourceDropdown_AddResourceDropdown.defaultProps = {
    canImportFromTemplate: false,
    status: clockface_dist["ComponentStatus"].Default,
    titleText: null,
};

// CONCATENATED MODULE: ./src/tasks/components/TasksHeader.tsx





class TasksHeader_TasksHeader extends react["PureComponent"] {
    render() {
        const { onCreateTask, setShowInactive, showInactive, onImportTask, onImportFromTemplate, } = this.props;
        return (react_default.a.createElement(clockface_dist["Page"].Header, { fullWidth: false },
            react_default.a.createElement(clockface_dist["Page"].HeaderLeft, null,
                react_default.a.createElement(components_PageTitleWithOrg, { title: "Tasks" })),
            react_default.a.createElement(clockface_dist["Page"].HeaderRight, null,
                react_default.a.createElement(clockface_dist["InputLabel"], null, "Show Inactive"),
                react_default.a.createElement(clockface_dist["SlideToggle"], { active: showInactive, size: clockface_dist["ComponentSize"].ExtraSmall, onChange: setShowInactive }),
                react_default.a.createElement(AddResourceDropdown_AddResourceDropdown, { canImportFromTemplate: true, onSelectNew: onCreateTask, onSelectImport: onImportTask, onSelectTemplate: onImportFromTemplate, resourceName: "Task", status: this.addResourceStatus }))));
    }
    get addResourceStatus() {
        const { limitStatus } = this.props;
        if (limitStatus === actions_limits["b" /* LimitStatus */].EXCEEDED) {
            return clockface_dist["ComponentStatus"].Disabled;
        }
        return clockface_dist["ComponentStatus"].Default;
    }
}

// EXTERNAL MODULE: ./node_modules/memoize-one/dist/memoize-one.esm.js
var memoize_one_esm = __webpack_require__(78);

// EXTERNAL MODULE: ./src/clockface/index.ts + 13 modules
var clockface = __webpack_require__(53);

// CONCATENATED MODULE: ./src/shared/components/inlineLabels/InlineLabelsListItem.tsx





let InlineLabelsListItem_InlineLabelsListItem = class InlineLabelsListItem extends react["Component"] {
    constructor() {
        super(...arguments);
        this.handleMouseOver = () => {
            const { onMouseOver, id } = this.props;
            onMouseOver(id);
        };
        this.handleClick = (e) => {
            e.stopPropagation();
            const { onClick, id } = this.props;
            onClick(id);
        };
    }
    render() {
        const { name, colorHex, description, id } = this.props;
        return (react_default.a.createElement("div", { className: this.className, onMouseOver: this.handleMouseOver, onClick: this.handleClick, "data-testid": `label-list--item ${name}` },
            react_default.a.createElement(clockface_dist["Label"], { name: name, description: description, id: id, color: colorHex })));
    }
    get className() {
        const { active } = this.props;
        return classnames_default()('inline-labels--list-item', { active });
    }
};
InlineLabelsListItem_InlineLabelsListItem = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], InlineLabelsListItem_InlineLabelsListItem);
/* harmony default export */ var inlineLabels_InlineLabelsListItem = (InlineLabelsListItem_InlineLabelsListItem);

// CONCATENATED MODULE: ./src/shared/components/inlineLabels/InlineLabelsCreateLabelButton.tsx




let InlineLabelsCreateLabelButton_InlineLabelsCreateLabelButton = class InlineLabelsCreateLabelButton extends react["Component"] {
    constructor() {
        super(...arguments);
        this.handleMouseOver = () => {
            const { onMouseOver, id } = this.props;
            onMouseOver(id);
        };
        this.handleClick = (e) => {
            e.stopPropagation();
            this.props.onClick();
        };
    }
    render() {
        const { name } = this.props;
        return (react_default.a.createElement("div", { className: this.className, onMouseOver: this.handleMouseOver, onClick: this.handleClick, "data-testid": "inline-labels--create-new" },
            "Create new label \"",
            react_default.a.createElement("strong", null, `${name}`),
            "\""));
    }
    get className() {
        const { active } = this.props;
        return classnames_default()('inline-labels--list-item inline-labels--create-new', {
            active,
        });
    }
};
InlineLabelsCreateLabelButton_InlineLabelsCreateLabelButton = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], InlineLabelsCreateLabelButton_InlineLabelsCreateLabelButton);
/* harmony default export */ var inlineLabels_InlineLabelsCreateLabelButton = (InlineLabelsCreateLabelButton_InlineLabelsCreateLabelButton);

// CONCATENATED MODULE: ./src/shared/components/inlineLabels/InlineLabelsList.tsx








let InlineLabelsList_InlineLabelsList = class InlineLabelsList extends react["Component"] {
    render() {
        return (react_default.a.createElement("div", { className: "inline-labels--list-container" },
            react_default.a.createElement(clockface_dist["DapperScrollbars"], { autoSize: true, autoHide: false, style: { maxWidth: '100%', maxHeight: '300px' }, noScrollX: true },
                react_default.a.createElement("div", { className: "inline-labels--list", "data-testid": "inline-labels--list" }, this.menuItems))));
    }
    get menuItems() {
        const { filteredLabels, onItemClick, onUpdateSelectedItemID, selectedItemID, allLabelsUsed, searchTerm, onStartCreatingLabel, } = this.props;
        if (filteredLabels.length) {
            return filteredLabels.map(label => {
                if (label.id === ADD_NEW_LABEL_ITEM_ID) {
                    return (react_default.a.createElement(inlineLabels_InlineLabelsCreateLabelButton, { active: selectedItemID === label.id, key: label.id, name: label.name, id: label.id, onClick: onStartCreatingLabel, onMouseOver: onUpdateSelectedItemID }));
                }
                return (react_default.a.createElement(inlineLabels_InlineLabelsListItem, { active: selectedItemID === label.id, key: label.id, name: label.name, id: label.id, description: label.properties.description, colorHex: label.properties.color, onClick: onItemClick, onMouseOver: onUpdateSelectedItemID }));
            });
        }
        if (allLabelsUsed) {
            return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Small, testID: "inline-labels-list--used-all" },
                react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                    "This resource has all available labels,",
                    react_default.a.createElement("br", null),
                    "start typing to create a new label")));
        }
        if (!searchTerm) {
            return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Small, testID: "inline-labels-list--none-exist" },
                react_default.a.createElement(clockface_dist["EmptyState"].Text, null, "Start typing to create a new label")));
        }
    }
};
InlineLabelsList_InlineLabelsList = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], InlineLabelsList_InlineLabelsList);
/* harmony default export */ var inlineLabels_InlineLabelsList = (InlineLabelsList_InlineLabelsList);

// CONCATENATED MODULE: ./src/shared/components/inlineLabels/InlineLabelPopover.tsx








var ArrowDirection;
(function (ArrowDirection) {
    ArrowDirection[ArrowDirection["Up"] = -1] = "Up";
    ArrowDirection[ArrowDirection["Down"] = 1] = "Down";
})(ArrowDirection || (ArrowDirection = {}));
let InlineLabelPopover_InlineLabelPopover = class InlineLabelPopover extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleKeyDown = (e) => {
            const { selectedItemID, onAddLabel, onStartCreatingLabel } = this.props;
            switch (e.key) {
                case 'Enter':
                    e.preventDefault();
                    e.stopPropagation();
                    if (selectedItemID === ADD_NEW_LABEL_ITEM_ID) {
                        onStartCreatingLabel();
                        break;
                    }
                    if (selectedItemID) {
                        onAddLabel(selectedItemID);
                        break;
                    }
                case 'ArrowUp':
                    this.handleHighlightAdjacentItem(ArrowDirection.Up);
                    break;
                case 'ArrowDown':
                    this.handleHighlightAdjacentItem(ArrowDirection.Down);
                    break;
                default:
                    break;
            }
        };
        this.handleHighlightAdjacentItem = (direction) => {
            const { selectedItemID, filteredLabels, onUpdateSelectedItemID } = this.props;
            if (!filteredLabels.length || !selectedItemID) {
                return null;
            }
            const selectedItemIndex = lodash_default.a.findIndex(filteredLabels, label => label.id === selectedItemID);
            const adjacentIndex = Math.min(Math.max(selectedItemIndex + direction, 0), filteredLabels.length - 1);
            const adjacentID = filteredLabels[adjacentIndex].id;
            onUpdateSelectedItemID(adjacentID);
        };
        this.handleRefocusInput = (e) => {
            e.target.focus();
        };
    }
    render() {
        const { searchTerm, allLabelsUsed, selectedItemID, onAddLabel, triggerRef, onStartCreatingLabel, onUpdateSelectedItemID, onInputChange, filteredLabels, } = this.props;
        return (react_default.a.createElement(clockface_dist["Popover"], { appearance: clockface_dist["Appearance"].Outline, position: clockface_dist["PopoverPosition"].Below, triggerRef: triggerRef, distanceFromTrigger: 8, showEvent: clockface_dist["PopoverInteraction"].Click, hideEvent: clockface_dist["PopoverInteraction"].Click, testID: "inline-labels--popover", contents: () => (react_default.a.createElement("span", null,
                react_default.a.createElement("h5", { className: "inline-labels--popover-heading" }, "Add Labels"),
                react_default.a.createElement(clockface_dist["Input"], { icon: clockface_dist["IconFont"].Search, placeholder: "Filter labels...", value: searchTerm, onKeyDown: this.handleKeyDown, onChange: onInputChange, autoFocus: true, onBlur: this.handleRefocusInput, testID: "inline-labels--popover-field" }),
                react_default.a.createElement(inlineLabels_InlineLabelsList, { searchTerm: searchTerm, allLabelsUsed: allLabelsUsed, filteredLabels: filteredLabels, selectedItemID: selectedItemID, onItemClick: onAddLabel, onUpdateSelectedItemID: onUpdateSelectedItemID, onStartCreatingLabel: onStartCreatingLabel }))) }));
    }
};
InlineLabelPopover_InlineLabelPopover = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], InlineLabelPopover_InlineLabelPopover);
/* harmony default export */ var inlineLabels_InlineLabelPopover = (InlineLabelPopover_InlineLabelPopover);

// EXTERNAL MODULE: ./src/labels/constants/index.ts
var labels_constants = __webpack_require__(247);

// EXTERNAL MODULE: ./src/labels/utils/index.ts
var utils = __webpack_require__(189);

// CONCATENATED MODULE: ./src/labels/components/LabelOverlayForm.tsx





const MAX_LABEL_CHARS = 50;


let LabelOverlayForm_LabelOverlayForm = class LabelOverlayForm extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleNameValidation = (name) => {
            return this.props.onNameValidation(name);
        };
    }
    render() {
        const { id, name, color, onSubmit, buttonText, description, onCloseModal, onInputChange, onLabelPropertyChange, onColorChange, isFormValid, } = this.props;
        return (react_default.a.createElement(clockface_dist["Form"], { onSubmit: onSubmit, testID: "label-overlay-form" },
            react_default.a.createElement(clockface_dist["Grid"], null,
                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Preview" },
                            react_default.a.createElement(clockface_dist["Form"].Box, { className: "label-overlay--preview" },
                                react_default.a.createElement(clockface_dist["Label"], { size: clockface_dist["ComponentSize"].Small, name: this.placeholderLabelName, description: description, color: this.validatedColor, id: id })))),
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Twelve },
                        react_default.a.createElement(clockface_dist["Form"].ValidationElement, { label: "Name", value: name, required: true, validationFunc: this.handleNameValidation }, status => (react_default.a.createElement(clockface_dist["Input"], { type: clockface_dist["InputType"].Text, placeholder: "Name this Label", name: "name", autoFocus: true, value: name, onChange: onInputChange, status: status, maxLength: MAX_LABEL_CHARS, testID: "create-label-form--name" })))),
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Description" },
                            react_default.a.createElement(clockface_dist["Input"], { type: clockface_dist["InputType"].Text, placeholder: "Add a optional description", name: "description", value: description, onChange: onLabelPropertyChange, testID: "create-label-form--description" }))),
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Twelve },
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Color" },
                            react_default.a.createElement(clockface_dist["ColorPicker"], { color: color, onChange: onColorChange }))),
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
                        react_default.a.createElement(clockface_dist["Form"].Footer, null,
                            react_default.a.createElement(clockface_dist["Button"], { text: "Cancel", onClick: onCloseModal, titleText: "Cancel creation of Label and return to list", type: clockface_dist["ButtonType"].Button, testID: "create-label-form--cancel" }),
                            react_default.a.createElement(clockface_dist["Button"], { text: buttonText, color: clockface_dist["ComponentColor"].Success, type: clockface_dist["ButtonType"].Submit, testID: "create-label-form--submit", status: isFormValid
                                    ? clockface_dist["ComponentStatus"].Default
                                    : clockface_dist["ComponentStatus"].Disabled })))))));
    }
    get placeholderLabelName() {
        const { name } = this.props;
        if (!name) {
            return 'Name this Label';
        }
        return name;
    }
    get validatedColor() {
        const { color } = this.props;
        if (Object(utils["b" /* validateHexCode */])(color)) {
            return labels_constants["d" /* INPUT_ERROR_COLOR */];
        }
        return color;
    }
};
LabelOverlayForm_LabelOverlayForm = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], LabelOverlayForm_LabelOverlayForm);
/* harmony default export */ var components_LabelOverlayForm = (LabelOverlayForm_LabelOverlayForm);

// CONCATENATED MODULE: ./src/labels/components/CreateLabelOverlay.tsx






let CreateLabelOverlay_CreateLabelOverlay = class CreateLabelOverlay extends react["Component"] {
    constructor(props) {
        super(props);
        this.handleSubmit = () => {
            const { onCreateLabel, onDismiss } = this.props;
            try {
                onCreateLabel(this.state.label);
            }
            finally {
                onDismiss();
                this.resetForm();
            }
        };
        this.handleInputChange = (e) => {
            const { value, name } = e.target;
            this.setState(prevState => ({
                label: Object.assign(Object.assign({}, prevState.label), { [name]: value }),
            }));
        };
        this.handleLabelPropertyChange = (e) => {
            const { value, name } = e.target;
            this.setState(prevState => ({
                label: Object.assign(Object.assign({}, prevState.label), { properties: Object.assign(Object.assign({}, prevState.label.properties), { [name]: value }) }),
            }));
        };
        this.handleColorChange = (color, colorStatus) => {
            const properties = Object.assign(Object.assign({}, this.state.label.properties), { color });
            const label = Object.assign(Object.assign({}, this.state.label), { properties });
            this.setState({ label, colorStatus });
        };
        this.state = {
            label: Object.assign(Object.assign({}, labels_constants["a" /* EMPTY_LABEL */]), { name: this.props.overrideDefaultName }),
            colorStatus: clockface_dist["ComponentStatus"].Default,
        };
    }
    componentDidUpdate(prevProps) {
        if (prevProps.overrideDefaultName !== this.props.overrideDefaultName &&
            this.props.isVisible === false) {
            const name = this.props.overrideDefaultName;
            const label = Object.assign(Object.assign({}, this.state.label), { name });
            this.setState({ label });
        }
    }
    render() {
        const { isVisible, onDismiss, onNameValidation } = this.props;
        const { label } = this.state;
        return (react_default.a.createElement(clockface_dist["Overlay"], { visible: isVisible },
            react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 400 },
                react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Create Label", onDismiss: onDismiss }),
                react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                    react_default.a.createElement(components_LabelOverlayForm, { "data-testid": "create-label--overlay", id: label.id, name: label.name, onCloseModal: onDismiss, buttonText: "Create Label", onSubmit: this.handleSubmit, isFormValid: this.isFormValid, color: label.properties.color, onNameValidation: onNameValidation, onInputChange: this.handleInputChange, onLabelPropertyChange: this.handleLabelPropertyChange, onColorChange: this.handleColorChange, description: label.properties.description })))));
    }
    get isFormValid() {
        const { label, colorStatus } = this.state;
        const { onNameValidation } = this.props;
        const nameIsValid = onNameValidation(label.name) === null && !!label.name;
        const colorIsValid = colorStatus === clockface_dist["ComponentStatus"].Default ||
            colorStatus === clockface_dist["ComponentStatus"].Valid;
        return nameIsValid && colorIsValid;
    }
    resetForm() {
        this.setState({
            label: labels_constants["a" /* EMPTY_LABEL */],
        });
    }
};
CreateLabelOverlay_CreateLabelOverlay = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], CreateLabelOverlay_CreateLabelOverlay);
/* harmony default export */ var components_CreateLabelOverlay = (CreateLabelOverlay_CreateLabelOverlay);

// EXTERNAL MODULE: ./src/types/overlay.ts
var overlay = __webpack_require__(396);

// EXTERNAL MODULE: ./src/labels/actions/thunks.ts + 1 modules
var labels_actions_thunks = __webpack_require__(360);

// CONCATENATED MODULE: ./src/shared/components/inlineLabels/InlineLabelsEditor.tsx











const ADD_NEW_LABEL_ITEM_ID = 'add-new-label';
const ADD_NEW_LABEL_LABEL = {
    id: ADD_NEW_LABEL_ITEM_ID,
    name: '',
    properties: {
        color: '#000000',
        description: '',
    },
    status: types["RemoteDataState"].NotStarted,
};

let InlineLabelsEditor_InlineLabelsEditor = class InlineLabelsEditor extends react["Component"] {
    constructor(props) {
        super(props);
        this.popoverTrigger = Object(react["createRef"])();
        this.handleAddLabel = async (labelID) => {
            const { onAddLabel, labels } = this.props;
            const label = labels.find(label => label.id === labelID);
            if (label) {
                this.selectAvailableItem();
                await onAddLabel(label);
            }
        };
        this.selectAvailableItem = () => {
            const { searchTerm } = this.state;
            const filteredLabels = this.filterLabels(searchTerm);
            if (filteredLabels.length) {
                this.handleUpdateSelectedItemID(filteredLabels[0].id);
            }
        };
        this.handleUpdateSelectedItemID = (selectedItemID) => {
            this.setState({ selectedItemID });
        };
        this.handleShowPopover = () => {
            const { availableLabels } = this;
            const { isPopoverVisible } = this.state;
            if (lodash_default.a.isEmpty(availableLabels)) {
                if (isPopoverVisible) {
                    return;
                }
                return this.setState({
                    isPopoverVisible: true,
                    selectedItemID: null,
                    searchTerm: '',
                });
            }
            const selectedItemID = this.availableLabels[0].id;
            this.setState({ isPopoverVisible: true, selectedItemID, searchTerm: '' });
        };
        this.handleInputChange = (e) => {
            const searchTerm = e.target.value;
            const filteredLabels = this.filterLabels(searchTerm);
            if (filteredLabels.length) {
                const selectedItemID = filteredLabels[0].id;
                this.setState({ searchTerm, selectedItemID });
            }
            else {
                this.setState({ searchTerm });
            }
        };
        this.filterLabels = (searchTerm) => {
            const filteredLabels = this.availableLabels.filter(label => {
                const lowercaseName = label.name.toLowerCase();
                const lowercaseSearchTerm = searchTerm.toLowerCase();
                return lowercaseName.includes(lowercaseSearchTerm);
            });
            const searchTermHasExactMatch = filteredLabels.reduce((acc, current) => {
                return acc === true || current.name === searchTerm;
            }, false);
            if (!searchTermHasExactMatch && searchTerm) {
                return this.filteredLabelsWithAddButton(filteredLabels);
            }
            return this.filteredLabelsWithoutAddButton(filteredLabels);
        };
        this.filteredLabelsWithAddButton = (filteredLabels) => {
            const { searchTerm } = this.state;
            const updatedAddButton = Object.assign(Object.assign({}, ADD_NEW_LABEL_LABEL), { name: searchTerm });
            const addButton = filteredLabels.find(label => label.id === updatedAddButton.id);
            if (addButton) {
                return filteredLabels.map(fl => {
                    return fl.id === updatedAddButton.id ? updatedAddButton : fl;
                });
            }
            return [updatedAddButton, ...filteredLabels];
        };
        this.filteredLabelsWithoutAddButton = (filteredLabels) => {
            return filteredLabels.filter(label => label.id !== ADD_NEW_LABEL_ITEM_ID);
        };
        this.handleCreateLabel = async (label) => {
            const { onCreateLabel, onAddLabel } = this.props;
            const { name, properties } = label;
            await onCreateLabel(name, properties);
            const newLabel = this.props.labels.find(l => l.name === label.name);
            onAddLabel(newLabel);
        };
        this.handleStartCreatingLabel = () => {
            this.setState({ isCreatingLabel: overlay["a" /* OverlayState */].Open });
        };
        this.handleStopCreatingLabel = () => {
            this.setState({ isCreatingLabel: overlay["a" /* OverlayState */].Closed, searchTerm: '' });
        };
        this.handleEnsureUniqueLabelName = (name) => {
            const { labels } = this.props;
            const names = labels.map(label => label.name);
            return Object(utils["c" /* validateLabelUniqueness */])(names, name);
        };
        this.state = {
            selectedItemID: null,
            searchTerm: '',
            isPopoverVisible: false,
            isCreatingLabel: overlay["a" /* OverlayState */].Closed,
        };
    }
    render() {
        const { isCreatingLabel, searchTerm } = this.state;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement("div", { className: "inline-labels--editor" },
                react_default.a.createElement("div", { className: "inline-labels--add-wrapper", ref: this.popoverTrigger },
                    react_default.a.createElement("div", { className: "inline-labels--add" },
                        react_default.a.createElement(clockface_dist["SquareButton"], { color: clockface_dist["ComponentColor"].Secondary, titleText: "Add labels", icon: clockface_dist["IconFont"].Plus, testID: "inline-labels--add" })),
                    this.noLabelsIndicator),
                this.popover),
            react_default.a.createElement(components_CreateLabelOverlay, { isVisible: isCreatingLabel === overlay["a" /* OverlayState */].Open, onDismiss: this.handleStopCreatingLabel, overrideDefaultName: searchTerm, onCreateLabel: this.handleCreateLabel, onNameValidation: this.handleEnsureUniqueLabelName })));
    }
    get popover() {
        const { labels, selectedLabels } = this.props;
        const { searchTerm, selectedItemID } = this.state;
        const labelsUsed = labels.length > 0 && labels.length === selectedLabels.length;
        return (react_default.a.createElement(inlineLabels_InlineLabelPopover, { searchTerm: searchTerm, triggerRef: this.popoverTrigger, selectedItemID: selectedItemID, onUpdateSelectedItemID: this.handleUpdateSelectedItemID, allLabelsUsed: labelsUsed, onStartCreatingLabel: this.handleStartCreatingLabel, onInputChange: this.handleInputChange, filteredLabels: this.filterLabels(searchTerm), onAddLabel: this.handleAddLabel }));
    }
    get noLabelsIndicator() {
        const { selectedLabels } = this.props;
        if (selectedLabels.length) {
            return;
        }
        return (react_default.a.createElement("div", { className: "cf-label cf-label--xs cf-label--colorless", onClick: this.handleShowPopover, "data-testid": "inline-labels--empty" },
            react_default.a.createElement("span", { className: "cf-label--name" }, "Add a label")));
    }
    get availableLabels() {
        const { selectedLabels, labels } = this.props;
        return lodash_default.a.differenceBy(labels, selectedLabels, label => label.name);
    }
};
InlineLabelsEditor_InlineLabelsEditor = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], InlineLabelsEditor_InlineLabelsEditor);
const InlineLabelsEditor_mstp = () => {
    return {};
};
const InlineLabelsEditor_mdtp = {
    onCreateLabel: labels_actions_thunks["a" /* createLabel */],
};
/* harmony default export */ var inlineLabels_InlineLabelsEditor = (Object(es["b" /* connect */])(InlineLabelsEditor_mstp, InlineLabelsEditor_mdtp)(InlineLabelsEditor_InlineLabelsEditor));

// CONCATENATED MODULE: ./src/shared/components/inlineLabels/InlineLabels.tsx








var LabelsEditMode;
(function (LabelsEditMode) {
    LabelsEditMode["Editable"] = "editable";
    LabelsEditMode["Readonly"] = "readonly";
})(LabelsEditMode || (LabelsEditMode = {}));
let InlineLabels_InlineLabels = class InlineLabels extends react["Component"] {
    constructor() {
        super(...arguments);
        this.handleLabelClick = (labelName) => {
            const { onFilterChange } = this.props;
            onFilterChange(labelName);
        };
        this.handleDeleteLabel = (labelID) => {
            const { onRemoveLabel, selectedLabels } = this.props;
            const label = selectedLabels.find(label => label.id === labelID);
            onRemoveLabel(label);
        };
    }
    render() {
        return react_default.a.createElement("div", { className: "inline-labels" }, this.selectedLabels);
    }
    get selectedLabels() {
        const { selectedLabels, labels, onAddLabel } = this.props;
        return (react_default.a.createElement("div", { className: "inline-labels--container" },
            this.isEditable && (react_default.a.createElement(inlineLabels_InlineLabelsEditor, { labels: labels, selectedLabels: selectedLabels, onAddLabel: onAddLabel })),
            this.currentLabels));
    }
    get currentLabels() {
        const { selectedLabels } = this.props;
        const onDelete = this.isEditable ? this.handleDeleteLabel : null;
        if (selectedLabels.length) {
            return selectedLabels.map(_label => {
                const label = Object.assign({}, _label);
                if (!label.hasOwnProperty('properties')) {
                    label.properties = {
                        color: '#FF0000',
                        description: '',
                    };
                }
                return (react_default.a.createElement(clockface_dist["Label"], { id: label.id, key: label.id, name: label.name, color: label.properties.color, description: label.properties.description, onDelete: onDelete, onClick: this.handleLabelClick.bind(this, label.name) }));
            });
        }
    }
    get isEditable() {
        return this.props.editMode === LabelsEditMode.Editable;
    }
};
InlineLabels_InlineLabels.defaultProps = {
    editMode: LabelsEditMode.Editable,
};
InlineLabels_InlineLabels = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], InlineLabels_InlineLabels);
const InlineLabels_mstp = (state, props) => {
    const labels = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Labels);
    const selectedLabels = Object(resources_selectors["c" /* getLabels */])(state, props.selectedLabelIDs);
    return { labels, selectedLabels };
};
/* harmony default export */ var inlineLabels_InlineLabels = (Object(es["b" /* connect */])(InlineLabels_mstp)(InlineLabels_InlineLabels));

// EXTERNAL MODULE: ./src/shared/components/lastRunTaskStatus/LastRunTaskStatus.scss
var LastRunTaskStatus = __webpack_require__(1332);

// CONCATENATED MODULE: ./src/shared/components/lastRunTaskStatus/LastRunTaskStatus.tsx




const LastRunTaskStatus_LastRunTaskStatus = ({ lastRunError, lastRunStatus }) => {
    const triggerRef = Object(react["useRef"])(null);
    const [highlight, setHighlight] = Object(react["useState"])(false);
    let color = clockface_dist["ComponentColor"].Success;
    let icon = clockface_dist["IconFont"].Checkmark;
    let text = 'Task ran successfully!';
    if (lastRunStatus === 'failed' || lastRunError !== undefined) {
        color = clockface_dist["ComponentColor"].Danger;
        icon = clockface_dist["IconFont"].AlertTriangle;
        text = lastRunError;
    }
    if (lastRunStatus === 'cancel') {
        color = clockface_dist["ComponentColor"].Warning;
        icon = clockface_dist["IconFont"].Remove;
        text = 'Task Cancelled';
    }
    const statusClassName = classnames_default()('last-run-task-status', {
        [`last-run-task-status__${color}`]: color,
        'last-run-task-status__highlight': highlight,
    });
    const popoverContents = () => (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement("h6", null, "Last Run Status:"),
        react_default.a.createElement("p", null, text)));
    return (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement("div", { "data-testid": "last-run-status--icon", className: statusClassName, ref: triggerRef },
            react_default.a.createElement(clockface_dist["Icon"], { glyph: icon })),
        react_default.a.createElement(clockface_dist["Popover"], { className: "last-run-task-status--popover", enableDefaultStyles: false, color: color, appearance: clockface_dist["Appearance"].Outline, triggerRef: triggerRef, contents: popoverContents, showEvent: clockface_dist["PopoverInteraction"].Hover, hideEvent: clockface_dist["PopoverInteraction"].Hover, onShow: () => setHighlight(true), onHide: () => setHighlight(false) })));
};
/* harmony default export */ var lastRunTaskStatus_LastRunTaskStatus = (LastRunTaskStatus_LastRunTaskStatus);

// EXTERNAL MODULE: ./src/dashboards/constants/index.ts
var dashboards_constants = __webpack_require__(70);

// CONCATENATED MODULE: ./src/tasks/components/TaskCard.tsx










class TaskCard_TaskCard extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleNameClick = (e) => {
            e.preventDefault();
            this.props.onSelect(this.props.task.id);
        };
        this.handleViewRuns = () => {
            const { router, task, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/tasks/${task.id}/runs`);
        };
        this.handleRenameTask = (name) => {
            const { onUpdate, task: { id }, } = this.props;
            onUpdate(name, id);
        };
        this.handleExport = () => {
            const { router, task, location: { pathname }, } = this.props;
            router.push(`${pathname}/${task.id}/export`);
        };
        this.handleAddLabel = (label) => {
            const { task, onAddTaskLabel } = this.props;
            onAddTaskLabel(task.id, label);
        };
        this.handleRemoveLabel = (label) => {
            const { task, onDeleteTaskLabel } = this.props;
            onDeleteTaskLabel(task.id, label);
        };
        this.changeToggle = () => {
            const { task, onActivate } = this.props;
            if (task.status === 'active') {
                task.status = 'inactive';
            }
            else {
                task.status = 'active';
            }
            onActivate(task);
        };
    }
    render() {
        const { task } = this.props;
        return (react_default.a.createElement(clockface_dist["ResourceCard"], { testID: "task-card", disabled: !this.isTaskActive, labels: this.labels, contextMenu: this.contextMenu, name: react_default.a.createElement(clockface_dist["ResourceCard"].EditableName, { onClick: this.handleNameClick, onUpdate: this.handleRenameTask, name: task.name, noNameString: dashboards_constants["g" /* DEFAULT_TASK_NAME */], testID: "task-card--name", buttonTestID: "task-card--name-button", inputTestID: "task-card--input" }), metaData: [
                this.activeToggle,
                react_default.a.createElement(react_default.a.Fragment, null,
                    "Last completed at ",
                    task.latestCompleted),
                react_default.a.createElement(react_default.a.Fragment, null, `Scheduled to run ${this.schedule}`),
            ], toggle: react_default.a.createElement(lastRunTaskStatus_LastRunTaskStatus, { lastRunError: task.lastRunError, lastRunStatus: task.lastRunStatus }) }));
    }
    get activeToggle() {
        const labelText = this.isTaskActive ? 'Active' : 'Inactive';
        return (react_default.a.createElement(clockface_dist["FlexBox"], { margin: clockface_dist["ComponentSize"].Small },
            react_default.a.createElement(clockface_dist["SlideToggle"], { active: this.isTaskActive, size: clockface_dist["ComponentSize"].ExtraSmall, onChange: this.changeToggle, testID: "task-card--slide-toggle" }),
            react_default.a.createElement(clockface_dist["InputLabel"], { active: this.isTaskActive }, labelText)));
    }
    get contextMenu() {
        const { task, onClone, onDelete, onRunTask } = this.props;
        return (react_default.a.createElement(clockface["f" /* Context */], null,
            react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface_dist["IconFont"].CogThick },
                react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Export", action: this.handleExport }),
                react_default.a.createElement(clockface["f" /* Context */].Item, { label: "View Task Runs", action: this.handleViewRuns }),
                react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Run Task", action: onRunTask, value: task.id })),
            react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface_dist["IconFont"].Duplicate, color: clockface_dist["ComponentColor"].Secondary },
                react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Clone", action: onClone, value: task })),
            react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface_dist["IconFont"].Trash, color: clockface_dist["ComponentColor"].Danger, testID: "context-delete-menu" },
                react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Delete", action: onDelete, value: task, testID: "context-delete-task" }))));
    }
    get labels() {
        const { task, onFilterChange } = this.props;
        return (react_default.a.createElement(inlineLabels_InlineLabels, { selectedLabelIDs: task.labels, onFilterChange: onFilterChange, onAddLabel: this.handleAddLabel, onRemoveLabel: this.handleRemoveLabel }));
    }
    get isTaskActive() {
        const { task } = this.props;
        if (task.status === 'active') {
            return true;
        }
        return false;
    }
    get schedule() {
        const { task } = this.props;
        if (task.every && task.offset) {
            return `every ${task.every}, offset ${task.offset}`;
        }
        if (task.every) {
            return `every ${task.every}`;
        }
        if (task.cron) {
            return task.cron;
        }
        return '';
    }
}
const TaskCard_mdtp = {
    onAddTaskLabel: tasks_actions_thunks["a" /* addTaskLabel */],
    onDeleteTaskLabel: tasks_actions_thunks["g" /* deleteTaskLabel */],
};
/* harmony default export */ var components_TaskCard = (Object(es["b" /* connect */])(null, TaskCard_mdtp)(Object(react_router_es["g" /* withRouter */])(TaskCard_TaskCard)));

// CONCATENATED MODULE: ./src/tasks/components/EmptyTasksList.tsx




class EmptyTasksList_EmptyTasksLists extends react["PureComponent"] {
    render() {
        const { searchTerm, onCreate, totalCount, onImportTask, onImportFromTemplate, } = this.props;
        if (totalCount && searchTerm === '') {
            return (react_default.a.createElement(clockface_dist["EmptyState"], { testID: "empty-tasks-list", size: clockface_dist["ComponentSize"].Large },
                react_default.a.createElement(clockface_dist["EmptyState"].Text, null, `All ${totalCount} of your Tasks are inactive`)));
        }
        if (searchTerm === '') {
            return (react_default.a.createElement(clockface_dist["EmptyState"], { testID: "empty-tasks-list", size: clockface_dist["ComponentSize"].Large },
                react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                    "Looks like you don't have any ",
                    react_default.a.createElement("b", null, "Tasks"),
                    ", why not create one?\""),
                react_default.a.createElement(AddResourceDropdown_AddResourceDropdown, { canImportFromTemplate: true, onSelectNew: onCreate, onSelectImport: onImportTask, onSelectTemplate: onImportFromTemplate, resourceName: "Task" })));
        }
        return (react_default.a.createElement(clockface_dist["EmptyState"], { testID: "empty-tasks-list", size: clockface_dist["ComponentSize"].Large },
            react_default.a.createElement(clockface_dist["EmptyState"].Text, null, "No Tasks match your search term")));
    }
}

// CONCATENATED MODULE: ./src/shared/utils/sort.ts

var SortTypes;
(function (SortTypes) {
    SortTypes["String"] = "string";
    SortTypes["Date"] = "date";
    SortTypes["Float"] = "float";
})(SortTypes || (SortTypes = {}));
function orderByType(data, type) {
    switch (type) {
        case SortTypes.String:
            return Object(lodash["toLower"])(data);
        case SortTypes.Date:
            return Date.parse(data);
        case SortTypes.Float:
            return parseFloat(data);
        default:
            return data;
    }
}
function getSortedResources(resourceList, sortKey, sortDirection, sortType) {
    if (sortKey && sortDirection) {
        return Object(lodash["orderBy"])(resourceList, r => orderByType(Object(lodash["get"])(r, sortKey), sortType), [sortDirection]);
    }
    return resourceList;
}

// CONCATENATED MODULE: ./src/tasks/components/TasksList.tsx







class TasksList_TasksList extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.memGetSortedResources = Object(memoize_one_esm["a" /* default */])(getSortedResources);
        this.state = {
            taskLabelsEdit: null,
            isEditingTaskLabels: false,
        };
    }
    componentDidMount() {
        this.props.checkTaskLimits();
    }
    render() {
        const { searchTerm, onCreate, totalCount, filterComponent, onImportTask, sortKey, sortDirection, onClickColumn, onImportFromTemplate, } = this.props;
        const headerKeys = ['name', 'status', 'every', 'latestCompleted'];
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["ResourceList"], null,
                react_default.a.createElement(clockface_dist["ResourceList"].Header, { filterComponent: filterComponent },
                    react_default.a.createElement(clockface_dist["ResourceList"].Sorter, { name: "Name", sortKey: headerKeys[0], sort: sortKey === headerKeys[0] ? sortDirection : clockface_dist["Sort"].None, onClick: onClickColumn }),
                    react_default.a.createElement(clockface_dist["ResourceList"].Sorter, { name: "Active", sortKey: headerKeys[1], sort: sortKey === headerKeys[1] ? sortDirection : clockface_dist["Sort"].None, onClick: onClickColumn }),
                    react_default.a.createElement(clockface_dist["ResourceList"].Sorter, { name: "Schedule", sortKey: headerKeys[2], sort: sortKey === headerKeys[2] ? sortDirection : clockface_dist["Sort"].None, onClick: onClickColumn }),
                    react_default.a.createElement(clockface_dist["ResourceList"].Sorter, { name: "Last Completed", sortKey: headerKeys[3], sort: sortKey === headerKeys[3] ? sortDirection : clockface_dist["Sort"].None, onClick: onClickColumn })),
                react_default.a.createElement(clockface_dist["ResourceList"].Body, { emptyState: react_default.a.createElement(EmptyTasksList_EmptyTasksLists, { searchTerm: searchTerm, onCreate: onCreate, totalCount: totalCount, onImportTask: onImportTask, onImportFromTemplate: onImportFromTemplate }) }, this.rows))));
    }
    get rows() {
        const { tasks, sortKey, sortDirection, sortType, onActivate, onDelete, onSelect, onClone, onUpdate, onRunTask, onFilterChange, } = this.props;
        const sortedTasks = this.memGetSortedResources(tasks, sortKey, sortDirection, sortType);
        return sortedTasks.map(task => (react_default.a.createElement(components_TaskCard, { key: `task-id--${task.id}`, task: task, onActivate: onActivate, onDelete: onDelete, onClone: onClone, onSelect: onSelect, onUpdate: onUpdate, onRunTask: onRunTask, onFilterChange: onFilterChange })));
    }
}

// CONCATENATED MODULE: ./src/shared/components/search_widget/SearchWidget.tsx






let SearchWidget_SearchWidget = class SearchWidget extends react["Component"] {
    constructor(props) {
        super(props);
        this.handleSearch = () => {
            this.props.onSearch(this.state.searchTerm);
        };
        this.handleBlur = (e) => {
            this.setState({ searchTerm: e.target.value }, this.handleSearch);
        };
        this.handleChange = (e) => {
            this.setState({ searchTerm: e.target.value }, this.handleSearch);
        };
        this.state = {
            searchTerm: this.props.searchTerm,
        };
    }
    componentDidUpdate(prevProps) {
        if (this.props.searchTerm !== prevProps.searchTerm) {
            this.setState({ searchTerm: this.props.searchTerm });
        }
    }
    UNSAFE_componentWillMount() {
        this.handleSearch = Object(lodash["debounce"])(this.handleSearch, 50);
    }
    render() {
        const { placeholderText, widthPixels, testID } = this.props;
        const { searchTerm } = this.state;
        return (react_default.a.createElement(clockface_dist["Input"], { icon: clockface_dist["IconFont"].Search, placeholder: placeholderText, style: { width: `${widthPixels}px` }, value: searchTerm, onChange: this.handleChange, onBlur: this.handleBlur, testID: testID }));
    }
};
SearchWidget_SearchWidget.defaultProps = {
    widthPixels: 440,
    placeholderText: 'Search...',
    searchTerm: '',
    testID: 'search-widget',
};
SearchWidget_SearchWidget = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], SearchWidget_SearchWidget);
/* harmony default export */ var search_widget_SearchWidget = (SearchWidget_SearchWidget);

// CONCATENATED MODULE: ./src/cloud/components/GetAssetLimits.tsx





class GetAssetLimits_GetAssetLimits extends react["PureComponent"] {
    componentDidMount() {
        if (constants["e" /* CLOUD */]) {
            this.props.getAssetLimits();
        }
    }
    render() {
        const { status } = this.props;
        if (constants["e" /* CLOUD */]) {
            return (react_default.a.createElement(clockface_dist["SpinnerContainer"], { loading: status, spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null) }, this.props.children));
        }
        return this.props.children;
    }
}
const GetAssetLimits_mstp = ({ cloud: { limits: { status }, }, }) => ({ status });
const GetAssetLimits_mdtp = { getAssetLimits: actions_limits["i" /* getAssetLimits */] };
/* harmony default export */ var components_GetAssetLimits = (Object(es["b" /* connect */])(GetAssetLimits_mstp, GetAssetLimits_mdtp)(GetAssetLimits_GetAssetLimits));

// CONCATENATED MODULE: ./src/cloud/components/CheckoutButton.tsx




const CheckoutButton = () => {
    const checkoutURL = `${constants["k" /* CLOUD_URL */]}${constants["h" /* CLOUD_CHECKOUT_PATH */]}`;
    const onClick = () => (window.location.href = checkoutURL);
    return (react_default.a.createElement(featureFlag["a" /* FeatureFlag */], { name: "cloudBilling" },
        react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, justifyContent: clockface_dist["JustifyContent"].SpaceAround, margin: clockface_dist["ComponentSize"].Small },
            react_default.a.createElement("div", null, "Want to remove these limits?"),
            react_default.a.createElement(clockface_dist["Button"], { color: clockface_dist["ComponentColor"].Primary, onClick: onClick, text: "Upgrade Now", size: clockface_dist["ComponentSize"].Small }))));
};
/* harmony default export */ var components_CheckoutButton = (CheckoutButton);

// CONCATENATED MODULE: ./src/cloud/components/AssetLimitAlert.tsx





class AssetLimitAlert_AssetLimitAlert extends react["PureComponent"] {
    render() {
        const { limitStatus, resourceName, className } = this.props;
        if (constants["e" /* CLOUD */] && limitStatus === actions_limits["b" /* LimitStatus */].EXCEEDED) {
            return (react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Column, alignItems: clockface_dist["AlignItems"].Center, margin: clockface_dist["ComponentSize"].Large, stretchToFitWidth: true, className: className },
                react_default.a.createElement(clockface_dist["Alert"], { icon: clockface_dist["IconFont"].Cloud, color: clockface_dist["ComponentColor"].Primary },
                    react_default.a.createElement(clockface_dist["FlexBox"], { alignItems: clockface_dist["AlignItems"].Center, direction: clockface_dist["FlexDirection"].Row, justifyContent: clockface_dist["JustifyContent"].SpaceBetween, margin: clockface_dist["ComponentSize"].Medium },
                        react_default.a.createElement("div", null,
                            `Hey there, looks like you have reached the maximum number of
              ${resourceName} you can create as part of your plan.`,
                            react_default.a.createElement("br", null)),
                        react_default.a.createElement(components_CheckoutButton, null)))));
        }
        return null;
    }
}

// EXTERNAL MODULE: ./src/cloud/utils/limits.ts
var utils_limits = __webpack_require__(100);

// CONCATENATED MODULE: ./src/tasks/containers/TasksPage.tsx





















const Filter = FilterListContainer();
let TasksPage_TasksPage = class TasksPage extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleClickColumn = (nextSort, sortKey) => {
            let sortType = SortTypes.String;
            if (sortKey === 'latestCompleted') {
                sortType = SortTypes.Date;
            }
            this.setState({ sortKey, sortDirection: nextSort, sortType });
        };
        this.handleActivate = (task) => {
            this.props.updateTaskStatus(task);
        };
        this.handleDelete = (task) => {
            this.props.deleteTask(task.id);
        };
        this.handleClone = (task) => {
            this.props.cloneTask(task);
        };
        this.handleCreateTask = () => {
            const { router, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/tasks/new`);
        };
        this.summonImportFromTemplateOverlay = () => {
            const { router, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/tasks/import/template`);
        };
        this.summonImportOverlay = () => {
            const { router, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/tasks/import`);
        };
        props.setSearchTerm('');
        if (!props.showInactive) {
            props.setShowInactive();
        }
        this.state = {
            isImporting: false,
            taskLabelsEdit: null,
            sortKey: 'name',
            sortDirection: clockface_dist["Sort"].Ascending,
            sortType: SortTypes.String,
        };
    }
    render() {
        const { sortKey, sortDirection, sortType } = this.state;
        const { selectTask, setSearchTerm, updateTaskName, searchTerm, setShowInactive, showInactive, onAddTaskLabel, onRunTask, checkTaskLimits, limitStatus, children, } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Page"], { titleTag: pageTitleSuffixer(['Tasks']) },
                react_default.a.createElement(TasksHeader_TasksHeader, { onCreateTask: this.handleCreateTask, setShowInactive: setShowInactive, showInactive: showInactive, onImportTask: this.summonImportOverlay, onImportFromTemplate: this.summonImportFromTemplateOverlay, limitStatus: limitStatus }),
                react_default.a.createElement(clockface_dist["Page"].Contents, { fullWidth: false, scrollable: true },
                    react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Tasks, types["ResourceType"].Labels] },
                        react_default.a.createElement(components_GetAssetLimits, null,
                            react_default.a.createElement(AssetLimitAlert_AssetLimitAlert, { resourceName: "tasks", limitStatus: limitStatus }),
                            react_default.a.createElement(Filter, { list: this.filteredTasks, searchTerm: searchTerm, searchKeys: ['name', 'labels[].name'] }, ts => (react_default.a.createElement(TasksList_TasksList, { searchTerm: searchTerm, tasks: ts, totalCount: this.totalTaskCount, onActivate: this.handleActivate, onDelete: this.handleDelete, onCreate: this.handleCreateTask, onClone: this.handleClone, onSelect: selectTask, onAddTaskLabel: onAddTaskLabel, onRunTask: onRunTask, onFilterChange: setSearchTerm, filterComponent: this.search, onUpdate: updateTaskName, onImportTask: this.summonImportOverlay, onImportFromTemplate: this.summonImportFromTemplateOverlay, sortKey: sortKey, sortDirection: sortDirection, sortType: sortType, onClickColumn: this.handleClickColumn, checkTaskLimits: checkTaskLimits }))),
                            this.hiddenTaskAlert)))),
            children));
    }
    get search() {
        const { setSearchTerm, searchTerm } = this.props;
        return (react_default.a.createElement(search_widget_SearchWidget, { placeholderText: "Filter tasks...", onSearch: setSearchTerm, searchTerm: searchTerm }));
    }
    get filteredTasks() {
        const { tasks, showInactive } = this.props;
        const matchingTasks = tasks.filter(t => {
            let activeFilter = true;
            if (!showInactive) {
                activeFilter = t.status === 'active';
            }
            return activeFilter;
        });
        return matchingTasks;
    }
    get totalTaskCount() {
        return this.props.tasks.length;
    }
    get hiddenTaskAlert() {
        const { showInactive, tasks } = this.props;
        const hiddenCount = tasks.filter(t => t.status === 'inactive').length;
        const allTasksAreHidden = hiddenCount === tasks.length;
        if (allTasksAreHidden || showInactive) {
            return null;
        }
        if (hiddenCount) {
            const pluralizer = hiddenCount === 1 ? '' : 's';
            const verb = hiddenCount === 1 ? 'is' : 'are';
            return (react_default.a.createElement("div", { className: "hidden-tasks-alert" }, `${hiddenCount} inactive task${pluralizer} ${verb} hidden from view`));
        }
    }
};
TasksPage_TasksPage = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], TasksPage_TasksPage);
const TasksPage_mstp = (state) => {
    const { resources, cloud: { limits }, } = state;
    const { status, searchTerm, showInactive } = resources.tasks;
    return {
        tasks: Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Tasks),
        status: status,
        searchTerm,
        showInactive,
        limitStatus: Object(utils_limits["n" /* extractTaskLimits */])(limits),
    };
};
const TasksPage_mdtp = {
    updateTaskStatus: tasks_actions_thunks["r" /* updateTaskStatus */],
    updateTaskName: tasks_actions_thunks["q" /* updateTaskName */],
    deleteTask: tasks_actions_thunks["f" /* deleteTask */],
    selectTask: tasks_actions_thunks["m" /* selectTask */],
    cloneTask: tasks_actions_thunks["c" /* cloneTask */],
    setSearchTerm: creators["A" /* setSearchTerm */],
    setShowInactive: creators["B" /* setShowInactive */],
    onAddTaskLabel: tasks_actions_thunks["a" /* addTaskLabel */],
    onRunTask: tasks_actions_thunks["k" /* runTask */],
    checkTaskLimits: actions_limits["h" /* checkTaskLimits */],
};
/* harmony default export */ var containers_TasksPage = (Object(es["b" /* connect */])(TasksPage_mstp, TasksPage_mdtp)(TasksPage_TasksPage));

// EXTERNAL MODULE: ./node_modules/moment/moment.js
var moment = __webpack_require__(7);
var moment_default = /*#__PURE__*/__webpack_require__.n(moment);

// CONCATENATED MODULE: ./src/tasks/components/RunLogRow.tsx




class RunLogRow_RunLogRow extends react["PureComponent"] {
    constructor(props) {
        super(props);
    }
    render() {
        const { log } = this.props;
        return (react_default.a.createElement(clockface_dist["IndexList"].Row, null,
            react_default.a.createElement(clockface_dist["IndexList"].Cell, null,
                react_default.a.createElement("span", { className: "run-logs--list-time" }, this.dateTimeString(log.time))),
            react_default.a.createElement(clockface_dist["IndexList"].Cell, null,
                react_default.a.createElement("span", { className: "run-logs--list-message" }, log.message))));
    }
    dateTimeString(dt) {
        if (!dt) {
            return '';
        }
        const newdate = new Date(dt);
        const formatted = moment_default()(newdate).format(constants["o" /* DEFAULT_TIME_FORMAT */]);
        return formatted;
    }
}
/* harmony default export */ var components_RunLogRow = (RunLogRow_RunLogRow);

// CONCATENATED MODULE: ./src/tasks/components/RunLogsList.tsx




class RunLogsList_RunLogsOverlay extends react["PureComponent"] {
    constructor(props) {
        super(props);
    }
    render() {
        const { onDismissOverlay } = this.props;
        return (react_default.a.createElement(clockface_dist["Overlay"].Container, { className: "run-logs--list" },
            react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Run Logs", onDismiss: onDismissOverlay }),
            react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                react_default.a.createElement(FancyScrollbar["a" /* default */], { autoHeight: true, maxHeight: 700 },
                    react_default.a.createElement(clockface_dist["IndexList"], null,
                        react_default.a.createElement(clockface_dist["IndexList"].Header, null,
                            react_default.a.createElement(clockface_dist["IndexList"].HeaderCell, { columnName: "Time", width: "10%" }),
                            react_default.a.createElement(clockface_dist["IndexList"].HeaderCell, { columnName: "Message", width: "90%" })),
                        react_default.a.createElement(clockface_dist["IndexList"].Body, { emptyState: react_default.a.createElement(react_default.a.Fragment, null), columnCount: 2 }, this.listLogs))))));
    }
    get listLogs() {
        const logs = this.props.logs.map(rl => (react_default.a.createElement(components_RunLogRow, { key: rl.message, log: rl })));
        return logs;
    }
}
/* harmony default export */ var RunLogsList = (RunLogsList_RunLogsOverlay);

// CONCATENATED MODULE: ./src/tasks/components/TaskRunsRow.tsx








class TaskRunsRow_TaskRunsRow extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleToggleOverlay = () => {
            const { taskID, run, getLogs } = this.props;
            getLogs(taskID, run.id);
            this.setState({ isImportOverlayVisible: !this.state.isImportOverlayVisible });
        };
        this.state = {
            isImportOverlayVisible: false,
        };
    }
    render() {
        const { run } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["IndexList"].Row, null,
                react_default.a.createElement(clockface_dist["IndexList"].Cell, null, run.status),
                react_default.a.createElement(clockface_dist["IndexList"].Cell, null, this.dateTimeString(run.scheduledFor)),
                react_default.a.createElement(clockface_dist["IndexList"].Cell, null, this.dateTimeString(run.startedAt)),
                react_default.a.createElement(clockface_dist["IndexList"].Cell, null, run.duration),
                react_default.a.createElement(clockface_dist["IndexList"].Cell, null,
                    react_default.a.createElement(clockface_dist["Button"], { key: run.id, size: clockface_dist["ComponentSize"].ExtraSmall, color: clockface_dist["ComponentColor"].Default, text: "View Logs", onClick: this.handleToggleOverlay }),
                    this.renderLogOverlay))));
    }
    dateTimeString(dt) {
        if (!dt) {
            return '';
        }
        const newdate = new Date(dt);
        const formatted = moment_default()(newdate).format(constants["o" /* DEFAULT_TIME_FORMAT */]);
        return formatted;
    }
    get renderLogOverlay() {
        const { isImportOverlayVisible } = this.state;
        const { logs } = this.props;
        return (react_default.a.createElement(clockface_dist["Overlay"], { visible: isImportOverlayVisible },
            react_default.a.createElement(RunLogsList, { onDismissOverlay: this.handleToggleOverlay, logs: logs })));
    }
}
const TaskRunsRow_mstp = (state) => {
    const { logs } = state.resources.tasks;
    return { logs };
};
const TaskRunsRow_mdtp = { getLogs: tasks_actions_thunks["h" /* getLogs */] };
/* harmony default export */ var components_TaskRunsRow = (Object(es["b" /* connect */])(TaskRunsRow_mstp, TaskRunsRow_mdtp)(TaskRunsRow_TaskRunsRow));

// CONCATENATED MODULE: ./src/tasks/components/TaskRunsList.tsx






class TaskRunsList_TaskRunsList extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.memGetSortedResources = Object(memoize_one_esm["a" /* default */])(getSortedResources);
    }
    render() {
        const { sortKey, sortDirection, onClickColumn } = this.props;
        return (react_default.a.createElement(clockface_dist["IndexList"], null,
            react_default.a.createElement(clockface_dist["IndexList"].Header, null,
                react_default.a.createElement(clockface_dist["IndexList"].HeaderCell, { columnName: "Status", width: "10%", sortKey: this.headerKeys[0], sort: sortKey === this.headerKeys[0] ? sortDirection : clockface_dist["Sort"].None, onClick: onClickColumn }),
                react_default.a.createElement(clockface_dist["IndexList"].HeaderCell, { columnName: "Schedule", width: "20%", sortKey: this.headerKeys[1], sort: sortKey === this.headerKeys[1] ? sortDirection : clockface_dist["Sort"].None, onClick: onClickColumn }),
                react_default.a.createElement(clockface_dist["IndexList"].HeaderCell, { columnName: "Started", width: "20%", sortKey: this.headerKeys[2], sort: sortKey === this.headerKeys[2] ? sortDirection : clockface_dist["Sort"].None, onClick: onClickColumn }),
                react_default.a.createElement(clockface_dist["IndexList"].HeaderCell, { columnName: "Duration", width: "20%", sortKey: this.headerKeys[3], sort: sortKey === this.headerKeys[3] ? sortDirection : clockface_dist["Sort"].None, onClick: onClickColumn }),
                react_default.a.createElement(clockface_dist["IndexList"].HeaderCell, { width: "10%" })),
            react_default.a.createElement(clockface_dist["IndexList"].Body, { emptyState: react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Large },
                    react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                        "Looks like this Task doesn't have any ",
                        react_default.a.createElement("b", null, "Runs"))), columnCount: 5 }, this.sortedRuns)));
    }
    get headerKeys() {
        return ['status', 'scheduledFor', 'startedAt', 'duration'];
    }
    get sortedRuns() {
        const { runs, sortKey, sortDirection, sortType, taskID } = this.props;
        const sortedRuns = this.memGetSortedResources(runs, sortKey, sortDirection, sortType);
        const mostRecentRuns = sortedRuns.slice(0, 20);
        return mostRecentRuns.map(run => (react_default.a.createElement(components_TaskRunsRow, { key: `run-id==${run.id}`, taskID: taskID, run: run })));
    }
}

// CONCATENATED MODULE: ./src/tasks/components/TaskRunsPage.tsx










class TaskRunsPage_TaskRunsPage extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleClickColumn = (nextSort, sortKey) => {
            let sortType = SortTypes.String;
            if (sortKey !== 'status') {
                sortType = SortTypes.Date;
            }
            this.setState({ sortKey, sortDirection: nextSort, sortType });
        };
        this.handleRunTask = () => {
            const { onRunTask, params, getRuns } = this.props;
            onRunTask(params.id);
            getRuns(params.id);
        };
        this.handleEditTask = () => {
            const { router, currentTask, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/tasks/${currentTask.id}`);
        };
        this.state = {
            sortKey: 'scheduledFor',
            sortDirection: clockface_dist["Sort"].Descending,
            sortType: SortTypes.Date,
        };
    }
    render() {
        const { params, runs } = this.props;
        const { sortKey, sortDirection, sortType } = this.state;
        return (react_default.a.createElement(clockface_dist["SpinnerContainer"], { loading: this.props.runStatus, spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null) },
            react_default.a.createElement(clockface_dist["Page"], { titleTag: pageTitleSuffixer(['Task Runs']) },
                react_default.a.createElement(clockface_dist["Page"].Header, { fullWidth: false },
                    react_default.a.createElement(clockface_dist["Page"].HeaderLeft, null,
                        react_default.a.createElement(components_PageTitleWithOrg, { title: this.title })),
                    react_default.a.createElement(clockface_dist["Page"].HeaderRight, null,
                        react_default.a.createElement(clockface_dist["Button"], { onClick: this.handleEditTask, text: "Edit Task", color: clockface_dist["ComponentColor"].Primary }),
                        react_default.a.createElement(clockface_dist["Button"], { onClick: this.handleRunTask, text: "Run Task", icon: clockface_dist["IconFont"].Play }))),
                react_default.a.createElement(clockface_dist["Page"].Contents, { fullWidth: false, scrollable: true },
                    react_default.a.createElement(TaskRunsList_TaskRunsList, { taskID: params.id, runs: runs, sortKey: sortKey, sortDirection: sortDirection, sortType: sortType, onClickColumn: this.handleClickColumn })))));
    }
    componentDidMount() {
        this.props.getRuns(this.props.params.id);
    }
    get title() {
        const { currentTask } = this.props;
        if (currentTask) {
            return `${currentTask.name} - Runs`;
        }
        return 'Runs';
    }
}
const TaskRunsPage_mstp = (state) => {
    const { runs, runStatus, currentTask } = state.resources.tasks;
    return {
        runs,
        runStatus,
        currentTask,
    };
};
const TaskRunsPage_mdtp = {
    getRuns: tasks_actions_thunks["i" /* getRuns */],
    onRunTask: tasks_actions_thunks["k" /* runTask */],
};
/* harmony default export */ var components_TaskRunsPage = (Object(es["b" /* connect */])(TaskRunsPage_mstp, TaskRunsPage_mdtp)(Object(react_router_es["g" /* withRouter */])(TaskRunsPage_TaskRunsPage)));

// CONCATENATED MODULE: ./src/tasks/containers/TaskEditPage.tsx









class TaskEditPage_TaskEditPage extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleChangeScript = (script) => {
            this.props.setCurrentScript(script);
        };
        this.handleChangeScheduleType = (schedule) => {
            this.props.setTaskOption({ key: 'taskScheduleType', value: schedule });
        };
        this.handleSave = () => {
            this.props.updateScript();
        };
        this.handleCancel = () => {
            this.props.cancel();
        };
        this.handleChangeInput = (e) => {
            const { name, value } = e.target;
            const key = name;
            this.props.setTaskOption({ key, value });
        };
    }
    componentDidMount() {
        const { params: { id }, } = this.props;
        this.props.selectTaskByID(id);
        this.props.setAllTaskOptionsByID(id);
    }
    componentWillUnmount() {
        this.props.clearTask();
    }
    render() {
        const { currentScript, taskOptions } = this.props;
        return (react_default.a.createElement(clockface_dist["Page"], { titleTag: pageTitleSuffixer([`Edit ${taskOptions.name}`]) },
            react_default.a.createElement(TaskHeader_TaskHeader, { title: "Edit Task", canSubmit: this.isFormValid, onCancel: this.handleCancel, onSave: this.handleSave }),
            react_default.a.createElement(clockface_dist["Page"].Contents, { fullWidth: true, scrollable: false },
                react_default.a.createElement("div", { className: "task-form" },
                    react_default.a.createElement("div", { className: "task-form--options" },
                        react_default.a.createElement(TaskForm_TaskForm, { canSubmit: this.isFormValid, taskOptions: taskOptions, onChangeInput: this.handleChangeInput, onChangeScheduleType: this.handleChangeScheduleType })),
                    react_default.a.createElement("div", { className: "task-form--editor" },
                        react_default.a.createElement(components_FluxMonacoEditor, { script: currentScript, onChangeScript: this.handleChangeScript }))))));
    }
    get isFormValid() {
        const { taskOptions: { name, cron, interval }, currentScript, } = this.props;
        const hasSchedule = !!cron || !!interval;
        return hasSchedule && !!name && !!currentScript;
    }
}
const TaskEditPage_mstp = (state) => {
    const { taskOptions, currentScript, currentTask } = state.resources.tasks;
    return {
        taskOptions,
        currentScript,
        currentTask,
    };
};
const TaskEditPage_mdtp = {
    setTaskOption: creators["C" /* setTaskOption */],
    setCurrentScript: creators["v" /* setCurrentScript */],
    updateScript: tasks_actions_thunks["p" /* updateScript */],
    cancel: tasks_actions_thunks["b" /* cancel */],
    selectTaskByID: tasks_actions_thunks["n" /* selectTaskByID */],
    setAllTaskOptionsByID: tasks_actions_thunks["o" /* setAllTaskOptionsByID */],
    clearTask: creators["r" /* clearTask */],
};
/* harmony default export */ var containers_TaskEditPage = (Object(es["b" /* connect */])(TaskEditPage_mstp, TaskEditPage_mdtp)(TaskEditPage_TaskEditPage));

// EXTERNAL MODULE: ./src/dashboards/actions/thunks.ts
var dashboards_actions_thunks = __webpack_require__(77);

// CONCATENATED MODULE: ./src/resources/selectors/getResourceStatus.ts


const getResourceStatus = (state, resources) => {
    const statuses = resources.map(resource => {
        return getStatus(state, resource);
    });
    let status = types["RemoteDataState"].NotStarted;
    if (statuses.every(s => s === types["RemoteDataState"].Done)) {
        status = types["RemoteDataState"].Done;
    }
    else if (statuses.includes(types["RemoteDataState"].Error)) {
        status = types["RemoteDataState"].Error;
    }
    else if (statuses.includes(types["RemoteDataState"].Loading)) {
        status = types["RemoteDataState"].Loading;
    }
    return status;
};
const getStatus = ({ resources }, { type, id }) => {
    return Object(lodash["get"])(resources, [type, 'byID', id, 'status'], types["RemoteDataState"].Loading);
};

// CONCATENATED MODULE: ./src/resources/components/GetResource.tsx








let GetResource_GetResource = class GetResource extends react["PureComponent"] {
    componentDidMount() {
        const { resources } = this.props;
        const promises = [];
        resources.forEach(resource => {
            promises.push(this.getResourceDetails(resource));
        });
        Promise.all(promises);
    }
    getResourceDetails({ type, id }) {
        switch (type) {
            case types["ResourceType"].Dashboards: {
                return this.props.getDashboard(id);
            }
            default: {
                throw new Error(`incorrect resource type: "${type}" provided to GetResources`);
            }
        }
    }
    render() {
        const { children, remoteDataState } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["SpinnerContainer"], { loading: remoteDataState, spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null), testID: "dashboard-container--spinner" }, children)));
    }
};
GetResource_GetResource = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], GetResource_GetResource);
const GetResource_mstp = (state, props) => {
    const remoteDataState = getResourceStatus(state, props.resources);
    return {
        remoteDataState,
    };
};
const GetResource_mdtp = {
    getDashboard: dashboards_actions_thunks["g" /* getDashboard */],
};
/* harmony default export */ var components_GetResource = (Object(es["b" /* connect */])(GetResource_mstp, GetResource_mdtp)(GetResource_GetResource));

// CONCATENATED MODULE: ./src/shared/data/autoRefreshes.ts
var AutoRefreshOptionType;
(function (AutoRefreshOptionType) {
    AutoRefreshOptionType["Option"] = "option";
    AutoRefreshOptionType["Header"] = "header";
})(AutoRefreshOptionType || (AutoRefreshOptionType = {}));
const autoRefreshOptions = [
    {
        id: 'auto-refresh-header',
        milliseconds: 1,
        label: 'Refresh',
        type: AutoRefreshOptionType.Header,
    },
    {
        id: 'auto-refresh-paused',
        milliseconds: 0,
        label: 'Paused',
        type: AutoRefreshOptionType.Option,
    },
    {
        id: 'auto-refresh-5s',
        milliseconds: 5000,
        label: '5s',
        type: AutoRefreshOptionType.Option,
    },
    {
        id: 'auto-refresh-10s',
        milliseconds: 10000,
        label: '10s',
        type: AutoRefreshOptionType.Option,
    },
    {
        id: 'auto-refresh-15s',
        milliseconds: 15000,
        label: '15s',
        type: AutoRefreshOptionType.Option,
    },
    {
        id: 'auto-refresh-30s',
        milliseconds: 30000,
        label: '30s',
        type: AutoRefreshOptionType.Option,
    },
    {
        id: 'auto-refresh-60s',
        milliseconds: 60000,
        label: '60s',
        type: AutoRefreshOptionType.Option,
    },
];
/* harmony default export */ var autoRefreshes = (autoRefreshOptions);

// CONCATENATED MODULE: ./src/shared/components/dropdown_auto_refresh/AutoRefreshDropdown.tsx






const DROPDOWN_WIDTH_COLLAPSED = 50;
const DROPDOWN_WIDTH_FULL = 84;

let AutoRefreshDropdown_AutoRefreshDropdown = class AutoRefreshDropdown extends react["Component"] {
    constructor(props) {
        super(props);
        this.handleDropdownChange = (autoRefreshOption) => {
            this.props.onChoose(autoRefreshOption.milliseconds);
        };
        this.state = {
            isOpen: false,
        };
    }
    render() {
        return (react_default.a.createElement("div", { className: this.className },
            react_default.a.createElement(clockface_dist["Dropdown"], { style: { width: `${this.dropdownWidthPixels}px` }, button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { active: active, onClick: onClick, status: this.dropdownStatus, icon: this.dropdownIcon }, this.selectedOptionLabel)), menu: onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse, style: { width: `${DROPDOWN_WIDTH_FULL}px` } }, autoRefreshes.map(option => {
                    if (option.type === AutoRefreshOptionType.Header) {
                        return (react_default.a.createElement(clockface_dist["Dropdown"].Divider, { key: option.id, id: option.id, text: option.label }));
                    }
                    return (react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: option.id, id: option.id, value: option, selected: option.id === this.selectedOptionID, onClick: this.handleDropdownChange }, option.label));
                }))) }),
            this.manualRefreshButton));
    }
    get dropdownStatus() {
        if (this.isDisabled) {
            return clockface_dist["ComponentStatus"].Disabled;
        }
        return clockface_dist["ComponentStatus"].Default;
    }
    get isDisabled() {
        const { selected } = this.props;
        return selected.status === types["AutoRefreshStatus"].Disabled;
    }
    get isPaused() {
        const { selected } = this.props;
        return selected.status === types["AutoRefreshStatus"].Paused || this.isDisabled;
    }
    get className() {
        return classnames_default()('autorefresh-dropdown', { paused: this.isPaused });
    }
    get dropdownIcon() {
        if (this.isPaused) {
            return clockface_dist["IconFont"].Pause;
        }
        return clockface_dist["IconFont"].Refresh;
    }
    get dropdownWidthPixels() {
        if (this.isPaused) {
            return DROPDOWN_WIDTH_COLLAPSED;
        }
        return DROPDOWN_WIDTH_FULL;
    }
    get selectedOptionID() {
        const { selected } = this.props;
        const selectedOption = autoRefreshes.find(option => option.milliseconds === selected.interval);
        return selectedOption.id;
    }
    get selectedOptionLabel() {
        const { selected } = this.props;
        const selectedOption = autoRefreshes.find(option => option.milliseconds === selected.interval);
        return selectedOption.label;
    }
    get manualRefreshButton() {
        const { showManualRefresh, onManualRefresh } = this.props;
        if (!showManualRefresh) {
            return;
        }
        if (this.isPaused) {
            return (react_default.a.createElement(clockface_dist["SquareButton"], { icon: clockface_dist["IconFont"].Refresh, onClick: onManualRefresh, className: "autorefresh-dropdown--pause" }));
        }
        return null;
    }
};
AutoRefreshDropdown_AutoRefreshDropdown.defaultProps = {
    showManualRefresh: true,
};
AutoRefreshDropdown_AutoRefreshDropdown = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], AutoRefreshDropdown_AutoRefreshDropdown);
/* harmony default export */ var dropdown_auto_refresh_AutoRefreshDropdown = (AutoRefreshDropdown_AutoRefreshDropdown);

// EXTERNAL MODULE: ./node_modules/react-datepicker/es/index.js + 6 modules
var react_datepicker_es = __webpack_require__(1533);

// EXTERNAL MODULE: ./node_modules/react-datepicker/dist/react-datepicker.css
var react_datepicker = __webpack_require__(1341);

// CONCATENATED MODULE: ./src/shared/components/dateRangePicker/DatePicker.tsx






const isValidRTC3339 = (d) => {
    return (moment_default()(d, 'YYYY-MM-DD HH:mm', true).isValid() ||
        moment_default()(d, 'YYYY-MM-DD HH:mm:ss', true).isValid() ||
        moment_default()(d, 'YYYY-MM-DD HH:mm:ss.SSS', true).isValid() ||
        moment_default()(d, 'YYYY-MM-DD', true).isValid());
};
const getFormat = (d) => {
    if (moment_default()(d, 'YYYY-MM-DD', true).isValid()) {
        return 'YYYY-MM-DD';
    }
    if (moment_default()(d, 'YYYY-MM-DD HH:mm', true).isValid()) {
        return 'YYYY-MM-DD HH:mm';
    }
    if (moment_default()(d, 'YYYY-MM-DD HH:mm:ss', true).isValid()) {
        return 'YYYY-MM-DD HH:mm:ss';
    }
    if (moment_default()(d, 'YYYY-MM-DD HH:mm:ss.SSS', true).isValid()) {
        return 'YYYY-MM-DD HH:mm:ss.SSS';
    }
    return null;
};
class DatePicker_DatePicker extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.inCurrentMonth = false;
        this.state = {
            inputValue: null,
            inputFormat: null,
        };
        this.dayClassName = (date) => {
            const day = date.getDate();
            if (day === 1) {
                this.inCurrentMonth = !this.inCurrentMonth;
            }
            if (this.inCurrentMonth) {
                return 'range-picker--day-in-month';
            }
            return 'range-picker--day';
        };
        this.handleSelectDate = (date) => {
            const { onSelectDate } = this.props;
            onSelectDate(date.toISOString());
        };
        this.handleChangeInput = (e) => {
            const { onSelectDate } = this.props;
            const value = e.target.value;
            if (isValidRTC3339(value)) {
                onSelectDate(moment_default()(value).toISOString());
                this.setState({ inputValue: value, inputFormat: getFormat(value) });
                return;
            }
            this.setState({ inputValue: value, inputFormat: null });
        };
    }
    render() {
        const { dateTime, label } = this.props;
        const date = new Date(dateTime);
        return (react_default.a.createElement("div", { className: "range-picker--date-picker" },
            react_default.a.createElement(clockface_dist["Grid"].Row, null,
                react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
                    react_default.a.createElement(clockface_dist["Form"].Element, { label: label, errorMessage: this.inputErrorMessage },
                        react_default.a.createElement(clockface_dist["Input"], { size: clockface_dist["ComponentSize"].Medium, className: "range-picker--input react-datepicker-ignore-onclickoutside", titleText: label, value: this.inputValue, onChange: this.handleChangeInput, status: this.inputStatus })),
                    react_default.a.createElement("div", { className: "range-picker--popper-container" },
                        react_default.a.createElement(react_datepicker_es["a" /* default */], { inline: true, selected: date, onChange: this.handleSelectDate, startOpen: true, dateFormat: "yyyy-MM-dd HH:mm", showTimeSelect: true, timeFormat: "HH:mm", shouldCloseOnSelect: false, disabledKeyboardNavigation: true, calendarClassName: "range-picker--calendar", dayClassName: this.dayClassName, timeIntervals: 60, fixedHeight: true }))))));
    }
    get inputValue() {
        const { dateTime } = this.props;
        const { inputValue, inputFormat } = this.state;
        if (this.isInputValueInvalid) {
            return inputValue;
        }
        if (inputFormat) {
            return moment_default()(dateTime).format(inputFormat);
        }
        return moment_default()(dateTime).format('YYYY-MM-DD HH:mm:ss.SSS');
    }
    get isInputValueInvalid() {
        const { inputValue } = this.state;
        if (inputValue === null) {
            return false;
        }
        return !isValidRTC3339(inputValue);
    }
    get inputErrorMessage() {
        if (this.isInputValueInvalid) {
            return 'Format must be YYYY-MM-DD [HH:mm:ss.SSS]';
        }
        return '\u00a0\u00a0';
    }
    get inputStatus() {
        if (this.isInputValueInvalid) {
            return clockface_dist["ComponentStatus"].Error;
        }
        return clockface_dist["ComponentStatus"].Default;
    }
}

// EXTERNAL MODULE: ./src/shared/components/ClickOutside.tsx
var ClickOutside = __webpack_require__(265);

// CONCATENATED MODULE: ./src/shared/components/dateRangePicker/DateRangePicker.tsx




class DateRangePicker_DateRangePicker extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleSetTimeRange = () => {
            const { onSetTimeRange } = this.props;
            const { upper, lower } = this.state;
            onSetTimeRange({ lower, upper, type: 'custom' });
        };
        this.handleSelectLower = (lower) => {
            this.setState({ lower });
        };
        this.handleSelectUpper = (upper) => {
            this.setState({ upper });
        };
        const { timeRange: { lower, upper }, } = props;
        this.state = { lower, upper };
    }
    render() {
        const { onClose } = this.props;
        const { upper, lower } = this.state;
        return (react_default.a.createElement(ClickOutside["a" /* ClickOutside */], { onClickOutside: onClose },
            react_default.a.createElement("div", { className: "range-picker react-datepicker-ignore-onclickoutside", style: this.stylePosition },
                react_default.a.createElement("button", { className: "range-picker--dismiss", onClick: onClose }),
                react_default.a.createElement("div", { className: "range-picker--date-pickers" },
                    react_default.a.createElement(DatePicker_DatePicker, { dateTime: lower, onSelectDate: this.handleSelectLower, label: "Start" }),
                    react_default.a.createElement(DatePicker_DatePicker, { dateTime: upper, onSelectDate: this.handleSelectUpper, label: "Stop" })),
                react_default.a.createElement(clockface_dist["Button"], { className: "range-picker--submit", color: clockface_dist["ComponentColor"].Primary, size: clockface_dist["ComponentSize"].Small, onClick: this.handleSetTimeRange, text: "Apply Time Range" }))));
    }
    get stylePosition() {
        const { position } = this.props;
        if (!position) {
            return {
                top: `${window.innerHeight / 2}px`,
                left: `${window.innerWidth / 2}px`,
                transform: `translate(-50%, -50%)`,
            };
        }
        const style = Object.entries(position).reduce((acc, [k, v]) => {
            const obj = Object.assign({}, acc);
            if (isNaN(+v)) {
                obj[k] = v;
            }
            else {
                obj[k] = `${v}px`;
            }
            return obj;
        }, {});
        return style;
    }
}
/* harmony default export */ var dateRangePicker_DateRangePicker = (DateRangePicker_DateRangePicker);

// EXTERNAL MODULE: ./src/shared/utils/duration.ts
var utils_duration = __webpack_require__(86);

// CONCATENATED MODULE: ./src/shared/components/TimeRangeDropdown.tsx





class TimeRangeDropdown_TimeRangeDropdown extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.dropdownRef = Object(react["createRef"])();
        this.handleApplyTimeRange = (timeRange) => {
            this.props.onSetTimeRange(timeRange);
            this.handleHideDatePicker();
        };
        this.handleHideDatePicker = () => {
            this.setState({ isDatePickerOpen: false });
        };
        this.handleClickCustomTimeRange = () => {
            this.setState({ isDatePickerOpen: true });
        };
        this.handleClickDropdownItem = (label) => {
            const { onSetTimeRange } = this.props;
            const timeRange = timeRanges["c" /* SELECTABLE_TIME_RANGES */].find(t => t.label === label);
            onSetTimeRange(timeRange);
        };
        this.state = { isDatePickerOpen: false };
    }
    render() {
        const timeRange = this.timeRange;
        const timeRangeLabel = Object(utils_duration["d" /* getTimeRangeLabel */])(timeRange);
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Popover"], { appearance: clockface_dist["Appearance"].Outline, position: clockface_dist["PopoverPosition"].ToTheLeft, triggerRef: this.dropdownRef, visible: this.state.isDatePickerOpen, showEvent: clockface_dist["PopoverInteraction"].None, hideEvent: clockface_dist["PopoverInteraction"].None, distanceFromTrigger: 8, testID: "timerange-popover", enableDefaultStyles: false, contents: () => (react_default.a.createElement(dateRangePicker_DateRangePicker, { timeRange: timeRange, onSetTimeRange: this.handleApplyTimeRange, onClose: this.handleHideDatePicker, position: this.state.isDatePickerOpen ? { position: 'relative' } : undefined })) }),
            react_default.a.createElement("div", { ref: this.dropdownRef },
                react_default.a.createElement(clockface_dist["Dropdown"], { style: { width: `${this.dropdownWidth}px` }, testID: "timerange-dropdown", button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { active: active, onClick: onClick }, timeRangeLabel)), menu: onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse, style: { width: `${this.dropdownWidth + 50}px` } },
                        react_default.a.createElement(clockface_dist["Dropdown"].Divider, { key: "Time Range", text: "Time Range", id: "Time Range" }),
                        react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: timeRanges["a" /* CUSTOM_TIME_RANGE_LABEL */], value: timeRanges["a" /* CUSTOM_TIME_RANGE_LABEL */], id: timeRanges["a" /* CUSTOM_TIME_RANGE_LABEL */], testID: "dropdown-item-customtimerange", selected: this.state.isDatePickerOpen, onClick: this.handleClickCustomTimeRange }, timeRanges["a" /* CUSTOM_TIME_RANGE_LABEL */]),
                        timeRanges["c" /* SELECTABLE_TIME_RANGES */].map(({ label }) => {
                            const testID = label.toLowerCase().replace(/\s/g, '');
                            return (react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: label, value: label, id: label, testID: `dropdown-item-${testID}`, selected: label === timeRangeLabel, onClick: this.handleClickDropdownItem }, label));
                        }))) }))));
    }
    get dropdownWidth() {
        if (this.props.timeRange.type === 'custom') {
            return 250;
        }
        return 100;
    }
    get timeRange() {
        const { timeRange } = this.props;
        const { isDatePickerOpen } = this.state;
        if (isDatePickerOpen && timeRange.type !== 'custom') {
            return Object(utils_duration["b" /* convertTimeRangeToCustom */])(timeRange);
        }
        if (timeRange.type === 'duration') {
            return Object(utils_duration["b" /* convertTimeRangeToCustom */])(timeRange);
        }
        return timeRange;
    }
}
/* harmony default export */ var components_TimeRangeDropdown = (TimeRangeDropdown_TimeRangeDropdown);

// CONCATENATED MODULE: ./src/shared/components/graph_tips/GraphTips.tsx


const GraphTips = () => (react_default.a.createElement(react_default.a.Fragment, null,
    react_default.a.createElement(clockface_dist["QuestionMarkTooltip"], { diameter: 18, color: clockface_dist["ComponentColor"].Primary, testID: "graphtips-question-mark", tooltipContents: react_default.a.createElement("span", null,
            react_default.a.createElement("h1", null, "Graph Tips:"),
            react_default.a.createElement("p", null,
                react_default.a.createElement("code", null, "Click + Drag"),
                " Zoom in (X or Y)",
                react_default.a.createElement("br", null),
                react_default.a.createElement("code", null, "Shift + Click"),
                " Pan Graph Window",
                react_default.a.createElement("br", null),
                react_default.a.createElement("code", null, "Double Click"),
                " Reset Graph Window"),
            react_default.a.createElement("h1", null, "Static Legend Tips:"),
            react_default.a.createElement("p", null,
                react_default.a.createElement("code", null, "Click"),
                "Focus on single Series",
                react_default.a.createElement("br", null),
                react_default.a.createElement("code", null, "Shift + Click"),
                " Show/Hide single Series")) })));
/* harmony default export */ var graph_tips_GraphTips = (GraphTips);

// CONCATENATED MODULE: ./src/pageLayout/components/RenamablePageTitle.tsx






let RenamablePageTitle_RenamablePageTitle = class RenamablePageTitle extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleStartEditing = () => {
            this.setState({ isEditing: true });
        };
        this.handleStopEditing = e => {
            const { workingName } = this.state;
            const { onRename, onClickOutside } = this.props;
            onRename(workingName);
            if (onClickOutside) {
                onClickOutside(e);
            }
            this.setState({ isEditing: false });
        };
        this.handleInputChange = (e) => {
            this.setState({ workingName: e.target.value });
        };
        this.handleKeyDown = (e) => {
            const { onRename, name } = this.props;
            const { workingName } = this.state;
            if (e.key === 'Enter') {
                onRename(workingName);
                this.setState({ isEditing: false });
            }
            if (e.key === 'Escape') {
                this.setState({ isEditing: false, workingName: name });
            }
        };
        this.handleInputFocus = (e) => {
            e.currentTarget.select();
        };
        this.state = {
            isEditing: false,
            workingName: props.name,
        };
    }
    render() {
        const { placeholder } = this.props;
        const { isEditing, workingName } = this.state;
        let title = (react_default.a.createElement("div", { className: this.titleClassName, onClick: this.handleStartEditing },
            react_default.a.createElement(clockface_dist["Page"].Title, { title: workingName || placeholder }),
            react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].Pencil })));
        if (isEditing) {
            title = (react_default.a.createElement(ClickOutside["a" /* ClickOutside */], { onClickOutside: this.handleStopEditing }, this.input));
        }
        return (react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Column, alignItems: clockface_dist["AlignItems"].FlexStart, className: "renamable-page-title" },
            title,
            this.prefix));
    }
    get prefix() {
        const { prefix } = this.props;
        if (prefix) {
            return react_default.a.createElement(clockface_dist["Page"].SubTitle, { title: prefix });
        }
    }
    get input() {
        const { placeholder, maxLength } = this.props;
        const { workingName } = this.state;
        return (react_default.a.createElement(clockface_dist["Input"], { maxLength: maxLength, autoFocus: true, spellCheck: false, placeholder: placeholder, onFocus: this.handleInputFocus, onChange: this.handleInputChange, onKeyDown: this.handleKeyDown, className: "renamable-page-title--input", value: workingName }));
    }
    get titleClassName() {
        const { name, placeholder } = this.props;
        const nameIsUntitled = name === placeholder || name === '';
        return classnames_default()('renamable-page-title--title', {
            untitled: nameIsUntitled,
        });
    }
};
RenamablePageTitle_RenamablePageTitle.defaultProps = {
    prefix: '',
};
RenamablePageTitle_RenamablePageTitle = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], RenamablePageTitle_RenamablePageTitle);
/* harmony default export */ var components_RenamablePageTitle = (RenamablePageTitle_RenamablePageTitle);

// CONCATENATED MODULE: ./src/shared/constants/timeZones.ts
const TIME_ZONES = [
    { timeZone: 'Local', displayName: 'Local Time' },
    { timeZone: 'UTC', displayName: 'UTC' },
];

// CONCATENATED MODULE: ./src/shared/components/TimeZoneDropdown.tsx





const TimeZoneDropdown = ({ timeZone: selectedTimeZone, onSetTimeZone, }) => {
    return (react_default.a.createElement(clockface_dist["SelectDropdown"], { options: TIME_ZONES.map(tz => tz.timeZone), selectedOption: selectedTimeZone, onSelect: onSetTimeZone, buttonIcon: clockface_dist["IconFont"].Annotate, style: { width: '115px' } }));
};
const TimeZoneDropdown_mstp = (state) => {
    return { timeZone: state.app.persisted.timeZone || 'Local' };
};
const TimeZoneDropdown_mdtp = { onSetTimeZone: setTimeZone };
/* harmony default export */ var components_TimeZoneDropdown = (Object(es["b" /* connect */])(TimeZoneDropdown_mstp, TimeZoneDropdown_mdtp)(TimeZoneDropdown));

// CONCATENATED MODULE: ./src/userSettings/actions/index.ts
const actions_toggleShowVariablesControls = () => ({
    type: 'TOGGLE_SHOW_VARIABLES_CONTROLS',
});

// CONCATENATED MODULE: ./src/shared/actions/autoRefresh.ts
const setAutoRefreshInterval = (dashboardID, milliseconds) => ({
    type: 'SET_AUTO_REFRESH_INTERVAL',
    payload: { dashboardID, milliseconds },
});
const setAutoRefreshStatus = (dashboardID, status) => ({
    type: 'SET_AUTO_REFRESH_STATUS',
    payload: { dashboardID, status },
});

// EXTERNAL MODULE: ./src/dashboards/selectors/index.ts
var dashboards_selectors = __webpack_require__(217);

// CONCATENATED MODULE: ./src/dashboards/components/DashboardHeader.tsx



















class DashboardHeader_DashboardHeader extends react["Component"] {
    constructor() {
        super(...arguments);
        this.handleAddNote = () => {
            const { router, org, dashboard } = this.props;
            router.push(`/orgs/${org.id}/dashboards/${dashboard.id}/notes/new`);
        };
        this.handleAddCell = () => {
            const { router, org, dashboard } = this.props;
            router.push(`/orgs/${org.id}/dashboards/${dashboard.id}/cells/new`);
        };
        this.handleRenameDashboard = (name) => {
            const { dashboard, updateDashboard } = this.props;
            updateDashboard(dashboard.id, { name });
        };
        this.handleClickPresentationButton = () => {
            this.props.handleClickPresentationButton();
        };
        this.handleChooseAutoRefresh = (milliseconds) => {
            const { handleChooseAutoRefresh, dashboard } = this.props;
            handleChooseAutoRefresh(dashboard.id, milliseconds);
        };
        this.handleChooseTimeRange = (timeRange) => {
            const { autoRefresh, onSetAutoRefreshStatus, setDashboardTimeRange, updateQueryParams, dashboard, } = this.props;
            setDashboardTimeRange(dashboard.id, timeRange);
            updateQueryParams({
                lower: timeRange.lower,
                upper: timeRange.upper,
            });
            if (timeRange.type === 'custom') {
                onSetAutoRefreshStatus(dashboard.id, types["AutoRefreshStatus"].Disabled);
                return;
            }
            if (autoRefresh.status === types["AutoRefreshStatus"].Disabled) {
                if (autoRefresh.interval === 0) {
                    onSetAutoRefreshStatus(dashboard.id, types["AutoRefreshStatus"].Paused);
                    return;
                }
                onSetAutoRefreshStatus(dashboard.id, types["AutoRefreshStatus"].Active);
            }
        };
    }
    render() {
        const { org, dashboard, onManualRefresh, toggleShowVariablesControls, showVariablesControls, autoRefresh, timeRange, } = this.props;
        return (react_default.a.createElement(clockface_dist["Page"].Header, { fullWidth: true },
            react_default.a.createElement(clockface_dist["Page"].HeaderLeft, null,
                react_default.a.createElement(components_RenamablePageTitle, { prefix: org && org.name, maxLength: dashboards_constants["b" /* DASHBOARD_NAME_MAX_LENGTH */], onRename: this.handleRenameDashboard, name: dashboard && dashboard.name, placeholder: dashboards_constants["e" /* DEFAULT_DASHBOARD_NAME */] })),
            react_default.a.createElement(clockface_dist["Page"].HeaderRight, null,
                react_default.a.createElement(graph_tips_GraphTips, null),
                react_default.a.createElement(clockface_dist["Button"], { icon: clockface_dist["IconFont"].AddCell, color: clockface_dist["ComponentColor"].Primary, onClick: this.handleAddCell, text: "Add Cell", titleText: "Add cell to dashboard" }),
                react_default.a.createElement(clockface_dist["Button"], { icon: clockface_dist["IconFont"].TextBlock, text: "Add Note", onClick: this.handleAddNote }),
                react_default.a.createElement(components_TimeZoneDropdown, null),
                react_default.a.createElement(dropdown_auto_refresh_AutoRefreshDropdown, { onChoose: this.handleChooseAutoRefresh, onManualRefresh: onManualRefresh, selected: autoRefresh }),
                react_default.a.createElement(components_TimeRangeDropdown, { onSetTimeRange: this.handleChooseTimeRange, timeRange: timeRange }),
                react_default.a.createElement(clockface_dist["Button"], { icon: clockface_dist["IconFont"].Cube, text: "Variables", onClick: toggleShowVariablesControls, color: showVariablesControls
                        ? clockface_dist["ComponentColor"].Secondary
                        : clockface_dist["ComponentColor"].Default }),
                react_default.a.createElement(clockface_dist["SquareButton"], { icon: clockface_dist["IconFont"].ExpandA, titleText: "Enter Presentation Mode", onClick: this.handleClickPresentationButton }))));
    }
}
const DashboardHeader_mstp = (state) => {
    const { showVariablesControls } = state.userSettings;
    const dashboard = Object(resources_selectors["b" /* getByID */])(state, types["ResourceType"].Dashboards, state.currentDashboard.id);
    const timeRange = Object(dashboards_selectors["a" /* getTimeRangeByDashboardID */])(state, state.currentDashboard.id);
    const org = Object(selectors["a" /* getOrg */])(state);
    return {
        org,
        dashboard,
        timeRange,
        showVariablesControls,
    };
};
const DashboardHeader_mdtp = {
    toggleShowVariablesControls: actions_toggleShowVariablesControls,
    updateDashboard: dashboards_actions_thunks["m" /* updateDashboard */],
    handleClickPresentationButton: delayEnablePresentationMode,
    onSetAutoRefreshStatus: setAutoRefreshStatus,
    updateQueryParams: actions_ranges["e" /* updateQueryParams */],
    setDashboardTimeRange: actions_ranges["d" /* setDashboardTimeRange */],
    handleChooseAutoRefresh: setAutoRefreshInterval,
};
/* harmony default export */ var components_DashboardHeader = (Object(es["b" /* connect */])(DashboardHeader_mstp, DashboardHeader_mdtp)(Object(react_router_es["g" /* withRouter */])(DashboardHeader_DashboardHeader)));

// EXTERNAL MODULE: ./node_modules/react-grid-layout/index.js
var react_grid_layout = __webpack_require__(1342);
var react_grid_layout_default = /*#__PURE__*/__webpack_require__.n(react_grid_layout);

// CONCATENATED MODULE: ./src/shared/components/cells/CellHeaderNote.tsx




const MAX_POPOVER_WIDTH = 280;
const MAX_POPOVER_HEIGHT = 200;
const CellHeaderNote = ({ note }) => {
    const [popoverVisible, setPopoverVisibility] = Object(react["useState"])(false);
    const triggerRef = Object(react["useRef"])(null);
    const indicatorClass = classnames_default()('cell--note-indicator', {
        'cell--note-indicator__active': popoverVisible,
    });
    const contentStyle = {
        width: `${MAX_POPOVER_WIDTH}px`,
        minWidth: `${MAX_POPOVER_WIDTH}px`,
        maxWidth: `${MAX_POPOVER_WIDTH}px`,
        maxHeight: `${MAX_POPOVER_HEIGHT}px`,
    };
    const handlePopoverShow = () => {
        setPopoverVisibility(true);
    };
    const handlePopoverHide = () => {
        setPopoverVisibility(false);
    };
    return (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement("div", { className: indicatorClass, ref: triggerRef },
            react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].Chat })),
        react_default.a.createElement(clockface_dist["Popover"], { triggerRef: triggerRef, appearance: clockface_dist["Appearance"].Outline, showEvent: clockface_dist["PopoverInteraction"].Click, hideEvent: clockface_dist["PopoverInteraction"].Click, onShow: handlePopoverShow, onHide: handlePopoverHide, enableDefaultStyles: false, contents: () => (react_default.a.createElement(clockface_dist["DapperScrollbars"], { style: contentStyle, autoSize: true },
                react_default.a.createElement("div", { className: "cell--note-contents markdown-format" },
                    react_default.a.createElement(react_markdown_default.a, { source: note })))) })));
};
/* harmony default export */ var cells_CellHeaderNote = (CellHeaderNote);

// CONCATENATED MODULE: ./src/shared/components/cells/CellHeader.tsx


const CellHeader = ({ name, note, children }) => {
    return (react_default.a.createElement("div", { className: "cell--header" },
        react_default.a.createElement("div", { className: "cell--draggable" },
            react_default.a.createElement("div", { className: "cell--dot-grid" }),
            react_default.a.createElement("div", { className: "cell--dot-grid" }),
            react_default.a.createElement("div", { className: "cell--dot-grid" })),
        react_default.a.createElement("div", { className: "cell--name" }, name),
        note && react_default.a.createElement(cells_CellHeaderNote, { note: note }),
        children));
};
/* harmony default export */ var cells_CellHeader = (CellHeader);

// CONCATENATED MODULE: ./src/shared/components/cells/CellContextItem.tsx


const CellContextItem = ({ icon, label, testID, onHide, onClick, }) => {
    const handleClick = () => {
        onHide && onHide();
        onClick();
    };
    return (react_default.a.createElement("div", { className: "cell--context-item", onClick: handleClick, "data-testid": testID },
        react_default.a.createElement(clockface_dist["Icon"], { glyph: icon }),
        label));
};
/* harmony default export */ var cells_CellContextItem = (CellContextItem);

// CONCATENATED MODULE: ./src/shared/components/cells/CellContextDangerItem.tsx



const CellContextDangerItem_CellContextItem = ({ icon = clockface_dist["IconFont"].Trash, label, testID, onHide, onClick, confirmationText = 'Confirm Delete', }) => {
    const [confirming, setConfirmationState] = Object(react["useState"])(false);
    const toggleConfirmationState = () => {
        setConfirmationState(true);
    };
    const handleClick = () => {
        onHide && onHide();
        onClick();
    };
    if (confirming) {
        return (react_default.a.createElement("div", { className: "cell--context-item cell--context-item__confirm" },
            react_default.a.createElement(clockface_dist["Button"], { color: clockface_dist["ComponentColor"].Danger, text: confirmationText, onClick: handleClick, size: clockface_dist["ComponentSize"].ExtraSmall, shape: clockface["b" /* ButtonShape */].StretchToFit, testID: `${testID}-confirm` })));
    }
    return (react_default.a.createElement("div", { className: "cell--context-item cell--context-item__danger", onClick: toggleConfirmationState, "data-testid": testID },
        react_default.a.createElement(clockface_dist["Icon"], { glyph: icon }),
        label));
};
/* harmony default export */ var CellContextDangerItem = (CellContextDangerItem_CellContextItem);

// CONCATENATED MODULE: ./src/shared/components/cells/CellContext.tsx










const CellContext = ({ view, router, location, cell, onCloneCell, onDeleteCell, onCSVDownload, }) => {
    const [popoverVisible, setPopoverVisibility] = Object(react["useState"])(false);
    const editNoteText = !!Object(lodash["get"])(view, 'properties.note') ? 'Edit Note' : 'Add Note';
    const triggerRef = Object(react["useRef"])(null);
    const buttonClass = classnames_default()('cell--context', {
        'cell--context__active': popoverVisible,
    });
    const handleCloneCell = () => {
        onCloneCell(cell.dashboardID, view, cell);
    };
    const handleDeleteCell = () => {
        const { dashboardID, id } = cell;
        onDeleteCell(dashboardID, id);
    };
    const handleEditNote = () => {
        if (view.id) {
            router.push(`${location.pathname}/notes/${view.id}/edit`);
        }
        else {
            router.push(`${location.pathname}/notes/new`);
        }
    };
    const handleEditCell = () => {
        router.push(`${location.pathname}/cells/${cell.id}/edit`);
    };
    const popoverContents = (onHide) => {
        if (view.properties.type === 'markdown') {
            return (react_default.a.createElement("div", { className: "cell--context-menu" },
                react_default.a.createElement(cells_CellContextItem, { label: "Edit Note", onClick: handleEditNote, icon: clockface_dist["IconFont"].TextBlock, onHide: onHide, testID: "cell-context--note" }),
                react_default.a.createElement(CellContextDangerItem, { label: "Delete", onClick: handleDeleteCell, icon: clockface_dist["IconFont"].Trash, onHide: onHide, testID: "cell-context--delete" })));
        }
        return (react_default.a.createElement("div", { className: "cell--context-menu" },
            react_default.a.createElement(cells_CellContextItem, { label: "Configure", onClick: handleEditCell, icon: clockface_dist["IconFont"].Pencil, onHide: onHide, testID: "cell-context--configure" }),
            react_default.a.createElement(cells_CellContextItem, { label: editNoteText, onClick: handleEditNote, icon: clockface_dist["IconFont"].TextBlock, onHide: onHide, testID: "cell-context--note" }),
            react_default.a.createElement(cells_CellContextItem, { label: "Clone", onClick: handleCloneCell, icon: clockface_dist["IconFont"].Duplicate, onHide: onHide, testID: "cell-context--clone" }),
            react_default.a.createElement(featureFlag["a" /* FeatureFlag */], { name: "downloadCellCSV" },
                react_default.a.createElement(cells_CellContextItem, { label: "Download CSV", onClick: onCSVDownload, icon: clockface_dist["IconFont"].Download, onHide: onHide, testID: "cell-context--download" })),
            react_default.a.createElement(CellContextDangerItem, { label: "Delete", onClick: handleDeleteCell, icon: clockface_dist["IconFont"].Trash, onHide: onHide, testID: "cell-context--delete" })));
    };
    return (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement("button", { className: buttonClass, ref: triggerRef, "data-testid": "cell-context--toggle" },
            react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].CogThick })),
        react_default.a.createElement(clockface_dist["Popover"], { appearance: clockface_dist["Appearance"].Outline, enableDefaultStyles: false, showEvent: clockface_dist["PopoverInteraction"].Click, hideEvent: clockface_dist["PopoverInteraction"].Click, triggerRef: triggerRef, contents: popoverContents, onShow: () => {
                setPopoverVisibility(true);
            }, onHide: () => {
                setPopoverVisibility(false);
            } })));
};
const CellContext_mdtp = {
    onDeleteCell: thunks["c" /* deleteCell */],
    onCloneCell: thunks["a" /* createCellWithView */],
};
/* harmony default export */ var cells_CellContext = (Object(react_router_es["g" /* withRouter */])(Object(es["b" /* connect */])(null, CellContext_mdtp)(CellContext)));

// CONCATENATED MODULE: ./src/shared/components/views/Markdown.tsx






let Markdown_Markdown = class Markdown extends react["PureComponent"] {
    render() {
        const { text } = this.props;
        return (react_default.a.createElement(FancyScrollbar["a" /* default */], { className: "markdown-cell", autoHide: true },
            react_default.a.createElement("div", { className: "markdown-cell--contents" },
                react_default.a.createElement(react_markdown_default.a, { source: humanizeNote(text), className: "markdown-format" }))));
    }
};
Markdown_Markdown = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], Markdown_Markdown);
/* harmony default export */ var views_Markdown = (Markdown_Markdown);

// EXTERNAL MODULE: ./node_modules/@influxdata/giraffe/dist/index.js
var giraffe_dist = __webpack_require__(85);

// EXTERNAL MODULE: ./src/shared/apis/query.ts
var apis_query = __webpack_require__(152);

// EXTERNAL MODULE: ./src/alerting/utils/statusEvents.ts
var statusEvents = __webpack_require__(745);

// EXTERNAL MODULE: ./src/shared/utils/checkQueryResult.ts
var checkQueryResult = __webpack_require__(420);

// EXTERNAL MODULE: ./src/variables/utils/getWindowVars.ts + 1 modules
var getWindowVars = __webpack_require__(279);

// EXTERNAL MODULE: ./src/variables/utils/buildVarsOption.ts
var buildVarsOption = __webpack_require__(251);

// EXTERNAL MODULE: ./node_modules/intersection-observer/intersection-observer.js
var intersection_observer = __webpack_require__(1349);

// CONCATENATED MODULE: ./src/shared/components/TimeSeries.tsx














const TimeSeries_defaultState = () => ({
    loading: types["RemoteDataState"].NotStarted,
    files: null,
    fetchCount: 0,
    errorMessage: '',
    duration: 0,
    giraffeResult: null,
    statuses: [[]],
});
class TimeSeries_TimeSeries extends react["Component"] {
    constructor() {
        super(...arguments);
        this.state = TimeSeries_defaultState();
        this.ref = react_default.a.createRef();
        this.isIntersecting = false;
        this.pendingReload = true;
        this.pendingResults = [];
        this.pendingCheckStatuses = null;
        this.reload = async () => {
            const { variables, notify, check } = this.props;
            const queries = this.props.queries.filter(({ text }) => !!text.trim());
            const orgID = this.props.params.orgID;
            if (!queries.length) {
                this.setState(TimeSeries_defaultState());
                return;
            }
            this.setState({
                loading: types["RemoteDataState"].Loading,
                fetchCount: this.state.fetchCount + 1,
                errorMessage: '',
            });
            try {
                const startTime = Date.now();
                this.pendingResults.forEach(({ cancel }) => cancel());
                this.pendingResults = queries.map(({ text }) => {
                    const windowVars = Object(getWindowVars["b" /* getWindowVars */])(text, variables);
                    const extern = Object(buildVarsOption["a" /* buildVarsOption */])([...variables, ...windowVars]);
                    return Object(apis_query["a" /* runQuery */])(orgID, text, extern);
                });
                const results = await Promise.all(this.pendingResults.map(r => r.promise));
                let statuses = [];
                if (check) {
                    const extern = Object(buildVarsOption["a" /* buildVarsOption */])(variables);
                    this.pendingCheckStatuses = Object(statusEvents["a" /* runStatusesQuery */])(orgID, check.id, extern);
                    statuses = await this.pendingCheckStatuses.promise;
                }
                const duration = Date.now() - startTime;
                for (const result of results) {
                    if (result.type === 'UNKNOWN_ERROR') {
                        throw new Error(result.message);
                    }
                    if (result.type === 'RATE_LIMIT_ERROR') {
                        notify(Object(copy_notifications["Wb" /* rateLimitReached */])(result.retryAfter));
                        throw new Error(result.message);
                    }
                    if (result.didTruncate) {
                        notify(Object(copy_notifications["hc" /* resultTooLarge */])(result.bytesRead));
                    }
                    Object(checkQueryResult["a" /* checkQueryResult */])(result.csv);
                }
                const files = results.map(r => r.csv);
                const giraffeResult = Object(giraffe_dist["fromFlux"])(files.join('\n\n'));
                this.pendingReload = false;
                this.setState({
                    giraffeResult,
                    files,
                    duration,
                    loading: types["RemoteDataState"].Done,
                    statuses,
                });
            }
            catch (error) {
                if (error.name === 'CancellationError') {
                    return;
                }
                console.error(error);
                this.setState({
                    errorMessage: error.message,
                    giraffeResult: null,
                    loading: types["RemoteDataState"].Error,
                    statuses: [[]],
                });
            }
            this.pendingReload = false;
        };
    }
    componentDidMount() {
        this.observer = new IntersectionObserver(entries => {
            entries.forEach(entry => {
                const { isIntersecting } = entry;
                if (!this.isIntersecting && isIntersecting && this.pendingReload) {
                    this.reload();
                }
                this.isIntersecting = isIntersecting;
            });
        });
        this.observer.observe(this.ref.current);
    }
    componentDidUpdate(prevProps) {
        if (this.shouldReload(prevProps) && this.isIntersecting) {
            this.reload();
        }
    }
    componentWillUnmount() {
        this.observer && this.observer.disconnect();
    }
    render() {
        const { giraffeResult, files, loading, errorMessage, fetchCount, duration, statuses, } = this.state;
        const { className, style } = this.props;
        return (react_default.a.createElement("div", { ref: this.ref, className: className, style: style }, this.props.children({
            giraffeResult,
            files,
            loading,
            errorMessage,
            duration,
            isInitialFetch: fetchCount === 1,
            statuses,
        })));
    }
    shouldReload(prevProps) {
        if (prevProps.submitToken !== this.props.submitToken) {
            return true;
        }
        if (!this.props.implicitSubmit) {
            return false;
        }
        if (!Object(lodash["isEqual"])(prevProps.queries, this.props.queries)) {
            return true;
        }
        if (!Object(lodash["isEqual"])(prevProps.variables, this.props.variables)) {
            return true;
        }
        return false;
    }
}
TimeSeries_TimeSeries.defaultProps = {
    implicitSubmit: true,
    className: 'time-series-container',
    style: null,
};
const TimeSeries_mstp = (state) => {
    const { links } = state;
    return { queryLink: links.query.self };
};
const TimeSeries_mdtp = {
    notify: actions_notifications["c" /* notify */],
};
/* harmony default export */ var components_TimeSeries = (Object(es["b" /* connect */])(TimeSeries_mstp, TimeSeries_mdtp)(Object(react_router_es["g" /* withRouter */])(TimeSeries_TimeSeries)));

// CONCATENATED MODULE: ./src/shared/components/EmptyGraphMessage.tsx

const EmptyGraphMessage = ({ message, testID }) => {
    return (react_default.a.createElement("div", { className: "cell--view-empty", "data-testid": testID },
        react_default.a.createElement("h4", null, message)));
};
/* harmony default export */ var components_EmptyGraphMessage = (EmptyGraphMessage);

// EXTERNAL MODULE: ./node_modules/react-copy-to-clipboard/lib/index.js
var react_copy_to_clipboard_lib = __webpack_require__(451);
var react_copy_to_clipboard_lib_default = /*#__PURE__*/__webpack_require__.n(react_copy_to_clipboard_lib);

// CONCATENATED MODULE: ./src/shared/components/EmptyGraphErrorTooltip.tsx



const EmptyGraphError = ({ message, testID }) => {
    const [didCopy, setDidCopy] = Object(react["useState"])(false);
    const buttonText = didCopy ? 'Copied!' : 'Copy';
    const buttonColor = didCopy ? clockface_dist["ComponentColor"].Success : clockface_dist["ComponentColor"].Default;
    const onClick = () => {
        setDidCopy(true);
        setTimeout(() => setDidCopy(false), 2000);
    };
    const trigger = Object(react["useRef"])(null);
    return (react_default.a.createElement("div", { className: "cell--view-empty error", "data-testid": testID },
        react_default.a.createElement("div", { ref: trigger },
            react_default.a.createElement("span", { className: `icon ${clockface_dist["IconFont"].AlertTriangle} empty-graph-error--icon` }),
            react_default.a.createElement(clockface_dist["Popover"], { appearance: clockface_dist["Appearance"].Outline, position: clockface_dist["PopoverPosition"].ToTheRight, triggerRef: trigger, showEvent: clockface_dist["PopoverInteraction"].Hover, hideEvent: clockface_dist["PopoverInteraction"].Hover, distanceFromTrigger: 8, testID: "emptygraph-popover", contents: () => (react_default.a.createElement("pre", null,
                    react_default.a.createElement(react_copy_to_clipboard_lib_default.a, { text: message },
                        react_default.a.createElement(clockface_dist["Button"], { size: clockface_dist["ComponentSize"].ExtraSmall, color: buttonColor, titleText: buttonText, text: buttonText, onClick: onClick, className: "empty-graph-error--copy" })),
                    react_default.a.createElement("code", null, message))) }))));
};
/* harmony default export */ var EmptyGraphErrorTooltip = (EmptyGraphError);

// CONCATENATED MODULE: ./src/shared/components/EmptyGraphError.tsx




const EmptyGraphError_EmptyGraphError = ({ message, testID }) => {
    const [didCopy, setDidCopy] = Object(react["useState"])(false);
    const buttonText = didCopy ? 'Copied!' : 'Copy';
    const buttonColor = didCopy ? clockface_dist["ComponentColor"].Success : clockface_dist["ComponentColor"].Default;
    const onClick = () => {
        setDidCopy(true);
        setTimeout(() => setDidCopy(false), 2000);
    };
    return (react_default.a.createElement("div", { className: "cell--view-empty", "data-testid": testID },
        react_default.a.createElement("div", { className: "empty-graph-error" },
            react_default.a.createElement(react_copy_to_clipboard_lib_default.a, { text: message },
                react_default.a.createElement(clockface_dist["Button"], { size: clockface_dist["ComponentSize"].ExtraSmall, color: buttonColor, titleText: buttonText, text: buttonText, onClick: onClick, className: "empty-graph-error--copy" })),
            react_default.a.createElement(FancyScrollbar["a" /* default */], { className: "empty-graph-error--scroll", autoHide: false, thumbStartColor: "#FF8564", thumbStopColor: "#DC4E58" },
                react_default.a.createElement("pre", null,
                    react_default.a.createElement("span", { className: `icon ${clockface_dist["IconFont"].AlertTriangle} empty-graph-error--icon` }),
                    react_default.a.createElement("code", { className: "cell--error-message" }, message))))));
};
/* harmony default export */ var components_EmptyGraphError = (EmptyGraphError_EmptyGraphError);

// CONCATENATED MODULE: ./src/shared/copy/cell.ts

const emptyFunny = [
    'Looks like you don’t have any queries. Be a lot cooler if you did!',
    'Create a query. Go on!',
    'Create a query. Have fun!',
];
const emptyGraphCopy = lodash_default.a.sample(emptyFunny);
const INVALID_DATA_COPY = "The data returned from the query can't be visualized with this graph type.";

// CONCATENATED MODULE: ./src/shared/components/EmptyQueryView.tsx







var ErrorFormat;
(function (ErrorFormat) {
    ErrorFormat["Tooltip"] = "tooltip";
    ErrorFormat["Scroll"] = "scroll";
})(ErrorFormat || (ErrorFormat = {}));
class EmptyQueryView_EmptyQueryView extends react["PureComponent"] {
    render() {
        const { errorMessage, isInitialFetch, loading, queries, fallbackNote, hasResults, errorFormat, } = this.props;
        if (loading === types["RemoteDataState"].NotStarted || !queries.length) {
            return (react_default.a.createElement(components_EmptyGraphMessage, { message: emptyGraphCopy, testID: "empty-graph--no-queries" }));
        }
        if (errorMessage) {
            if (errorFormat === ErrorFormat.Tooltip)
                return (react_default.a.createElement(EmptyGraphErrorTooltip, { message: errorMessage, testID: "empty-graph--error" }));
            if (errorFormat === ErrorFormat.Scroll)
                return (react_default.a.createElement(components_EmptyGraphError, { message: errorMessage, testID: "empty-graph--error" }));
        }
        if ((isInitialFetch || !hasResults) &&
            loading === types["RemoteDataState"].Loading) {
            return react_default.a.createElement(components_EmptyGraphMessage, { message: "Loading..." });
        }
        if (!hasResults && fallbackNote) {
            return react_default.a.createElement(views_Markdown, { text: fallbackNote });
        }
        if (!hasResults) {
            return (react_default.a.createElement(components_EmptyGraphMessage, { message: "No Results", testID: "empty-graph--no-results" }));
        }
        return this.props.children;
    }
}

// EXTERNAL MODULE: ./node_modules/react-virtualized/dist/es/index.js + 66 modules
var dist_es = __webpack_require__(232);

// CONCATENATED MODULE: ./src/shared/utils/preventNegativeZero.ts
const preventNegativeZero = (value) => {
    if (Number(value) === -0) {
        return typeof value === 'number' ? 0 : value.replace(/-/g, '');
    }
    return value;
};

// CONCATENATED MODULE: ./src/shared/utils/formatStatValue.ts



const formatStatValue = (value = 0, { decimalPlaces, prefix, suffix } = {}) => {
    let localeFormattedValue;
    if (Object(lodash["isNumber"])(value)) {
        let digits;
        if (decimalPlaces && decimalPlaces.isEnforced) {
            digits = decimalPlaces.digits;
        }
        else {
            digits = getAutoDigits(value);
        }
        const roundedValue = value.toFixed(digits);
        localeFormattedValue =
            Number(roundedValue) === 0
                ? roundedValue
                : Number(roundedValue).toLocaleString(undefined, {
                    maximumFractionDigits: dashboards_constants["l" /* MAX_DECIMAL_PLACES */],
                });
    }
    else if (Object(lodash["isString"])(value)) {
        localeFormattedValue = value;
    }
    else {
        return 'Data cannot be displayed';
    }
    localeFormattedValue = preventNegativeZero(localeFormattedValue);
    const formattedValue = `${prefix || ''}${localeFormattedValue}${suffix || ''}`;
    return formattedValue;
};
const getAutoDigits = (value) => {
    const decimalIndex = value.toString().indexOf('.');
    return decimalIndex === -1 ? 0 : 2;
};

// CONCATENATED MODULE: ./src/shared/constants/gaugeSpecs.ts
const GAUGE_SPECS = {
    degree: (5 / 4) * Math.PI,
    lineCount: 5,
    smallLineCount: 10,
    lineColor: '#545667',
    labelColor: '#8E91A1',
    labelFontSize: 13,
    lineStrokeSmall: 1,
    lineStrokeLarge: 3,
    tickSizeSmall: 9,
    tickSizeLarge: 18,
    minFontSize: 22,
    minLineWidth: 24,
    valueColor: '#ffffff',
    needleColor0: '#434453',
    needleColor1: '#ffffff',
    overflowDelta: 0.03,
};

// CONCATENATED MODULE: ./src/shared/components/Gauge.tsx







let Gauge_Gauge = class Gauge extends react["Component"] {
    constructor(props) {
        super(props);
        this.updateCanvas = () => {
            this.resetCanvas();
            const canvas = this.canvasRef.current;
            const ctx = canvas.getContext('2d');
            const { width, height } = this.props;
            const centerX = width / 2;
            const centerY = (height / 2) * 1.13;
            const radius = (Math.min(width, height) / 2) * 0.5;
            const { minLineWidth, minFontSize } = GAUGE_SPECS;
            const gradientThickness = Math.max(minLineWidth, radius / 4);
            const labelValueFontSize = Math.max(minFontSize, radius / 4);
            const { colors } = this.props;
            if (!colors || colors.length === 0) {
                return;
            }
            const minValue = Number(lodash_default.a.get(colors.find(color => color.type === constants_thresholds["c" /* COLOR_TYPE_MIN */]), 'value', constants_thresholds["i" /* DEFAULT_VALUE_MIN */]));
            const maxValue = Number(lodash_default.a.get(colors.find(color => color.type === constants_thresholds["b" /* COLOR_TYPE_MAX */]), 'value', constants_thresholds["h" /* DEFAULT_VALUE_MAX */]));
            if (colors.length === constants_thresholds["j" /* MIN_THRESHOLDS */]) {
                this.drawGradientGauge(ctx, centerX, centerY, radius, gradientThickness);
            }
            else {
                this.drawSegmentedGauge(ctx, centerX, centerY, radius, minValue, maxValue, gradientThickness);
            }
            this.drawGaugeLines(ctx, centerX, centerY, radius, gradientThickness);
            this.drawGaugeLabels(ctx, radius, gradientThickness, minValue, maxValue);
            this.drawGaugeValue(ctx, radius, labelValueFontSize);
            this.drawNeedle(ctx, radius, minValue, maxValue);
        };
        this.resetCanvas = () => {
            const canvas = this.canvasRef.current;
            const ctx = canvas.getContext('2d');
            const { width, height } = this.props;
            const dpRatio = window.devicePixelRatio || 1;
            canvas.width = width * dpRatio;
            canvas.height = height * dpRatio;
            canvas.style.width = `${width}px`;
            canvas.style.height = `${height}px`;
            ctx.scale(dpRatio, dpRatio);
            ctx.clearRect(0, 0, width, height);
        };
        this.drawGradientGauge = (ctx, xc, yc, r, gradientThickness) => {
            const { colors } = this.props;
            const sortedColors = lodash_default.a.sortBy(colors, color => Number(color.value));
            const arcStart = Math.PI * 0.75;
            const arcEnd = arcStart + Math.PI * 1.5;
            const xStart = xc + Math.cos(arcStart) * r;
            const yStart = yc + Math.sin(arcStart) * r;
            const xEnd = xc + Math.cos(arcEnd) * r;
            const yEnd = yc + Math.sin(arcEnd) * r;
            const gradient = ctx.createLinearGradient(xStart, yStart, xEnd, yEnd);
            gradient.addColorStop(0, sortedColors[0].hex);
            gradient.addColorStop(1.0, sortedColors[1].hex);
            ctx.beginPath();
            ctx.lineWidth = gradientThickness;
            ctx.strokeStyle = gradient;
            ctx.arc(xc, yc, r, arcStart, arcEnd);
            ctx.stroke();
        };
        this.drawSegmentedGauge = (ctx, xc, yc, r, minValue, maxValue, gradientThickness) => {
            const { colors } = this.props;
            const sortedColors = lodash_default.a.sortBy(colors, color => Number(color.value));
            const trueValueRange = Math.abs(maxValue - minValue);
            const totalArcLength = Math.PI * 1.5;
            let startingPoint = Math.PI * 0.75;
            for (let c = 0; c < sortedColors.length - 1; c++) {
                const color = sortedColors[c];
                const nextColor = sortedColors[c + 1];
                const adjustedValue = Number(color.value) - minValue;
                const adjustedNextValue = Number(nextColor.value) - minValue;
                const thisArc = Math.abs(adjustedValue - adjustedNextValue);
                const arcLength = totalArcLength * (thisArc / trueValueRange);
                ctx.beginPath();
                ctx.lineWidth = gradientThickness;
                ctx.strokeStyle = color.hex;
                ctx.arc(xc, yc, r, startingPoint, startingPoint + arcLength);
                ctx.stroke();
                startingPoint += arcLength;
            }
        };
        this.drawGaugeLines = (ctx, xc, yc, radius, gradientThickness) => {
            const { degree, lineCount, lineColor, lineStrokeSmall, lineStrokeLarge, tickSizeSmall, tickSizeLarge, smallLineCount, } = GAUGE_SPECS;
            const arcStart = Math.PI * 0.75;
            const arcLength = Math.PI * 1.5;
            const arcStop = arcStart + arcLength;
            const totalSmallLineCount = lineCount * smallLineCount;
            const startDegree = degree * 135;
            const arcLargeIncrement = arcLength / lineCount;
            const arcSmallIncrement = arcLength / totalSmallLineCount;
            const arcRadius = radius + gradientThickness * 0.8;
            ctx.beginPath();
            ctx.arc(xc, yc, arcRadius, arcStart, arcStop);
            ctx.lineWidth = 3;
            ctx.lineCap = 'round';
            ctx.strokeStyle = lineColor;
            ctx.stroke();
            ctx.closePath();
            ctx.translate(xc, yc);
            for (let lt = 0; lt <= lineCount; lt++) {
                ctx.rotate(startDegree);
                ctx.rotate(lt * arcLargeIncrement);
                ctx.beginPath();
                ctx.lineWidth = lineStrokeLarge;
                ctx.lineCap = 'round';
                ctx.strokeStyle = lineColor;
                ctx.moveTo(arcRadius, 0);
                ctx.lineTo(arcRadius + tickSizeLarge, 0);
                ctx.stroke();
                ctx.closePath();
                ctx.rotate(-lt * arcLargeIncrement);
                ctx.rotate(-startDegree);
            }
            for (let lt = 0; lt <= totalSmallLineCount; lt++) {
                ctx.rotate(startDegree);
                ctx.rotate(lt * arcSmallIncrement);
                ctx.beginPath();
                ctx.lineWidth = lineStrokeSmall;
                ctx.lineCap = 'round';
                ctx.strokeStyle = lineColor;
                ctx.moveTo(arcRadius, 0);
                ctx.lineTo(arcRadius + tickSizeSmall, 0);
                ctx.stroke();
                ctx.closePath();
                ctx.rotate(-lt * arcSmallIncrement);
                ctx.rotate(-startDegree);
            }
        };
        this.drawGaugeLabels = (ctx, radius, gradientThickness, minValue, maxValue) => {
            const { tickPrefix, tickSuffix, decimalPlaces } = this.props;
            let { prefix, suffix } = this.props;
            const { degree, lineCount, labelColor, labelFontSize } = GAUGE_SPECS;
            const tickValues = [
                ...lodash_default.a.range(minValue, maxValue, Math.abs(maxValue - minValue) / lineCount),
                maxValue,
            ];
            if (tickPrefix === 'true') {
                prefix = '';
            }
            if (tickSuffix === 'true') {
                suffix = '';
            }
            const labels = tickValues.map(tick => formatStatValue(tick, { decimalPlaces, prefix, suffix }));
            const startDegree = degree * 135;
            const arcLength = Math.PI * 1.5;
            const arcIncrement = arcLength / lineCount;
            ctx.font = `bold ${labelFontSize}px Helvetica`;
            ctx.fillStyle = labelColor;
            ctx.textBaseline = 'middle';
            ctx.textAlign = 'right';
            let labelRadius;
            for (let i = 0; i <= lineCount; i++) {
                if (i === 3) {
                    ctx.textAlign = 'center';
                    labelRadius = radius + gradientThickness + 30;
                }
                else {
                    labelRadius = radius + gradientThickness + 23;
                }
                if (i > 3) {
                    ctx.textAlign = 'left';
                }
                ctx.rotate(startDegree);
                ctx.rotate(i * arcIncrement);
                ctx.translate(labelRadius, 0);
                ctx.rotate(i * -arcIncrement);
                ctx.rotate(-startDegree);
                ctx.fillText(labels[i], 0, 0);
                ctx.rotate(startDegree);
                ctx.rotate(i * arcIncrement);
                ctx.translate(-labelRadius, 0);
                ctx.rotate(i * -arcIncrement);
                ctx.rotate(-startDegree);
            }
        };
        this.drawGaugeValue = (ctx, radius, labelValueFontSize) => {
            const { gaugePosition, prefix, suffix, decimalPlaces } = this.props;
            const { valueColor } = GAUGE_SPECS;
            ctx.font = `${labelValueFontSize}px Roboto`;
            ctx.fillStyle = valueColor;
            ctx.textBaseline = 'middle';
            ctx.textAlign = 'center';
            const textY = radius;
            const textContent = formatStatValue(gaugePosition, {
                decimalPlaces,
                prefix,
                suffix,
            });
            ctx.fillText(textContent, 0, textY);
        };
        this.drawNeedle = (ctx, radius, minValue, maxValue) => {
            const { gaugePosition } = this.props;
            const { degree, needleColor0, needleColor1, overflowDelta } = GAUGE_SPECS;
            const arcDistance = Math.PI * 1.5;
            let needleRotation;
            if (gaugePosition <= minValue) {
                needleRotation = 0 - overflowDelta;
            }
            else if (gaugePosition >= maxValue) {
                needleRotation = 1 + overflowDelta;
            }
            else {
                needleRotation = (gaugePosition - minValue) / (maxValue - minValue);
            }
            const needleGradient = ctx.createLinearGradient(0, -10, 0, radius);
            needleGradient.addColorStop(0, needleColor0);
            needleGradient.addColorStop(1, needleColor1);
            ctx.rotate(degree * 45);
            ctx.rotate(arcDistance * needleRotation);
            ctx.beginPath();
            ctx.fillStyle = needleGradient;
            ctx.arc(0, 0, 10, 0, Math.PI, true);
            ctx.lineTo(0, radius);
            ctx.lineTo(10, 0);
            ctx.fill();
        };
        this.canvasRef = react_default.a.createRef();
    }
    componentDidMount() {
        this.updateCanvas();
    }
    componentDidUpdate() {
        this.updateCanvas();
    }
    render() {
        const { width, height } = this.props;
        return (react_default.a.createElement("canvas", { className: "gauge", width: width, height: height, ref: this.canvasRef }));
    }
};
Gauge_Gauge = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], Gauge_Gauge);
/* harmony default export */ var components_Gauge = (Gauge_Gauge);

// CONCATENATED MODULE: ./src/shared/components/GaugeChart.tsx





let GaugeChart_GaugeChart = class GaugeChart extends react["PureComponent"] {
    render() {
        const { value } = this.props;
        const { colors, prefix, tickPrefix, suffix, tickSuffix, decimalPlaces, } = this.props.properties;
        return (react_default.a.createElement(dist_es["a" /* AutoSizer */], null, ({ width, height }) => (react_default.a.createElement("div", { className: "gauge" },
            react_default.a.createElement(components_Gauge, { width: width, height: height, colors: colors, prefix: prefix, tickPrefix: tickPrefix, suffix: suffix, tickSuffix: tickSuffix, gaugePosition: value, decimalPlaces: decimalPlaces })))));
    }
};
GaugeChart_GaugeChart = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], GaugeChart_GaugeChart);
/* harmony default export */ var components_GaugeChart = (GaugeChart_GaugeChart);

// EXTERNAL MODULE: ./node_modules/chroma-js/chroma.js
var chroma = __webpack_require__(480);
var chroma_default = /*#__PURE__*/__webpack_require__.n(chroma);

// CONCATENATED MODULE: ./src/shared/constants/colorOperations.ts



const getLegibleTextColor = bgColorHex => {
    const darkText = '#292933';
    const lightText = '#ffffff';
    const [red, green, blue] = chroma_default()(bgColorHex).rgb();
    const average = (red + green + blue) / 3;
    const mediumGrey = 128;
    return average > mediumGrey ? darkText : lightText;
};
const findNearestCrossedThreshold = (colors, lastValue) => {
    const sortedColors = lodash_default.a.sortBy(colors, color => Number(color.value));
    const nearestCrossedThreshold = sortedColors
        .filter(color => lastValue >= color.value)
        .pop();
    return nearestCrossedThreshold;
};
const generateThresholdsListHexs = ({ colors, lastValue, cellType = 'line', }) => {
    const defaultColoring = {
        bgColor: null,
        textColor: cellType === 'table' ? '#BEC2CC' : constants_thresholds["k" /* THRESHOLD_COLORS */][11].hex,
    };
    const lastValueNumber = Number(lastValue) || 0;
    if (!colors.length) {
        return defaultColoring;
    }
    const baseColor = colors.find(color => color.id === constants_thresholds["a" /* BASE_THRESHOLD_ID */]) || {
        hex: defaultColoring.textColor,
    };
    if (!lastValue && lastValue !== 0) {
        return Object.assign(Object.assign({}, defaultColoring), { textColor: baseColor.hex });
    }
    if (cellType === 'line-plus-single-stat') {
        return baseColor
            ? { bgColor: null, textColor: baseColor.hex }
            : defaultColoring;
    }
    const shouldColorizeText = !!colors.find(color => color.type === constants_thresholds["m" /* THRESHOLD_TYPE_TEXT */]);
    if (shouldColorizeText && colors.length === 1 && baseColor) {
        return { bgColor: null, textColor: baseColor.hex };
    }
    if (shouldColorizeText && colors.length === 1) {
        return defaultColoring;
    }
    if (shouldColorizeText && colors.length > 1) {
        const nearestCrossedThreshold = findNearestCrossedThreshold(colors, lastValueNumber);
        return { bgColor: null, textColor: nearestCrossedThreshold.hex };
    }
    if (colors.length === 1) {
        return {
            bgColor: baseColor.hex,
            textColor: getLegibleTextColor(baseColor.hex),
        };
    }
    if (colors.length > 1) {
        const nearestCrossedThreshold = findNearestCrossedThreshold(colors, lastValueNumber);
        const bgColor = nearestCrossedThreshold
            ? nearestCrossedThreshold.hex
            : baseColor.hex;
        return { bgColor, textColor: getLegibleTextColor(bgColor) };
    }
    return { bgColor: null, textColor: baseColor.hex };
};

// CONCATENATED MODULE: ./src/shared/components/SingleStat.tsx



const SingleStat = ({ stat, properties }) => {
    const { prefix, suffix, colors, decimalPlaces } = properties;
    const { bgColor: backgroundColor, textColor } = generateThresholdsListHexs({
        colors,
        lastValue: stat,
        cellType: 'single-stat',
    });
    const formattedValue = formatStatValue(stat, { decimalPlaces, prefix, suffix });
    return (react_default.a.createElement("div", { className: "single-stat", style: { backgroundColor }, "data-testid": "single-stat" },
        react_default.a.createElement("div", { className: "single-stat--resizer" },
            react_default.a.createElement("svg", { width: "100%", height: "100%", viewBox: `0 0 ${formattedValue.length * 55} 100` },
                react_default.a.createElement("text", { className: "single-stat--text", "data-testid": "single-stat--text", fontSize: "100", y: "59%", x: "50%", dominantBaseline: "middle", textAnchor: "middle", style: { fill: textColor } }, formattedValue)))));
};
/* harmony default export */ var components_SingleStat = (SingleStat);

// EXTERNAL MODULE: ./src/shared/constants/tableGraph.ts
var tableGraph = __webpack_require__(242);

// EXTERNAL MODULE: ./src/dashboards/utils/tableGraph.ts
var utils_tableGraph = __webpack_require__(311);

// CONCATENATED MODULE: ./src/shared/components/tables/TableGraphTransform.tsx




const areFormatPropertiesEqual = (prevProperties, newProperties) => {
    const formatProps = ['tableOptions', 'fieldOptions', 'timeFormat', 'sort'];
    if (!prevProperties.properties) {
        return false;
    }
    const propsEqual = formatProps.every(k => lodash_default.a.isEqual(prevProperties.properties[k], newProperties.properties[k]));
    return propsEqual;
};
class TableGraphTransform_TableGraphTransform extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.memoizedTableTransform = Object(memoize_one_esm["a" /* default */])(utils_tableGraph["c" /* transformTableData */], areFormatPropertiesEqual);
    }
    render() {
        const { properties, data, dataTypes, sortOptions } = this.props;
        const { tableOptions, timeFormat, decimalPlaces, fieldOptions } = properties;
        const fo = fieldOptions &&
            fieldOptions.map(opts => (Object.assign(Object.assign({}, opts), { dataType: dataTypes[opts.internalName] })));
        const transformedDataBundle = this.memoizedTableTransform(data, sortOptions, fo, tableOptions, timeFormat, decimalPlaces);
        return this.props.children(transformedDataBundle);
    }
}
/* harmony default export */ var tables_TableGraphTransform = (TableGraphTransform_TableGraphTransform);

// CONCATENATED MODULE: ./src/shared/components/tables/TableCell.tsx






const URL_REGEXP = /(https?:\/\/[^\s]+)/g;
function asLink(str) {
    if (!URL_REGEXP.test('' + str)) {
        return str;
    }
    const regex = RegExp(URL_REGEXP.source, URL_REGEXP.flags), out = [];
    let idx = 0, link, m;
    do {
        m = regex.exec(str);
        if (m) {
            if (m.index - idx > 0) {
                out.push(str.slice(idx, m.index));
            }
            link = str.slice(m.index, m.index + m[1].length);
            out.push(react_default.a.createElement("a", { href: link, target: "_blank" }, link));
            idx = m.index + m[1].length;
        }
    } while (m);
    return out;
}
class TableCell_TableCell extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleClick = () => {
            const { data } = this.props;
            return this.isFieldName && lodash_default.a.isString(data)
                ? this.props.onClickFieldName(data)
                : null;
        };
    }
    render() {
        const { data, rowIndex, columnIndex, onHover } = this.props;
        if (rowIndex === 0) {
            return (react_default.a.createElement("div", { style: this.style, className: this.class, onClick: this.handleClick, "data-column-index": columnIndex, "data-row-index": rowIndex, "data-testid": `${data}-table-header`, onMouseOver: onHover, title: this.contents }, this.contents));
        }
        return (react_default.a.createElement("div", { style: this.style, className: this.class, onClick: this.handleClick, "data-column-index": columnIndex, "data-row-index": rowIndex, onMouseOver: onHover, title: this.contents }, asLink(this.contents)));
    }
    get isFieldName() {
        return this.props.isVerticalTimeAxis ? this.isFirstRow : this.isFirstCol;
    }
    get isHighlightedRow() {
        const { parent, rowIndex, hoveredRowIndex } = this.props;
        return (rowIndex === parent.props.scrollToRow ||
            (rowIndex === hoveredRowIndex && hoveredRowIndex > 0));
    }
    get isHighlightedColumn() {
        const { columnIndex, hoveredColumnIndex } = this.props;
        return columnIndex === hoveredColumnIndex && hoveredColumnIndex > 0;
    }
    get isTimeData() {
        return (this.props.isTimeVisible &&
            (this.props.isVerticalTimeAxis
                ? !this.isFirstRow && this.props.columnIndex === this.timeFieldIndex
                : this.props.rowIndex === this.timeFieldIndex && this.isFirstCol));
    }
    get class() {
        return classnames_default()('table-graph-cell', {
            'table-graph-cell__fixed-row': this.isFixedRow,
            'table-graph-cell__fixed-column': this.isFixedColumn,
            'table-graph-cell__fixed-corner': this.isFixedCorner,
            'table-graph-cell__highlight-row': this.isHighlightedRow,
            'table-graph-cell__highlight-column': this.isHighlightedColumn,
            'table-graph-cell__numerical': !this.isNaN,
            'table-graph-cell__field-name': this.isFieldName,
            'table-graph-cell__sort-asc': this.isFieldName && this.isSorted && this.isAscending,
            'table-graph-cell__sort-desc': this.isFieldName && this.isSorted && !this.isAscending,
        });
    }
    get isSorted() {
        const { sortOptions, data } = this.props;
        return sortOptions.field === data;
    }
    get isAscending() {
        const { sortOptions } = this.props;
        return sortOptions.direction === tableGraph["a" /* ASCENDING */];
    }
    get isFirstRow() {
        const { rowIndex } = this.props;
        return rowIndex === 0;
    }
    get isFirstCol() {
        const { columnIndex } = this.props;
        return columnIndex === 0;
    }
    get isFixedRow() {
        return this.isFirstRow && !this.isFirstCol;
    }
    get isFixedColumn() {
        return this.props.isFirstColumnFixed && !this.isFirstRow && this.isFirstCol;
    }
    get isFixedCorner() {
        return this.isFirstRow && this.isFirstCol;
    }
    get isTimestamp() {
        return this.props.dataType === 'dateTime:RFC3339';
    }
    get isNaN() {
        return isNaN(Number(this.props.data));
    }
    get isFixed() {
        return this.isFixedRow || this.isFixedColumn || this.isFixedCorner;
    }
    get timeFieldIndex() {
        const { resolvedFieldOptions } = this.props;
        let hiddenBeforeTime = 0;
        const timeIndex = resolvedFieldOptions.findIndex(({ internalName, visible }) => {
            if (!visible) {
                hiddenBeforeTime += 1;
            }
            return internalName === dashboards_constants["h" /* DEFAULT_TIME_FIELD */].internalName;
        });
        return timeIndex - hiddenBeforeTime;
    }
    get style() {
        const { style, properties, data } = this.props;
        const { colors } = properties;
        if (this.isFixed || this.isTimeData || this.isTimestamp || this.isNaN) {
            return style;
        }
        const thresholdData = { colors, lastValue: data, cellType: 'table' };
        const { bgColor, textColor } = generateThresholdsListHexs(thresholdData);
        return Object.assign(Object.assign({}, style), { backgroundColor: bgColor, color: textColor });
    }
    get fieldName() {
        const { data, resolvedFieldOptions = [dashboards_constants["h" /* DEFAULT_TIME_FIELD */]] } = this.props;
        const foundField = this.isFieldName &&
            resolvedFieldOptions.find(({ internalName }) => internalName === data);
        return foundField && (foundField.displayName || foundField.internalName);
    }
    get contents() {
        const { properties, data, dataType, timeFormatter } = this.props;
        const { decimalPlaces } = properties;
        if (dataType.includes('dateTime')) {
            return timeFormatter(data);
        }
        if (lodash_default.a.isString(data) && this.isFieldName) {
            return lodash_default.a.defaultTo(this.fieldName, '').toString();
        }
        if (!isNaN(+data) &&
            decimalPlaces.isEnforced &&
            decimalPlaces.digits < 100) {
            return (+data).toFixed(decimalPlaces.digits);
        }
        return lodash_default.a.defaultTo(data, '').toString();
    }
}
/* harmony default export */ var tables_TableCell = (TableCell_TableCell);

// CONCATENATED MODULE: ./src/shared/components/MultiGrid/CellMeasurerCacheDecorator.ts
class CellMeasurerCacheDecorator {
    constructor(params = {}) {
        this.columnWidth = ({ index }) => {
            this.cellMeasurerCache.columnWidth({
                index: index + this.columnIndexOffset,
            });
        };
        this.rowHeight = ({ index }) => {
            this.cellMeasurerCache.rowHeight({
                index: index + this.rowIndexOffset,
            });
        };
        const { cellMeasurerCache, columnIndexOffset = 0, rowIndexOffset = 0, } = params;
        this.cellMeasurerCache = cellMeasurerCache;
        this.columnIndexOffset = columnIndexOffset;
        this.rowIndexOffset = rowIndexOffset;
    }
    clear(rowIndex, columnIndex) {
        this.cellMeasurerCache.clear(rowIndex + this.rowIndexOffset, columnIndex + this.columnIndexOffset);
    }
    clearAll() {
        this.cellMeasurerCache.clearAll();
    }
    get defaultHeight() {
        return this.cellMeasurerCache.defaultHeight;
    }
    get defaultWidth() {
        return this.cellMeasurerCache.defaultWidth;
    }
    hasFixedHeight() {
        return this.cellMeasurerCache.hasFixedHeight();
    }
    hasFixedWidth() {
        return this.cellMeasurerCache.hasFixedWidth();
    }
    getHeight(rowIndex, columnIndex = 0) {
        return this.cellMeasurerCache.getHeight(rowIndex + this.rowIndexOffset, columnIndex + this.columnIndexOffset);
    }
    getWidth(rowIndex, columnIndex = 0) {
        return this.cellMeasurerCache.getWidth(rowIndex + this.rowIndexOffset, columnIndex + this.columnIndexOffset);
    }
    has(rowIndex, columnIndex = 0) {
        return this.cellMeasurerCache.has(rowIndex + this.rowIndexOffset, columnIndex + this.columnIndexOffset);
    }
    set(rowIndex, columnIndex, width, height) {
        this.cellMeasurerCache.set(rowIndex + this.rowIndexOffset, columnIndex + this.columnIndexOffset, width, height);
    }
}
/* harmony default export */ var MultiGrid_CellMeasurerCacheDecorator = (CellMeasurerCacheDecorator);

// CONCATENATED MODULE: ./src/shared/components/MultiGrid/MultiGrid.tsx





const SCROLLBAR_SIZE_BUFFER = 20;
class MultiGrid_MultiGrid extends react["PureComponent"] {
    constructor(props, context) {
        super(props, context);
        this.deferredInvalidateColumnIndex = 0;
        this.deferredInvalidateRowIndex = 0;
        this.leftGridWidth = 0;
        this.topGridHeight = 0;
        this.lastRenderedFixedColumnCount = 0;
        this.lastRenderedFixedRowCount = 0;
        this.lastRenderedHeight = 0;
        this.lastRenderedWidth = 0;
        this.cellRendererBottomLeftGrid = (_a) => {
            var { rowIndex } = _a, rest = Object(tslib_es6["c" /* __rest */])(_a, ["rowIndex"]);
            const { cellRenderer, fixedRowCount, rowCount } = this.props;
            if (rowIndex === rowCount - fixedRowCount) {
                return (react["createElement"]("div", { key: rest.key, style: Object.assign(Object.assign({}, rest.style), { height: SCROLLBAR_SIZE_BUFFER }) }));
            }
            else {
                return cellRenderer(Object.assign(Object.assign({}, rest), { parent: this, rowIndex: rowIndex + fixedRowCount }));
            }
        };
        this.onScrollbarsScroll = (e) => {
            const { target } = e;
            this.onScroll(target);
        };
        this.onScroll = scrollInfo => {
            const { scrollLeft, scrollTop } = scrollInfo;
            this.setState({
                scrollLeft,
                scrollTop,
            });
            const { onScroll } = this.props;
            if (onScroll) {
                onScroll(scrollInfo);
            }
        };
        this.onScrollLeft = scrollInfo => {
            const { scrollLeft } = scrollInfo;
            this.onScroll({
                scrollLeft,
                scrollTop: this.state.scrollTop,
            });
        };
        this.rowHeightBottomGrid = ({ index }) => {
            const { fixedRowCount, rowCount, rowHeight } = this.props;
            const { scrollbarSize, showVerticalScrollbar } = this.state;
            if (showVerticalScrollbar && index === rowCount - fixedRowCount) {
                return scrollbarSize;
            }
            return typeof rowHeight === 'function'
                ? rowHeight({ index: index + fixedRowCount })
                : rowHeight;
        };
        this.topLeftGridRef = ref => {
            this.topLeftGrid = ref;
        };
        this.topRightGridRef = ref => {
            this.topRightGrid = ref;
        };
        this.bottomLeftGridRef = ref => {
            this.bottomLeftGrid = ref;
        };
        this.bottomRightGridRef = ref => {
            this.bottomRightGrid = ref;
        };
        this.cellRendererBottomRightGrid = (_a) => {
            var { columnIndex, rowIndex } = _a, rest = Object(tslib_es6["c" /* __rest */])(_a, ["columnIndex", "rowIndex"]);
            const { cellRenderer, fixedColumnCount, fixedRowCount } = this.props;
            return cellRenderer(Object.assign(Object.assign({}, rest), { columnIndex: columnIndex + fixedColumnCount, parent: this, rowIndex: rowIndex + fixedRowCount }));
        };
        this.cellRendererTopRightGrid = (_a) => {
            var { columnIndex } = _a, rest = Object(tslib_es6["c" /* __rest */])(_a, ["columnIndex"]);
            const { cellRenderer, columnCount, fixedColumnCount } = this.props;
            if (columnIndex === columnCount - fixedColumnCount) {
                return (react["createElement"]("div", { key: rest.key, style: Object.assign(Object.assign({}, rest.style), { width: SCROLLBAR_SIZE_BUFFER }) }));
            }
            else {
                return cellRenderer(Object.assign(Object.assign({}, rest), { columnIndex: columnIndex + fixedColumnCount, parent: this }));
            }
        };
        this.columnWidthRightGrid = ({ index }) => {
            const { columnCount, fixedColumnCount, columnWidth } = this.props;
            const { scrollbarSize, showHorizontalScrollbar } = this.state;
            if (showHorizontalScrollbar && index === columnCount - fixedColumnCount) {
                return scrollbarSize;
            }
            return typeof columnWidth === 'function'
                ? columnWidth({ index: index + fixedColumnCount })
                : columnWidth;
        };
        this.state = {
            scrollLeft: 0,
            scrollTop: 0,
            scrollbarSize: 0,
            showHorizontalScrollbar: false,
            showVerticalScrollbar: false,
        };
        const { deferredMeasurementCache, fixedColumnCount, fixedRowCount } = props;
        this.maybeCalculateCachedStyles(true);
        if (deferredMeasurementCache) {
            this.deferredMeasurementCacheBottomLeftGrid =
                fixedRowCount > 0
                    ? new MultiGrid_CellMeasurerCacheDecorator({
                        cellMeasurerCache: deferredMeasurementCache,
                        columnIndexOffset: 0,
                        rowIndexOffset: fixedRowCount,
                    })
                    : deferredMeasurementCache;
            this.deferredMeasurementCacheBottomRightGrid =
                fixedColumnCount > 0 || fixedRowCount > 0
                    ? new MultiGrid_CellMeasurerCacheDecorator({
                        cellMeasurerCache: deferredMeasurementCache,
                        columnIndexOffset: fixedColumnCount,
                        rowIndexOffset: fixedRowCount,
                    })
                    : deferredMeasurementCache;
            this.deferredMeasurementCacheTopRightGrid =
                fixedColumnCount > 0
                    ? new MultiGrid_CellMeasurerCacheDecorator({
                        cellMeasurerCache: deferredMeasurementCache,
                        columnIndexOffset: fixedColumnCount,
                        rowIndexOffset: 0,
                    })
                    : deferredMeasurementCache;
        }
    }
    static getDerivedStateFromProps(nextProps, prevState) {
        if (nextProps.scrollLeft !== prevState.scrollLeft ||
            nextProps.scrollTop !== prevState.scrollTop) {
            return {
                scrollLeft: nextProps.scrollLeft != null && nextProps.scrollLeft >= 0
                    ? nextProps.scrollLeft
                    : prevState.scrollLeft,
                scrollTop: nextProps.scrollTop != null && nextProps.scrollTop >= 0
                    ? nextProps.scrollTop
                    : prevState.scrollTop,
            };
        }
        return null;
    }
    forceUpdateGrids() {
        if (this.bottomLeftGrid) {
            this.bottomLeftGrid.forceUpdate();
        }
        if (this.bottomRightGrid) {
            this.bottomRightGrid.forceUpdate();
        }
        if (this.topLeftGrid) {
            this.topLeftGrid.forceUpdate();
        }
        if (this.topRightGrid) {
            this.topRightGrid.forceUpdate();
        }
    }
    invalidateCellSizeAfterRender({ columnIndex = 0, rowIndex = 0 } = {}) {
        this.deferredInvalidateColumnIndex =
            typeof this.deferredInvalidateColumnIndex === 'number'
                ? Math.min(this.deferredInvalidateColumnIndex, columnIndex)
                : columnIndex;
        this.deferredInvalidateRowIndex =
            typeof this.deferredInvalidateRowIndex === 'number'
                ? Math.min(this.deferredInvalidateRowIndex, rowIndex)
                : rowIndex;
    }
    measureAllCells() {
        if (this.bottomLeftGrid) {
            this.bottomLeftGrid.measureAllCells();
        }
        if (this.bottomRightGrid) {
            this.bottomRightGrid.measureAllCells();
        }
        if (this.topLeftGrid) {
            this.topLeftGrid.measureAllCells();
        }
        if (this.topRightGrid) {
            this.topRightGrid.measureAllCells();
        }
    }
    recomputeGridSize({ columnIndex = 0, rowIndex = 0 } = {}) {
        const { fixedColumnCount, fixedRowCount } = this.props;
        const adjustedColumnIndex = Math.max(0, columnIndex - fixedColumnCount);
        const adjustedRowIndex = Math.max(0, rowIndex - fixedRowCount);
        if (this.bottomLeftGrid) {
            this.bottomLeftGrid.recomputeGridSize({
                columnIndex,
                rowIndex: adjustedRowIndex,
            });
        }
        if (this.bottomRightGrid) {
            this.bottomRightGrid.recomputeGridSize({
                columnIndex: adjustedColumnIndex,
                rowIndex: adjustedRowIndex,
            });
        }
        if (this.topLeftGrid) {
            this.topLeftGrid.recomputeGridSize({
                columnIndex,
                rowIndex,
            });
        }
        if (this.topRightGrid) {
            this.topRightGrid.recomputeGridSize({
                columnIndex: adjustedColumnIndex,
                rowIndex,
            });
        }
        this.leftGridWidth = null;
        this.topGridHeight = null;
        this.maybeCalculateCachedStyles(true);
    }
    componentDidMount() {
        const { scrollLeft, scrollTop } = this.props;
        if (scrollLeft > 0 || scrollTop > 0) {
            const newState = {};
            if (scrollLeft > 0) {
                newState.scrollLeft = scrollLeft;
            }
            if (scrollTop > 0) {
                newState.scrollTop = scrollTop;
            }
            this.setState(Object.assign(Object.assign({}, this.state), newState));
        }
        this.handleInvalidatedGridSize();
    }
    componentDidUpdate() {
        this.handleInvalidatedGridSize();
    }
    render() {
        const _a = this.props, { onScroll, onSectionRendered, scrollToRow, scrollToColumn } = _a, rest = Object(tslib_es6["c" /* __rest */])(_a, ["onScroll", "onSectionRendered", "scrollToRow", "scrollToColumn"]);
        this.prepareForRender();
        if (this.props.width === 0 || this.props.height === 0) {
            return null;
        }
        const { scrollLeft, scrollTop } = this.state;
        return (react["createElement"]("div", { style: this.containerOuterStyle },
            react["createElement"]("div", { style: this.containerTopStyle },
                this.renderTopLeftGrid(rest),
                this.renderTopRightGrid(Object.assign(Object.assign(Object.assign({}, rest), onScroll), { scrollLeft }))),
            react["createElement"]("div", { style: this.containerBottomStyle },
                this.renderBottomLeftGrid(Object.assign(Object.assign({}, rest), { onScroll,
                    scrollTop })),
                this.renderBottomRightGrid(Object.assign(Object.assign({}, rest), { onScroll,
                    onSectionRendered,
                    scrollLeft,
                    scrollToColumn,
                    scrollToRow,
                    scrollTop })))));
    }
    getBottomGridHeight(props) {
        const { height } = props;
        const topGridHeight = this.getTopGridHeight(props);
        return height - topGridHeight;
    }
    getLeftGridWidth(props) {
        const { fixedColumnCount, columnWidth } = props;
        if (this.leftGridWidth == null) {
            if (typeof columnWidth === 'function') {
                let leftGridWidth = 0;
                for (let index = 0; index < fixedColumnCount; index++) {
                    leftGridWidth += columnWidth({ index });
                }
                this.leftGridWidth = leftGridWidth;
            }
            else {
                this.leftGridWidth = columnWidth * fixedColumnCount;
            }
        }
        return this.leftGridWidth;
    }
    getRightGridWidth(props) {
        const { width } = props;
        const leftGridWidth = this.getLeftGridWidth(props);
        const result = width - leftGridWidth;
        return result;
    }
    getTopGridHeight(props) {
        const { fixedRowCount, rowHeight } = props;
        if (this.topGridHeight == null) {
            if (typeof rowHeight === 'function') {
                let topGridHeight = 0;
                for (let index = 0; index < fixedRowCount; index++) {
                    topGridHeight += rowHeight({ index });
                }
                this.topGridHeight = topGridHeight;
            }
            else {
                this.topGridHeight = rowHeight * fixedRowCount;
            }
        }
        return this.topGridHeight;
    }
    renderBottomLeftGrid(props) {
        const { fixedColumnCount, fixedRowCount, rowCount } = props;
        if (!fixedColumnCount) {
            return null;
        }
        const width = this.getLeftGridWidth(props);
        const height = this.getBottomGridHeight(props);
        return (react["createElement"](dist_es["c" /* Grid */], Object.assign({}, props, { cellRenderer: this.cellRendererBottomLeftGrid, className: this.props.classNameBottomLeftGrid, columnCount: fixedColumnCount, deferredMeasurementCache: this.deferredMeasurementCacheBottomLeftGrid, onScroll: this.onScroll, height: height, ref: this.bottomLeftGridRef, rowCount: Math.max(0, rowCount - fixedRowCount), rowHeight: this.rowHeightBottomGrid, style: Object.assign({}, this.bottomLeftGridStyle), tabIndex: null, width: width })));
    }
    renderBottomRightGrid(props) {
        const { columnCount, fixedColumnCount, fixedRowCount, rowCount, scrollToColumn, scrollToRow, } = props;
        const width = this.getRightGridWidth(props);
        const height = this.getBottomGridHeight(props);
        return (react["createElement"](FancyScrollbar["a" /* default */], { style: Object.assign(Object.assign({}, this.bottomRightGridStyle), { width, height }), autoHide: true, scrollTop: this.state.scrollTop, scrollLeft: this.state.scrollLeft, setScrollTop: this.onScrollbarsScroll },
            react["createElement"](dist_es["c" /* Grid */], Object.assign({}, props, { cellRenderer: this.cellRendererBottomRightGrid, className: this.props.classNameBottomRightGrid, columnCount: Math.max(0, columnCount - fixedColumnCount), columnWidth: this.columnWidthRightGrid, deferredMeasurementCache: this.deferredMeasurementCacheBottomRightGrid, height: height, ref: this.bottomRightGridRef, rowCount: Math.max(0, rowCount - fixedRowCount), rowHeight: this.rowHeightBottomGrid, onScroll: this.onScroll, scrollToColumn: scrollToColumn - fixedColumnCount, scrollToRow: scrollToRow - fixedRowCount, style: Object.assign(Object.assign({}, this.bottomRightGridStyle), { overflowX: false, overflowY: true, left: 0 }), width: width }))));
    }
    renderTopLeftGrid(props) {
        const { fixedColumnCount, fixedRowCount } = props;
        if (!fixedColumnCount || !fixedRowCount) {
            return null;
        }
        return (react["createElement"](dist_es["c" /* Grid */], Object.assign({}, props, { className: this.props.classNameTopLeftGrid, columnCount: fixedColumnCount, height: this.getTopGridHeight(props), ref: this.topLeftGridRef, rowCount: fixedRowCount, style: this.topLeftGridStyle, tabIndex: null, width: this.getLeftGridWidth(props) })));
    }
    renderTopRightGrid(props) {
        const { columnCount, enableFixedRowScroll, fixedColumnCount, fixedRowCount, scrollLeft, } = props;
        if (!fixedRowCount) {
            return null;
        }
        const width = this.getRightGridWidth(props);
        const height = this.getTopGridHeight(props);
        return (react["createElement"](dist_es["c" /* Grid */], Object.assign({}, props, { cellRenderer: this.cellRendererTopRightGrid, className: this.props.classNameTopRightGrid, columnCount: Math.max(0, columnCount - fixedColumnCount), columnWidth: this.columnWidthRightGrid, deferredMeasurementCache: this.deferredMeasurementCacheTopRightGrid, height: height, onScroll: enableFixedRowScroll ? this.onScrollLeft : undefined, ref: this.topRightGridRef, rowCount: fixedRowCount, scrollLeft: scrollLeft, style: this.topRightGridStyle, tabIndex: null, width: width })));
    }
    maybeCalculateCachedStyles(resetAll) {
        const { columnWidth, height, fixedColumnCount, fixedRowCount, rowHeight, style, styleBottomLeftGrid, styleBottomRightGrid, styleTopLeftGrid, styleTopRightGrid, width, } = this.props;
        const sizeChange = resetAll ||
            height !== this.lastRenderedHeight ||
            width !== this.lastRenderedWidth;
        const leftSizeChange = resetAll ||
            columnWidth !== this.lastRenderedColumnWidth ||
            fixedColumnCount !== this.lastRenderedFixedColumnCount;
        const topSizeChange = resetAll ||
            fixedRowCount !== this.lastRenderedFixedRowCount ||
            rowHeight !== this.lastRenderedRowHeight;
        if (resetAll || sizeChange || style !== this.lastRenderedStyle) {
            this.containerOuterStyle = Object.assign({ height, overflow: 'visible', width }, style);
        }
        if (resetAll || sizeChange || topSizeChange) {
            this.containerTopStyle = {
                height: this.getTopGridHeight(this.props),
                position: 'relative',
                width,
            };
            this.containerBottomStyle = {
                height: height - this.getTopGridHeight(this.props),
                overflow: 'visible',
                position: 'relative',
                width,
            };
        }
        if (resetAll ||
            styleBottomLeftGrid !== this.lastRenderedStyleBottomLeftGrid) {
            this.bottomLeftGridStyle = Object.assign({ left: 0, overflowY: 'hidden', overflowX: 'hidden', position: 'absolute' }, styleBottomLeftGrid);
        }
        if (resetAll ||
            leftSizeChange ||
            styleBottomRightGrid !== this.lastRenderedStyleBottomRightGrid) {
            this.bottomRightGridStyle = Object.assign({ left: this.getLeftGridWidth(this.props), position: 'absolute' }, styleBottomRightGrid);
        }
        if (resetAll || styleTopLeftGrid !== this.lastRenderedStyleTopLeftGrid) {
            this.topLeftGridStyle = Object.assign({ left: 0, overflowX: 'hidden', overflowY: 'hidden', position: 'absolute', top: 0 }, styleTopLeftGrid);
        }
        if (resetAll ||
            leftSizeChange ||
            styleTopRightGrid !== this.lastRenderedStyleTopRightGrid) {
            this.topRightGridStyle = Object.assign({ left: this.getLeftGridWidth(this.props), overflowX: 'hidden', overflowY: 'hidden', position: 'absolute', top: 0 }, styleTopRightGrid);
        }
        this.lastRenderedColumnWidth = columnWidth;
        this.lastRenderedFixedColumnCount = fixedColumnCount;
        this.lastRenderedFixedRowCount = fixedRowCount;
        this.lastRenderedHeight = height;
        this.lastRenderedRowHeight = rowHeight;
        this.lastRenderedStyle = style;
        this.lastRenderedStyleBottomLeftGrid = styleBottomLeftGrid;
        this.lastRenderedStyleBottomRightGrid = styleBottomRightGrid;
        this.lastRenderedStyleTopLeftGrid = styleTopLeftGrid;
        this.lastRenderedStyleTopRightGrid = styleTopRightGrid;
        this.lastRenderedWidth = width;
    }
    handleInvalidatedGridSize() {
        if (typeof this.deferredInvalidateColumnIndex === 'number') {
            const columnIndex = this.deferredInvalidateColumnIndex;
            const rowIndex = this.deferredInvalidateRowIndex;
            this.deferredInvalidateColumnIndex = null;
            this.deferredInvalidateRowIndex = null;
            this.recomputeGridSize({
                columnIndex,
                rowIndex,
            });
            this.forceUpdate();
        }
    }
    prepareForRender() {
        if (this.lastRenderedColumnWidth !== this.props.columnWidth ||
            this.lastRenderedFixedColumnCount !== this.props.fixedColumnCount) {
            this.leftGridWidth = null;
        }
        if (this.lastRenderedFixedRowCount !== this.props.fixedRowCount ||
            this.lastRenderedRowHeight !== this.props.rowHeight) {
            this.topGridHeight = null;
        }
        this.maybeCalculateCachedStyles(false);
        this.lastRenderedColumnWidth = this.props.columnWidth;
        this.lastRenderedFixedColumnCount = this.props.fixedColumnCount;
        this.lastRenderedFixedRowCount = this.props.fixedRowCount;
        this.lastRenderedRowHeight = this.props.rowHeight;
    }
}
MultiGrid_MultiGrid.defaultProps = {
    classNameBottomLeftGrid: '',
    classNameBottomRightGrid: '',
    classNameTopLeftGrid: '',
    classNameTopRightGrid: '',
    enableFixedColumnScroll: false,
    enableFixedRowScroll: false,
    fixedColumnCount: 0,
    fixedRowCount: 0,
    scrollToColumn: -1,
    scrollToRow: -1,
    style: {},
    styleBottomLeftGrid: {},
    styleBottomRightGrid: {},
    styleTopLeftGrid: {},
    styleTopRightGrid: {},
};
/* harmony default export */ var components_MultiGrid_MultiGrid = (MultiGrid_MultiGrid);

// CONCATENATED MODULE: ./src/shared/components/MultiGrid/index.ts



// CONCATENATED MODULE: ./src/dashboards/utils/hoverTime.tsx

const { Provider, Consumer } = react_default.a.createContext(null);
class hoverTime_HoverTimeProvider extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            hoverTime: null,
            onSetHoverTime: (hoverTime) => this.setState({ hoverTime }),
        };
    }
    render() {
        return react_default.a.createElement(Provider, { value: this.state }, this.props.children);
    }
}
const withHoverTime = (Component) => (props) => (react_default.a.createElement(Consumer, null, hoverTimeProps => react_default.a.createElement(Component, Object.assign({}, props, hoverTimeProps))));

// CONCATENATED MODULE: ./src/shared/components/tables/TableGraphTable.tsx












const COLUMN_MIN_WIDTH = 100;
const ROW_HEIGHT = 30;
let TableGraphTable_TableGraphTable = class TableGraphTable extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            timeColumnWidth: 0,
            shouldResize: false,
            totalColumnWidths: 0,
            hoveredRowIndex: tableGraph["g" /* NULL_ARRAY_INDEX */],
            hoveredColumnIndex: tableGraph["g" /* NULL_ARRAY_INDEX */],
        };
        this.handleMultiGridMount = (ref) => {
            this.multiGrid = ref;
            ref.forceUpdate();
        };
        this.handleHover = (e) => {
            const { dataset } = e.target;
            const { onSetHoverTime } = this.props;
            const { transformedDataBundle: { sortedTimeVals }, } = this.props;
            if (this.isVerticalTimeAxis && +dataset.rowIndex === 0) {
                return;
            }
            if (onSetHoverTime && this.isTimeVisible) {
                const hoverTime = this.isVerticalTimeAxis
                    ? sortedTimeVals[dataset.rowIndex]
                    : sortedTimeVals[dataset.columnIndex];
                onSetHoverTime(new Date(hoverTime).valueOf());
            }
            this.setState({
                hoveredColumnIndex: +dataset.columnIndex,
                hoveredRowIndex: +dataset.rowIndex,
            });
        };
        this.handleMouseLeave = () => {
            const { onSetHoverTime } = this.props;
            if (onSetHoverTime) {
                onSetHoverTime(0);
            }
            this.setState({
                hoveredColumnIndex: tableGraph["g" /* NULL_ARRAY_INDEX */],
                hoveredRowIndex: tableGraph["g" /* NULL_ARRAY_INDEX */],
            });
        };
        this.calculateColumnWidth = (columnSizerWidth) => (column) => {
            const { index } = column;
            const { transformedDataBundle: { transformedData, columnWidths }, } = this.props;
            const { totalColumnWidths } = this.state;
            const columnLabel = transformedData[0][index];
            const original = columnWidths[columnLabel] || 0;
            if (this.fixFirstColumn && index === 0) {
                return original;
            }
            if (this.tableWidth <= totalColumnWidths) {
                return original;
            }
            if (this.columnCount <= 1) {
                return columnSizerWidth;
            }
            const difference = this.tableWidth - totalColumnWidths;
            const increment = difference / this.computedColumnCount;
            return original + increment;
        };
        this.handleResize = () => {
            this.forceUpdate();
        };
        this.getCellData = (rowIndex, columnIndex) => {
            const { transformedDataBundle: { transformedData }, } = this.props;
            return transformedData[rowIndex][columnIndex];
        };
        this.dataType = (rowIndex, columnIndex) => {
            const { transformedDataBundle: { transformedData }, dataTypes, } = this.props;
            if (rowIndex === 0) {
                return 'n/a';
            }
            const columnName = transformedData[0][columnIndex];
            return lodash_default.a.get(dataTypes, columnName, 'n/a');
        };
        this.cellRenderer = (cellProps) => {
            const { rowIndex, columnIndex } = cellProps;
            const { transformedDataBundle: { sortOptions, resolvedFieldOptions }, onSort, properties, } = this.props;
            const { hoveredRowIndex, hoveredColumnIndex } = this.state;
            const { scrollToRow } = this.scrollToColRow;
            const hoverIndex = scrollToRow >= 0 ? scrollToRow : hoveredRowIndex;
            return (react_default.a.createElement(tables_TableCell, Object.assign({}, cellProps, { sortOptions: sortOptions, onHover: this.handleHover, isTimeVisible: this.isTimeVisible, data: this.getCellData(rowIndex, columnIndex), dataType: this.dataType(rowIndex, columnIndex), hoveredRowIndex: hoverIndex, properties: properties, resolvedFieldOptions: resolvedFieldOptions, hoveredColumnIndex: hoveredColumnIndex, isFirstColumnFixed: this.fixFirstColumn, isVerticalTimeAxis: this.isVerticalTimeAxis, onClickFieldName: onSort, timeFormatter: this.timeFormatter })));
        };
    }
    componentDidUpdate() {
        if (this.state.shouldResize) {
            if (this.multiGrid) {
                this.multiGrid.recomputeGridSize();
            }
            this.setState({ shouldResize: false });
        }
    }
    componentWillUnmount() {
        window.removeEventListener('resize', this.handleResize);
    }
    render() {
        const { transformedDataBundle: { transformedData }, } = this.props;
        const rowCount = this.columnCount === 0 ? 0 : transformedData.length;
        const fixedColumnCount = this.fixFirstColumn && this.columnCount > 1 ? 1 : 0;
        const { scrollToColumn, scrollToRow } = this.scrollToColRow;
        return (react_default.a.createElement("div", { className: "time-machine-table", ref: gridContainer => (this.gridContainer = gridContainer), onMouseLeave: this.handleMouseLeave }, rowCount > 0 && (react_default.a.createElement(dist_es["a" /* AutoSizer */], null, ({ width, height }) => {
            return (react_default.a.createElement(dist_es["b" /* ColumnSizer */], { columnCount: this.computedColumnCount, columnMinWidth: COLUMN_MIN_WIDTH, width: width }, ({ adjustedWidth, columnWidth, registerChild, }) => {
                return (react_default.a.createElement(components_MultiGrid_MultiGrid, { height: height, ref: registerChild, rowCount: rowCount, width: adjustedWidth, rowHeight: ROW_HEIGHT, scrollToRow: scrollToRow, columnCount: this.columnCount, scrollToColumn: scrollToColumn, fixedColumnCount: fixedColumnCount, cellRenderer: this.cellRenderer, onMount: this.handleMultiGridMount, classNameBottomRightGrid: "table-graph--scroll-window", columnWidth: this.calculateColumnWidth(columnWidth) }));
            }));
        }))));
    }
    get timeField() {
        const { transformedDataBundle } = this.props;
        const { resolvedFieldOptions } = transformedDataBundle;
        return lodash_default.a.find(resolvedFieldOptions, f => f.internalName === dashboards_constants["h" /* DEFAULT_TIME_FIELD */].internalName);
    }
    get fixFirstColumn() {
        const { transformedDataBundle: { resolvedFieldOptions }, properties: { tableOptions }, } = this.props;
        const { fixFirstColumn = tableGraph["c" /* DEFAULT_FIX_FIRST_COLUMN */] } = tableOptions;
        if (resolvedFieldOptions.length === 1) {
            return false;
        }
        const visibleFields = resolvedFieldOptions.reduce((acc, f) => {
            if (f.visible) {
                acc += 1;
            }
            return acc;
        }, 0);
        if (visibleFields === 1) {
            return false;
        }
        return fixFirstColumn;
    }
    get columnCount() {
        const { transformedDataBundle: { transformedData }, } = this.props;
        return lodash_default.a.get(transformedData, ['0', 'length'], 0);
    }
    get computedColumnCount() {
        if (this.fixFirstColumn) {
            return this.columnCount - 1;
        }
        return this.columnCount;
    }
    get tableWidth() {
        let tableWidth = 0;
        if (this.gridContainer && this.gridContainer.clientWidth) {
            tableWidth = this.gridContainer.clientWidth;
        }
        return tableWidth;
    }
    get scrollToColRow() {
        const { transformedDataBundle: { sortedTimeVals }, } = this.props;
        const { hoveredColumnIndex } = this.state;
        const { hoverTime } = this.props;
        const hoveringThisTable = hoveredColumnIndex !== tableGraph["g" /* NULL_ARRAY_INDEX */];
        if (!hoverTime || hoveringThisTable || !this.isTimeVisible) {
            return { scrollToColumn: 0, scrollToRow: -1 };
        }
        const hoverIndex = Object(utils_tableGraph["a" /* findHoverTimeIndex */])(sortedTimeVals, hoverTime);
        const scrollToColumn = this.isVerticalTimeAxis ? -1 : hoverIndex;
        const scrollToRow = this.isVerticalTimeAxis ? hoverIndex : null;
        return { scrollToRow, scrollToColumn };
    }
    get isVerticalTimeAxis() {
        const { properties: { tableOptions }, } = this.props;
        const { verticalTimeAxis = tableGraph["e" /* DEFAULT_VERTICAL_TIME_AXIS */] } = tableOptions;
        return verticalTimeAxis;
    }
    get isTimeVisible() {
        return lodash_default.a.get(this.timeField, 'visible', false);
    }
    get timeFormatter() {
        const { timeZone, properties: { timeFormat }, } = this.props;
        return Object(giraffe_dist["timeFormatter"])({
            timeZone: timeZone === 'Local' ? undefined : timeZone,
            format: Object(utils_tableGraph["b" /* resolveTimeFormat */])(timeFormat),
        });
    }
};
TableGraphTable_TableGraphTable = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], TableGraphTable_TableGraphTable);
/* harmony default export */ var tables_TableGraphTable = (withHoverTime(TableGraphTable_TableGraphTable));

// CONCATENATED MODULE: ./src/shared/components/tables/TableGraph.tsx







let TableGraph_TableGraph = class TableGraph extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleSetSort = (fieldName) => {
            this.setState(({ sortOptions }) => {
                const newSortOptions = Object.assign({}, sortOptions);
                if (fieldName === sortOptions.field) {
                    newSortOptions.direction =
                        sortOptions.direction === tableGraph["a" /* ASCENDING */] ? tableGraph["f" /* DESCENDING */] : tableGraph["a" /* ASCENDING */];
                }
                else {
                    newSortOptions.field = fieldName;
                    newSortOptions.direction = tableGraph["d" /* DEFAULT_SORT_DIRECTION */];
                }
                return { sortOptions: newSortOptions };
            });
        };
        const sortField = lodash_default.a.get(props, 'properties.tableOptions.sortBy.internalName');
        this.state = {
            sortOptions: {
                field: sortField,
                direction: tableGraph["a" /* ASCENDING */],
            },
        };
    }
    render() {
        const { table, properties, timeZone } = this.props;
        const { sortOptions } = this.state;
        return (react_default.a.createElement(tables_TableGraphTransform, { data: table.data, properties: properties, dataTypes: table.dataTypes, sortOptions: sortOptions }, transformedDataBundle => (react_default.a.createElement(tables_TableGraphTable, { properties: properties, dataTypes: table.dataTypes, onSort: this.handleSetSort, transformedDataBundle: transformedDataBundle, timeZone: timeZone }))));
    }
};
TableGraph_TableGraph = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], TableGraph_TableGraph);
/* harmony default export */ var tables_TableGraph = (TableGraph_TableGraph);

// CONCATENATED MODULE: ./src/shared/components/tables/TableSidebarItem.tsx



let TableSidebarItem_TableSidebarItem = class TableSidebarItem extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleClick = () => {
            this.props.onSelect(this.props.name);
        };
    }
    render() {
        const { isSelected } = this.props;
        return (react_default.a.createElement("div", { className: `time-machine-sidebar-item ${isSelected ? 'active' : ''}`, onClick: this.handleClick }, this.name));
    }
    get name() {
        const keysIHate = ['_start', '_stop'];
        return Object.entries(this.props.groupKey)
            .filter(([k]) => !keysIHate.includes(k))
            .map(([k, v], i) => {
            return (react_default.a.createElement(react["Fragment"], { key: i },
                react_default.a.createElement("span", { className: "key" }, k),
                react_default.a.createElement("span", { className: "equals" }, "="),
                react_default.a.createElement("span", { className: "value" }, v)));
        });
    }
};
TableSidebarItem_TableSidebarItem = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], TableSidebarItem_TableSidebarItem);
/* harmony default export */ var tables_TableSidebarItem = (TableSidebarItem_TableSidebarItem);

// CONCATENATED MODULE: ./src/shared/components/tables/TableSidebar.tsx







let TableSidebar_TableSidebar = class TableSidebar extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            searchTerm: '',
        };
        this.handleSearch = (e) => {
            this.setState({ searchTerm: e.target.value });
        };
    }
    render() {
        const { selectedTableName, onSelectTable } = this.props;
        const { searchTerm } = this.state;
        return (react_default.a.createElement("div", { className: "time-machine-sidebar" },
            !this.isDataEmpty && (react_default.a.createElement("div", { className: "time-machine-sidebar--heading" },
                react_default.a.createElement(clockface_dist["Input"], { icon: clockface_dist["IconFont"].Search, onChange: this.handleSearch, placeholder: "Filter tables...", value: searchTerm, className: "time-machine-sidebar--filter" }))),
            react_default.a.createElement(clockface_dist["DapperScrollbars"], { autoHide: true, className: "time-machine-sidebar--scroll" },
                react_default.a.createElement("div", { className: "time-machine-sidebar--items" }, this.filteredData.map(({ groupKey, id, name }) => {
                    return (react_default.a.createElement(tables_TableSidebarItem, { id: id, key: id, name: name, groupKey: groupKey, onSelect: onSelectTable, isSelected: name === selectedTableName }));
                })))));
    }
    get filteredData() {
        const { data } = this.props;
        const { searchTerm } = this.state;
        return data.filter(d => d.name.includes(searchTerm));
    }
    get isDataEmpty() {
        return lodash_default.a.isEmpty(this.props.data);
    }
};
TableSidebar_TableSidebar = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], TableSidebar_TableSidebar);
/* harmony default export */ var tables_TableSidebar = (TableSidebar_TableSidebar);

// EXTERNAL MODULE: ./src/timeMachine/actions/index.ts + 1 modules
var timeMachine_actions = __webpack_require__(42);

// CONCATENATED MODULE: ./src/shared/components/tables/TableGraphs.tsx










let TableGraphs_TableGraphs = class TableGraphs extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            selectedTableName: getDeep(this, 'props.tables[0].name', null),
        };
        this.handleSelectTable = (selectedTableName) => {
            this.setState({ selectedTableName });
        };
    }
    render() {
        const { tables, properties, timeZone } = this.props;
        return (react_default.a.createElement("div", { className: "time-machine-tables" },
            this.showSidebar && (react_default.a.createElement(tables_TableSidebar, { data: tables, selectedTableName: this.nameOfSelectedTable, onSelectTable: this.handleSelectTable })),
            this.shouldShowTable && (react_default.a.createElement(tables_TableGraph, { key: this.nameOfSelectedTable, table: this.selectedTable, properties: properties, timeZone: timeZone })),
            !this.hasData && (react_default.a.createElement(components_EmptyGraphMessage, { message: "This table has no data" }))));
    }
    get nameOfSelectedTable() {
        const { tables } = this.props;
        const isNameInTables = tables.find(t => t.name === this.state.selectedTableName);
        if (!isNameInTables) {
            return this.defaultTableName;
        }
        return this.state.selectedTableName;
    }
    get defaultTableName() {
        return lodash_default.a.get(this.props.tables, '0.name', null);
    }
    get showSidebar() {
        return this.props.tables.length > 1;
    }
    get hasData() {
        const { data } = this.selectedTable;
        return !!data && !!data.length;
    }
    get shouldShowTable() {
        return !!this.props.tables && !!this.selectedTable;
    }
    get selectedTable() {
        const { tables } = this.props;
        return tables.find(t => t.name === this.nameOfSelectedTable);
    }
};
TableGraphs_TableGraphs = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], TableGraphs_TableGraphs);
const TableGraphs_mdtp = {
    setFieldOptions: timeMachine_actions["t" /* setFieldOptions */],
};
/* harmony default export */ var tables_TableGraphs = (Object(es["b" /* connect */])(null, TableGraphs_mdtp)(TableGraphs_TableGraphs));

// CONCATENATED MODULE: ./src/shared/components/GraphLoadingDots.tsx

const GraphLoadingDots = () => {
    return (react_default.a.createElement("div", { className: "graph-panel__refreshing" },
        react_default.a.createElement("div", null),
        react_default.a.createElement("div", null),
        react_default.a.createElement("div", null)));
};
/* harmony default export */ var components_GraphLoadingDots = (GraphLoadingDots);

// EXTERNAL MODULE: ./src/shared/utils/useOneWayState.ts
var useOneWayState = __webpack_require__(418);

// EXTERNAL MODULE: ./src/shared/utils/vis.ts
var vis = __webpack_require__(71);

// EXTERNAL MODULE: ./src/timeMachine/selectors/index.ts
var timeMachine_selectors = __webpack_require__(31);

// CONCATENATED MODULE: ./src/shared/utils/useVisDomainSettings.ts





const getValidRange = (data = [], timeRange) => {
    const range = Object(vis["e" /* extent */])(data || []);
    if (Object(lodash["isNull"])(timeRange)) {
        return range;
    }
    if (range && range.length >= 2) {
        const startTime = Object(timeMachine_selectors["l" /* getStartTime */])(timeRange);
        const endTime = Object(timeMachine_selectors["f" /* getEndTime */])(timeRange);
        const start = Math.min(startTime, range[0]);
        const end = Math.max(endTime, range[1]);
        return [start, end];
    }
    return range;
};
const useVisDomainSettings = (storedDomain, data, timeRange = null) => {
    const initialDomain = Object(react["useMemo"])(() => {
        if (storedDomain) {
            return storedDomain;
        }
        return getValidRange(data, timeRange);
    }, [storedDomain, data]);
    const [domain, setDomain] = Object(useOneWayState["a" /* useOneWayState */])(initialDomain);
    const resetDomain = () => setDomain(initialDomain);
    return [domain, setDomain, resetDomain];
};

// EXTERNAL MODULE: ./src/shared/constants/graphColorPalettes.ts
var graphColorPalettes = __webpack_require__(212);

// CONCATENATED MODULE: ./src/shared/components/HistogramPlot.tsx









const HistogramPlot = ({ table, loading, children, timeZone, viewProperties: { xColumn, fillColumns, binCount, position, colors, xAxisLabel, xDomain: storedXDomain, }, }) => {
    const columnKeys = table.columnKeys;
    const [xDomain, onSetXDomain, onResetXDomain] = useVisDomainSettings(storedXDomain, table.getColumn(xColumn, 'number'));
    const isValidView = xColumn &&
        columnKeys.includes(xColumn) &&
        fillColumns.every(col => columnKeys.includes(col));
    if (!isValidView) {
        return react_default.a.createElement(components_EmptyGraphMessage, { message: INVALID_DATA_COPY });
    }
    const colorHexes = colors && colors.length
        ? colors.map(c => c.hex)
        : graphColorPalettes["a" /* DEFAULT_LINE_COLORS */].map(c => c.hex);
    const xFormatter = Object(vis["h" /* getFormatter */])(table.getColumnType(xColumn), { timeZone });
    const config = Object.assign(Object.assign({}, constants["I" /* VIS_THEME */]), { table,
        xAxisLabel,
        xDomain,
        onSetXDomain,
        onResetXDomain, valueFormatters: { [xColumn]: xFormatter }, layers: [
            {
                type: 'histogram',
                x: xColumn,
                colors: colorHexes,
                fill: fillColumns,
                binCount,
                position,
            },
        ] });
    return (react_default.a.createElement(react_default.a.Fragment, null,
        loading === types["RemoteDataState"].Loading && react_default.a.createElement(components_GraphLoadingDots, null),
        children(config)));
};
/* harmony default export */ var components_HistogramPlot = (HistogramPlot);

// CONCATENATED MODULE: ./src/shared/components/HeatmapPlot.tsx









const HeatmapPlot = ({ loading, timeRange, table, timeZone, viewProperties: { xColumn, yColumn, xDomain: storedXDomain, yDomain: storedYDomain, xAxisLabel, yAxisLabel, xPrefix, xSuffix, yPrefix, ySuffix, colors: storedColors, binSize, timeFormat, }, children, }) => {
    const columnKeys = table.columnKeys;
    const [xDomain, onSetXDomain, onResetXDomain] = useVisDomainSettings(storedXDomain, table.getColumn(xColumn, 'number'), timeRange);
    const [yDomain, onSetYDomain, onResetYDomain] = useVisDomainSettings(storedYDomain, table.getColumn(yColumn, 'number'));
    const isValidView = xColumn &&
        yColumn &&
        columnKeys.includes(yColumn) &&
        columnKeys.includes(xColumn);
    if (!isValidView) {
        return react_default.a.createElement(components_EmptyGraphMessage, { message: INVALID_DATA_COPY });
    }
    const colors = storedColors && storedColors.length
        ? storedColors
        : graphColorPalettes["a" /* DEFAULT_LINE_COLORS */].map(c => c.hex);
    const xFormatter = Object(vis["h" /* getFormatter */])(table.getColumnType(xColumn), {
        prefix: xPrefix,
        suffix: xSuffix,
        timeZone,
        timeFormat,
    });
    const yFormatter = Object(vis["h" /* getFormatter */])(table.getColumnType(yColumn), {
        prefix: yPrefix,
        suffix: ySuffix,
        timeZone,
        timeFormat,
    });
    const config = Object.assign(Object.assign({}, constants["I" /* VIS_THEME */]), { table,
        xAxisLabel,
        yAxisLabel,
        xDomain,
        onSetXDomain,
        onResetXDomain,
        yDomain,
        onSetYDomain,
        onResetYDomain, valueFormatters: {
            [xColumn]: xFormatter,
            [yColumn]: yFormatter,
        }, layers: [
            {
                type: 'heatmap',
                x: xColumn,
                y: yColumn,
                colors,
                binSize,
            },
        ] });
    return (react_default.a.createElement(react_default.a.Fragment, null,
        loading === types["RemoteDataState"].Loading && react_default.a.createElement(components_GraphLoadingDots, null),
        children(config)));
};
/* harmony default export */ var components_HeatmapPlot = (HeatmapPlot);

// EXTERNAL MODULE: ./src/shared/parsing/flux/response.ts
var flux_response = __webpack_require__(250);

// CONCATENATED MODULE: ./src/shared/components/FluxTablesTransform.tsx



const FluxTablesTransform = ({ files, children }) => {
    const tables = Object(react["useMemo"])(() => Object(lodash["flatMap"])(files, flux_response["b" /* parseResponse */]), [files]);
    return children(tables);
};
/* harmony default export */ var components_FluxTablesTransform = (FluxTablesTransform);

// CONCATENATED MODULE: ./src/shared/components/XYPlot.tsx










const XYPlot = ({ children, fluxGroupKeyUnion, loading, timeRange, table, timeZone, viewProperties: { geom, colors, xColumn: storedXColumn, yColumn: storedYColumn, shadeBelow, axes: { x: { label: xAxisLabel, prefix: xTickPrefix, suffix: xTickSuffix, base: xTickBase, bounds: xBounds, }, y: { label: yAxisLabel, prefix: yTickPrefix, suffix: yTickSuffix, bounds: yBounds, base: yTickBase, }, }, position, timeFormat, }, }) => {
    const storedXDomain = Object(react["useMemo"])(() => Object(vis["l" /* parseBounds */])(xBounds), [xBounds]);
    const storedYDomain = Object(react["useMemo"])(() => Object(vis["l" /* parseBounds */])(yBounds), [yBounds]);
    const xColumn = storedXColumn || Object(vis["c" /* defaultXColumn */])(table);
    const yColumn = storedYColumn || Object(vis["d" /* defaultYColumn */])(table);
    const columnKeys = table.columnKeys;
    const isValidView = xColumn &&
        columnKeys.includes(xColumn) &&
        yColumn &&
        columnKeys.includes(yColumn);
    if (!isValidView) {
        return react_default.a.createElement(components_EmptyGraphMessage, { message: INVALID_DATA_COPY });
    }
    const colorHexes = colors && colors.length
        ? colors.map(c => c.hex)
        : graphColorPalettes["a" /* DEFAULT_LINE_COLORS */].map(c => c.hex);
    const interpolation = Object(vis["g" /* geomToInterpolation */])(geom);
    const groupKey = [...fluxGroupKeyUnion, 'result'];
    const [xDomain, onSetXDomain, onResetXDomain] = useVisDomainSettings(storedXDomain, table.getColumn(xColumn, 'number'), timeRange);
    const memoizedYColumnData = Object(react["useMemo"])(() => {
        if (position === 'stacked') {
            const { lineData } = Object(giraffe_dist["lineTransform"])(table, xColumn, yColumn, groupKey, colorHexes, position);
            return Object(giraffe_dist["getDomainDataFromLines"])(lineData, giraffe_dist["DomainLabel"].Y);
        }
        return table.getColumn(yColumn, 'number');
    }, [table, yColumn, position]);
    const [yDomain, onSetYDomain, onResetYDomain] = useVisDomainSettings(storedYDomain, memoizedYColumnData);
    const legendColumns = Object(vis["f" /* filterNoisyColumns */])([...groupKey, xColumn, yColumn], table);
    const xFormatter = Object(vis["h" /* getFormatter */])(table.getColumnType(xColumn), {
        prefix: xTickPrefix,
        suffix: xTickSuffix,
        base: xTickBase,
        timeZone,
        timeFormat,
    });
    const yFormatter = Object(vis["h" /* getFormatter */])(table.getColumnType(yColumn), {
        prefix: yTickPrefix,
        suffix: yTickSuffix,
        base: yTickBase,
        timeZone,
        timeFormat,
    });
    const config = Object.assign(Object.assign({}, constants["I" /* VIS_THEME */]), { table,
        xAxisLabel,
        yAxisLabel,
        xDomain,
        onSetXDomain,
        onResetXDomain,
        yDomain,
        onSetYDomain,
        onResetYDomain,
        legendColumns, valueFormatters: {
            [xColumn]: xFormatter,
            [yColumn]: yFormatter,
        }, layers: [
            {
                type: 'line',
                x: xColumn,
                y: yColumn,
                fill: groupKey,
                interpolation,
                position,
                colors: colorHexes,
                shadeBelow: !!shadeBelow,
                shadeBelowOpacity: 0.08,
            },
        ] });
    return (react_default.a.createElement(react_default.a.Fragment, null,
        loading === types["RemoteDataState"].Loading && react_default.a.createElement(components_GraphLoadingDots, null),
        children(config)));
};
/* harmony default export */ var components_XYPlot = (XYPlot);

// CONCATENATED MODULE: ./src/shared/components/ScatterPlot.tsx









const ScatterPlot = ({ children, loading, timeRange, timeZone, table, viewProperties: { xAxisLabel, yAxisLabel, xPrefix, xSuffix, yPrefix, ySuffix, fillColumns: storedFill, symbolColumns: storedSymbol, colors, xDomain: storedXDomain, yDomain: storedYDomain, xColumn: storedXColumn, yColumn: storedYColumn, timeFormat, }, }) => {
    const fillColumns = storedFill || [];
    const symbolColumns = storedSymbol || [];
    const xColumn = storedXColumn || Object(vis["c" /* defaultXColumn */])(table);
    const yColumn = storedYColumn || Object(vis["d" /* defaultYColumn */])(table);
    const columnKeys = table.columnKeys;
    const [xDomain, onSetXDomain, onResetXDomain] = useVisDomainSettings(storedXDomain, table.getColumn(xColumn, 'number'), timeRange);
    const [yDomain, onSetYDomain, onResetYDomain] = useVisDomainSettings(storedYDomain, table.getColumn(yColumn, 'number'));
    const isValidView = xColumn &&
        columnKeys.includes(xColumn) &&
        yColumn &&
        columnKeys.includes(yColumn) &&
        fillColumns.every(col => columnKeys.includes(col)) &&
        symbolColumns.every(col => columnKeys.includes(col));
    if (!isValidView) {
        return react_default.a.createElement(components_EmptyGraphMessage, { message: INVALID_DATA_COPY });
    }
    const colorHexes = colors && colors.length ? colors : graphColorPalettes["a" /* DEFAULT_LINE_COLORS */].map(c => c.hex);
    const xFormatter = Object(vis["h" /* getFormatter */])(table.getColumnType(xColumn), {
        prefix: xPrefix,
        suffix: xSuffix,
        timeZone,
        timeFormat,
    });
    const yFormatter = Object(vis["h" /* getFormatter */])(table.getColumnType(yColumn), {
        prefix: yPrefix,
        suffix: ySuffix,
        timeZone,
        timeFormat,
    });
    const config = Object.assign(Object.assign({}, constants["I" /* VIS_THEME */]), { table,
        xAxisLabel,
        yAxisLabel,
        xDomain,
        onSetXDomain,
        onResetXDomain,
        yDomain,
        onSetYDomain,
        onResetYDomain, valueFormatters: {
            [xColumn]: xFormatter,
            [yColumn]: yFormatter,
        }, layers: [
            {
                type: 'scatter',
                x: xColumn,
                y: yColumn,
                colors: colorHexes,
                fill: fillColumns,
                symbol: symbolColumns,
            },
        ] });
    return (react_default.a.createElement(react_default.a.Fragment, null,
        loading === types["RemoteDataState"].Loading && react_default.a.createElement(components_GraphLoadingDots, null),
        children(config)));
};
/* harmony default export */ var components_ScatterPlot = (ScatterPlot);

// CONCATENATED MODULE: ./src/shared/utils/latestValues.ts

const maxesBy = (xs, d) => {
    let maxes = [];
    let maxDist = -Infinity;
    for (const x of xs) {
        const dist = d(x);
        if (dist > maxDist) {
            maxes = [x];
            maxDist = dist;
        }
        else if (dist === maxDist && dist !== -Infinity) {
            maxes.push(x);
        }
    }
    return maxes;
};
const EXCLUDED_COLUMNS = new Set([
    '_start',
    '_stop',
    '_time',
    'table',
    'result',
    '',
]);
const isValueCol = (table, colKey) => {
    const columnType = table.getColumnType(colKey);
    const columnName = table.getColumnName(colKey);
    return ((columnType === 'number' ||
        columnType === 'time' ||
        columnType === 'string') &&
        !EXCLUDED_COLUMNS.has(columnName));
};
const sortTableKeys = (keyA, keyB) => {
    if (keyA.includes('_value')) {
        return -1;
    }
    else if (keyB.includes('_value')) {
        return 1;
    }
    else {
        return keyA.localeCompare(keyB);
    }
};
const latestValues_latestValues = (table) => {
    const valueColsData = table.columnKeys
        .sort((a, b) => sortTableKeys(a, b))
        .filter(k => isValueCol(table, k))
        .map(k => table.getColumn(k));
    if (!valueColsData.length) {
        return [];
    }
    const columnKeys = table.columnKeys;
    let timeColData = [];
    if (columnKeys.includes('_time')) {
        timeColData = table.getColumn('_time', 'number');
    }
    else if (columnKeys.includes('_stop')) {
        timeColData = table.getColumn('_stop', 'number');
    }
    if (!timeColData && table.length !== 1) {
        return [];
    }
    const d = (i) => {
        const time = timeColData[i];
        if (time &&
            valueColsData.some(colData => {
                return Object(lodash["isFinite"])(colData[i]) || Object(lodash["isString"])(colData[i]);
            })) {
            return time;
        }
        return -Infinity;
    };
    const latestRowIndices = table.length === 1 ? [0] : maxesBy(Object(lodash["range"])(table.length), d);
    const latestValues = Object(lodash["flatMap"])(latestRowIndices, i => valueColsData.map(colData => colData[i]));
    const definedLatestValues = latestValues.filter(x => Object(lodash["isFinite"])(x) || Object(lodash["isString"])(x));
    return definedLatestValues;
};

// CONCATENATED MODULE: ./src/shared/components/LatestValueTransform.tsx




const LatestValueTransform = ({ table, quiet = false, children, allowString, }) => {
    const latestValues = Object(react["useMemo"])(() => latestValues_latestValues(table), [table]);
    if (latestValues.length === 0 && quiet) {
        return null;
    }
    if (latestValues.length === 0) {
        return react_default.a.createElement(components_EmptyGraphMessage, { message: "No latest value found" });
    }
    const latestValue = latestValues[0];
    if (Object(lodash["isString"])(latestValue) && !allowString && quiet) {
        return null;
    }
    if (Object(lodash["isString"])(latestValue) && !allowString) {
        return (react_default.a.createElement(components_EmptyGraphMessage, { message: "String value cannot be displayed in this graph type" }));
    }
    return children(latestValue);
};
/* harmony default export */ var components_LatestValueTransform = (LatestValueTransform);

// CONCATENATED MODULE: ./src/shared/utils/useDragBehavior.ts

const useDragBehavior = (onDrag) => {
    const onMouseDown = Object(react["useCallback"])((mouseDownEvent) => {
        mouseDownEvent.stopPropagation();
        onDrag({
            type: 'dragStart',
            x: mouseDownEvent.pageX,
            y: mouseDownEvent.pageY,
        });
        const onMouseMove = mouseMoveEvent => {
            onDrag({
                type: 'drag',
                x: mouseMoveEvent.pageX,
                y: mouseMoveEvent.pageY,
            });
        };
        const onMouseUp = mouseUpEvent => {
            document.removeEventListener('mousemove', onMouseMove);
            document.removeEventListener('mouseup', onMouseUp);
            onDrag({
                type: 'dragStop',
                x: mouseUpEvent.pageX,
                y: mouseUpEvent.pageY,
            });
        };
        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
    }, [onDrag]);
    return { onMouseDown };
};

// CONCATENATED MODULE: ./src/shared/components/ThresholdMarker.tsx


const ThresholdMarker = ({ level, y, onDrag, onMouseUp, }) => {
    const dragTargetProps = useDragBehavior(onDrag);
    const levelClass = `threshold-marker--${level.toLowerCase()}`;
    const style = { top: `${y}px` };
    return (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement("div", { className: `threshold-marker--line ${levelClass}`, style: style }),
        react_default.a.createElement("div", Object.assign({ className: `threshold-marker--handle ${levelClass}`, style: style }, dragTargetProps, { onMouseUp: onMouseUp }))));
};
/* harmony default export */ var components_ThresholdMarker = (ThresholdMarker);

// CONCATENATED MODULE: ./src/shared/components/ThresholdMarkerArea.tsx

const ThresholdMarkerArea = ({ level, top, height, }) => (react_default.a.createElement("div", { className: `threshold-marker--area threshold-marker--${level.toLowerCase()}`, style: {
        top: `${top}px`,
        height: `${height}px`,
    } }));
/* harmony default export */ var components_ThresholdMarkerArea = (ThresholdMarkerArea);

// CONCATENATED MODULE: ./src/shared/components/RangeThresholdMarkers.tsx




const RangeThresholdMarkers = ({ yScale, yDomain, threshold: { level, within, min, max }, onChangeMinPos, onChangeMaxPos, onMouseUp, }) => {
    const minY = yScale(Object(vis["b" /* clamp */])(min, yDomain));
    const maxY = yScale(Object(vis["b" /* clamp */])(max, yDomain));
    return (react_default.a.createElement(react_default.a.Fragment, null,
        Object(vis["k" /* isInDomain */])(min, yDomain) && (react_default.a.createElement(components_ThresholdMarker, { level: level, y: minY, onDrag: onChangeMinPos, onMouseUp: onMouseUp })),
        Object(vis["k" /* isInDomain */])(max, yDomain) && (react_default.a.createElement(components_ThresholdMarker, { level: level, y: maxY, onDrag: onChangeMaxPos, onMouseUp: onMouseUp })),
        within ? (react_default.a.createElement(components_ThresholdMarkerArea, { level: level, top: maxY, height: minY - maxY })) : (react_default.a.createElement(react_default.a.Fragment, null,
            max <= yDomain[1] && (react_default.a.createElement(components_ThresholdMarkerArea, { level: level, top: yScale(yDomain[1]), height: maxY - yScale(yDomain[1]) })),
            min >= yDomain[0] && (react_default.a.createElement(components_ThresholdMarkerArea, { level: level, top: minY, height: yScale(yDomain[0]) - minY }))))));
};
/* harmony default export */ var components_RangeThresholdMarkers = (RangeThresholdMarkers);

// CONCATENATED MODULE: ./src/shared/components/LessThresholdMarker.tsx




const LessThresholdMarker = ({ yScale, yDomain, threshold: { level, value }, onChangePos, onMouseUp, }) => {
    const y = yScale(Object(vis["b" /* clamp */])(value, yDomain));
    return (react_default.a.createElement(react_default.a.Fragment, null,
        Object(vis["k" /* isInDomain */])(value, yDomain) && (react_default.a.createElement(components_ThresholdMarker, { level: level, y: y, onDrag: onChangePos, onMouseUp: onMouseUp })),
        value >= yDomain[0] && (react_default.a.createElement(components_ThresholdMarkerArea, { level: level, top: y, height: yScale(yDomain[0]) - y }))));
};
/* harmony default export */ var components_LessThresholdMarker = (LessThresholdMarker);

// CONCATENATED MODULE: ./src/shared/components/GreaterThresholdMarker.tsx




const GreaterThresholdMarker = ({ yDomain, yScale, threshold: { level, value }, onChangePos, onMouseUp, }) => {
    const y = yScale(Object(vis["b" /* clamp */])(value, yDomain));
    return (react_default.a.createElement(react_default.a.Fragment, null,
        Object(vis["k" /* isInDomain */])(value, yDomain) && (react_default.a.createElement(components_ThresholdMarker, { level: level, y: y, onDrag: onChangePos, onMouseUp: onMouseUp })),
        value <= yDomain[1] && (react_default.a.createElement(components_ThresholdMarkerArea, { level: level, top: yScale(yDomain[1]), height: y - yScale(yDomain[1]) }))));
};
/* harmony default export */ var components_GreaterThresholdMarker = (GreaterThresholdMarker);

// CONCATENATED MODULE: ./src/shared/components/ThresholdMarkers.tsx






const DRAGGABLE_THRESHOLD_PRECISION = 2;
const ZOOM_IN_WAIT = 500;
const ThresholdMarkers = ({ yScale, yDomain, thresholds, onSetThresholds, }) => {
    const originRef = Object(react["useRef"])(null);
    const nextZoomThreshold = {};
    const [zoomThreshold, setZoomThreshold] = Object(react["useState"])(nextZoomThreshold);
    const zoomIn = () => {
        onSetThresholds(thresholds.map((t, i) => {
            if (zoomThreshold.index !== i) {
                return t;
            }
            if (t.type === 'greater' || t.type === 'lesser') {
                return Object.assign(Object.assign({}, t), { max: t.value });
            }
            if (t.type === 'range') {
                return Object.assign(Object.assign({}, t), { max: zoomThreshold.maxValue, min: zoomThreshold.minValue });
            }
        }));
    };
    const debouncedZoomIn = Object(lodash["debounce"])(zoomIn, ZOOM_IN_WAIT);
    const handleDrag = (index, field, y) => {
        nextZoomThreshold.index = index;
        const yRelative = y - originRef.current.getBoundingClientRect().top;
        const yValue = Object(vis["b" /* clamp */])(yScale.invert(yRelative), yDomain);
        const nextThreshold = Object.assign(Object.assign({}, thresholds[index]), { [field]: yValue });
        if (nextThreshold.type === 'range' &&
            nextThreshold.min > nextThreshold.max) {
            const maxValue = nextThreshold.min;
            nextThreshold.min = nextThreshold.max;
            nextThreshold.max = maxValue;
        }
        const nextThresholds = thresholds.map((t, i) => i === index ? nextThreshold : t);
        const roundedThresholds = nextThresholds.map(nt => {
            if (nt.type === 'greater' || nt.type === 'lesser') {
                return Object.assign(Object.assign({}, nt), { value: Object(lodash["round"])(nt.value, DRAGGABLE_THRESHOLD_PRECISION), max: yDomain[1] });
            }
            if (nt.type === 'range') {
                if (field === 'maxValue') {
                    nextZoomThreshold.maxValue = Object(lodash["round"])(nt['maxValue'], DRAGGABLE_THRESHOLD_PRECISION);
                    nextZoomThreshold.minValue = Object(lodash["round"])(nt.min, DRAGGABLE_THRESHOLD_PRECISION);
                    return Object.assign(Object.assign({}, nt), { max: Object(lodash["round"])(yDomain[1], DRAGGABLE_THRESHOLD_PRECISION), min: Object(lodash["round"])(nt.min, DRAGGABLE_THRESHOLD_PRECISION) });
                }
                nextZoomThreshold.maxValue = Object(lodash["round"])(nt.max, DRAGGABLE_THRESHOLD_PRECISION);
                nextZoomThreshold.minValue = Object(lodash["round"])(nt['minValue'], DRAGGABLE_THRESHOLD_PRECISION);
                return Object.assign(Object.assign({}, nt), { max: Object(lodash["round"])(nt.max, DRAGGABLE_THRESHOLD_PRECISION), min: yDomain[0]
                        ? Object(lodash["round"])(yDomain[0], DRAGGABLE_THRESHOLD_PRECISION)
                        : 0 });
            }
        });
        setZoomThreshold(nextZoomThreshold);
        onSetThresholds(roundedThresholds);
    };
    return (react_default.a.createElement("div", { className: "threshold-markers", ref: originRef }, thresholds.map((threshold, index) => {
        const onChangePos = ({ y }) => handleDrag(index, 'value', y);
        const onChangeMaxPos = ({ y }) => handleDrag(index, 'maxValue', y);
        const onChangeMinPos = ({ y }) => handleDrag(index, 'minValue', y);
        switch (threshold.type) {
            case 'greater':
                return (react_default.a.createElement(components_GreaterThresholdMarker, { key: index, yScale: yScale, yDomain: yDomain, threshold: threshold, onChangePos: onChangePos, onMouseUp: debouncedZoomIn }));
            case 'lesser':
                return (react_default.a.createElement(components_LessThresholdMarker, { key: index, yScale: yScale, yDomain: yDomain, threshold: threshold, onChangePos: onChangePos, onMouseUp: debouncedZoomIn }));
            case 'range':
                return (react_default.a.createElement(components_RangeThresholdMarkers, { key: index, yScale: yScale, yDomain: yDomain, threshold: Object.assign(Object.assign({}, threshold), { min: zoomThreshold.minValue
                            ? zoomThreshold.minValue
                            : Object(lodash["round"])(threshold.min, DRAGGABLE_THRESHOLD_PRECISION), max: zoomThreshold.maxValue
                            ? zoomThreshold.maxValue
                            : Object(lodash["round"])(threshold.max, DRAGGABLE_THRESHOLD_PRECISION) }), onChangeMinPos: onChangeMinPos, onChangeMaxPos: onChangeMaxPos, onMouseUp: debouncedZoomIn }));
            default:
                throw new Error('Unknown threshold type in <ThresholdMarkers /> ');
        }
    })));
};
/* harmony default export */ var components_ThresholdMarkers = (ThresholdMarkers);

// CONCATENATED MODULE: ./src/shared/components/BoxTooltip.tsx




const BoxTooltip = ({ triggerRect, children, maxWidth = 300, color = clockface_dist["ComponentColor"].Primary, }) => {
    const ref = Object(react["useRef"])(null);
    Object(react["useLayoutEffect"])(() => {
        const el = ref.current;
        if (!el || !triggerRect) {
            return;
        }
        const rect = el.getBoundingClientRect();
        let left = Math.floor(triggerRect.left - rect.width) - 2;
        let caretClassName = 'left';
        if (left < 0) {
            left = triggerRect.left + triggerRect.width;
            caretClassName = 'right';
        }
        let top = triggerRect.top + triggerRect.height / 2 - rect.height / 2;
        if (top < 0) {
            top = 0;
        }
        if (top + rect.height > window.innerHeight) {
            top = window.innerHeight - rect.height;
        }
        el.setAttribute('style', `visibility: visible; top: ${top}px; left: ${left}px; max-width: ${maxWidth}px;`);
        const caretTop = triggerRect.top + triggerRect.height / 2 - top;
        el.querySelector('.box-tooltip--caret').setAttribute('style', `top: ${caretTop}px;`);
        el.className = `box-tooltip  box-tooltip__${color} ${caretClassName}`;
    });
    return Object(react_dom["createPortal"])(react_default.a.createElement("div", { className: `box-tooltip box-tooltip__${color}`, ref: ref, style: { maxWidth } },
        children,
        react_default.a.createElement("div", { className: "box-tooltip--caret-container" },
            react_default.a.createElement("div", { className: "box-tooltip--caret" }))), document.querySelector(`#${TOOLTIP_PORTAL_ID}`));
};
/* harmony default export */ var components_BoxTooltip = (BoxTooltip);

// CONCATENATED MODULE: ./src/shared/components/EventMarkerTooltip.tsx


const EventMarkerTooltip = ({ events }) => {
    const columns = ['time', 'checkName', 'level', 'message'];
    const calculateLevelStyle = (level, colorize) => {
        if (!colorize) {
            return;
        }
        const color = alerting_constants["l" /* LEVEL_COLORS */][`${level.toUpperCase()}`];
        return { color };
    };
    return (react_default.a.createElement("div", { className: "box-tooltip--contents event-marker-tooltip" },
        react_default.a.createElement("div", { className: "event-marker-tooltip--table" }, columns.map(colName => (react_default.a.createElement("div", { key: colName, className: "event-marker-tooltip--column" },
            react_default.a.createElement("div", { className: "event-marker-tooltip--header" }, colName),
            events.map((event, i) => {
                const { time, checkName, level } = event;
                return (react_default.a.createElement(react["Fragment"], { key: `${time}-${checkName}-${level}-${i}` },
                    react_default.a.createElement("div", { className: "event-marker-tooltip--cell", style: calculateLevelStyle(level, colName === 'level') }, event[colName])));
            })))))));
};
/* harmony default export */ var components_EventMarkerTooltip = (EventMarkerTooltip);

// CONCATENATED MODULE: ./src/shared/components/EventMarker.tsx




const findMaxLevel = (event) => {
    const levels = [
        'crit',
        'warn',
        'info',
        'ok',
        'unknown',
    ];
    const eventLevels = event.map(e => e.level);
    for (const l of levels) {
        if (eventLevels.includes(l)) {
            return l;
        }
    }
    return 'unknown';
};
const EventMarker = ({ xScale, xDomain, events, xFormatter }) => {
    const trigger = Object(react["useRef"])(null);
    const [tooltipVisible, setTooltipVisible] = Object(react["useState"])(false);
    let triggerRect = null;
    if (trigger.current) {
        triggerRect = trigger.current.getBoundingClientRect();
    }
    const { time } = events[0];
    const x = Math.ceil(xScale(time));
    const style = { left: `${x}px` };
    const level = findMaxLevel(events);
    const markerClass = `event-marker--line__${level.toLowerCase()}`;
    const formattedEvents = events.map(e => (Object.assign(Object.assign({}, e), { time: xFormatter(e.time) })));
    return (Object(vis["k" /* isInDomain */])(time, xDomain) && (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement("div", { className: markerClass, style: style },
            react_default.a.createElement("div", { className: "event-marker--line-rect", ref: trigger, onMouseOver: () => {
                    setTooltipVisible(true);
                }, onMouseOut: () => {
                    setTooltipVisible(false);
                } })),
        tooltipVisible && trigger.current && (react_default.a.createElement(components_BoxTooltip, { triggerRect: triggerRect, maxWidth: 500 },
            react_default.a.createElement(components_EventMarkerTooltip, { events: formattedEvents }))))));
};
/* harmony default export */ var components_EventMarker = (EventMarker);

// CONCATENATED MODULE: ./src/shared/components/EventMarkers.tsx




const filterEvents = (eventsArray, isOkVisible, isInfoVisible, isWarnVisible, isCritVisible, isUnknownVisible) => {
    return eventsArray
        .map(events => {
        return (events.length &&
            events.filter(e => {
                return ((e.level === 'ok' && isOkVisible) ||
                    (e.level === 'info' && isInfoVisible) ||
                    (e.level === 'warn' && isWarnVisible) ||
                    (e.level === 'crit' && isCritVisible) ||
                    (e.level === 'unknown' && isUnknownVisible));
            }));
    })
        .filter(events => events && events.length);
};
const EventMarkers = ({ xScale, xDomain, eventsArray, xFormatter, }) => {
    const [isOkVisible, setOkVisibility] = Object(react["useState"])(false);
    const [isInfoVisible, setInfoVisibility] = Object(react["useState"])(true);
    const [isWarnVisible, setWarnVisibility] = Object(react["useState"])(true);
    const [isCritVisible, setCritVisibility] = Object(react["useState"])(true);
    const [isUnknownVisible, setUnknownVisibility] = Object(react["useState"])(true);
    const [filteredEventsArray, setFilteredEventsArray] = Object(react["useState"])(filterEvents(eventsArray, isOkVisible, isInfoVisible, isWarnVisible, isCritVisible, isUnknownVisible));
    Object(react["useEffect"])(() => {
        setFilteredEventsArray(filterEvents(eventsArray, isOkVisible, isInfoVisible, isWarnVisible, isCritVisible, isUnknownVisible));
    }, [
        eventsArray,
        isOkVisible,
        isInfoVisible,
        isWarnVisible,
        isCritVisible,
        isUnknownVisible,
    ]);
    const iconGlyph = (visible) => {
        return visible ? clockface_dist["IconFont"].EyeOpen : clockface_dist["IconFont"].EyeClosed;
    };
    const eventVisToggle = (react_default.a.createElement("div", { className: "event-marker--vis-selector" },
        "Toggle markers:",
        react_default.a.createElement("span", { onClick: () => setOkVisibility(!isOkVisible), "data-testid": "event-marker-vis-toggle-ok" },
            react_default.a.createElement(clockface_dist["Icon"], { className: "event-marker--vis-icon", style: { color: alerting_constants["l" /* LEVEL_COLORS */]['OK'] }, glyph: iconGlyph(isOkVisible), testID: "event-marker-vis-icon-ok" })),
        react_default.a.createElement("span", { onClick: () => setWarnVisibility(!isWarnVisible), "data-testid": "event-marker-vis-toggle-warn" },
            react_default.a.createElement(clockface_dist["Icon"], { className: "event-marker--vis-icon", style: { color: alerting_constants["l" /* LEVEL_COLORS */]['WARN'] }, glyph: iconGlyph(isWarnVisible) })),
        react_default.a.createElement("span", { onClick: () => setInfoVisibility(!isInfoVisible), "data-testid": "event-marker-vis-toggle-info" },
            react_default.a.createElement(clockface_dist["Icon"], { className: "event-marker--vis-icon", style: { color: alerting_constants["l" /* LEVEL_COLORS */]['INFO'] }, glyph: iconGlyph(isInfoVisible) })),
        react_default.a.createElement("span", { onClick: () => setCritVisibility(!isCritVisible), "data-testid": "event-marker-vis-toggle-crit" },
            react_default.a.createElement(clockface_dist["Icon"], { className: "event-marker--vis-icon", style: { color: alerting_constants["l" /* LEVEL_COLORS */]['CRIT'] }, glyph: iconGlyph(isCritVisible) })),
        react_default.a.createElement("span", { onClick: () => setUnknownVisibility(!isUnknownVisible), "data-testid": "event-marker-vis-toggle-unknown" },
            react_default.a.createElement(clockface_dist["Icon"], { className: "event-marker--vis-icon", style: { color: alerting_constants["l" /* LEVEL_COLORS */]['UNKNOWN'] }, glyph: iconGlyph(isUnknownVisible) }))));
    return (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement("div", { className: "event-markers", "data-testid": "event-markers" }, filteredEventsArray.map((events, index) => {
            return (react_default.a.createElement(components_EventMarker, { key: index, xScale: xScale, xDomain: xDomain, events: events, xFormatter: xFormatter }));
        })),
        eventVisToggle));
};
/* harmony default export */ var components_EventMarkers = (EventMarkers);

// EXTERNAL MODULE: ./src/alerting/utils/vis.ts
var utils_vis = __webpack_require__(417);

// EXTERNAL MODULE: ./src/alerting/actions/alertBuilder.ts
var actions_alertBuilder = __webpack_require__(128);

// CONCATENATED MODULE: ./src/shared/components/CheckPlot.tsx













const X_COLUMN = '_time';
const Y_COLUMN = '_value';
const CheckPlot = ({ table, fluxGroupKeyUnion, loading, children, timeZone, statuses, checkType, thresholds, onUpdateThresholds, viewProperties: { colors }, }) => {
    const [yDomain, onSetYDomain, onResetYDomain] = Object(utils_vis["b" /* useCheckYDomain */])(table.getColumn(Y_COLUMN, 'number'), thresholds);
    const columnKeys = table.columnKeys;
    const isValidView = columnKeys.includes(X_COLUMN) && columnKeys.includes(Y_COLUMN);
    if (!isValidView) {
        return react_default.a.createElement(components_EmptyGraphMessage, { message: INVALID_DATA_COPY });
    }
    const groupKey = [...fluxGroupKeyUnion, 'result'];
    const xFormatter = Object(vis["h" /* getFormatter */])(table.getColumnType(X_COLUMN), {
        timeZone,
        trimZeros: false,
    });
    const yFormatter = Object(vis["h" /* getFormatter */])(table.getColumnType(Y_COLUMN), {
        timeZone,
        trimZeros: false,
    });
    const legendColumns = Object(vis["f" /* filterNoisyColumns */])([...groupKey, X_COLUMN, Y_COLUMN], table);
    const thresholdValues = Object(lodash["flatMap"])(thresholds, (t) => [
        t.value,
        t.minValue,
        t.maxValue,
    ]).filter(t => t !== undefined);
    const yTicks = thresholdValues.length ? thresholdValues : null;
    const config = Object.assign(Object.assign({}, constants["I" /* VIS_THEME */]), { table,
        legendColumns,
        yTicks,
        yDomain,
        onSetYDomain,
        onResetYDomain, valueFormatters: {
            [X_COLUMN]: xFormatter,
            [Y_COLUMN]: yFormatter,
        }, layers: [
            {
                type: 'line',
                x: X_COLUMN,
                y: Y_COLUMN,
                fill: groupKey,
                interpolation: 'linear',
                colors,
            },
            {
                type: 'custom',
                render: ({ yScale, yDomain }) => (react_default.a.createElement(components_ThresholdMarkers, { key: "thresholds", thresholds: checkType === 'threshold' ? thresholds : [], onSetThresholds: onUpdateThresholds, yScale: yScale, yDomain: yDomain })),
            },
            {
                type: 'custom',
                render: ({ xScale, xDomain }) => (react_default.a.createElement(components_EventMarkers, { key: "events", eventsArray: statuses, xScale: xScale, xDomain: xDomain, xFormatter: xFormatter })),
            },
        ] });
    return (react_default.a.createElement("div", { className: "time-series-container time-series-container--alert-check" },
        loading === types["RemoteDataState"].Loading && react_default.a.createElement(components_GraphLoadingDots, null),
        children(config)));
};
const CheckPlot_mdtp = {
    onUpdateThresholds: actions_alertBuilder["r" /* updateThresholds */],
};
/* harmony default export */ var components_CheckPlot = (Object(es["b" /* connect */])(null, CheckPlot_mdtp)(CheckPlot));

// CONCATENATED MODULE: ./src/shared/components/ViewSwitcher.tsx












const ViewSwitcher = ({ properties, loading, timeRange, files, giraffeResult: { table, fluxGroupKeyUnion }, timeZone, statuses, checkType = null, checkThresholds = [], }) => {
    switch (properties.type) {
        case 'single-stat':
            return (react_default.a.createElement(components_LatestValueTransform, { table: table, allowString: true }, latestValue => (react_default.a.createElement(components_SingleStat, { stat: latestValue, properties: properties }))));
        case 'table':
            return (react_default.a.createElement(components_FluxTablesTransform, { files: files }, tables => (react_default.a.createElement(tables_TableGraphs, { tables: tables, properties: properties, timeZone: timeZone }))));
        case 'gauge':
            return (react_default.a.createElement(components_LatestValueTransform, { table: table, allowString: false }, latestValue => (react_default.a.createElement(components_GaugeChart, { value: latestValue, properties: properties }))));
        case 'xy':
            return (react_default.a.createElement(components_XYPlot, { timeRange: timeRange, fluxGroupKeyUnion: fluxGroupKeyUnion, loading: loading, table: table, timeZone: timeZone, viewProperties: properties }, config => react_default.a.createElement(giraffe_dist["Plot"], { config: config })));
        case 'line-plus-single-stat':
            const xyProperties = Object.assign(Object.assign({}, properties), { colors: properties.colors.filter(c => c.type === 'scale'), type: 'xy', geom: 'line' });
            const singleStatProperties = Object.assign(Object.assign({}, properties), { tickPrefix: '', tickSuffix: '', colors: properties.colors.filter(c => c.type !== 'scale'), type: 'single-stat' });
            return (react_default.a.createElement(components_XYPlot, { timeRange: timeRange, fluxGroupKeyUnion: fluxGroupKeyUnion, loading: loading, table: table, timeZone: timeZone, viewProperties: xyProperties }, config => (react_default.a.createElement(giraffe_dist["Plot"], { config: config },
                react_default.a.createElement(components_LatestValueTransform, { table: config.table, quiet: true, allowString: false }, latestValue => (react_default.a.createElement(components_SingleStat, { stat: latestValue, properties: singleStatProperties })))))));
        case 'histogram':
            return (react_default.a.createElement(components_HistogramPlot, { table: table, loading: loading, timeZone: timeZone, viewProperties: properties }, config => react_default.a.createElement(giraffe_dist["Plot"], { config: config })));
        case 'heatmap':
            return (react_default.a.createElement(components_HeatmapPlot, { timeRange: timeRange, loading: loading, table: table, timeZone: timeZone, viewProperties: properties }, config => react_default.a.createElement(giraffe_dist["Plot"], { config: config })));
        case 'scatter':
            return (react_default.a.createElement(components_ScatterPlot, { timeRange: timeRange, loading: loading, table: table, viewProperties: properties, timeZone: timeZone }, config => react_default.a.createElement(giraffe_dist["Plot"], { config: config })));
        case 'check':
            return (react_default.a.createElement(components_CheckPlot, { checkType: checkType, thresholds: checkThresholds, table: table, fluxGroupKeyUnion: fluxGroupKeyUnion, loading: loading, timeZone: timeZone, viewProperties: properties, statuses: statuses }, config => react_default.a.createElement(giraffe_dist["Plot"], { config: config })));
        default:
            throw new Error('Unknown view type in <ViewSwitcher /> ');
    }
};
/* harmony default export */ var components_ViewSwitcher = (ViewSwitcher);

// CONCATENATED MODULE: ./src/utils/AutoRefresher.ts
class AutoRefresher {
    constructor() {
        this.subscribers = [];
        this.refresh = () => {
            this.subscribers.forEach(fn => fn());
        };
    }
    subscribe(fn) {
        this.subscribers = [...this.subscribers, fn];
    }
    unsubscribe(fn) {
        this.subscribers = this.subscribers.filter(f => f !== fn);
    }
    poll(refreshMs) {
        this.clearInterval();
        if (refreshMs) {
            this.intervalID = setInterval(this.refresh, refreshMs);
        }
    }
    stopPolling() {
        this.clearInterval();
    }
    clearInterval() {
        if (!this.intervalID) {
            return;
        }
        clearInterval(this.intervalID);
        this.intervalID = null;
    }
}
const GlobalAutoRefresher = new AutoRefresher();

// EXTERNAL MODULE: ./src/variables/utils/getTimeRangeVars.ts
var getTimeRangeVars = __webpack_require__(210);

// EXTERNAL MODULE: ./src/variables/selectors/index.tsx
var variables_selectors = __webpack_require__(88);

// CONCATENATED MODULE: ./src/shared/components/RefreshingView.tsx











class RefreshingView_RefreshingView extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.incrementSubmitToken = () => {
            this.setState({ submitToken: Date.now() });
        };
        this.state = { submitToken: 0 };
    }
    componentDidMount() {
        GlobalAutoRefresher.subscribe(this.incrementSubmitToken);
    }
    componentWillUnmount() {
        GlobalAutoRefresher.unsubscribe(this.incrementSubmitToken);
    }
    render() {
        const { ranges, properties, manualRefresh, timeZone } = this.props;
        const { submitToken } = this.state;
        return (react_default.a.createElement(components_TimeSeries, { submitToken: submitToken, queries: this.queries, key: manualRefresh, variables: this.variableAssignments }, ({ giraffeResult, files, loading, errorMessage, isInitialFetch, statuses, }) => {
            return (react_default.a.createElement(EmptyQueryView_EmptyQueryView, { errorFormat: ErrorFormat.Tooltip, errorMessage: errorMessage, hasResults: Object(vis["a" /* checkResultsLength */])(giraffeResult), loading: loading, isInitialFetch: isInitialFetch, queries: this.queries, fallbackNote: this.fallbackNote },
                react_default.a.createElement(components_ViewSwitcher, { files: files, giraffeResult: giraffeResult, loading: loading, properties: properties, timeRange: ranges, statuses: statuses, timeZone: timeZone })));
        }));
    }
    get queries() {
        const { properties } = this.props;
        switch (properties.type) {
            case 'single-stat':
            case 'gauge':
                return [properties.queries[0]];
            default:
                return properties.queries;
        }
    }
    get variableAssignments() {
        const { timeRange, variableAssignments } = this.props;
        return [...variableAssignments, ...Object(getTimeRangeVars["a" /* getTimeRangeVars */])(timeRange)];
    }
    get fallbackNote() {
        const { properties } = this.props;
        switch (properties.type) {
            case 'check':
                return null;
            default:
                const { note, showNoteWhenEmpty } = properties;
                return showNoteWhenEmpty ? note : null;
        }
    }
}
RefreshingView_RefreshingView.defaultProps = {
    inView: true,
    manualRefresh: 0,
};
const RefreshingView_mstp = (state, ownProps) => {
    const dashboard = state.currentDashboard.id;
    const variableAssignments = Object(variables_selectors["q" /* getVariableAssignments */])(state, dashboard);
    const timeRange = Object(dashboards_selectors["a" /* getTimeRangeByDashboardID */])(state, dashboard);
    const valuesStatus = Object(variables_selectors["h" /* getDashboardValuesStatus */])(state, dashboard);
    const ranges = Object(timeMachine_selectors["d" /* getActiveTimeRange */])(timeRange, ownProps.properties.queries);
    const timeZone = state.app.persisted.timeZone;
    return {
        timeRange,
        ranges,
        timeZone,
        variableAssignments,
        variablesStatus: valuesStatus,
    };
};
/* harmony default export */ var components_RefreshingView = (Object(es["b" /* connect */])(RefreshingView_mstp)(RefreshingView_RefreshingView));

// CONCATENATED MODULE: ./src/shared/components/cells/Cell.tsx












let Cell_CellComponent = class CellComponent extends react["Component"] {
    constructor() {
        super(...arguments);
        this.handleCSVDownload = () => {
            throw new Error('csv download not implemented');
        };
    }
    render() {
        const { cell, view } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(cells_CellHeader, { name: this.viewName, note: this.viewNote },
                react_default.a.createElement(cells_CellContext, { cell: cell, view: view, onCSVDownload: this.handleCSVDownload })),
            react_default.a.createElement("div", { className: "cell--view", "data-testid": "cell--view-empty" }, this.view)));
    }
    get viewName() {
        const { view } = this.props;
        if (view && view.properties && view.properties.type !== 'markdown') {
            return view.name;
        }
        return 'Note';
    }
    get viewNote() {
        const { view } = this.props;
        if (!view || !view.properties || !view.properties.type) {
            return '';
        }
        const isMarkdownView = view.properties.type === 'markdown';
        const showNoteWhenEmpty = Object(lodash["get"])(view, 'properties.showNoteWhenEmpty');
        if (isMarkdownView || showNoteWhenEmpty) {
            return '';
        }
        return Object(lodash["get"])(view, 'properties.note', '');
    }
    get view() {
        const { manualRefresh, view } = this.props;
        if (!view || view.status !== types["RemoteDataState"].Done) {
            return react_default.a.createElement(components_EmptyGraphMessage, { message: "Loading..." });
        }
        if (!view.properties) {
            return null;
        }
        if (view.properties.type === 'markdown') {
            return react_default.a.createElement(views_Markdown, { text: view.properties.note });
        }
        return (react_default.a.createElement(components_RefreshingView, { properties: view.properties, manualRefresh: manualRefresh }));
    }
};
Cell_CellComponent = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], Cell_CellComponent);
const Cell_mstp = (state, ownProps) => {
    const view = Object(resources_selectors["b" /* getByID */])(state, types["ResourceType"].Views, ownProps.cell.id);
    return { view };
};
/* harmony default export */ var Cell = (Object(es["b" /* connect */])(Cell_mstp, null)(Cell_CellComponent));

// CONCATENATED MODULE: ./src/shared/components/cells/GradientBorder.tsx

const GradientBorder = () => (react_default.a.createElement("div", { className: "gradient-border" },
    react_default.a.createElement("div", { className: "gradient-border--top-left" }),
    react_default.a.createElement("div", { className: "gradient-border--top-right" }),
    react_default.a.createElement("div", { className: "gradient-border--bottom-left" }),
    react_default.a.createElement("div", { className: "gradient-border--bottom-right" })));
/* harmony default export */ var cells_GradientBorder = (GradientBorder);

// EXTERNAL MODULE: ./src/utils/fast.ts
var fast = __webpack_require__(743);

// CONCATENATED MODULE: ./src/cells/selectors/index.ts
const getCells = ({ resources }, dashboardID) => {
    const dashboard = resources.dashboards.byID[dashboardID];
    if (!dashboard || !dashboard.cells) {
        return [];
    }
    const cellIDs = dashboard.cells;
    return cellIDs.map(id => resources.cells.byID[id]);
};

// CONCATENATED MODULE: ./src/shared/components/cells/Cells.tsx





const Grid = Object(react_grid_layout["WidthProvider"])(react_grid_layout_default.a);








let Cells_Cells = class Cells extends react["Component"] {
    constructor() {
        super(...arguments);
        this.handleLayoutChange = grid => {
            const { cells } = this.props;
            let changed = false;
            const newCells = cells.map(cell => {
                const l = grid.find(ly => ly.i === cell.id);
                if (cell.x !== l.x ||
                    cell.y !== l.y ||
                    cell.h !== l.h ||
                    cell.w !== l.w) {
                    changed = true;
                }
                const newCell = {
                    x: l.x,
                    y: l.y,
                    h: l.h,
                    w: l.w,
                };
                return Object.assign(Object.assign({}, cell), newCell);
            });
            if (changed) {
                this.handlePositionChange(newCells);
            }
        };
        this.handlePositionChange = (cells) => {
            const { dashboard, updateCells } = this.props;
            updateCells(dashboard, cells);
        };
    }
    render() {
        const { cells, manualRefresh } = this.props;
        return (react_default.a.createElement(Grid, { cols: 12, layout: this.cells, rowHeight: constants["n" /* DASHBOARD_LAYOUT_ROW_HEIGHT */], useCSSTransforms: false, containerPadding: [0, 0], margin: [constants["z" /* LAYOUT_MARGIN */], constants["z" /* LAYOUT_MARGIN */]], onLayoutChange: this.handleLayoutChange, draggableHandle: ".cell--draggable", isDraggable: true, isResizable: true }, Object(fast["b" /* fastMap */])(cells, cell => (react_default.a.createElement("div", { key: cell.id, className: "cell" },
            react_default.a.createElement(Cell, { cell: cell, manualRefresh: manualRefresh }),
            react_default.a.createElement(cells_GradientBorder, null))))));
    }
    get cells() {
        const { views } = this.props;
        return this.props.cells
            .filter(c => c.status === types["RemoteDataState"].Done)
            .map(c => {
            const view = views[c.id];
            const cell = Object.assign(Object.assign({}, c), { x: c.x, y: c.y, h: c.h, w: c.w, i: c.id });
            if (Object(lodash["get"])(view, 'properties.type') === 'gauge') {
                cell.minW = 3;
                cell.minH = 3;
            }
            return cell;
        });
    }
};
Cells_Cells = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], Cells_Cells);
const Cells_mstp = (state) => {
    const dashboard = state.currentDashboard.id;
    return {
        dashboard,
        cells: getCells(state, dashboard),
        views: state.resources.views.byID,
    };
};
const Cells_mdtp = {
    updateCells: thunks["d" /* updateCells */],
};
/* harmony default export */ var cells_Cells = (Object(es["b" /* connect */])(Cells_mstp, Cells_mdtp)(Cells_Cells));

// CONCATENATED MODULE: ./src/dashboards/components/dashboard_empty/DashboardEmpty.tsx








let DashboardEmpty_DashboardEmpty = class DashboardEmpty extends react["Component"] {
    constructor() {
        super(...arguments);
        this.handleAdd = () => {
            const { router, org, dashboard } = this.props;
            router.push(`/orgs/${org}/dashboards/${dashboard}/cells/new`);
        };
    }
    render() {
        return (react_default.a.createElement("div", { className: "dashboard-empty" },
            react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Large },
                react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                    "This Dashboard doesn't have any ",
                    react_default.a.createElement("b", null, "Cells"),
                    ", why not add one?"),
                react_default.a.createElement(clockface_dist["Button"], { text: "Add Cell", size: clockface_dist["ComponentSize"].Medium, icon: clockface_dist["IconFont"].AddCell, color: clockface_dist["ComponentColor"].Primary, onClick: this.handleAdd, testID: "add-cell--button" }))));
    }
};
DashboardEmpty_DashboardEmpty = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], DashboardEmpty_DashboardEmpty);
const DashboardEmpty_mstp = (state) => {
    return {
        org: Object(selectors["a" /* getOrg */])(state).id,
        dashboard: state.currentDashboard.id,
    };
};
/* harmony default export */ var dashboard_empty_DashboardEmpty = (Object(es["b" /* connect */])(DashboardEmpty_mstp, null)(Object(react_router_es["g" /* withRouter */])(DashboardEmpty_DashboardEmpty)));

// CONCATENATED MODULE: ./src/dashboards/components/Dashboard.tsx








let Dashboard_DashboardComponent = class DashboardComponent extends react["PureComponent"] {
    render() {
        const { cells, status, manualRefresh } = this.props;
        return (react_default.a.createElement(clockface_dist["SpinnerContainer"], { loading: status, spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null) },
            react_default.a.createElement(clockface_dist["Page"].Contents, { fullWidth: true, scrollable: true, className: "dashboard" },
                !!cells.length ? (react_default.a.createElement(cells_Cells, { manualRefresh: manualRefresh })) : (react_default.a.createElement(dashboard_empty_DashboardEmpty, null)),
                react_default.a.createElement("div", { className: "cell-header-note-tooltip-container" }))));
    }
};
Dashboard_DashboardComponent = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], Dashboard_DashboardComponent);
const Dashboard_mstp = (state) => {
    return {
        cells: getCells(state, state.currentDashboard.id),
        status: state.resources.cells.status,
    };
};
/* harmony default export */ var Dashboard = (Object(es["b" /* connect */])(Dashboard_mstp, null)(Dashboard_DashboardComponent));

// CONCATENATED MODULE: ./src/shared/components/ManualRefresh.tsx

function ManualRefresh(WrappedComponent) {
    return class extends react["Component"] {
        constructor(props) {
            super(props);
            this.handleManualRefresh = () => {
                this.setState({
                    manualRefresh: Date.now(),
                });
            };
            this.state = {
                manualRefresh: Date.now(),
            };
        }
        render() {
            return (react_default.a.createElement(WrappedComponent, Object.assign({}, this.props, { manualRefresh: this.state.manualRefresh, onManualRefresh: this.handleManualRefresh })));
        }
    };
}
/* harmony default export */ var components_ManualRefresh = (ManualRefresh);

// EXTERNAL MODULE: ./src/shared/components/DefaultErrorMessage.tsx
var DefaultErrorMessage = __webpack_require__(730);

// EXTERNAL MODULE: ./src/shared/utils/errors.ts
var utils_errors = __webpack_require__(301);

// CONCATENATED MODULE: ./src/shared/components/ErrorBoundary.tsx



class ErrorBoundary_ErrorBoundary extends react["Component"] {
    constructor() {
        super(...arguments);
        this.state = { error: null };
    }
    static getDerivedStateFromError(error) {
        return { error };
    }
    componentDidCatch(error, errorInfo) {
        Object(utils_errors["b" /* reportError */])(error, { component: Object(utils_errors["a" /* parseComponentName */])(errorInfo) });
    }
    render() {
        const { error } = this.state;
        if (error) {
            return react_default.a.createElement(this.props.errorComponent, { error: error });
        }
        return this.props.children;
    }
}
ErrorBoundary_ErrorBoundary.defaultProps = { errorComponent: DefaultErrorMessage["a" /* default */] };
/* harmony default export */ var components_ErrorBoundary = (ErrorBoundary_ErrorBoundary);

// EXTERNAL MODULE: ./node_modules/react-dnd/lib/index.js
var react_dnd_lib = __webpack_require__(481);

// CONCATENATED MODULE: ./src/dashboards/components/variablesControlBar/VariableDropdown.tsx





class VariableDropdown_VariableDropdown extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleSelect = (selectedKey) => {
            const { dashboardID, variableID, onSelectValue } = this.props;
            onSelectValue(dashboardID, variableID, selectedKey);
        };
    }
    render() {
        const { selectedKey } = this.props;
        const dropdownValues = this.props.values || [];
        const dropdownStatus = dropdownValues.length === 0
            ? clockface_dist["ComponentStatus"].Disabled
            : clockface_dist["ComponentStatus"].Default;
        return (react_default.a.createElement("div", { className: "variable-dropdown" },
            react_default.a.createElement(clockface_dist["Dropdown"], { style: { width: `${140}px` }, className: "variable-dropdown--dropdown", testID: "variable-dropdown", button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { active: active, onClick: onClick, testID: "variable-dropdown--button", status: dropdownStatus }, selectedKey || 'No Values')), menu: onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse, theme: clockface_dist["DropdownMenuTheme"].Amethyst }, dropdownValues.map(({ name }) => (react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: name, id: name, value: name, onClick: this.handleSelect, selected: name === selectedKey, testID: "variable-dropdown--item" }, name))))) })));
    }
}
const VariableDropdown_mstp = (state, props) => {
    const { dashboardID, variableID } = props;
    const { selectedKey, list } = Object(dashboards_selectors["b" /* getVariableValuesForDropdown */])(state, variableID, dashboardID);
    return { values: list, selectedKey };
};
const VariableDropdown_mdtp = {
    onSelectValue: dashboards_actions_thunks["l" /* selectVariableValue */],
};
/* harmony default export */ var variablesControlBar_VariableDropdown = (Object(es["b" /* connect */])(VariableDropdown_mstp, VariableDropdown_mdtp)(VariableDropdown_VariableDropdown));

// CONCATENATED MODULE: ./src/dashboards/components/variablesControlBar/DraggableDropdown.tsx




const dropdownType = 'dropdown';
const dropdownSource = {
    beginDrag(props) {
        return {
            id: props.id,
            index: props.index,
        };
    },
};
const dropdownTarget = {
    hover(props, monitor, component) {
        if (!component) {
            return null;
        }
        const dragIndex = monitor.getItem().index;
        const hoverIndex = props.index;
        if (dragIndex === hoverIndex) {
            return;
        }
        props.moveDropdown(dragIndex, hoverIndex);
        monitor.getItem().index = hoverIndex;
    },
};
class DraggableDropdown_Dropdown extends react["Component"] {
    render() {
        const { name, id, dashboardID, isDragging, connectDragSource, connectDropTarget, connectDragPreview, } = this.props;
        const className = classnames_default()('variable-dropdown', {
            'variable-dropdown__dragging': isDragging,
        });
        return connectDropTarget(react["createElement"]("div", { className: "variable-dropdown--container" },
            connectDragPreview(react["createElement"]("div", { className: className },
                react["createElement"]("div", { className: "variable-dropdown--label" },
                    connectDragSource(react["createElement"]("div", { className: "variable-dropdown--drag" },
                        react["createElement"]("span", { className: "hamburger" }))),
                    react["createElement"]("span", null, name)),
                react["createElement"](variablesControlBar_VariableDropdown, { variableID: id, dashboardID: dashboardID }))),
            react["createElement"]("div", { className: "variable-dropdown--placeholder" })));
    }
}
/* harmony default export */ var DraggableDropdown = (Object(react_dnd_lib["DropTarget"])(dropdownType, dropdownTarget, (connect) => ({
    connectDropTarget: connect.dropTarget(),
}))(Object(react_dnd_lib["DragSource"])(dropdownType, dropdownSource, (connect, monitor) => ({
    connectDragSource: connect.dragSource(),
    connectDragPreview: connect.dragPreview(),
    isDragging: monitor.isDragging(),
}))(DraggableDropdown_Dropdown)));

// EXTERNAL MODULE: ./node_modules/react-dnd-html5-backend/lib/index.js
var react_dnd_html5_backend_lib = __webpack_require__(1496);
var react_dnd_html5_backend_lib_default = /*#__PURE__*/__webpack_require__.n(react_dnd_html5_backend_lib);

// CONCATENATED MODULE: ./src/shared/decorators/withDragDropContext.tsx


/* harmony default export */ var withDragDropContext = (Object(react_dnd_lib["DragDropContext"])(react_dnd_html5_backend_lib_default.a));

// CONCATENATED MODULE: ./src/dashboards/components/variablesControlBar/VariablesControlBar.tsx














let VariablesControlBar_VariablesControlBar = class VariablesControlBar extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = { initialLoading: types["RemoteDataState"].Loading };
        this.handleMoveDropdown = (originalIndex, newIndex) => {
            const { dashboardID, moveVariable } = this.props;
            moveVariable(originalIndex, newIndex, dashboardID);
        };
    }
    static getDerivedStateFromProps(props, state) {
        if (props.valuesStatus === types["RemoteDataState"].Done &&
            props.variablesStatus === types["RemoteDataState"].Done &&
            state.initialLoading !== types["RemoteDataState"].Done) {
            return { initialLoading: types["RemoteDataState"].Done };
        }
        return {};
    }
    render() {
        const { show, inPresentationMode } = this.props;
        if (!show) {
            return false;
        }
        return (react_default.a.createElement("div", { className: classnames_default()('variables-control-bar', {
                'presentation-mode': inPresentationMode,
            }) },
            react_default.a.createElement(clockface_dist["SpinnerContainer"], { loading: this.state.initialLoading, spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], { diameterPixels: 50 }), className: "variables-spinner-container" }, this.bar)));
    }
    get emptyBar() {
        return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].ExtraSmall, className: "variables-control-bar--empty" },
            react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                "This dashboard doesn't have any cells with defined variables.",
                ' ',
                react_default.a.createElement("a", { href: "https://v2.docs.influxdata.com/v2.0/visualize-data/variables/", target: "_blank" }, "Learn How"))));
    }
    get barContents() {
        const { dashboardID, variables, valuesStatus } = this.props;
        return (react_default.a.createElement("div", { className: "variables-control-bar--full" },
            variables.map((v, i) => (react_default.a.createElement(components_ErrorBoundary, { key: v.id },
                react_default.a.createElement(DraggableDropdown, { name: v.name, id: v.id, index: i, dashboardID: dashboardID, moveDropdown: this.handleMoveDropdown })))),
            valuesStatus === types["RemoteDataState"].Loading && (react_default.a.createElement(clockface_dist["TechnoSpinner"], { diameterPixels: 18 }))));
    }
    get bar() {
        const { variables } = this.props;
        if (Object(lodash["isEmpty"])(variables)) {
            return this.emptyBar;
        }
        return this.barContents;
    }
};
VariablesControlBar_VariablesControlBar = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], VariablesControlBar_VariablesControlBar);
const VariablesControlBar_mdtp = {
    moveVariable: variables_actions_creators["n" /* moveVariable */],
};
const VariablesControlBar_mstp = (state) => {
    const dashboardID = state.currentDashboard.id;
    const variables = Object(variables_selectors["r" /* getVariablesForDashboard */])(state, dashboardID);
    const valuesStatus = Object(variables_selectors["h" /* getDashboardValuesStatus */])(state, dashboardID);
    const variablesStatus = Object(variables_selectors["i" /* getDashboardVariablesStatus */])(state);
    const show = state.userSettings.showVariablesControls;
    const { app: { ephemeral: { inPresentationMode }, }, } = state;
    return {
        variables,
        valuesStatus,
        variablesStatus,
        inPresentationMode,
        dashboardID,
        show,
    };
};
/* harmony default export */ var variablesControlBar_VariablesControlBar = (withDragDropContext(Object(es["b" /* connect */])(VariablesControlBar_mstp, VariablesControlBar_mdtp)(VariablesControlBar_VariablesControlBar)));

// CONCATENATED MODULE: ./src/cloud/components/LimitChecker.tsx




class LimitChecker_LimitChecker extends react["PureComponent"] {
    componentDidMount() {
        if (constants["e" /* CLOUD */]) {
            this.props.getReadWriteCardinalityLimits();
        }
    }
    render() {
        return this.props.children;
    }
}
const LimitChecker_mdtp = {
    getReadWriteCardinalityLimits: actions_limits["j" /* getReadWriteCardinalityLimits */],
};
/* harmony default export */ var components_LimitChecker = (Object(es["b" /* connect */])(null, LimitChecker_mdtp)(LimitChecker_LimitChecker));

// CONCATENATED MODULE: ./src/cloud/components/RateLimitAlert.tsx







class RateLimitAlert_RateLimitAlert extends react["PureComponent"] {
    render() {
        const { status, className } = this.props;
        if (constants["e" /* CLOUD */] && status === actions_limits["b" /* LimitStatus */].EXCEEDED) {
            return (react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Column, alignItems: clockface_dist["AlignItems"].Center, margin: clockface_dist["ComponentSize"].Large, stretchToFitWidth: true, className: className },
                react_default.a.createElement(clockface_dist["Alert"], { icon: clockface_dist["IconFont"].Cloud, color: clockface_dist["ComponentColor"].Primary },
                    react_default.a.createElement(clockface_dist["FlexBox"], { alignItems: clockface_dist["AlignItems"].Center, direction: clockface_dist["FlexDirection"].Row, justifyContent: clockface_dist["JustifyContent"].SpaceBetween, margin: clockface_dist["ComponentSize"].Medium },
                        react_default.a.createElement("div", null,
                            this.message,
                            react_default.a.createElement("br", null)),
                        react_default.a.createElement(components_CheckoutButton, null)))));
        }
        return null;
    }
    get message() {
        return `Hey there, it looks like you have exceeded your plan's ${this.resourceName} limits.${this.additionalMessage}`;
    }
    get additionalMessage() {
        if (this.props.resources.includes('cardinality')) {
            return ' Your writes will be rejected until resolved.';
        }
        return '';
    }
    get resourceName() {
        const { resources } = this.props;
        const renamedResources = resources.map(resource => {
            if (resource === 'cardinality') {
                return 'total series';
            }
            return resource;
        });
        return renamedResources.join(' and ');
    }
}
const RateLimitAlert_mstp = (state) => {
    const { cloud: { limits }, } = state;
    const resources = Object(utils_limits["k" /* extractRateLimitResources */])(limits);
    const status = Object(utils_limits["l" /* extractRateLimitStatus */])(limits);
    return {
        status,
        resources,
    };
};
/* harmony default export */ var components_RateLimitAlert = (Object(es["b" /* connect */])(RateLimitAlert_mstp, null)(RateLimitAlert_RateLimitAlert));

// CONCATENATED MODULE: ./src/dashboards/components/DashboardPage.tsx















let DashboardPage_DashboardPage = class DashboardPage extends react["Component"] {
    render() {
        const { autoRefresh, manualRefresh, onManualRefresh, children } = this.props;
        return (react_default.a.createElement(clockface_dist["Page"], { titleTag: this.pageTitle },
            react_default.a.createElement(components_LimitChecker, null,
                react_default.a.createElement(hoverTime_HoverTimeProvider, null,
                    react_default.a.createElement(components_DashboardHeader, { autoRefresh: autoRefresh, onManualRefresh: onManualRefresh }),
                    react_default.a.createElement(components_RateLimitAlert, { className: "dashboard--rate-alert" }),
                    react_default.a.createElement(variablesControlBar_VariablesControlBar, null),
                    react_default.a.createElement(Dashboard, { manualRefresh: manualRefresh }),
                    children))));
    }
    get pageTitle() {
        const { dashboard } = this.props;
        const title = dashboard && dashboard.name ? dashboard.name : 'Loading...';
        return pageTitleSuffixer([title]);
    }
};
DashboardPage_DashboardPage = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], DashboardPage_DashboardPage);
const DashboardPage_mstp = (state) => {
    const dashboard = Object(resources_selectors["b" /* getByID */])(state, types["ResourceType"].Dashboards, state.currentDashboard.id);
    return {
        dashboard,
    };
};
/* harmony default export */ var components_DashboardPage = (Object(es["b" /* connect */])(DashboardPage_mstp, null)(components_ManualRefresh(DashboardPage_DashboardPage)));

// CONCATENATED MODULE: ./src/dashboards/components/GetTimeRange.tsx





const GetTimeRange = ({ location, params, timeRange, setDashboardTimeRange, updateQueryParams, }) => {
    const isEditing = location.pathname.includes('edit');
    const isNew = location.pathname.includes('new');
    Object(react["useEffect"])(() => {
        if (isEditing || isNew) {
            return;
        }
        setDashboardTimeRange(params.dashboardID, timeRange);
        const { lower, upper } = timeRange;
        updateQueryParams({
            lower,
            upper,
        });
    }, [isEditing, isNew]);
    return react_default.a.createElement("div", null);
};
const GetTimeRange_mstp = (state, props) => {
    const timeRange = Object(dashboards_selectors["a" /* getTimeRangeByDashboardID */])(state, props.params.dashboardID);
    return { timeRange };
};
const GetTimeRange_mdtp = {
    updateQueryParams: actions_ranges["e" /* updateQueryParams */],
    setDashboardTimeRange: actions_ranges["d" /* setDashboardTimeRange */],
};
/* harmony default export */ var components_GetTimeRange = (Object(react_router_es["g" /* withRouter */])(Object(es["b" /* connect */])(GetTimeRange_mstp, GetTimeRange_mdtp)(GetTimeRange)));

// CONCATENATED MODULE: ./src/shared/components/DashboardRoute.tsx




class DashboardRoute_DashboardRoute extends react["PureComponent"] {
    check(props) {
        const { dashboard, updateDashboard } = props;
        const dashboardID = props.params.dashboardID;
        if (dashboard !== dashboardID) {
            updateDashboard(dashboardID);
        }
    }
    componentDidMount() {
        this.check(this.props);
    }
    componentWillUnmount() {
        this.props.updateDashboard(null);
    }
    render() {
        if (!this.props.dashboard) {
            return false;
        }
        return react_default.a.createElement(react_default.a.Fragment, null, this.props.children);
    }
}
const DashboardRoute_mstp = (state) => {
    return {
        dashboard: state.currentDashboard.id,
    };
};
const DashboardRoute_mdtp = {
    updateDashboard: setDashboard,
};
/* harmony default export */ var components_DashboardRoute = (Object(es["b" /* connect */])(DashboardRoute_mstp, DashboardRoute_mdtp)(Object(react_router_es["g" /* withRouter */])(DashboardRoute_DashboardRoute)));

// CONCATENATED MODULE: ./src/dashboards/components/DashboardContainer.tsx









const { Active } = types["AutoRefreshStatus"];
const DashboardContainer = ({ autoRefresh, dashboard, children }) => {
    Object(react["useEffect"])(() => {
        if (autoRefresh.status === Active) {
            GlobalAutoRefresher.poll(autoRefresh.interval);
            return;
        }
        GlobalAutoRefresher.stopPolling();
        return function cleanup() {
            GlobalAutoRefresher.stopPolling();
        };
    }, [autoRefresh.status, autoRefresh.interval]);
    return (react_default.a.createElement(components_DashboardRoute, null,
        react_default.a.createElement(components_GetResource, { resources: [{ type: types["ResourceType"].Dashboards, id: dashboard }] },
            react_default.a.createElement(components_GetTimeRange, null),
            react_default.a.createElement(components_DashboardPage, { autoRefresh: autoRefresh }),
            children)));
};
const DashboardContainer_mstp = (state) => {
    const dashboard = state.currentDashboard.id;
    const autoRefresh = state.autoRefresh[dashboard] || constants["b" /* AUTOREFRESH_DEFAULT */];
    return {
        autoRefresh,
        dashboard,
    };
};
/* harmony default export */ var components_DashboardContainer = (Object(es["b" /* connect */])(DashboardContainer_mstp)(DashboardContainer));

// CONCATENATED MODULE: ./src/shared/utils/relativeTimestampFormatter.ts

const relativeTimestampFormatter = (time, prefix) => {
    const timeFromNow = moment_default()(time).fromNow();
    if (prefix) {
        return `${prefix}${timeFromNow}`;
    }
    return timeFromNow;
};

// CONCATENATED MODULE: ./src/dashboards/components/dashboard_index/DashboardCard.tsx










class DashboardCard_DashboardCard extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleUpdateDashboard = (name) => {
            const { id, onUpdateDashboard } = this.props;
            onUpdateDashboard(id, { name });
        };
        this.handleCloneDashboard = () => {
            const { id, name, onCloneDashboard } = this.props;
            onCloneDashboard(id, name);
        };
        this.handleDeleteDashboard = () => {
            const { id, name, onDeleteDashboard } = this.props;
            onDeleteDashboard(id, name);
        };
        this.handleClickDashboard = () => {
            const { onResetViews, router, id, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/dashboards/${id}`);
            onResetViews();
        };
        this.handleUpdateDescription = (description) => {
            const { id, onUpdateDashboard } = this.props;
            onUpdateDashboard(id, { description });
        };
        this.handleAddLabel = (label) => {
            const { onAddDashboardLabel, id } = this.props;
            onAddDashboardLabel(id, label);
        };
        this.handleRemoveLabel = (label) => {
            const { onRemoveDashboardLabel, id } = this.props;
            onRemoveDashboardLabel(id, label);
        };
        this.handleExport = () => {
            const { router, params: { orgID }, id, } = this.props;
            router.push(`/orgs/${orgID}/dashboards/${id}/export`);
        };
    }
    render() {
        const { id, name, description, onFilterChange, labels, updatedAt, } = this.props;
        return (react_default.a.createElement(clockface_dist["ResourceCard"], { key: `dashboard-id--${id}`, testID: "dashboard-card", name: react_default.a.createElement(clockface_dist["ResourceCard"].EditableName, { onUpdate: this.handleUpdateDashboard, onClick: this.handleClickDashboard, name: name, noNameString: dashboards_constants["e" /* DEFAULT_DASHBOARD_NAME */], testID: "dashboard-card--name", buttonTestID: "dashboard-card--name-button", inputTestID: "dashboard-card--input" }), description: react_default.a.createElement(clockface_dist["ResourceCard"].EditableDescription, { onUpdate: this.handleUpdateDescription, description: description, placeholder: `Describe ${name}` }), labels: react_default.a.createElement(inlineLabels_InlineLabels, { selectedLabelIDs: labels, onFilterChange: onFilterChange, onAddLabel: this.handleAddLabel, onRemoveLabel: this.handleRemoveLabel }), metaData: [
                react_default.a.createElement(react_default.a.Fragment, null, relativeTimestampFormatter(updatedAt, 'Last modified ')),
            ], contextMenu: this.contextMenu }));
    }
    get contextMenu() {
        return (react_default.a.createElement(clockface["f" /* Context */], null,
            react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface_dist["IconFont"].CogThick },
                react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Export", action: this.handleExport })),
            react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface_dist["IconFont"].Duplicate, color: clockface_dist["ComponentColor"].Secondary },
                react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Clone", action: this.handleCloneDashboard, testID: "clone-dashboard" })),
            react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface_dist["IconFont"].Trash, color: clockface_dist["ComponentColor"].Danger, testID: "context-delete-menu" },
                react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Delete", action: this.handleDeleteDashboard, testID: "context-delete-dashboard" }))));
    }
}
const DashboardCard_mdtp = {
    onAddDashboardLabel: dashboards_actions_thunks["a" /* addDashboardLabel */],
    onRemoveDashboardLabel: dashboards_actions_thunks["j" /* removeDashboardLabel */],
    onResetViews: views_actions_creators["d" /* resetViews */],
    onCloneDashboard: dashboards_actions_thunks["b" /* cloneDashboard */],
    onDeleteDashboard: dashboards_actions_thunks["f" /* deleteDashboard */],
    onUpdateDashboard: dashboards_actions_thunks["m" /* updateDashboard */],
};
/* harmony default export */ var dashboard_index_DashboardCard = (Object(es["b" /* connect */])(null, DashboardCard_mdtp)(Object(react_router_es["g" /* withRouter */])(DashboardCard_DashboardCard)));

// CONCATENATED MODULE: ./src/dashboards/components/dashboard_index/DashboardCards.tsx






class DashboardCards_DashboardCards extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.memGetSortedResources = Object(memoize_one_esm["a" /* default */])(getSortedResources);
        this.state = {
            hasMeasured: false,
            pages: 1,
            windowSize: 0,
        };
        this.registerFrame = elem => {
            this._frame = elem;
        };
        this.registerWindow = elem => {
            this._window = elem;
        };
        this.registerSpinner = elem => {
            this._spinner = elem;
            if (!elem)
                return;
            let count = 1.0;
            const threshold = [];
            while (count > 0) {
                threshold.push(count);
                count -= 0.1;
            }
            threshold.reverse();
            this._observer = new IntersectionObserver(this.measure, {
                threshold,
                rootMargin: '60px 0px',
            });
            this._observer.observe(this._spinner);
        };
        this.measure = entries => {
            if (entries
                .map(e => e.isIntersecting)
                .reduce((prev, curr) => prev || curr, false)) {
                this.setState({
                    pages: this.state.pages + 2,
                });
            }
        };
        this.addMore = () => {
            if (this.state.hasMeasured) {
                return;
            }
            if (this.state.windowSize * this.state.pages >=
                this.props.dashboards.length) {
                return;
            }
            if (!this._frame) {
                return;
            }
            const frame = this._frame.getBoundingClientRect();
            const win = this._window.getBoundingClientRect();
            if (frame.height == win.height) {
                this.setState({
                    windowSize: this.state.windowSize + 1,
                }, () => {
                    this.addMore();
                });
            }
            else {
                this.setState({
                    windowSize: this.state.windowSize,
                    pages: 3,
                    hasMeasured: true,
                });
            }
        };
    }
    componentDidMount() {
        this.setState({
            hasMeasured: false,
            page: 1,
            windowSize: 0,
        });
    }
    componentDidUpdate() {
        this.addMore();
    }
    render() {
        const { dashboards, sortDirection, sortKey, sortType, onFilterChange, } = this.props;
        const sortedDashboards = this.memGetSortedResources(dashboards, sortKey, sortDirection, sortType);
        const { windowSize, pages, hasMeasured } = this.state;
        return (react_default.a.createElement("div", { style: { height: '100%', display: 'grid' }, ref: this.registerFrame },
            react_default.a.createElement("div", { className: "dashboards-card-grid", ref: this.registerWindow }, sortedDashboards
                .filter(d => d.status === types["RemoteDataState"].Done)
                .slice(0, pages * windowSize)
                .map(({ id, name, description, labels, meta }) => (react_default.a.createElement(dashboard_index_DashboardCard, { key: id, id: id, name: name, labels: labels, updatedAt: meta.updatedAt, description: description, onFilterChange: onFilterChange })))),
            hasMeasured && windowSize * pages < dashboards.length && (react_default.a.createElement("div", { style: { height: '140px', margin: '24px auto' }, ref: this.registerSpinner },
                react_default.a.createElement(clockface_dist["TechnoSpinner"], null)))));
    }
}

// CONCATENATED MODULE: ./src/dashboards/components/dashboard_index/Table.tsx











class Table_DashboardsTable extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            sortKey: 'name',
            sortDirection: clockface_dist["Sort"].Ascending,
            sortType: SortTypes.String,
        };
        this.handleClickColumn = (nextSort, sortKey) => {
            let sortType = SortTypes.String;
            if (sortKey === 'meta.updatedAt') {
                sortType = SortTypes.Date;
            }
            this.setState({ sortKey, sortDirection: nextSort, sortType });
        };
        this.summonImportOverlay = () => {
            const { router, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/dashboards/import`);
        };
        this.summonImportFromTemplateOverlay = () => {
            const { router, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/dashboards/import/template`);
        };
    }
    componentDidMount() {
        this.props.getDashboards();
        this.props.getLabels();
    }
    render() {
        const { status, dashboards, filterComponent, onFilterChange } = this.props;
        const { sortKey, sortDirection, sortType } = this.state;
        let body;
        if (status === types["RemoteDataState"].Done && !dashboards.length) {
            body = (react_default.a.createElement(clockface_dist["ResourceList"].Body, { emptyState: null }, this.emptyState));
        }
        else {
            body = (react_default.a.createElement(clockface_dist["ResourceList"].Body, { style: { height: '100%' }, emptyState: null },
                react_default.a.createElement(DashboardCards_DashboardCards, { dashboards: dashboards, sortKey: sortKey, sortDirection: sortDirection, sortType: sortType, onFilterChange: onFilterChange })));
        }
        return (react_default.a.createElement(clockface_dist["ResourceList"], null,
            react_default.a.createElement(clockface_dist["ResourceList"].Header, { filterComponent: filterComponent },
                react_default.a.createElement(clockface_dist["ResourceList"].Sorter, { name: "name", sortKey: "name", sort: sortKey === 'name' ? sortDirection : clockface_dist["Sort"].None, onClick: this.handleClickColumn }),
                react_default.a.createElement(clockface_dist["ResourceList"].Sorter, { name: "modified", sortKey: "meta.updatedAt", sort: sortKey === 'meta.updatedAt' ? sortDirection : clockface_dist["Sort"].None, onClick: this.handleClickColumn })),
            body));
    }
    get emptyState() {
        const { onCreateDashboard, searchTerm } = this.props;
        if (searchTerm) {
            return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Large, testID: "empty-dashboards-list" },
                react_default.a.createElement(clockface_dist["EmptyState"].Text, null, "No Dashboards match your search term")));
        }
        return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Large, testID: "empty-dashboards-list" },
            react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                "Looks like you don't have any ",
                react_default.a.createElement("b", null, "Dashboards"),
                ", why not create one?"),
            react_default.a.createElement(AddResourceDropdown_AddResourceDropdown, { onSelectNew: onCreateDashboard, onSelectImport: this.summonImportOverlay, onSelectTemplate: this.summonImportFromTemplateOverlay, resourceName: "Dashboard", canImportFromTemplate: true })));
    }
}
const Table_mstp = (state) => {
    const status = state.resources.dashboards.status;
    return {
        status,
    };
};
const Table_mdtp = {
    getDashboards: dashboards_actions_thunks["h" /* getDashboards */],
    onCreateDashboard: dashboards_actions_thunks["d" /* createDashboard */],
    getLabels: labels_actions_thunks["c" /* getLabels */],
};
/* harmony default export */ var Table = (Object(es["b" /* connect */])(Table_mstp, Table_mdtp)(Object(react_router_es["g" /* withRouter */])(Table_DashboardsTable)));

// CONCATENATED MODULE: ./src/dashboards/components/dashboard_index/DashboardsIndexContents.tsx










const FilterDashboards = FilterListContainer();
let DashboardsIndexContents_DashboardsIndexContents = class DashboardsIndexContents extends react["Component"] {
    componentDidMount() {
        const { dashboards } = this.props;
        const dashboardIDs = dashboards.map(d => d.id);
        this.props.retainRangesDashTimeV1(dashboardIDs);
        this.props.checkDashboardLimits();
    }
    render() {
        const { searchTerm, dashboards, filterComponent, onFilterChange } = this.props;
        return (react_default.a.createElement(FilterDashboards, { list: dashboards, searchTerm: searchTerm, searchKeys: ['name', 'labels[].name'], sortByKey: "name" }, filteredDashboards => (react_default.a.createElement(Table, { searchTerm: searchTerm, filterComponent: filterComponent, dashboards: filteredDashboards, onFilterChange: onFilterChange }))));
    }
};
DashboardsIndexContents_DashboardsIndexContents = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], DashboardsIndexContents_DashboardsIndexContents);
const DashboardsIndexContents_mstp = (state) => {
    const { cloud: { limits: { status }, }, } = state;
    return {
        dashboards: Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Dashboards),
        limitStatus: status,
    };
};
const DashboardsIndexContents_mdtp = {
    retainRangesDashTimeV1: actions_ranges["c" /* retainRangesDashTimeV1 */],
    checkDashboardLimits: actions_limits["e" /* checkDashboardLimits */],
};
/* harmony default export */ var dashboard_index_DashboardsIndexContents = (Object(es["b" /* connect */])(DashboardsIndexContents_mstp, DashboardsIndexContents_mdtp)(DashboardsIndexContents_DashboardsIndexContents));

// CONCATENATED MODULE: ./src/dashboards/components/dashboard_index/DashboardsIndex.tsx
















let DashboardsIndex_DashboardIndex = class DashboardIndex extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleFilterDashboards = (searchTerm) => {
            this.setState({ searchTerm });
        };
        this.summonImportOverlay = () => {
            const { router, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/dashboards/import`);
        };
        this.summonImportFromTemplateOverlay = () => {
            const { router, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/dashboards/import/template`);
        };
        this.state = {
            searchTerm: '',
        };
    }
    render() {
        const { createDashboard, limitStatus } = this.props;
        const { searchTerm } = this.state;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Page"], { testID: "empty-dashboards-list", titleTag: pageTitleSuffixer(['Dashboards']) },
                react_default.a.createElement(clockface_dist["Page"].Header, { fullWidth: false },
                    react_default.a.createElement(clockface_dist["Page"].HeaderLeft, null,
                        react_default.a.createElement(components_PageTitleWithOrg, { title: "Dashboards" })),
                    react_default.a.createElement(clockface_dist["Page"].HeaderRight, null,
                        react_default.a.createElement(AddResourceDropdown_AddResourceDropdown, { onSelectNew: createDashboard, onSelectImport: this.summonImportOverlay, onSelectTemplate: this.summonImportFromTemplateOverlay, resourceName: "Dashboard", canImportFromTemplate: true, status: this.addResourceStatus }))),
                react_default.a.createElement(clockface_dist["Page"].Contents, { className: "dashboards-index__page-contents", fullWidth: false, scrollable: true },
                    react_default.a.createElement(components_GetAssetLimits, null,
                        react_default.a.createElement(AssetLimitAlert_AssetLimitAlert, { resourceName: "dashboards", limitStatus: limitStatus }),
                        react_default.a.createElement(dashboard_index_DashboardsIndexContents, { filterComponent: react_default.a.createElement(search_widget_SearchWidget, { placeholderText: "Filter dashboards...", onSearch: this.handleFilterDashboards, searchTerm: searchTerm }), searchTerm: searchTerm, onFilterChange: this.handleFilterDashboards })))),
            this.props.children));
    }
    get addResourceStatus() {
        const { limitStatus } = this.props;
        if (limitStatus === actions_limits["b" /* LimitStatus */].EXCEEDED) {
            return clockface_dist["ComponentStatus"].Disabled;
        }
        return clockface_dist["ComponentStatus"].Default;
    }
};
DashboardsIndex_DashboardIndex = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], DashboardsIndex_DashboardIndex);
const DashboardsIndex_mstp = (state) => {
    const { cloud: { limits }, } = state;
    return {
        limitStatus: Object(utils_limits["f" /* extractDashboardLimits */])(limits),
    };
};
const DashboardsIndex_mdtp = {
    createDashboard: dashboards_actions_thunks["d" /* createDashboard */],
};
/* harmony default export */ var DashboardsIndex = (Object(es["b" /* connect */])(DashboardsIndex_mstp, DashboardsIndex_mdtp)(DashboardsIndex_DashboardIndex));

// EXTERNAL MODULE: ./src/shared/components/CopyButton.tsx
var CopyButton = __webpack_require__(450);

// EXTERNAL MODULE: ./src/templates/actions/thunks.ts
var templates_actions_thunks = __webpack_require__(112);

// CONCATENATED MODULE: ./src/shared/components/ExportOverlay.tsx









class ExportOverlay_ExportOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.doNothing = () => { };
        this.handleExport = () => {
            const { resource, resourceName, onDismissOverlay } = this.props;
            const name = Object(lodash["get"])(resource, 'content.data.attributes.name', resourceName);
            downloadTextFile(JSON.stringify(resource, null, 1), name, '.json');
            onDismissOverlay();
        };
        this.handleConvertToTemplate = () => {
            const { resource, onDismissOverlay, resourceName, onCreateTemplateFromResource, } = this.props;
            onCreateTemplateFromResource(resource, resourceName);
            onDismissOverlay();
        };
    }
    render() {
        const { isVisible, resourceName, onDismissOverlay, status } = this.props;
        return (react_default.a.createElement(clockface_dist["Overlay"], { visible: isVisible },
            react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 800 },
                react_default.a.createElement(clockface_dist["Form"], { onSubmit: this.handleExport },
                    react_default.a.createElement(clockface_dist["Overlay"].Header, { title: `Export ${resourceName}`, onDismiss: onDismissOverlay }),
                    react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                        react_default.a.createElement(clockface_dist["SpinnerContainer"], { loading: status, spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null) }, this.overlayBody)),
                    react_default.a.createElement(clockface_dist["Overlay"].Footer, null,
                        this.downloadButton,
                        this.toTemplateButton,
                        this.copyButton)))));
    }
    get overlayBody() {
        const options = {
            tabIndex: 1,
            mode: 'json',
            readonly: true,
            lineNumbers: true,
            autoRefresh: true,
            theme: 'time-machine',
            completeSingle: false,
        };
        return (react_default.a.createElement("div", { className: "export-overlay--text-area" },
            react_default.a.createElement(react_codemirror2["Controlled"], { autoFocus: false, autoCursor: true, value: this.resourceText, options: options, onBeforeChange: this.doNothing, onTouchStart: this.doNothing })));
    }
    get resourceText() {
        return JSON.stringify(this.props.resource, null, 1);
    }
    get copyButton() {
        return (react_default.a.createElement(CopyButton["a" /* default */], { textToCopy: this.resourceText, contentName: this.props.resourceName, onCopyText: this.props.onCopyText, size: clockface_dist["ComponentSize"].Small, color: clockface_dist["ComponentColor"].Secondary }));
    }
    get downloadButton() {
        return (react_default.a.createElement(clockface_dist["Button"], { text: "Download JSON", onClick: this.handleExport, color: clockface_dist["ComponentColor"].Primary }));
    }
    get toTemplateButton() {
        return (react_default.a.createElement(clockface_dist["Button"], { text: "Save as template", onClick: this.handleConvertToTemplate, color: clockface_dist["ComponentColor"].Primary }));
    }
}
ExportOverlay_ExportOverlay.defaultProps = {
    isVisible: true,
};
const ExportOverlay_mdtp = {
    onCreateTemplateFromResource: templates_actions_thunks["h" /* createTemplateFromResource */],
};
/* harmony default export */ var components_ExportOverlay = (Object(es["b" /* connect */])(null, ExportOverlay_mdtp)(ExportOverlay_ExportOverlay));

// CONCATENATED MODULE: ./src/dashboards/components/DashboardExportOverlay.tsx







class DashboardExportOverlay_DashboardExportOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.onDismiss = () => {
            const { router, clearExportTemplate } = this.props;
            router.goBack();
            clearExportTemplate();
        };
    }
    componentDidMount() {
        const { params: { dashboardID }, convertToTemplate, } = this.props;
        convertToTemplate(dashboardID);
    }
    render() {
        const { status, dashboardTemplate } = this.props;
        const notes = (_text, success) => {
            if (success) {
                return Object(copy_notifications["Y" /* dashboardCopySuccess */])();
            }
            return Object(copy_notifications["X" /* dashboardCopyFailed */])();
        };
        return (react_default.a.createElement(components_ExportOverlay, { resourceName: "Dashboard", resource: dashboardTemplate, onDismissOverlay: this.onDismiss, onCopyText: notes, status: status }));
    }
}
const DashboardExportOverlay_mstp = (state) => ({
    dashboardTemplate: state.resources.templates.exportTemplate.item,
    status: state.resources.templates.exportTemplate.status,
});
const DashboardExportOverlay_mdtp = {
    convertToTemplate: dashboards_actions_thunks["c" /* convertToTemplate */],
    clearExportTemplate: templates_actions_thunks["b" /* clearExportTemplate */],
};
/* harmony default export */ var components_DashboardExportOverlay = (Object(es["b" /* connect */])(DashboardExportOverlay_mstp, DashboardExportOverlay_mdtp)(Object(react_router_es["g" /* withRouter */])(DashboardExportOverlay_DashboardExportOverlay)));

// CONCATENATED MODULE: ./src/shared/components/DragAndDrop.tsx



let dragCounter = 0;
class DragAndDrop_DragAndDrop extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleWindowDragOver = (event) => {
            event.preventDefault();
        };
        this.handleSubmit = () => {
            const { handleSubmit } = this.props;
            const { uploadContent } = this.state;
            handleSubmit(uploadContent);
        };
        this.handleFileClick = (e) => {
            const file = e.currentTarget.files[0];
            if (!file) {
                return;
            }
            e.preventDefault();
            e.stopPropagation();
            const reader = new FileReader();
            reader.readAsText(file);
            reader.onload = () => {
                this.setState({
                    uploadContent: reader.result,
                    fileName: file.name,
                }, () => this.submitOnUpload());
            };
        };
        this.handleFileDrop = (e) => {
            const file = e.dataTransfer.files[0];
            this.setState({
                dragClass: 'drag-none',
            });
            if (!file) {
                return;
            }
            e.preventDefault();
            e.stopPropagation();
            const reader = new FileReader();
            reader.readAsText(file);
            reader.onload = () => {
                this.setState({
                    uploadContent: reader.result,
                    fileName: file.name,
                }, () => this.submitOnDrop());
            };
        };
        this.handleFileOpen = () => {
            const { uploadContent } = this.state;
            if (uploadContent === '') {
                this.fileInput.click();
            }
        };
        this.handleCancelFile = () => {
            const { onCancel } = this.props;
            this.setState({ uploadContent: '' });
            this.fileInput.value = '';
            if (onCancel) {
                onCancel();
            }
        };
        this.handleDragEnter = (e) => {
            dragCounter += 1;
            e.preventDefault();
            this.setState({ dragClass: 'drag-over' });
        };
        this.handleDragLeave = (e) => {
            dragCounter -= 1;
            e.preventDefault();
            if (dragCounter === 0) {
                this.setState({ dragClass: 'drag-none' });
            }
        };
        this.state = {
            inputContent: null,
            uploadContent: '',
            fileName: '',
            dragClass: 'drag-none',
        };
    }
    componentDidMount() {
        window.addEventListener('dragover', this.handleWindowDragOver);
        window.addEventListener('drop', this.handleFileDrop);
        window.addEventListener('dragenter', this.handleDragEnter);
        window.addEventListener('dragleave', this.handleDragLeave);
    }
    componentWillUnmount() {
        window.removeEventListener('dragover', this.handleWindowDragOver);
        window.removeEventListener('drop', this.handleFileDrop);
        window.removeEventListener('dragenter', this.handleDragEnter);
        window.removeEventListener('dragleave', this.handleDragLeave);
    }
    render() {
        return (react_default.a.createElement("div", { className: this.containerClass },
            react_default.a.createElement("div", { className: this.dragAreaClass, onClick: this.handleFileOpen },
                this.dragAreaHeader,
                react_default.a.createElement("div", { className: this.infoClass }),
                react_default.a.createElement("input", { type: "file", ref: r => (this.fileInput = r), className: "drag-and-drop--input", accept: this.fileTypesToAccept, onChange: this.handleFileClick }),
                this.buttons)));
    }
    get fileTypesToAccept() {
        const { fileTypesToAccept } = this.props;
        if (!fileTypesToAccept) {
            return '*';
        }
        return fileTypesToAccept;
    }
    get containerClass() {
        const { dragClass } = this.state;
        const { compact, className } = this.props;
        return classnames_default()('drag-and-drop', {
            compact,
            [dragClass]: true,
            [className]: className,
        });
    }
    get infoClass() {
        const { uploadContent } = this.state;
        return classnames_default()('drag-and-drop--graphic', { success: uploadContent });
    }
    get dragAreaClass() {
        const { uploadContent } = this.state;
        return classnames_default()('drag-and-drop--form', { active: !uploadContent });
    }
    get dragAreaHeader() {
        const { uploadContent, fileName } = this.state;
        if (uploadContent) {
            return react_default.a.createElement("div", { className: "drag-and-drop--header selected" }, fileName);
        }
        return (react_default.a.createElement("div", { className: "drag-and-drop--header empty" }, "Drop a file here or click to upload"));
    }
    get buttons() {
        const { uploadContent } = this.state;
        const { submitText, submitOnDrop } = this.props;
        if (!uploadContent) {
            return null;
        }
        if (submitOnDrop) {
            return (react_default.a.createElement("span", { className: "drag-and-drop--buttons" },
                react_default.a.createElement(clockface_dist["Button"], { color: clockface_dist["ComponentColor"].Default, text: "Cancel", size: clockface_dist["ComponentSize"].Medium, type: clockface_dist["ButtonType"].Button, onClick: this.handleCancelFile })));
        }
        return (react_default.a.createElement("span", { className: "drag-and-drop--buttons" },
            react_default.a.createElement(clockface_dist["Button"], { color: clockface_dist["ComponentColor"].Primary, text: submitText, size: clockface_dist["ComponentSize"].Medium, type: clockface_dist["ButtonType"].Submit, onClick: this.handleSubmit }),
            react_default.a.createElement(clockface_dist["Button"], { color: clockface_dist["ComponentColor"].Default, text: "Cancel", size: clockface_dist["ComponentSize"].Medium, type: clockface_dist["ButtonType"].Submit, onClick: this.handleCancelFile })));
    }
    submitOnDrop() {
        const { submitOnDrop } = this.props;
        if (submitOnDrop) {
            this.handleSubmit();
        }
    }
    submitOnUpload() {
        const { submitOnUpload } = this.props;
        if (submitOnUpload) {
            this.handleSubmit();
        }
    }
}
DragAndDrop_DragAndDrop.defaultProps = {
    submitText: 'Write this File',
    submitOnDrop: false,
    submitOnUpload: false,
    compact: false,
    className: '',
};
/* harmony default export */ var components_DragAndDrop = (DragAndDrop_DragAndDrop);

// CONCATENATED MODULE: ./src/shared/components/ImportOverlay.tsx





var ImportOption;
(function (ImportOption) {
    ImportOption["Upload"] = "upload";
    ImportOption["Paste"] = "paste";
})(ImportOption || (ImportOption = {}));
class ImportOverlay_ImportOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            selectedImportOption: ImportOption.Upload,
            importContent: '',
        };
        this.handleChangeTextArea = (e) => {
            const { updateStatus = () => { } } = this.props;
            const importContent = e.target.value;
            this.handleSetImportContent(importContent);
            updateStatus(clockface_dist["ComponentStatus"].Default);
        };
        this.submit = () => {
            const { importContent } = this.state;
            const { onSubmit, params: { orgID }, } = this.props;
            onSubmit(importContent, orgID);
            this.clearImportContent();
        };
        this.clearImportContent = () => {
            this.setState((state, props) => {
                const { status = clockface_dist["ComponentStatus"].Default } = props;
                return status === clockface_dist["ComponentStatus"].Error ? Object.assign({}, state) : { importContent: '' };
            });
        };
        this.onDismiss = () => {
            const { onDismissOverlay } = this.props;
            this.clearImportContent();
            onDismissOverlay();
        };
        this.handleSetImportOption = (selectedImportOption) => {
            this.clearImportContent();
            this.setState({ selectedImportOption });
        };
        this.handleSetImportContent = (importContent) => {
            this.setState({ importContent });
        };
    }
    render() {
        const { isVisible, resourceName } = this.props;
        const { selectedImportOption } = this.state;
        return (react_default.a.createElement(clockface_dist["Overlay"], { visible: isVisible },
            react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 800 },
                react_default.a.createElement(clockface_dist["Form"], { onSubmit: this.submit },
                    react_default.a.createElement(clockface_dist["Overlay"].Header, { title: `Import ${resourceName}`, onDismiss: this.onDismiss }),
                    react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                        react_default.a.createElement("div", { className: "import--options" },
                            react_default.a.createElement(clockface_dist["SelectGroup"], null,
                                react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "import-mode", id: ImportOption.Upload, active: selectedImportOption === ImportOption.Upload, value: ImportOption.Upload, onClick: this.handleSetImportOption, titleText: "Upload" }, "Upload File"),
                                react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "import-mode", id: ImportOption.Paste, active: selectedImportOption === ImportOption.Paste, value: ImportOption.Paste, onClick: this.handleSetImportOption, titleText: "Paste" }, "Paste JSON"))),
                        this.importBody),
                    react_default.a.createElement(clockface_dist["Overlay"].Footer, null, this.submitButton)))));
    }
    get importBody() {
        const { selectedImportOption, importContent } = this.state;
        const { status = clockface_dist["ComponentStatus"].Default } = this.props;
        if (selectedImportOption === ImportOption.Upload) {
            return (react_default.a.createElement(components_DragAndDrop, { submitText: "Upload", handleSubmit: this.handleSetImportContent, submitOnDrop: true, submitOnUpload: true, onCancel: this.clearImportContent }));
        }
        if (selectedImportOption === ImportOption.Paste) {
            return (react_default.a.createElement(clockface_dist["TextArea"], { status: status, value: importContent, onChange: this.handleChangeTextArea, testID: "import-overlay--textarea" }));
        }
    }
    get submitButton() {
        const { resourceName } = this.props;
        const { selectedImportOption, importContent } = this.state;
        const isEnabled = selectedImportOption === ImportOption.Paste ||
            (selectedImportOption === ImportOption.Upload && importContent);
        const status = isEnabled
            ? clockface_dist["ComponentStatus"].Default
            : clockface_dist["ComponentStatus"].Disabled;
        return (react_default.a.createElement(clockface_dist["Button"], { text: `Import JSON as ${resourceName}`, color: clockface_dist["ComponentColor"].Primary, status: status, type: clockface_dist["ButtonType"].Submit }));
    }
}
ImportOverlay_ImportOverlay.defaultProps = {
    isVisible: true,
};
/* harmony default export */ var components_ImportOverlay = (Object(react_router_es["g" /* withRouter */])(ImportOverlay_ImportOverlay));

// EXTERNAL MODULE: ./node_modules/jsonlint-mod/web/jsonlint.js
var jsonlint = __webpack_require__(357);
var jsonlint_default = /*#__PURE__*/__webpack_require__.n(jsonlint);

// CONCATENATED MODULE: ./src/dashboards/components/DashboardImportOverlay.tsx










class DashboardImportOverlay_DashboardImportOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            status: clockface_dist["ComponentStatus"].Default,
        };
        this.updateOverlayStatus = (status) => this.setState(() => ({ status }));
        this.handleImportDashboard = (uploadContent) => {
            const { createDashboardFromTemplate, notify, populateDashboards } = this.props;
            let template;
            this.updateOverlayStatus(clockface_dist["ComponentStatus"].Default);
            try {
                template = jsonlint_default.a.parse(uploadContent);
            }
            catch (error) {
                this.updateOverlayStatus(clockface_dist["ComponentStatus"].Error);
                notify(Object(copy_notifications["Eb" /* invalidJSON */])(error.message));
                return;
            }
            if (Object(lodash["isEmpty"])(template)) {
                this.onDismiss();
            }
            createDashboardFromTemplate(template);
            populateDashboards();
            this.onDismiss();
        };
        this.onDismiss = () => {
            const { router } = this.props;
            router.goBack();
        };
    }
    render() {
        return (react_default.a.createElement(components_ImportOverlay, { isVisible: true, onDismissOverlay: this.onDismiss, resourceName: "Dashboard", onSubmit: this.handleImportDashboard, status: this.state.status, updateStatus: this.updateOverlayStatus }));
    }
}
const DashboardImportOverlay_mdtp = {
    notify: actions_notifications["c" /* notify */],
    populateDashboards: dashboards_actions_thunks["h" /* getDashboards */],
    createDashboardFromTemplate: dashboards_actions_thunks["e" /* createDashboardFromTemplate */],
};
/* harmony default export */ var components_DashboardImportOverlay = (Object(es["b" /* connect */])(null, DashboardImportOverlay_mdtp)(Object(react_router_es["g" /* withRouter */])(DashboardImportOverlay_DashboardImportOverlay)));

// CONCATENATED MODULE: ./src/templates/components/createFromTemplateOverlay/TemplateBrowserDetails.tsx



class TemplateBrowserDetails_TemplateBrowserDetails extends react["PureComponent"] {
    render() {
        return (react_default.a.createElement(clockface_dist["DapperScrollbars"], { className: "import-template-overlay--details", autoSize: false },
            react_default.a.createElement(clockface_dist["Panel"], { testID: "template-panel", className: "import-template-overlay--panel" },
                react_default.a.createElement(clockface_dist["Panel"].Body, { size: clockface_dist["ComponentSize"].Medium }, this.panelContents))));
    }
    get panelContents() {
        const { selectedTemplateSummary } = this.props;
        if (!selectedTemplateSummary) {
            return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Medium },
                react_default.a.createElement(clockface_dist["EmptyState"].Text, null, "Select a Template from the left")));
        }
        return (react_default.a.createElement(clockface_dist["Grid"], null,
            react_default.a.createElement(clockface_dist["Grid"].Row, null,
                react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Twelve },
                    this.templateName,
                    this.templateDescription),
                this.props.variables && (react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Six },
                    react_default.a.createElement("h5", { className: "import-template-overlay--heading" }, "Variables"),
                    this.variablesList)),
                this.props.cells && (react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Six },
                    react_default.a.createElement("h5", { className: "import-template-overlay--heading" }, "Cells"),
                    this.cellsList)))));
    }
    get variablesList() {
        const { variables } = this.props;
        if (!variables.length) {
            return (react_default.a.createElement("p", { className: "import-template-overlay--included missing" }, "No included variables"));
        }
        return variables.map((variable, i) => (react_default.a.createElement("p", { className: "import-templates-overlay--included", key: `${i} ${variable}` }, variable)));
    }
    get cellsList() {
        const { cells } = this.props;
        if (!cells.length) {
            return (react_default.a.createElement("p", { className: "import-template-overlay--included missing" }, "No included cells"));
        }
        return cells.map((cell, i) => (react_default.a.createElement("p", { className: "import-templates-overlay--included", key: `${i} ${cell}` }, cell)));
    }
    get templateDescription() {
        const { selectedTemplateSummary } = this.props;
        const description = lodash_default.a.get(selectedTemplateSummary, 'meta.description');
        if (description) {
            return (react_default.a.createElement("p", { className: "import-template-overlay--description" }, description));
        }
        return (react_default.a.createElement("p", { className: "import-template-overlay--description missing" }, "No description"));
    }
    get templateName() {
        const { selectedTemplateSummary } = this.props;
        const name = lodash_default.a.get(selectedTemplateSummary, 'meta.name');
        const templateName = name || 'Untitled';
        const className = name
            ? 'import-template-overlay--name'
            : 'import-template-overlay--name missing';
        return react_default.a.createElement("h3", { className: className }, templateName);
    }
}
/* harmony default export */ var createFromTemplateOverlay_TemplateBrowserDetails = (TemplateBrowserDetails_TemplateBrowserDetails);

// CONCATENATED MODULE: ./src/templates/components/createFromTemplateOverlay/TemplateBrowserListItem.tsx



class TemplateBrowserListItem_TemplateBrowser extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleClick = () => {
            const { onClick, template } = this.props;
            onClick(template);
        };
    }
    render() {
        const { testID, label } = this.props;
        return (react_default.a.createElement("div", { className: this.className, "data-testid": testID, onClick: this.handleClick },
            react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].Cube, className: "import-template-overlay--list-icon" }),
            react_default.a.createElement("span", { className: "import-template-overlay--list-label" }, label)));
    }
    get className() {
        const { selected } = this.props;
        return classnames_default()('import-template-overlay--template', { active: selected });
    }
}
/* harmony default export */ var TemplateBrowserListItem = (TemplateBrowserListItem_TemplateBrowser);

// CONCATENATED MODULE: ./src/templates/components/createFromTemplateOverlay/TemplateBrowserList.tsx




class TemplateBrowserList_TemplateBrowser extends react["PureComponent"] {
    render() {
        const { selectedTemplateSummary, templates, onSelectTemplate } = this.props;
        return (react_default.a.createElement(clockface_dist["DapperScrollbars"], { className: "import-template-overlay--templates", autoSize: false, noScrollX: true }, Object(lodash["orderBy"])(templates, [({ meta: { name } }) => name.toLocaleLowerCase()]).map(t => (react_default.a.createElement(TemplateBrowserListItem, { key: t.id, template: t, label: t.meta.name, onClick: onSelectTemplate, testID: `template--${t.meta.name}`, selected: Object(lodash["get"])(selectedTemplateSummary, 'id', '') === t.id })))));
    }
}
/* harmony default export */ var TemplateBrowserList = (TemplateBrowserList_TemplateBrowser);

// CONCATENATED MODULE: ./src/templates/components/createFromTemplateOverlay/TemplateBrowser.tsx



class TemplateBrowser_TemplateBrowser extends react["PureComponent"] {
    render() {
        const { selectedTemplateSummary, cells, variables, selectedTemplate, templates, onSelectTemplate, } = this.props;
        return (react_default.a.createElement("div", { className: "import-template-overlay" },
            react_default.a.createElement(TemplateBrowserList, { templates: templates, onSelectTemplate: onSelectTemplate, selectedTemplateSummary: selectedTemplateSummary }),
            react_default.a.createElement(createFromTemplateOverlay_TemplateBrowserDetails, { cells: cells, variables: variables, selectedTemplateSummary: selectedTemplateSummary, selectedTemplate: selectedTemplate })));
    }
}
/* harmony default export */ var createFromTemplateOverlay_TemplateBrowser = (TemplateBrowser_TemplateBrowser);

// CONCATENATED MODULE: ./src/templates/components/createFromTemplateOverlay/TemplateBrowserEmpty.tsx





class TemplateBrowserEmpty_TemplateBrowserEmpty extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleButtonClick = () => {
            const { router, org } = this.props;
            router.push(`/orgs/${org.id}/settings/templates`);
        };
    }
    render() {
        return (react_default.a.createElement("div", { className: "import-template-overlay--empty" },
            react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Large },
                react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                    "Looks like you don't have any ",
                    react_default.a.createElement("b", null, "Templates"),
                    " yet, why not import one?"),
                react_default.a.createElement(clockface_dist["Button"], { size: clockface_dist["ComponentSize"].Medium, text: "Go to Templates Settings", icon: clockface_dist["IconFont"].CogThick, onClick: this.handleButtonClick }))));
    }
}
const TemplateBrowserEmpty_mstp = (state) => ({
    org: Object(selectors["a" /* getOrg */])(state),
});
/* harmony default export */ var createFromTemplateOverlay_TemplateBrowserEmpty = (Object(es["b" /* connect */])(TemplateBrowserEmpty_mstp, null)(Object(react_router_es["g" /* withRouter */])(TemplateBrowserEmpty_TemplateBrowserEmpty)));

// EXTERNAL MODULE: ./src/templates/constants/defaultTemplates.ts
var defaultTemplates = __webpack_require__(165);

// CONCATENATED MODULE: ./src/resources/selectors/getAll.ts
const getAll = (state, resource) => {
    const { resources } = state;
    const allIDs = resources[resource].allIDs;
    const byID = resources[resource].byID;
    return allIDs.map(id => byID[id]);
};

// CONCATENATED MODULE: ./src/templates/components/createFromTemplateOverlay/CreateFromTemplateOverlay.tsx













class CreateFromTemplateOverlay_DashboardImportFromTemplateOverlay extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleSelectTemplate = async (selectedTemplateSummary) => {
            const { id } = selectedTemplateSummary;
            let selectedTemplate;
            if (!id.includes('influxdb-template')) {
                selectedTemplate = await Object(templates_actions_thunks["j" /* getTemplateByID */])(id);
            }
            else {
                selectedTemplate = selectedTemplateSummary;
            }
            this.setState({
                selectedTemplateSummary,
                selectedTemplate,
                variables: this.getVariablesForTemplate(selectedTemplate),
                cells: this.getCellsForTemplate(selectedTemplate),
            });
        };
        this.onDismiss = () => {
            const { router } = this.props;
            router.goBack();
        };
        this.onSubmit = () => {
            const { createDashboardFromTemplate } = this.props;
            const dashboardTemplate = this.state.selectedTemplate;
            createDashboardFromTemplate(dashboardTemplate);
            this.onDismiss();
        };
        this.state = {
            selectedTemplateSummary: null,
            selectedTemplate: null,
            variables: [],
            cells: [],
        };
    }
    render() {
        return (react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Templates] },
            react_default.a.createElement(clockface_dist["Overlay"], { visible: true },
                react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 900 },
                    react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Create Dashboard from a Template", onDismiss: this.onDismiss }),
                    react_default.a.createElement(clockface_dist["Overlay"].Body, null, this.overlayBody),
                    react_default.a.createElement(clockface_dist["Overlay"].Footer, null,
                        react_default.a.createElement(clockface_dist["Button"], { text: "Cancel", onClick: this.onDismiss, key: "cancel-button" }),
                        react_default.a.createElement(clockface_dist["Button"], { text: "Create Dashboard", onClick: this.onSubmit, key: "submit-button", testID: "create-dashboard-button", color: clockface_dist["ComponentColor"].Success, status: this.submitStatus }))))));
    }
    get overlayBody() {
        const { selectedTemplateSummary, cells, variables, selectedTemplate, } = this.state;
        const { templates } = this.props;
        if (!templates.length) {
            return react_default.a.createElement(createFromTemplateOverlay_TemplateBrowserEmpty, null);
        }
        return (react_default.a.createElement(createFromTemplateOverlay_TemplateBrowser, { templates: templates, cells: cells, variables: variables, selectedTemplate: selectedTemplate, selectedTemplateSummary: selectedTemplateSummary, onSelectTemplate: this.handleSelectTemplate }));
    }
    get submitStatus() {
        const { selectedTemplate } = this.state;
        return selectedTemplate ? clockface_dist["ComponentStatus"].Default : clockface_dist["ComponentStatus"].Disabled;
    }
    getVariablesForTemplate(template) {
        const variables = [];
        const included = template.content.included;
        included.forEach(data => {
            if (data.type === types["TemplateType"].Variable) {
                variables.push(data.attributes.name);
            }
        });
        return variables;
    }
    getCellsForTemplate(template) {
        const cells = [];
        const included = template.content.included;
        included.forEach(data => {
            if (data.type === types["TemplateType"].View) {
                cells.push(data.attributes.name);
            }
        });
        return cells;
    }
}
const CreateFromTemplateOverlay_mstp = (state) => {
    const { resources: { templates: { status }, }, } = state;
    const items = getAll(state, types["ResourceType"].Templates);
    const filteredTemplates = items.filter(t => !t.meta.type || t.meta.type === types["TemplateType"].Dashboard);
    const templates = Object(lodash["sortBy"])(filteredTemplates, item => item.meta.name.toLocaleLowerCase());
    return {
        templates: [...templates, ...defaultTemplates["a" /* influxdbTemplateList */]],
        templateStatus: status,
    };
};
const CreateFromTemplateOverlay_mdtp = {
    createDashboardFromTemplate: dashboards_actions_thunks["e" /* createDashboardFromTemplate */],
};
/* harmony default export */ var CreateFromTemplateOverlay = (Object(es["b" /* connect */])(CreateFromTemplateOverlay_mstp, CreateFromTemplateOverlay_mdtp)(Object(react_router_es["g" /* withRouter */])(CreateFromTemplateOverlay_DashboardImportFromTemplateOverlay)));

// EXTERNAL MODULE: ./src/variables/actions/thunks.ts
var variables_actions_thunks = __webpack_require__(127);

// EXTERNAL MODULE: ./node_modules/papaparse/papaparse.min.js
var papaparse_min = __webpack_require__(309);
var papaparse_min_default = /*#__PURE__*/__webpack_require__.n(papaparse_min);

// CONCATENATED MODULE: ./src/variables/utils/mapBuilder.ts


const csvToMap = (csv) => {
    let errors = [];
    const trimmed = lodash_default.a.trimEnd(csv, '\n');
    const parsedTVS = papaparse_min_default.a.parse(trimmed);
    const templateValuesData = lodash_default.a.get(parsedTVS, 'data', [[]]);
    if (templateValuesData.length === 0) {
        return { values: {}, errors };
    }
    const keys = new Set();
    const values = {};
    for (const arr of templateValuesData) {
        if (arr.length === 2 || (arr.length === 3 && arr[2] === '')) {
            const key = trimAndRemoveQuotes(arr[0]);
            const value = trimAndRemoveQuotes(arr[1]);
            if (!keys.has(key) && key !== '') {
                values[key] = value;
                keys.add(key);
            }
        }
        else {
            errors = [...errors, arr[0]];
        }
    }
    return { values, errors };
};
const trimAndRemoveQuotes = (elt) => {
    const trimmed = elt.trim();
    const dequoted = trimmed.replace(/(^")|("$)/g, '');
    return dequoted;
};
const mapToCSV = (values) => Object.entries(values)
    .map(([key, value]) => `${key},"${value}"`)
    .join('\n');

// CONCATENATED MODULE: ./src/shared/utils/pluralize.ts
const pluralize = (collection) => Object.keys(collection).length === 1 ? '' : 's';

// CONCATENATED MODULE: ./src/variables/components/MapVariableBuilder.tsx










let MapVariableBuilder_MapVariableBuilder = class MapVariableBuilder extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            templateValuesString: mapToCSV(this.props.values),
        };
        this.handleBlur = () => {
            const { onChange } = this.props;
            const { templateValuesString } = this.state;
            const update = this.constructValuesFromString(templateValuesString);
            onChange(update);
        };
        this.handleChange = (e) => {
            const templateValuesString = e.target.value;
            this.setState({ templateValuesString });
        };
    }
    render() {
        const { onSelectDefault } = this.props;
        const { templateValuesString } = this.state;
        const { entries } = this;
        return (react_default.a.createElement(clockface_dist["Form"].Element, { label: "Comma Separated Values" },
            react_default.a.createElement(clockface_dist["Grid"].Row, null,
                react_default.a.createElement(clockface_dist["Grid"].Column, null,
                    react_default.a.createElement(clockface_dist["TextArea"], { value: templateValuesString, onChange: this.handleChange, onBlur: this.handleBlur }))),
            react_default.a.createElement(clockface_dist["Grid"].Row, null,
                react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Six },
                    react_default.a.createElement("p", null,
                        "Mapping Contains ",
                        react_default.a.createElement("strong", null, entries.length),
                        " key-value pair",
                        pluralize(entries))),
                react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Six },
                    react_default.a.createElement(clockface_dist["Form"].Element, { label: "Select A Default" },
                        react_default.a.createElement(clockface_dist["Dropdown"], { button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { active: active, onClick: onClick }, this.defaultID)), menu: onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse }, entries.map(v => (react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: v.key, id: v.key, value: v.key, onClick: onSelectDefault, selected: v.key === this.defaultID },
                                react_default.a.createElement("strong", null, v.key),
                                ' ',
                                react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].CaretRight }),
                                " ",
                                v.value))))) }))))));
    }
    get defaultID() {
        const { selected } = this.props;
        const { entries } = this;
        const firstEntry = lodash_default.a.get(entries, '0.key', 'Enter values above');
        return lodash_default.a.get(selected, '0', firstEntry);
    }
    get entries() {
        const { values } = this.props;
        if (!values) {
            return [];
        }
        return Object.entries(values).map(([key, value]) => ({
            key,
            value,
        }));
    }
    constructValuesFromString(templateValuesString) {
        const { notify } = this.props;
        const { errors, values } = csvToMap(templateValuesString);
        if (errors.length > 0) {
            notify(Object(copy_notifications["Fb" /* invalidMapType */])());
        }
        return { values, errors };
    }
};
MapVariableBuilder_MapVariableBuilder = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], MapVariableBuilder_MapVariableBuilder);
const MapVariableBuilder_mdtp = {
    notify: actions_notifications["c" /* notify */],
};
/* harmony default export */ var components_MapVariableBuilder = (Object(es["b" /* connect */])(null, MapVariableBuilder_mdtp)(MapVariableBuilder_MapVariableBuilder));

// CONCATENATED MODULE: ./src/variables/components/CSVVariableBuilder.tsx








let CSVVariableBuilder_CSVTemplateBuilder = class CSVTemplateBuilder extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            csv: this.props.values.map(value => `"${value}"`).join(',\n '),
        };
        this.handleBlur = () => {
            const { onChange } = this.props;
            const { csv } = this.state;
            const update = this.getUniqueValuesFromCSV(csv);
            onChange(update);
        };
        this.handleChange = (e) => {
            const csv = e.target.value;
            this.setState({ csv });
        };
    }
    render() {
        const { onSelectDefault, values } = this.props;
        const { csv } = this.state;
        return (react_default.a.createElement(clockface_dist["Form"].Element, { label: "Comma Separated Values" },
            react_default.a.createElement(clockface_dist["Grid"].Row, null,
                react_default.a.createElement(clockface_dist["Grid"].Column, null,
                    react_default.a.createElement(clockface_dist["TextArea"], { value: csv, onChange: this.handleChange, onBlur: this.handleBlur }))),
            react_default.a.createElement(clockface_dist["Grid"].Row, null,
                react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Six },
                    react_default.a.createElement("p", null,
                        "CSV contains ",
                        react_default.a.createElement("strong", null, values.length),
                        " value",
                        pluralize(values))),
                react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Six },
                    react_default.a.createElement(clockface_dist["Form"].Element, { label: "Select A Default" },
                        react_default.a.createElement(clockface_dist["SelectDropdown"], { options: values, selectedOption: this.defaultID, onSelect: onSelectDefault }))))));
    }
    get defaultID() {
        const { selected, values } = this.props;
        const firstEntry = lodash_default.a.get(values, '0', 'Enter values above');
        return lodash_default.a.get(selected, '0', firstEntry);
    }
    getUniqueValuesFromCSV(csv) {
        const parsedTVS = papaparse_min_default.a.parse(csv);
        const templateValuesData = lodash_default.a.get(parsedTVS, 'data', [[]]);
        const valueSet = new Set();
        for (const row of templateValuesData) {
            for (const value of row) {
                const trimmedValue = trimAndRemoveQuotes(value);
                if (trimmedValue !== '') {
                    valueSet.add(trimmedValue);
                }
            }
        }
        return [...valueSet];
    }
};
CSVVariableBuilder_CSVTemplateBuilder = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], CSVVariableBuilder_CSVTemplateBuilder);
/* harmony default export */ var CSVVariableBuilder = (CSVVariableBuilder_CSVTemplateBuilder);

// CONCATENATED MODULE: ./src/variables/components/VariableArgumentsEditor.tsx





class VariableArgumentsEditor_VariableArgumentsEditor extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleChangeCSV = (values) => {
            const { onChange } = this.props;
            const updatedArgs = { type: 'constant', values };
            const isValid = values.length > 0;
            onChange({ args: updatedArgs, isValid });
        };
        this.handleChangeQuery = (query) => {
            const { onChange } = this.props;
            const values = { language: 'flux', query };
            const updatedArgs = { type: 'query', values };
            const isValid = !query.match(/^\s*$/);
            onChange({ args: updatedArgs, isValid });
        };
        this.handleChangeMap = (update) => {
            const { onChange } = this.props;
            const updatedArgs = { type: 'map', values: update.values };
            const isValid = update.errors.length === 0 && Object.keys(update.values).length > 0;
            onChange({ args: updatedArgs, isValid });
        };
    }
    render() {
        const { args, onSelectMapDefault, selected } = this.props;
        switch (args.type) {
            case 'query':
                return (react_default.a.createElement(clockface_dist["Form"].Element, { label: "Script" },
                    react_default.a.createElement(clockface_dist["Grid"].Column, null,
                        react_default.a.createElement("div", { className: "overlay-flux-editor" },
                            react_default.a.createElement(components_FluxMonacoEditor, { script: args.values.query, onChangeScript: this.handleChangeQuery })))));
            case 'map':
                return (react_default.a.createElement(components_MapVariableBuilder, { onChange: this.handleChangeMap, values: args.values, onSelectDefault: onSelectMapDefault, selected: selected }));
            case 'constant':
                return (react_default.a.createElement(CSVVariableBuilder, { onChange: this.handleChangeCSV, values: args.values, onSelectDefault: onSelectMapDefault, selected: selected }));
        }
    }
}
/* harmony default export */ var components_VariableArgumentsEditor = (VariableArgumentsEditor_VariableArgumentsEditor);

// EXTERNAL MODULE: ./src/variables/constants/index.ts
var variables_constants = __webpack_require__(149);

// CONCATENATED MODULE: ./src/variables/utils/validation.ts

const reservedVarNames = [variables_constants["c" /* TIME_RANGE_START */], variables_constants["d" /* TIME_RANGE_STOP */], variables_constants["e" /* WINDOW_PERIOD */]];
const validateVariableName = (varName, variables) => {
    if ((varName || '').match(/^\s*$/)) {
        return { error: 'Variable name cannot be empty' };
    }
    const lowerName = varName.toLocaleLowerCase();
    const reservedMatch = reservedVarNames.find(r => r.toLocaleLowerCase() === lowerName);
    if (!!reservedMatch) {
        return {
            error: `Variable name is reserved: ${reservedMatch}`,
        };
    }
    const matchingName = variables.find(v => v.name.toLocaleLowerCase() === lowerName);
    if (!!matchingName) {
        return {
            error: `Variable name must be unique`,
        };
    }
    return { error: null };
};

// CONCATENATED MODULE: ./src/variables/components/VariableForm.tsx






class VariableForm_VariableForm extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleSubmit = () => {
            const { name, onCreateVariable, onHideOverlay } = this.props;
            const { selected } = this.state;
            onCreateVariable({
                selected,
                name,
                arguments: this.activeVariable,
            });
            onHideOverlay();
        };
        this.handleChangeType = (selectedType) => {
            const { variableType, onTypeUpdate } = this.props;
            const { isNameValid } = this.state;
            const defaults = { selected: null, hasValidArgs: false, isNameValid };
            if (variableType === selectedType) {
                return;
            }
            this.setState(defaults);
            onTypeUpdate(selectedType);
        };
        this.handleSelectMapDefault = (selected) => {
            this.setState({ selected: [selected] });
        };
        this.handleChangeArgs = ({ args, isValid, }) => {
            const { onQueryUpdate, onMapUpdate, onConstantUpdate } = this.props;
            switch (args.type) {
                case 'query':
                    onQueryUpdate(args);
                    break;
                case 'map':
                    onMapUpdate(args);
                    break;
                case 'constant':
                    onConstantUpdate(args);
                    break;
            }
            this.setState({ hasValidArgs: isValid });
        };
        this.handleNameValidation = (name) => {
            const { variables } = this.props;
            const { error } = validateVariableName(name, variables);
            this.setState({ isNameValid: !error });
            return error;
        };
        this.handleChangeInput = (e) => {
            const { value } = e.target;
            this.props.onNameUpdate(value);
        };
        this.state = {
            isNameValid: false,
            hasValidArgs: false,
            firstRun: true,
            selected: null,
        };
    }
    render() {
        const { name, variableType, onHideOverlay } = this.props;
        const { selected } = this.state;
        return (react_default.a.createElement(clockface_dist["Form"], { onSubmit: this.handleSubmit, testID: "variable-form--root" },
            react_default.a.createElement(clockface_dist["Grid"], null,
                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Six },
                        react_default.a.createElement("div", { className: "overlay-flux-editor--spacing" },
                            react_default.a.createElement(clockface_dist["Form"].ValidationElement, { label: "Name", value: name, required: true, validationFunc: this.handleNameValidation }, status => (react_default.a.createElement(clockface_dist["Input"], { placeholder: "Give your variable a name", name: "name", autoFocus: true, value: name, onChange: this.handleChangeInput, status: status }))))),
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Six },
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Type", required: true },
                            react_default.a.createElement(clockface_dist["Dropdown"], { button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { active: active, onClick: onClick, testID: "variable-form--dropdown-button" }, this.typeDropdownLabel)), menu: onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse }, variables_constants["f" /* variableItemTypes */].map(v => (react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: v.type, id: v.type, testID: `variable-form--dropdown-${v.type}`, value: v.type, onClick: this.handleChangeType, selected: v.type === variableType }, v.label))))) })))),
                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                    react_default.a.createElement(clockface_dist["Grid"].Column, null,
                        react_default.a.createElement(components_VariableArgumentsEditor, { onChange: this.handleChangeArgs, onSelectMapDefault: this.handleSelectMapDefault, selected: selected, args: this.activeVariable }))),
                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                    react_default.a.createElement(clockface_dist["Grid"].Column, null,
                        react_default.a.createElement(clockface_dist["Form"].Footer, null,
                            react_default.a.createElement(clockface_dist["Button"], { text: "Cancel", color: clockface_dist["ComponentColor"].Danger, onClick: onHideOverlay }),
                            react_default.a.createElement(clockface_dist["Button"], { text: "Create", type: clockface_dist["ButtonType"].Submit, color: clockface_dist["ComponentColor"].Primary, status: this.isFormValid
                                    ? clockface_dist["ComponentStatus"].Default
                                    : clockface_dist["ComponentStatus"].Disabled })))))));
    }
    get typeDropdownLabel() {
        const { variableType } = this.props;
        return variables_constants["f" /* variableItemTypes */].find(variable => variable.type === variableType)
            .label;
    }
    get isFormValid() {
        const { isNameValid } = this.state;
        return this.validArgs && isNameValid;
    }
    get activeVariable() {
        const { initialScript, variableType, query, map, constant } = this.props;
        const { firstRun } = this.state;
        switch (variableType) {
            case 'query': {
                const _query = query;
                if (firstRun && !_query.values.query.length) {
                    _query.values.query = initialScript || '';
                }
                return _query;
            }
            case 'map':
                return map;
            case 'constant':
                return constant;
        }
        return query;
    }
    get validArgs() {
        const { variableType, query, map, constant } = this.props;
        switch (variableType) {
            case 'query':
                return !!query.values.query;
            case 'constant':
                return constant.values.length !== 0;
            case 'map':
                return Object.keys(map.values).length !== 0;
            default:
                return false;
        }
    }
}

// CONCATENATED MODULE: ./src/variables/components/VariableFormContext.tsx






class VariableFormContext_VariableFormContext extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleHideOverlay = () => {
            const { onHideOverlay, onEditorClose } = this.props;
            onEditorClose();
            onHideOverlay();
        };
    }
    render() {
        const props = Object.assign(Object.assign({}, this.props), { onHideOverlay: this.handleHideOverlay });
        return react_default.a.createElement(VariableForm_VariableForm, Object.assign({}, props));
    }
}
const VariableFormContext_mstp = (state) => {
    const variables = Object(variables_selectors["f" /* extractVariablesList */])(state), name = Object(variables_selectors["c" /* extractVariableEditorName */])(state), variableType = Object(variables_selectors["e" /* extractVariableEditorType */])(state), query = Object(variables_selectors["d" /* extractVariableEditorQuery */])(state), map = Object(variables_selectors["b" /* extractVariableEditorMap */])(state), constant = Object(variables_selectors["a" /* extractVariableEditorConstant */])(state);
    return {
        variables,
        name,
        variableType,
        query,
        map,
        constant,
    };
};
const VariableFormContext_mdtp = {
    onNameUpdate: variables_actions_creators["v" /* updateName */],
    onTypeUpdate: variables_actions_creators["x" /* updateType */],
    onQueryUpdate: variables_actions_creators["w" /* updateQuery */],
    onMapUpdate: variables_actions_creators["u" /* updateMap */],
    onConstantUpdate: variables_actions_creators["t" /* updateConstant */],
    onEditorClose: variables_actions_creators["m" /* clearEditor */],
    onCreateVariable: variables_actions_thunks["c" /* createVariable */],
};

/* harmony default export */ var components_VariableFormContext = (Object(es["b" /* connect */])(VariableFormContext_mstp, VariableFormContext_mdtp)(VariableFormContext_VariableFormContext));

// CONCATENATED MODULE: ./src/variables/components/CreateVariableOverlay.tsx






class CreateVariableOverlay_CreateVariableOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleHideOverlay = () => {
            const { router, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/settings/variables`);
        };
    }
    render() {
        return (react_default.a.createElement(clockface_dist["Overlay"], { visible: true },
            react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 1000 },
                react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Create Variable", onDismiss: this.handleHideOverlay }),
                react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                    react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Variables] },
                        react_default.a.createElement(components_VariableFormContext, { onHideOverlay: this.handleHideOverlay }))))));
    }
}

/* harmony default export */ var components_CreateVariableOverlay = (Object(react_router_es["g" /* withRouter */])(CreateVariableOverlay_CreateVariableOverlay));

// EXTERNAL MODULE: ./node_modules/calculate-size/lib/index.js
var calculate_size_lib = __webpack_require__(1519);
var calculate_size_lib_default = /*#__PURE__*/__webpack_require__.n(calculate_size_lib);

// CONCATENATED MODULE: ./src/shared/components/threesizer/DivisionHeader.tsx

class DivisionHeader_DivisionHeader extends react["PureComponent"] {
    render() {
        return (react_default.a.createElement("div", { className: "threesizer--header" },
            this.renderName,
            react_default.a.createElement("div", { className: "threesizer--header-controls" }, this.props.buttons.map(b => b))));
    }
    get renderName() {
        const { name } = this.props;
        if (!name) {
            return;
        }
        return react_default.a.createElement("div", { className: "threesizer--header-name" }, name);
    }
}
/* harmony default export */ var threesizer_DivisionHeader = (DivisionHeader_DivisionHeader);

// CONCATENATED MODULE: ./src/shared/components/threesizer/Division.tsx





const NOOP = () => { };
class Division_Division extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.collapseThreshold = 0;
        this.divisionPixels = 0;
        this.drag = e => {
            const { draggable, id } = this.props;
            if (!draggable) {
                return NOOP;
            }
            this.props.onHandleStartDrag(id, e);
        };
        this.handleDoubleClick = () => {
            const { onDoubleClick, id } = this.props;
            onDoubleClick(id);
        };
        this.handleMinimize = () => {
            const { id, onMinimize } = this.props;
            onMinimize(id);
        };
        this.handleMaximize = () => {
            const { id, onMaximize } = this.props;
            onMaximize(id);
        };
        this.calcDivisionPixels = () => {
            const { orientation } = this.props;
            const { clientWidth, clientHeight } = this.divisionRef.current;
            let divisionPixels = clientWidth;
            if (orientation === constants["t" /* HANDLE_HORIZONTAL */]) {
                divisionPixels = clientHeight;
            }
            this.divisionPixels = divisionPixels;
        };
        this.divisionRef = react_default.a.createRef();
    }
    componentDidMount() {
        const { name } = this.props;
        this.calcDivisionPixels();
        if (!name) {
            return 0;
        }
        const { width } = calculate_size_lib_default()(name, {
            font: '"Roboto", Helvetica, Arial, Tahoma, Verdana, sans-serif',
            fontSize: '16px',
            fontWeight: '500',
        });
        const NAME_OFFSET = 96;
        this.collapseThreshold = width + NAME_OFFSET;
    }
    componentDidUpdate() {
        this.calcDivisionPixels();
    }
    render() {
        const { render } = this.props;
        return (react_default.a.createElement("div", { className: this.containerClass, style: this.containerStyle, ref: this.divisionRef },
            this.renderDragHandle,
            react_default.a.createElement("div", { className: this.contentsClass, style: this.contentStyle },
                this.renderHeader,
                react_default.a.createElement("div", { className: "threesizer--body" }, render(this.visibility, this.divisionPixels)))));
    }
    get renderHeader() {
        const { name, headerButtons, orientation } = this.props;
        if (!name) {
            return null;
        }
        if (orientation === constants["w" /* HANDLE_VERTICAL */]) {
            return (react_default.a.createElement(threesizer_DivisionHeader, { buttons: headerButtons, onMinimize: this.handleMinimize, onMaximize: this.handleMaximize }));
        }
    }
    get visibility() {
        if (this.props.size === 0) {
            return 'hidden';
        }
        return 'visible';
    }
    get title() {
        return 'Drag to resize.\nDouble click to expand.';
    }
    get contentStyle() {
        if (this.props.orientation === constants["t" /* HANDLE_HORIZONTAL */]) {
            return {
                height: `calc(100% - ${this.handlePixels}px)`,
            };
        }
        return {
            width: `calc(100% - ${this.handlePixels}px)`,
        };
    }
    get renderDragHandle() {
        const { draggable } = this.props;
        return (react_default.a.createElement("div", { style: this.handleStyle, title: this.title, draggable: draggable, onDragStart: this.drag, className: this.handleClass, onDoubleClick: this.handleDoubleClick }, this.renderDragHandleContents));
    }
    get renderDragHandleContents() {
        const { name, handlePixels, orientation, headerButtons } = this.props;
        if (!name) {
            return;
        }
        if (orientation === constants["t" /* HANDLE_HORIZONTAL */] &&
            handlePixels >= constants["B" /* MIN_HANDLE_PIXELS */]) {
            return (react_default.a.createElement(threesizer_DivisionHeader, { buttons: headerButtons, onMinimize: this.handleMinimize, onMaximize: this.handleMaximize, name: name }));
        }
        if (handlePixels >= constants["B" /* MIN_HANDLE_PIXELS */]) {
            return react_default.a.createElement("div", { className: this.titleClass }, name);
        }
    }
    get handleStyle() {
        const { handleDisplay: display, orientation, handlePixels } = this.props;
        if (orientation === constants["t" /* HANDLE_HORIZONTAL */]) {
            return {
                display,
                height: `${handlePixels}px`,
            };
        }
        return {
            display,
            width: `${handlePixels}px`,
        };
    }
    get containerStyle() {
        const { style, orientation } = this.props;
        if (orientation === constants["t" /* HANDLE_HORIZONTAL */]) {
            return Object.assign(Object.assign({}, style), { height: this.size });
        }
        return Object.assign(Object.assign({}, style), { width: this.size });
    }
    get size() {
        const { size, offset } = this.props;
        return `calc((100% - ${offset}px) * ${size} + ${this.handlePixels}px)`;
    }
    get handlePixels() {
        if (this.props.handleDisplay === 'none') {
            return 0;
        }
        return this.props.handlePixels;
    }
    get containerClass() {
        const { orientation } = this.props;
        const isAnyHandleBeingDragged = !!this.props.activeHandleID;
        return classnames_default()('threesizer--division', {
            dragging: isAnyHandleBeingDragged,
            vertical: orientation === constants["w" /* HANDLE_VERTICAL */],
            horizontal: orientation === constants["t" /* HANDLE_HORIZONTAL */],
        });
    }
    get handleClass() {
        const { draggable, orientation, name } = this.props;
        const collapsed = orientation === constants["w" /* HANDLE_VERTICAL */] && this.isTitleObscured;
        return classnames_default()('threesizer--handle', {
            'threesizer--collapsed': collapsed,
            disabled: !draggable,
            dragging: this.isDragging,
            vertical: orientation === constants["w" /* HANDLE_VERTICAL */],
            horizontal: orientation === constants["t" /* HANDLE_HORIZONTAL */],
            named: name,
        });
    }
    get contentsClass() {
        const { headerOrientation, size } = this.props;
        return classnames_default()(`threesizer--contents ${headerOrientation}`, {
            'no-shadows': !size,
        });
    }
    get titleClass() {
        const { orientation } = this.props;
        const collapsed = orientation === constants["w" /* HANDLE_VERTICAL */] && this.isTitleObscured;
        return classnames_default()('threesizer--title', {
            'threesizer--collapsed': collapsed,
            vertical: orientation === constants["w" /* HANDLE_VERTICAL */],
            horizontal: orientation === constants["t" /* HANDLE_HORIZONTAL */],
        });
    }
    get isTitleObscured() {
        if (this.props.size === 0) {
            return true;
        }
        if (!this.divisionRef.current || this.props.size >= 0.33) {
            return false;
        }
        const { width } = this.divisionRef.current.getBoundingClientRect();
        return width <= this.collapseThreshold;
    }
    get isDragging() {
        const { id, activeHandleID } = this.props;
        return id === activeHandleID;
    }
}
Division_Division.defaultProps = {
    name: '',
    handleDisplay: 'visible',
    style: {},
    headerButtons: [],
};
/* harmony default export */ var threesizer_Division = (Division_Division);

// CONCATENATED MODULE: ./src/shared/components/threesizer/Threesizer.tsx








const initialDragEvent = {
    percentX: 0,
    percentY: 0,
    mouseX: null,
    mouseY: null,
};
let Threesizer_Threesizer = class Threesizer extends react["Component"] {
    constructor(props) {
        super(props);
        this.percentChangeX = 0;
        this.percentChangeY = 0;
        this.handleDoubleClick = (id) => {
            const clickedDiv = this.state.divisions.find(d => d.id === id);
            if (!clickedDiv) {
                return;
            }
            const isMaxed = clickedDiv.size === 1;
            if (isMaxed) {
                return this.equalize();
            }
            const divisions = this.state.divisions.map(d => {
                if (d.id !== id) {
                    return Object.assign(Object.assign({}, d), { size: 0 });
                }
                return Object.assign(Object.assign({}, d), { size: 1 });
            });
            this.setState({ divisions });
        };
        this.handleMaximize = (id) => {
            const maxDiv = this.state.divisions.find(d => d.id === id);
            if (!maxDiv) {
                return;
            }
            const divisions = this.state.divisions.map(d => {
                if (d.id !== id) {
                    return Object.assign(Object.assign({}, d), { size: 0 });
                }
                return Object.assign(Object.assign({}, d), { size: 1 });
            });
            this.setState({ divisions });
        };
        this.handleMinimize = (id) => {
            const minDiv = this.state.divisions.find(d => d.id === id);
            const numDivisions = this.state.divisions.length;
            if (!minDiv) {
                return;
            }
            let size;
            if (numDivisions <= 1) {
                size = 1;
            }
            else {
                size = 1 / (this.state.divisions.length - 1);
            }
            const divisions = this.state.divisions.map(d => {
                if (d.id !== id) {
                    return Object.assign(Object.assign({}, d), { size });
                }
                return Object.assign(Object.assign({}, d), { size: 0 });
            });
            this.setState({ divisions });
        };
        this.equalize = () => {
            const denominator = this.state.divisions.length;
            const divisions = this.state.divisions.map(d => {
                return Object.assign(Object.assign({}, d), { size: 1 / denominator });
            });
            this.setState({ divisions });
        };
        this.handleStartDrag = (activeHandleID, e) => {
            const dragEvent = this.mousePosWithinContainer(e);
            this.setState({ activeHandleID, dragEvent });
        };
        this.handleStopDrag = () => {
            this.setState({ activeHandleID: '', dragEvent: initialDragEvent });
        };
        this.mousePosWithinContainer = (e) => {
            const { pageY, pageX } = e;
            const { top, left, width, height } = this.containerRef.getBoundingClientRect();
            const mouseX = pageX - left;
            const mouseY = pageY - top;
            const percentX = mouseX / width;
            const percentY = mouseY / height;
            return {
                mouseX,
                mouseY,
                percentX,
                percentY,
            };
        };
        this.pixelsToPercentX = (startValue, endValue) => {
            if (!startValue || !endValue) {
                return 0;
            }
            const delta = Math.abs(startValue - endValue);
            const { width } = this.containerRef.getBoundingClientRect();
            return delta / width;
        };
        this.pixelsToPercentY = (startValue, endValue) => {
            if (!startValue || !endValue) {
                return 0;
            }
            const delta = startValue - endValue;
            const { height } = this.containerRef.getBoundingClientRect();
            return Math.abs(delta / height);
        };
        this.handleDrag = (e) => {
            const { activeHandleID } = this.state;
            if (!activeHandleID) {
                return;
            }
            const dragEvent = this.mousePosWithinContainer(e);
            this.setState({ dragEvent });
        };
        this.up = activePosition => () => {
            const divisions = this.state.divisions.map((d, i) => {
                if (!activePosition) {
                    return d;
                }
                const first = i === 0;
                const before = i === activePosition - 1;
                const current = i === activePosition;
                if (first && !before) {
                    const second = this.state.divisions[1];
                    if (second && second.size === 0) {
                        return Object.assign(Object.assign({}, d), { size: this.shorter(d.size) });
                    }
                    return Object.assign({}, d);
                }
                if (before) {
                    return Object.assign(Object.assign({}, d), { size: this.shorter(d.size) });
                }
                if (current) {
                    return Object.assign(Object.assign({}, d), { size: this.taller(d.size) });
                }
                return Object.assign({}, d);
            });
            this.setState({ divisions });
        };
        this.left = activePosition => () => {
            const divisions = this.state.divisions.map((d, i) => {
                if (!activePosition) {
                    return d;
                }
                const first = i === 0;
                const before = i === activePosition - 1;
                const active = i === activePosition;
                if (first && !before) {
                    const second = this.state.divisions[1];
                    if (second && second.size === 0) {
                        return Object.assign(Object.assign({}, d), { size: this.thinner(d.size) });
                    }
                    return Object.assign({}, d);
                }
                if (before) {
                    return Object.assign(Object.assign({}, d), { size: this.thinner(d.size) });
                }
                if (active) {
                    return Object.assign(Object.assign({}, d), { size: this.fatter(d.size) });
                }
                return Object.assign({}, d);
            });
            this.setState({ divisions });
        };
        this.right = activePosition => () => {
            const divisions = this.state.divisions.map((d, i, divs) => {
                const before = i === activePosition - 1;
                const active = i === activePosition;
                const after = i === activePosition + 1;
                if (before) {
                    return Object.assign(Object.assign({}, d), { size: this.fatter(d.size) });
                }
                if (active) {
                    return Object.assign(Object.assign({}, d), { size: this.thinner(d.size) });
                }
                if (after) {
                    const leftIndex = i - 1;
                    const left = lodash_default.a.get(divs, leftIndex, { size: 'none' });
                    if (left && left.size === 0) {
                        return Object.assign(Object.assign({}, d), { size: this.thinner(d.size) });
                    }
                    return Object.assign({}, d);
                }
                return Object.assign({}, d);
            });
            this.setState({ divisions });
        };
        this.down = activePosition => () => {
            const divisions = this.state.divisions.map((d, i, divs) => {
                const before = i === activePosition - 1;
                const current = i === activePosition;
                const after = i === activePosition + 1;
                if (before) {
                    return Object.assign(Object.assign({}, d), { size: this.taller(d.size) });
                }
                if (current) {
                    return Object.assign(Object.assign({}, d), { size: this.shorter(d.size) });
                }
                if (after) {
                    const above = divs[i - 1];
                    if (above && above.size === 0) {
                        return Object.assign(Object.assign({}, d), { size: this.shorter(d.size) });
                    }
                    return Object.assign({}, d);
                }
                return Object.assign({}, d);
            });
            this.setState({ divisions });
        };
        this.taller = (size) => {
            const newSize = size + this.percentChangeY;
            return this.enforceMax(newSize);
        };
        this.fatter = (size) => {
            const newSize = size + this.percentChangeX;
            return this.enforceMax(newSize);
        };
        this.shorter = (size) => {
            const newSize = size - this.percentChangeY;
            return this.enforceMin(newSize);
        };
        this.thinner = (size) => {
            const newSize = size - this.percentChangeX;
            return this.enforceMin(newSize);
        };
        this.enforceMax = (size) => {
            return size > constants["A" /* MAX_SIZE */] ? constants["A" /* MAX_SIZE */] : size;
        };
        this.enforceMin = (size) => {
            return size < constants["C" /* MIN_SIZE */] ? constants["C" /* MIN_SIZE */] : size;
        };
        this.state = {
            activeHandleID: null,
            divisions: this.initialDivisions,
            dragEvent: initialDragEvent,
            dragDirection: '',
        };
    }
    componentDidMount() {
        document.addEventListener('mouseup', this.handleStopDrag);
        document.addEventListener('mouseleave', this.handleStopDrag);
    }
    componentWillUnmount() {
        document.removeEventListener('mouseup', this.handleStopDrag);
        document.removeEventListener('mouseleave', this.handleStopDrag);
    }
    componentDidUpdate(__, prevState) {
        const { dragEvent } = this.state;
        const { orientation } = this.props;
        if (lodash_default.a.isEqual(dragEvent, prevState.dragEvent)) {
            return;
        }
        this.percentChangeX = this.pixelsToPercentX(prevState.dragEvent.mouseX, dragEvent.mouseX);
        this.percentChangeY = this.pixelsToPercentY(prevState.dragEvent.mouseY, dragEvent.mouseY);
        const { percentX, percentY } = dragEvent;
        const { dragEvent: prevDrag } = prevState;
        if (orientation === constants["w" /* HANDLE_VERTICAL */]) {
            const left = percentX < prevDrag.percentX;
            if (left) {
                return this.move.left();
            }
            return this.move.right();
        }
        const up = percentY < prevDrag.percentY;
        if (up) {
            return this.move.up();
        }
        return this.move.down();
    }
    render() {
        const { activeHandleID, divisions } = this.state;
        const { orientation } = this.props;
        return (react_default.a.createElement("div", { className: this.className, onMouseUp: this.handleStopDrag, onMouseMove: this.handleDrag, ref: r => (this.containerRef = r) }, divisions.map((d, i) => {
            const headerOrientation = lodash_default.a.get(d, 'headerOrientation', orientation);
            return (react_default.a.createElement(threesizer_Division, { key: d.id, id: d.id, name: d.name, size: d.size, style: d.style, offset: this.offset, draggable: i > 0, orientation: orientation, handlePixels: d.handlePixels, handleDisplay: d.handleDisplay, activeHandleID: activeHandleID, onMaximize: this.handleMaximize, onMinimize: this.handleMinimize, headerOrientation: headerOrientation, onDoubleClick: this.handleDoubleClick, render: this.props.divisions[i].render, onHandleStartDrag: this.handleStartDrag, headerButtons: this.props.divisions[i].headerButtons }));
        })));
    }
    get offset() {
        const handlesPixelCount = this.state.divisions.reduce((acc, d) => {
            if (d.handleDisplay === constants["u" /* HANDLE_NONE */]) {
                return acc;
            }
            return acc + d.handlePixels;
        }, 0);
        return handlesPixelCount;
    }
    get className() {
        const { orientation, containerClass } = this.props;
        const { activeHandleID } = this.state;
        return classnames_default()(`threesizer ${containerClass}`, {
            dragging: activeHandleID,
            horizontal: orientation === constants["t" /* HANDLE_HORIZONTAL */],
            vertical: orientation === constants["w" /* HANDLE_VERTICAL */],
        });
    }
    get initialDivisions() {
        const { divisions } = this.props;
        const size = 1 / divisions.length;
        return divisions.map(d => (Object.assign(Object.assign({}, d), { id: uuid_default.a.v4(), size: d.size || size, handlePixels: d.handlePixels || constants["v" /* HANDLE_PIXELS */] })));
    }
    get move() {
        const { activeHandleID } = this.state;
        const activePosition = lodash_default.a.findIndex(this.state.divisions, d => d.id === activeHandleID);
        return {
            up: this.up(activePosition),
            down: this.down(activePosition),
            left: this.left(activePosition),
            right: this.right(activePosition),
        };
    }
};
Threesizer_Threesizer.defaultProps = {
    orientation: constants["t" /* HANDLE_HORIZONTAL */],
    containerClass: '',
};
Threesizer_Threesizer = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], Threesizer_Threesizer);
/* harmony default export */ var threesizer_Threesizer = (Threesizer_Threesizer);

// CONCATENATED MODULE: ./src/timeMachine/components/fluxFunctionsToolbar/TransformToolbarFunctions.tsx

const TransformToolbarFunctions = props => {
    const { searchTerm, funcs, children } = props;
    const filteredFunctions = funcs.filter(func => func.name.toLowerCase().includes(searchTerm.toLowerCase()));
    const groupedFunctions = Object(lodash["groupBy"])(filteredFunctions, 'category');
    return children(groupedFunctions);
};
/* harmony default export */ var fluxFunctionsToolbar_TransformToolbarFunctions = (TransformToolbarFunctions);

// CONCATENATED MODULE: ./src/timeMachine/components/fluxFunctionsToolbar/TooltipDescription.tsx

const TooltipDescription = ({ description }) => (react_default.a.createElement("article", { className: "flux-functions-toolbar--description" },
    react_default.a.createElement("div", { className: "flux-functions-toolbar--heading" }, "Description"),
    react_default.a.createElement("span", null, description)));
/* harmony default export */ var fluxFunctionsToolbar_TooltipDescription = (TooltipDescription);

// CONCATENATED MODULE: ./src/timeMachine/components/fluxFunctionsToolbar/TooltipArguments.tsx

class TooltipArguments_TooltipArguments extends react["PureComponent"] {
    render() {
        return (react_default.a.createElement("article", null,
            react_default.a.createElement("div", { className: "flux-functions-toolbar--heading" }, "Arguments"),
            react_default.a.createElement("div", { className: "flux-functions-toolbar--snippet" }, this.arguments)));
    }
    get arguments() {
        const { argsList } = this.props;
        if (argsList.length > 0) {
            return argsList.map(a => {
                return (react_default.a.createElement("div", { className: "flux-functions-toolbar--arguments", key: a.name },
                    react_default.a.createElement("span", null,
                        a.name,
                        ":"),
                    react_default.a.createElement("span", null, a.type),
                    react_default.a.createElement("div", null, a.desc)));
            });
        }
        return react_default.a.createElement("div", { className: "flux-functions-toolbar--arguments" }, "None");
    }
}
/* harmony default export */ var fluxFunctionsToolbar_TooltipArguments = (TooltipArguments_TooltipArguments);

// CONCATENATED MODULE: ./src/timeMachine/components/fluxFunctionsToolbar/TooltipExample.tsx

const TooltipExample = ({ example }) => (react_default.a.createElement("article", null,
    react_default.a.createElement("div", { className: "flux-functions-toolbar--heading" }, "Example"),
    react_default.a.createElement("div", { className: "flux-functions-toolbar--snippet" }, example)));
/* harmony default export */ var fluxFunctionsToolbar_TooltipExample = (TooltipExample);

// CONCATENATED MODULE: ./src/timeMachine/components/fluxFunctionsToolbar/TooltipLink.tsx

const TooltipLink = ({ link }) => (react_default.a.createElement("p", { className: "tooltip--link" },
    "Still have questions? Check out the",
    ' ',
    react_default.a.createElement("a", { target: "_blank", href: link }, "Flux Docs"),
    "."));
/* harmony default export */ var fluxFunctionsToolbar_TooltipLink = (TooltipLink);

// CONCATENATED MODULE: ./src/timeMachine/components/fluxFunctionsToolbar/FunctionTooltipContents.tsx






const MAX_HEIGHT = 400;
const FunctionTooltipContents = ({ func: { desc, args, example, link }, }) => {
    return (react_default.a.createElement(FancyScrollbar["a" /* default */], { autoHeight: true, maxHeight: MAX_HEIGHT, autoHide: false },
        react_default.a.createElement(fluxFunctionsToolbar_TooltipDescription, { description: desc }),
        react_default.a.createElement(fluxFunctionsToolbar_TooltipArguments, { argsList: args }),
        react_default.a.createElement(fluxFunctionsToolbar_TooltipExample, { example: example }),
        react_default.a.createElement(fluxFunctionsToolbar_TooltipLink, { link: link })));
};
/* harmony default export */ var fluxFunctionsToolbar_FunctionTooltipContents = (FunctionTooltipContents);

// CONCATENATED MODULE: ./src/timeMachine/components/fluxFunctionsToolbar/ToolbarFunction.tsx



const defaultProps = {
    testID: 'toolbar-function',
};
const ToolbarFunction = ({ func, onClickFunction, testID }) => {
    const functionRef = Object(react["createRef"])();
    const handleClickFunction = () => {
        onClickFunction(func);
    };
    return (react_default.a.createElement("div", { className: "flux-functions-toolbar--function", ref: functionRef, "data-testid": testID },
        react_default.a.createElement(clockface_dist["Popover"], { appearance: clockface_dist["Appearance"].Outline, position: clockface_dist["PopoverPosition"].ToTheLeft, triggerRef: functionRef, showEvent: clockface_dist["PopoverInteraction"].Hover, hideEvent: clockface_dist["PopoverInteraction"].Hover, distanceFromTrigger: 8, testID: "toolbar-popover", contents: () => react_default.a.createElement(fluxFunctionsToolbar_FunctionTooltipContents, { func: func }) }),
        react_default.a.createElement("dd", { onClick: handleClickFunction, "data-testid": `flux-function ${func.name}` },
            func.name,
            "\u00A0",
            react_default.a.createElement("span", { className: "flux-functions-toolbar--helper" }, "Click to Add"))));
};
ToolbarFunction.defaultProps = defaultProps;
/* harmony default export */ var fluxFunctionsToolbar_ToolbarFunction = (ToolbarFunction);

// CONCATENATED MODULE: ./src/timeMachine/components/fluxFunctionsToolbar/FunctionCategory.tsx


const FunctionCategory = props => {
    const { category, funcs, onClickFunction } = props;
    return (react_default.a.createElement("dl", { className: "flux-functions-toolbar--category" },
        react_default.a.createElement("dt", null, category),
        funcs.map(func => (react_default.a.createElement(fluxFunctionsToolbar_ToolbarFunction, { onClickFunction: onClickFunction, key: func.name, func: func, testID: "toolbar-function" })))));
};
/* harmony default export */ var fluxFunctionsToolbar_FunctionCategory = (FunctionCategory);

// CONCATENATED MODULE: ./src/timeMachine/components/SearchBar.tsx




const DEBOUNCE_MS = 100;
class SearchBar_SearchBar extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleSearch = () => {
            this.props.onSearch(this.state.searchTerm);
        };
        this.handleChange = (e) => {
            this.setState({ searchTerm: e.target.value }, this.handleSearch);
        };
        this.state = {
            searchTerm: '',
        };
        this.handleSearch = Object(lodash["debounce"])(this.handleSearch, DEBOUNCE_MS);
    }
    render() {
        return (react_default.a.createElement("div", { className: "search-bar" },
            react_default.a.createElement(clockface_dist["Input"], { type: clockface_dist["InputType"].Text, icon: clockface_dist["IconFont"].Search, placeholder: `Filter ${this.props.resourceName}...`, onChange: this.handleChange, value: this.state.searchTerm })));
    }
}
/* harmony default export */ var components_SearchBar = (SearchBar_SearchBar);

// CONCATENATED MODULE: ./src/shared/constants/fluxFunctions.ts
const FROM = {
    name: 'from',
    args: [
        {
            name: 'bucket',
            desc: 'The name of the bucket to query.',
            type: 'String',
        },
        {
            name: 'bucketID',
            desc: 'The string-encoded ID of the bucket to query.',
            type: 'String',
        },
    ],
    package: '',
    desc: 'Used to retrieve data from an InfluxDB data source. It returns a stream of tables from the specified bucket. Each unique series is contained within its own table. Each record in the table represents a single point in the series.',
    example: 'from(bucket: "telegraf")',
    category: 'Inputs',
    link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/inputs/from/',
};
const RANGE = {
    name: 'range',
    args: [
        {
            name: 'start',
            desc: 'The earliest time to include in results.',
            type: 'Duration',
        },
        {
            name: 'stop',
            desc: 'The latest time to include in results. Defaults to `now()`.',
            type: 'Duration',
        },
    ],
    package: '',
    desc: "Filters records based on time bounds. Each input table's records are filtered to contain only records that exist within the time bounds. Each input table's group key value is modified to fit within the time bounds. Tables where all records exists outside the time bounds are filtered entirely.",
    example: 'range(start: -15m, stop: now())',
    category: 'Transformations',
    link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/range/',
};
const MEAN = {
    name: 'mean',
    args: [
        {
            name: 'column',
            desc: 'The column on which to compute the mean. Defaults to `"_value"`',
            type: 'String',
        },
    ],
    package: '',
    desc: 'Computes the mean or average of non-null records in the input table.',
    example: 'mean(column: "_value")',
    category: 'Aggregates',
    link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/mean/',
};
const UNION = {
    name: 'union',
    args: [
        {
            name: 'tables',
            desc: 'Specifies the streams to union together. There must be at least two streams.',
            type: 'Array of Strings',
        },
    ],
    package: '',
    desc: 'Concatenates two or more input streams into a single output stream. The output schemas of the `union()` function is the union of all input schemas. A sort operation may be added if a specific sort order is needed.',
    example: 'union(tables: [table1, table2])',
    category: 'Transformations',
    link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/union/',
};
const MATH_ABS = {
    name: 'math.abs',
    args: [
        {
            name: 'x',
            desc: 'The value used in the operation.',
            type: 'Float',
        },
    ],
    package: 'math',
    desc: 'Returns the absolute value of x.',
    example: 'math.abs(x: r._value)',
    category: 'Transformations',
    link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/abs/',
};
const MATH_FLOOR = {
    name: 'math.floor',
    args: [
        {
            name: 'x',
            desc: 'The value used in the operation.',
            type: 'Float',
        },
    ],
    package: 'math',
    desc: 'Returns the greatest integer value less than or equal to x.',
    example: 'math.floor(x: r._value)',
    category: 'Transformations',
    link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/floor/',
};
const STRINGS_TITLE = {
    name: 'strings.title',
    args: [
        {
            name: 'v',
            desc: 'The string value to convert.',
            type: 'String',
        },
    ],
    package: 'strings',
    desc: 'Converts a string to title case.',
    example: 'strings.title(v: r._value)',
    category: 'Transformations',
    link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/title/',
};
const STRINGS_TRIM = {
    name: 'strings.trim',
    args: [
        {
            name: 'v',
            desc: 'The string value to trim.',
            type: 'String',
        },
        {
            name: 'cutset',
            desc: 'The leading and trailing characters to trim from the string value. Only characters that match exactly are trimmed.',
            type: 'String',
        },
    ],
    package: 'strings',
    desc: 'Removes specified leading and trailing characters from a string.',
    example: 'strings.trim(v: r._value, cutset: "_")',
    category: 'Transformations',
    link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/trim/',
};
const FLUX_FUNCTIONS = [
    {
        name: 'aggregateWindow',
        args: [
            {
                name: 'every',
                desc: 'The duration of windows.',
                type: 'Duration',
            },
            {
                name: 'fn',
                desc: 'The aggregate function used in the operation.',
                type: 'Unquoted String',
            },
            {
                name: 'column',
                desc: 'The column on which to operate. Defaults to `"_value"`.',
                type: 'String',
            },
            {
                name: 'timeSrc',
                desc: 'The "time source" column from which time is copied for the aggregate record. Defaults to `"_stop"`.',
                type: 'String',
            },
            {
                name: 'timeDst',
                desc: 'The "time destination" column to which time is copied for the aggregate record. Defaults to `"_time"`.',
                type: 'String',
            },
            {
                name: 'createEmpty',
                desc: 'For windows without data, this will create an empty window and fill it with a `null` aggregate value.',
                type: 'Boolean',
            },
        ],
        package: '',
        desc: 'Applies an aggregate function to fixed windows of time.',
        example: 'aggregateWindow(every: 1m, fn: mean)',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/aggregatewindow/',
    },
    {
        name: 'bigtable.from',
        args: [
            {
                name: 'token',
                desc: 'The Google Cloud IAM token to use to access the Cloud Bigtable database.',
                type: 'String',
            },
            {
                name: 'project',
                desc: 'The project ID of the Cloud Bigtable project to retrieve data from.',
                type: 'String',
            },
            {
                name: 'instance',
                desc: 'The instance ID of the Cloud Bigtable instance to retrieve data from.',
                type: 'String',
            },
            {
                name: 'table',
                desc: 'The name of the Cloud Bigtable table to retrieve data from.',
                type: 'String',
            },
        ],
        package: 'experimental/bigtable',
        desc: 'Retrieves data from a Google Cloud Bigtable data source.',
        example: 'bigtable.from(token: "mySuPeRseCretTokEn", project: "exampleProjectID", instance: "exampleInstanceID", table: "example-table")',
        category: 'Inputs',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/experimental/bigtable/from/',
    },
    {
        name: 'bool',
        args: [
            {
                name: 'v',
                desc: 'The value to convert.',
                type: 'String, Integer, UInteger, Float',
            },
        ],
        package: '',
        desc: 'Converts a single value to a boolean.',
        example: 'bool(v: r._value)',
        category: 'Type Conversions',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/type-conversions/bool/',
    },
    {
        name: 'bottom',
        args: [
            {
                name: 'n',
                desc: 'The number of rows to return.',
                type: 'Integer',
            },
            {
                name: 'columns',
                desc: 'List of columns by which to sort. Sort precedence is determined by list order (left to right) .Default is `["_value"]`',
                type: 'Array of Strings',
            },
        ],
        package: '',
        desc: 'Sorts a table by columns and keeps only the bottom n rows.',
        example: 'bottom(n:10, columns: ["_value"])',
        category: 'Selectors',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/selectors/bottom/',
    },
    {
        name: 'buckets',
        args: [],
        package: '',
        desc: 'Returns a list of buckets in the organization.',
        example: 'buckets()',
        category: 'Inputs',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/inputs/buckets/',
    },
    {
        name: 'bytes',
        args: [
            {
                name: 'v',
                desc: 'The value to convert.',
                type: 'String, Integer, UInteger, Float, Boolean',
            },
        ],
        package: '',
        desc: 'Converts a single value to bytes.',
        example: 'bytes(t: r._value)',
        category: 'Type Conversions',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/type-conversions/bytes/',
    },
    {
        name: 'chandeMomentumOscillator',
        args: [
            {
                name: 'n',
                desc: 'The period or number of points to use in the calculation.',
                type: 'Integer',
            },
            {
                name: 'columns',
                desc: 'Columns to operate on. Defaults to `["_value"]`.',
                type: 'Array of Strings`',
            },
        ],
        package: '',
        desc: 'Applies the technical momentum indicator developed by Tushar Chande.',
        example: 'chandeMomentumOscillator(n: 10)',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/chandemomentumoscillator/',
    },
    {
        name: 'columns',
        args: [
            {
                name: 'column',
                desc: 'The name of the output column in which to store the column labels.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Lists the column labels of input tables.',
        example: 'columns(column: "_value")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/columns/',
    },
    {
        name: 'contains',
        args: [
            {
                name: 'value',
                desc: 'The value to search for.',
                type: 'Boolean, Integer, UInteger, Float, String, Time',
            },
            {
                name: 'set',
                desc: 'The set of values in which to search.',
                type: 'Boolean, Integer, UInteger, Float, String, Time',
            },
        ],
        package: '',
        desc: 'Tests whether a value is a member of a set.',
        example: 'contains(value: 1, set: [1,2,3])',
        category: 'Test',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/tests/contains/',
    },
    {
        name: 'count',
        args: [
            {
                name: 'column',
                desc: 'The column on which to operate. Defaults to `"_value"`.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Outputs the number of records in the specified column.',
        example: 'count(column: "_value")',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/count/',
    },
    {
        name: 'cov',
        args: [
            {
                name: 'x',
                desc: 'One input stream used to calculate the covariance.',
                type: 'Object',
            },
            {
                name: 'y',
                desc: 'The other input table used to calculate the covariance.',
                type: 'Object',
            },
            {
                name: 'on',
                desc: 'The list of columns on which to join.',
                type: 'Array of Strings',
            },
            {
                name: 'pearsonr',
                desc: 'Indicates whether the result should be normalized to be the Pearson R coefficient',
                type: 'Boolean',
            },
        ],
        package: '',
        desc: 'Computes the covariance between two streams by first joining the streams, then performing the covariance operation.',
        example: 'cov(x: table1, y: table2, on: ["_time", "_field"], pearsonr: false)',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/cov/',
    },
    {
        name: 'covariance',
        args: [
            {
                name: 'columns',
                desc: 'A list of columns on which to operate. Exactly two columns must be provided.',
                type: 'Array of Strings',
            },
            {
                name: 'pearsonr',
                desc: 'Indicates whether the result should be normalized to be the Pearson R coefficient',
                type: 'Boolean',
            },
            {
                name: 'valueDst',
                desc: 'The column into which the result will be placed. Defaults to `"_value"`.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Computes the covariance between two columns.',
        example: 'covariance(columns: ["column_x", "column_y"], pearsonr: false, valueDst: "_value")',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/covariance/',
    },
    {
        name: 'csv.from',
        args: [
            {
                name: 'file',
                desc: 'The file path of the CSV file to query.',
                type: 'String',
            },
            {
                name: 'csv',
                desc: 'Raw CSV-formatted text. CSV data must be in the CSV format produced by the Flux HTTP response standard.',
                type: 'String',
            },
        ],
        package: 'csv',
        desc: 'Retrieves data from a comma-separated value (CSV) data source.',
        example: 'csv.from(file: "/path/to/data-file.csv")',
        category: 'Inputs',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/csv/from/',
    },
    {
        name: 'cumulativeSum',
        args: [
            {
                name: 'columns',
                desc: 'A list of columns on which to operate. Defaults to `["_value"]`.',
                type: 'Array of Strings',
            },
        ],
        package: '',
        desc: 'Computes a running sum for non-null records in the table. The output table schema will be the same as the input table.',
        example: 'cumulativeSum(columns: ["_value"])',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/cumulativesum/',
    },
    {
        name: 'date.hour',
        args: [
            {
                name: 't',
                desc: 'The time to operate on.',
                type: 'Time',
            },
        ],
        package: 'date',
        desc: 'Returns the hour of a specified time. Results range from `[0-23]`.',
        example: 'date.hour(t: 2019-07-17T12:05:21.012Z)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/date/hour/',
    },
    {
        name: 'date.microsecond',
        args: [
            {
                name: 't',
                desc: 'The time to operate on.',
                type: 'Time',
            },
        ],
        package: 'date',
        desc: 'Returns the microsecond of a specified time. Results range from `[1-999999]`.',
        example: 'date.microsecond(t: 2019-07-17T12:05:21.012934584Z)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/date/microsecond/',
    },
    {
        name: 'date.millisecond',
        args: [
            {
                name: 't',
                desc: 'The time to operate on.',
                type: 'Time',
            },
        ],
        package: 'date',
        desc: 'Returns the millisecond of a specified time. Results range from `[1-999]`.',
        example: 'date.millisecond(t: 2019-07-17T12:05:21.012934584Z)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/date/millisecond/',
    },
    {
        name: 'date.minute',
        args: [
            {
                name: 't',
                desc: 'The time to operate on.',
                type: 'Time',
            },
        ],
        package: 'date',
        desc: 'Returns the minute of a specified time. Results range from `[0-59]`.',
        example: 'date.minute(t: 2019-07-17T12:05:21.012Z)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/date/minute/',
    },
    {
        name: 'date.month',
        args: [
            {
                name: 't',
                desc: 'The time to operate on.',
                type: 'Time',
            },
        ],
        package: 'date',
        desc: 'Returns the month of a specified time. Results range from `[1-12]`.',
        example: 'date.month(t: 2019-07-17T12:05:21.012Z)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/date/month/',
    },
    {
        name: 'date.monthDay',
        args: [
            {
                name: 't',
                desc: 'The time to operate on.',
                type: 'Time',
            },
        ],
        package: 'date',
        desc: 'Returns the day of the month for a specified time. Results range from `[1-31]`.',
        example: 'date.monthDay(t: 2019-07-17T12:05:21.012Z)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/date/monthday/',
    },
    {
        name: 'date.nanosecond',
        args: [
            {
                name: 't',
                desc: 'The time to operate on.',
                type: 'Time',
            },
        ],
        package: 'date',
        desc: 'Returns the nanosecond of a specified time. Results range from `[1-999999999]`.',
        example: 'date.nanosecond(t: 2019-07-17T12:05:21.012934584Z)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/date/nanosecond/',
    },
    {
        name: 'date.quarter',
        args: [
            {
                name: 't',
                desc: 'The time to operate on.',
                type: 'Time',
            },
        ],
        package: 'date',
        desc: 'Returns the quarter of the year for a specified time. Results range from `[1-4]`.',
        example: 'date.quarter(t: 2019-07-17T12:05:21.012Z)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/date/quarter/',
    },
    {
        name: 'date.second',
        args: [
            {
                name: 't',
                desc: 'The time to operate on.',
                type: 'Time',
            },
        ],
        package: 'date',
        desc: 'Returns the second of a specified time. Results range from `[0-59]`.',
        example: 'date.second(t: 2019-07-17T12:05:21.012Z)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/date/second/',
    },
    {
        name: 'date.truncate',
        args: [
            {
                name: 't',
                desc: 'The time to operate on.',
                type: 'Time',
            },
            {
                name: 'unit',
                desc: 'The unit time to truncate to. Only use `1` and the unit of time to specify the `unit`. For example, `1s`, `1m`, `1h`.',
                type: 'Duration',
            },
        ],
        package: 'date',
        desc: 'Truncates the time to a specified unit. Results range from `[0-59]`.',
        example: 'date.truncate(t: 2019-07-17T12:05:21.012Z, unit: 1s)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/date/truncate/',
    },
    {
        name: 'date.week',
        args: [
            {
                name: 't',
                desc: 'The time to operate on.',
                type: 'Time',
            },
        ],
        package: 'date',
        desc: 'Returns the ISO week of the year for a specified time. Results range from `[1-53]`.',
        example: 'date.week(t: 2019-07-17T12:05:21.012Z)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/date/week/',
    },
    {
        name: 'date.weekDay',
        args: [
            {
                name: 't',
                desc: 'The time to operate on.',
                type: 'Time',
            },
        ],
        package: 'date',
        desc: 'Returns the day of the week for a specified time. Results range from `[0-6]`.',
        example: 'date.weekDay(t: 2019-07-17T12:05:21.012Z)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/date/weekday/',
    },
    {
        name: 'date.year',
        args: [
            {
                name: 't',
                desc: 'The time to operate on.',
                type: 'Time',
            },
        ],
        package: 'date',
        desc: 'Returns the year of a specified time.',
        example: 'date.year(t: 2019-07-17T12:05:21.012Z)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/date/year/',
    },
    {
        name: 'date.yearDay',
        args: [
            {
                name: 't',
                desc: 'The time to operate on.',
                type: 'Time',
            },
        ],
        package: 'date',
        desc: 'Returns the day of the year for a specified time. Results include leap days and range from `[1-366]`.',
        example: 'date.yearDay(t: 2019-07-17T12:05:21.012Z)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/date/yearday/',
    },
    {
        name: 'derivative',
        args: [
            {
                name: 'unit',
                desc: 'The time duration used when creating the derivative.',
                type: 'Duration',
            },
            {
                name: 'nonNegative',
                desc: 'Indicates if the derivative is allowed to be negative. When set to `true`, if a value is less than the previous value, it is assumed the previous value should have been a zero.',
                type: 'Boolean',
            },
            {
                name: 'columns',
                desc: 'A list of columns on which to operate. Defaults to `["_value"]`.',
                type: 'Array of Strings',
            },
            {
                name: 'timeColumn',
                desc: 'The column name for the time values. Defaults to `"_time"`.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Computes the rate of change per unit of time between subsequent non-null records. The output table schema will be the same as the input table.',
        example: 'derivative(unit: 1s, nonNegative: true, columns: ["_value"], timeColumn: "_time")',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/derivative/',
    },
    {
        name: 'difference',
        args: [
            {
                name: 'nonNegative',
                desc: 'Indicates if the derivative is allowed to be negative. When set to `true`, if a value is less than the previous value, it is assumed the previous value should have been a zero.',
                type: 'Boolean',
            },
            {
                name: 'columns',
                desc: 'The columns to use to compute the difference. Defaults to `"_value"`.',
                type: 'Array of Strings',
            },
            {
                name: 'keepFirst',
                desc: 'Indicates the first row should be kept. If `true`, the difference will be `null`. Defaults to `false`.',
                type: 'Boolean',
            },
        ],
        package: '',
        desc: 'Computes the difference between subsequent non-null records in the specified columns.',
        example: 'difference(nonNegative: false, columns: ["_value"])',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/difference/',
    },
    {
        name: 'distinct',
        args: [
            {
                name: 'column',
                desc: 'Column on which to track unique values.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Returns the unique values for a given column.',
        example: 'distinct(column: "host")',
        category: 'Selectors',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/selectors/distinct/',
    },
    {
        name: 'doubleEMA',
        args: [
            {
                name: 'n',
                desc: 'The number of points to average.',
                type: 'Integer',
            },
        ],
        package: '',
        desc: 'Calculates the exponential moving average of values in the `_value` column grouped into `n` number of points, giving more weight to recent data at double the rate of `exponentialMovingAverage()`.',
        example: 'doubleEMA(n: 5)',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/doubleema/',
    },
    {
        name: 'drop',
        args: [
            {
                name: 'columns',
                desc: 'A list of columns to be removed from the table. Cannot be used with `fn`.',
                type: 'Array of Strings',
            },
            {
                name: 'fn',
                desc: 'A function which takes a column name as a parameter and returns a boolean indicating whether or not the column should be removed from the table. Cannot be used with `columns`.',
                type: 'Function',
            },
        ],
        package: '',
        desc: 'Removes specified columns from a table. Columns can be specified either through a list or a predicate function. When a dropped column is part of the group key, it will be removed from the key.',
        example: 'drop(columns: ["col1", "col2"])',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/drop/',
    },
    {
        name: 'duplicate',
        args: [
            {
                name: 'column',
                desc: 'The column name to duplicate.',
                type: 'String',
            },
            {
                name: 'as',
                desc: 'The name assigned to the duplicate column.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Duplicates a specified column in a table.',
        example: 'duplicate(column: "column-name", as: "duplicate-name")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/duplicate/',
    },
    {
        name: 'duration',
        args: [
            {
                name: 'v',
                desc: 'The value to convert.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Converts a single value to a duration.',
        example: 'duration(v: r._value)',
        category: 'Type Conversions',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/type-conversions/duration/',
    },
    {
        name: 'experimental.addDuration',
        args: [
            {
                name: 'd',
                desc: 'The duration to add.',
                type: 'Duration',
            },
            {
                name: 'to',
                desc: 'The time to add the duration to.',
                type: 'Time',
            },
        ],
        package: 'experimental',
        desc: 'Adds a duration to a time value and returns the resulting time value.',
        example: 'experimental.addDuration(d: 12h, to: now())',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/experimental/addduration/',
    },
    {
        name: 'experimental.group',
        args: [
            {
                name: 'columns',
                desc: 'List of columns to use in the grouping operation. Defaults to `[]`.',
                type: 'Array of Strings',
            },
            {
                name: 'mode',
                desc: 'The mode used to group columns. Only the `extend` mode is available with this function.',
                type: 'String',
            },
        ],
        package: 'experimental',
        desc: 'Introduces an extend mode to the existing `group()` function.',
        example: 'experimental.group(columns: ["host", "_measurement"], mode: "extend")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/experimental/group/',
    },
    {
        name: 'experimental.objectKeys',
        args: [
            {
                name: 'o',
                desc: 'The object to return keys from.',
                type: 'Object',
            },
        ],
        package: 'experimental',
        desc: 'Returns an array of keys in a specified object.',
        example: 'experimental.objectKeys(o: {key1: "value1", key2: "value2"})',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/experimental/objectkeys/',
    },
    {
        name: 'experimental.set',
        args: [
            {
                name: 'o',
                desc: 'An object that defines the columns and values to set.',
                type: 'Object',
            },
        ],
        package: 'experimental',
        desc: 'Sets multiple static column values on all records.',
        example: 'experimental.set(o: {column1: "value1", column2: "value2"})',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/experimental/set/',
    },
    {
        name: 'experimental.subDuration',
        args: [
            {
                name: 'd',
                desc: 'The duration to subtract.',
                type: 'Duration',
            },
            {
                name: 'from',
                desc: 'The time to subtract the duration from.',
                type: 'Time',
            },
        ],
        package: 'experimental',
        desc: 'Subtracts a duration from a time value and returns the resulting time value.',
        example: 'experimental.subDuration(d: 12h, from: now())',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/experimental/subduration/',
    },
    {
        name: 'experimental.to',
        args: [
            {
                name: 'bucket',
                desc: 'The bucket to write data to. `bucket` and `bucketID` are mutually exclusive.',
                type: 'String',
            },
            {
                name: 'bucketID',
                desc: 'The ID of the bucket to write data to. `bucketID` and `bucket` are mutually exclusive.',
                type: 'String',
            },
            {
                name: 'org',
                desc: 'The organization name of the specified bucket. `org` and `orgID` are mutually exclusive.',
                type: 'String',
            },
            {
                name: 'orgID',
                desc: 'The organization ID of the specified bucket. `orgID` and `org` are mutually exclusive.',
                type: 'String',
            },
        ],
        package: 'experimental',
        desc: 'Writes data to an InfluxDB v2.0 bucket, but in a different structure than the built-in `to()` function.',
        example: 'experimental.to(bucket: "example-bucket", org: "example-org")',
        category: 'Outputs',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/experimental/to/',
    },
    {
        name: 'elapsed',
        args: [
            {
                name: 'unit',
                desc: 'The unit time to return. Defaults to `1s`.',
                type: 'Duration',
            },
            {
                name: 'timeColumn',
                desc: 'The column to use to compute the elapsed time. Defaults to `"_time"`.',
                type: 'String`',
            },
            {
                name: 'columnName',
                desc: 'The column to store elapsed times. Defaults to `"elapsed"`.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Returns the time between subsequent records.',
        example: 'elapsed(unit: 1s)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/elapsed/',
    },
    {
        name: 'exponentialMovingAverage',
        args: [
            {
                name: 'n',
                desc: 'The number of points to average.',
                type: 'Integer',
            },
        ],
        package: '',
        desc: 'Calculates the exponential moving average of values in the `_value` column grouped into `n` number of points, giving more weight to recent data.',
        example: 'exponentialMovingAverage(n: 5)',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/exponentialmovingaverage/',
    },
    {
        name: 'fill',
        args: [
            {
                name: 'column',
                desc: 'The column in which to replace null values. Defaults to `"_value"`.',
                type: 'String',
            },
            {
                name: 'value',
                desc: 'The constant value to use in place of nulls.',
                type: 'Value type of `column`',
            },
            {
                name: 'usePrevious',
                desc: 'When `true`, assigns the value set in the previous non-null row.',
                type: 'Boolean',
            },
        ],
        package: '',
        desc: 'Replaces all null values in an input stream and replace them with a non-null value.',
        example: 'fill(column: "_value", usePrevious: true)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/fill/',
    },
    {
        name: 'filter',
        args: [
            {
                name: 'fn',
                desc: 'A single argument function that evaluates true or false. Records are passed to the function. Those that evaluate to true are included in the output tables.',
                type: 'Function',
            },
            {
                name: 'onEmpty',
                desc: 'Defines the behavior for empty tables. Potential values are `keep` and `drop`. Defaults to `drop`.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Filters data based on conditions defined in the function. The output tables have the same schema as the corresponding input tables.',
        example: 'filter(fn: (r) => r._measurement == "cpu")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/filter/',
    },
    {
        name: 'first',
        args: [],
        package: '',
        desc: 'Selects the first non-null record from an input table.',
        example: 'first()',
        category: 'Selectors',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/selectors/first/',
    },
    {
        name: 'float',
        args: [
            {
                name: 'v',
                desc: 'The value to convert.',
                type: 'String, Integer, UInteger, Boolean',
            },
        ],
        package: '',
        desc: 'Converts a single value to a float.',
        example: 'float(v: r._value)',
        category: 'Type Conversions',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/type-conversions/float/',
    },
    FROM,
    {
        name: 'getColumn',
        args: [
            {
                name: 'column',
                desc: 'The name of the column to extract.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Extracts a column from a table given its label. If the label is not present in the set of columns, the function errors.',
        example: 'getColumn(column: "_value")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/stream-table/getcolumn/',
    },
    {
        name: 'getRecord',
        args: [
            {
                name: 'idx',
                desc: 'The index of the record to extract.',
                type: 'Integer',
            },
        ],
        package: '',
        desc: 'Extracts a record from a table given the record’s index. If the index is out of bounds, the function errors.',
        example: 'getRecord(idx: 0)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/stream-table/getrecord/',
    },
    {
        name: 'group',
        args: [
            {
                name: 'columns',
                desc: 'List of columns to use in the grouping operation. Defaults to `[]`.',
                type: 'Array of Strings',
            },
            {
                name: 'mode',
                desc: 'The mode used to group columns. The following options are available: by, except. Defaults to `"by"`.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Groups records based on their values for specific columns. It produces tables with new group keys based on provided properties.',
        example: 'group(columns: ["host", "_measurement"], mode:"by")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/group/',
    },
    {
        name: 'highestAverage',
        args: [
            {
                name: 'n',
                desc: 'Number of records to return.',
                type: 'Integer',
            },
            {
                name: 'column',
                desc: 'Column by which to sort. Default is `"_value"`.',
                type: 'String',
            },
            {
                name: 'groupColumns',
                desc: 'The columns on which to group before performing the aggregation. Default is `[]`.',
                type: 'Array of Strings',
            },
        ],
        package: '',
        desc: 'Returns the top `n` records from all groups using the average of each group.',
        example: 'highestAverage(n:10, groupColumns: ["host"])',
        category: 'Selectors',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/selectors/highestaverage/',
    },
    {
        name: 'highestCurrent',
        args: [
            {
                name: 'n',
                desc: 'Number of records to return.',
                type: 'Integer',
            },
            {
                name: 'column',
                desc: 'Column by which to sort. Default is `"_value"`.',
                type: 'String',
            },
            {
                name: 'groupColumns',
                desc: 'The columns on which to group before performing the aggregation. Default is `[]`.',
                type: 'Array of Strings',
            },
        ],
        package: '',
        desc: 'Returns the top `n` records from all groups using the last value of each group.',
        example: 'highestCurrent(n:10, groupColumns: ["host"])',
        category: 'Selectors',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/selectors/highestcurrent/',
    },
    {
        name: 'highestMax',
        args: [
            {
                name: 'n',
                desc: 'Number of records to return.',
                type: 'Integer',
            },
            {
                name: 'column',
                desc: 'Column by which to sort. Default is `"_value"`.',
                type: 'String',
            },
            {
                name: 'groupColumns',
                desc: 'The columns on which to group before performing the aggregation. Default is `[]`.',
                type: 'Array of Strings',
            },
        ],
        package: '',
        desc: 'Returns the top `n` records from all groups using the maximum of each group.',
        example: 'highestMax(n:10, groupColumns: ["host"])',
        category: 'Selectors',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/selectors/highestmax/',
    },
    {
        name: 'histogram',
        args: [
            {
                name: 'column',
                desc: 'The name of a column containing input data values. The column type must be float. Defaults to `"_value"`.',
                type: 'Strings',
            },
            {
                name: 'upperBoundColumn',
                desc: 'The name of the column in which to store the histogram\'s upper bounds. Defaults to `"le"`.',
                type: 'String',
            },
            {
                name: 'countColumn',
                desc: 'The name of the column in which to store the histogram counts. Defaults to `"_value"`.',
                type: 'String',
            },
            {
                name: 'bins',
                desc: 'A list of upper bounds to use when computing the histogram frequencies. Each element in the array should contain a float value that represents the maximum value for a bin.',
                type: 'Array of Floats',
            },
            {
                name: 'normalize',
                desc: 'When `true`, will convert the counts into frequency values between 0 and 1. Defaults to `false`.',
                type: 'Boolean',
            },
        ],
        package: '',
        desc: 'Approximates the cumulative distribution function of a dataset by counting data frequencies for a list of buckets.',
        example: 'histogram(column: "_value", upperBoundColumn: "le", countColumn: "_value", bins: [50.0, 75.0, 90.0], normalize: false)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/histogram/',
    },
    {
        name: 'histogramQuantile',
        args: [
            {
                name: 'quantile',
                desc: 'A value between 0 and 1 indicating the desired quantile to compute.',
                type: 'Float',
            },
            {
                name: 'countColumn',
                desc: 'The name of the column in which to store the histogram counts. The count column type must be float. Defaults to `"_value"`.',
                type: 'String',
            },
            {
                name: 'upperBoundColumn',
                desc: 'The name of the column in which to store the histogram\'s upper bounds. The count column type must be float. Defaults to `"le"`.',
                type: 'String',
            },
            {
                name: 'valueColumn',
                desc: 'The name of the output column which will contain the computed quantile. Defaults to `"_value"`.',
                type: 'String',
            },
            {
                name: 'minValue',
                desc: 'The assumed minimum value of the dataset. When the quantile falls below the lowest upper bound, interpolation is performed between `minValue` and the lowest upper bound. When `minValue` is equal to negative infinity, the lowest upper bound is used. Defaults to `0`.',
                type: 'Float',
            },
        ],
        package: '',
        desc: 'Approximates a quantile given a histogram that approximates the cumulative distribution of the dataset.',
        example: 'histogramQuantile(quantile: 0.5, countColumn: "_value", upperBoundColumn: "le", valueColumn: "_value", minValue: 0.0)',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/histogramquantile/',
    },
    {
        name: 'holtWinters',
        args: [
            {
                name: 'n',
                desc: 'Number of values to predict.',
                type: 'Integer',
            },
            {
                name: 'seasonality',
                desc: 'Number of points in a season. Defaults to `0`.',
                type: 'Integer',
            },
            {
                name: 'interval',
                desc: 'The interval between two data points.',
                type: 'Duration',
            },
            {
                name: 'withFit',
                desc: 'Returns "fitted" data points in results when `withFit` is set to `true`. Defaults to `false`.',
                type: 'Boolean',
            },
            {
                name: 'timeColumn',
                desc: 'The time column to use. Defaults to `"_time"`.',
                type: 'String',
            },
            {
                name: 'column',
                desc: 'The column to operate on. Defaults to `"_value"`.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Applies the Holt-Winters forecasting method to input tables. The Holt-Winters method predicts `n` seasonally-adjusted values for the specified `column` at the specified `interval`.',
        example: 'holtWinters(n: 10, interval: 1d)',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/holtwinters/',
    },
    {
        name: 'hourSelection',
        args: [
            {
                name: 'start',
                desc: 'The first hour of the hour range (inclusive). Hours range from `[0-23]`',
                type: 'Integer',
            },
            {
                name: 'stop',
                desc: 'The last hour of the hour range (inclusive). Hours range from `[0-23]`.',
                type: 'Integer`',
            },
            {
                name: 'timeColumn',
                desc: 'The column that contains the time value. Default is `"_time"`.',
                type: 'String`',
            },
        ],
        package: '',
        desc: 'Retains all rows with time values in a specified hour range. Hours are specified in military time.',
        example: 'hourSelection(start: 9, stop: 17)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/hourselection/',
    },
    {
        name: 'http.get',
        args: [
            {
                name: 'url',
                desc: 'The URL to send the GET request to.',
                type: 'String',
            },
            {
                name: 'headers',
                desc: 'Headers to include with the GET request.',
                type: 'Object',
            },
            {
                name: 'timeout',
                desc: 'Timeout for the GET request. Default is `30s`.',
                type: 'Duration',
            },
        ],
        package: 'experimental/http',
        desc: 'Submits an HTTP GET request to the specified URL and returns the HTTP status code, response body, and response headers.',
        example: 'http.get(url: "https://v2.docs.influxdata.com/v2.0/", headers: {foo: "bar"})',
        category: 'Miscellaneous',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/experimental/http/get/',
    },
    {
        name: 'http.post',
        args: [
            {
                name: 'url',
                desc: 'The URL to POST to.',
                type: 'String',
            },
            {
                name: 'headers',
                desc: 'Headers to include with the POST request.',
                type: 'Object',
            },
            {
                name: 'data',
                desc: 'The data body to include with the POST request.',
                type: 'Bytes',
            },
        ],
        package: 'http',
        desc: 'Submits an HTTP POST request to the specified URL with headers and data and returns the HTTP status code.',
        example: 'http.post(url: "http://localhost:9999/", headers: {x:"a", y:"b"}, data: bytes(v: "body"))',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/http/post/',
    },
    {
        name: 'increase',
        args: [
            {
                name: 'columns',
                desc: 'List of columns to use in the operation. Defaults to `["_value"]`.',
                type: 'Array of Strings',
            },
        ],
        package: '',
        desc: 'Computes the total non-negative difference between values in a table.',
        example: 'increase(columns: ["_value"])',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/increase/',
    },
    {
        name: 'int',
        args: [
            {
                name: 'v',
                desc: 'The value to convert.',
                type: 'String, Integer, UInteger, Float, Boolean',
            },
        ],
        package: '',
        desc: 'Converts a single value to a integer.',
        example: 'int(v: r._value)',
        category: 'Type Conversions',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/type-conversions/int/',
    },
    {
        name: 'integral',
        args: [
            {
                name: 'unit',
                desc: 'The time duration used when computing the integral.',
                type: 'Duration',
            },
            {
                name: 'column',
                desc: 'The column on which to operate. Defaults to `"_value"`.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Computes the area under the curve per unit of time of subsequent non-null records. The curve is defined using `_time` as the domain and record values as the range.',
        example: 'integral(unit: 10s, column: "_value")',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/integral/',
    },
    {
        name: 'join',
        args: [
            {
                name: 'tables',
                desc: 'The map of streams to be joined.',
                type: 'Object',
            },
            {
                name: 'on',
                desc: 'The list of columns on which to join.',
                type: 'Array of Strings',
            },
            {
                name: 'method',
                desc: 'The method used to join. Possible values are: `inner`, `cross`, `left`, `right`, or `full`. Defaults to `"inner"`.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Merges two or more input streams, whose values are equal on a set of common columns, into a single output stream. The resulting schema is the union of the input schemas. The resulting group key is the union of the input group keys.',
        example: 'join(tables: {key1: table1, key2: table2}, on: ["_time", "_field"], method: "inner")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/join/',
    },
    {
        name: 'json.encode',
        args: [
            {
                name: 'v',
                desc: 'The value to encode.',
                type: 'Boolean, Duration, Float, Integer, String, Time, UInteger',
            },
        ],
        package: 'json',
        desc: 'Converts a value into JSON bytes.',
        example: 'json.encode(v: r._value)',
        category: 'Type Conversions',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/json/encode/',
    },
    {
        name: 'kaufmansAMA',
        args: [
            {
                name: 'n',
                desc: 'The period or number of points to use in the calculation.',
                type: 'Integer',
            },
            {
                name: 'column',
                desc: 'The column to operate on. Defaults to `"_value"`.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Calculates Kaufman’s Adaptive Moving Average (KAMA) using values in an input table.',
        example: 'kaufmansAMA(n: 5)',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/kaufmansama/',
    },
    {
        name: 'kaufmansER',
        args: [
            {
                name: 'n',
                desc: 'The period or number of points to use in the calculation.',
                type: 'Integer',
            },
        ],
        package: '',
        desc: 'Calculates the Kaufman’s Efficiency Ratio (KER) using values in an input table.',
        example: 'kaufmansER(n: 5)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/kaufmanser/',
    },
    {
        name: 'keep',
        args: [
            {
                name: 'columns',
                desc: 'Columns that should be included in the resulting table. Cannot be used with `fn`.',
                type: 'Array of Strings',
            },
            {
                name: 'fn',
                desc: 'A predicate function which takes a column name as a parameter and returns a boolean indicating whether or not the column should be removed from the table. Cannot be used with `columns`.',
                type: 'Function',
            },
        ],
        package: '',
        desc: 'Returns a table containing only the specified columns, ignoring all others. Only columns in the group key that are also specified in the `keep()` function will be kept in the resulting group key. It is the inverse of `drop`.',
        example: 'keep(columns: ["col1", "col2"])',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/keep/',
    },
    {
        name: 'keys',
        args: [
            {
                name: 'column',
                desc: 'Column is the name of the output column to store the group key labels. Defaults to `_value`.',
                type: 'String',
            },
        ],
        package: '',
        desc: "Outputs the group key of input tables. For each input table, it outputs a table with the same group key columns, plus a _value column containing the labels of the input table's group key.",
        example: 'keys(column: "_value")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/keys/',
    },
    {
        name: 'keyValues',
        args: [
            {
                name: 'keyColumns',
                desc: 'A list of columns from which values are extracted. All columns indicated must be of the same type.',
                type: 'Array of Strings',
            },
            {
                name: 'fn',
                desc: 'Function used to identify a set of columns. All columns indicated must be of the same type.',
                type: 'Function',
            },
        ],
        package: '',
        desc: "Returns a table with the input table's group key plus two columns, `_key` and `_value`, that correspond to unique column + value pairs from the input table.",
        example: 'keyValues(keyColumns: ["usage_idle", "usage_user"])',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/keyvalues/',
    },
    {
        name: 'last',
        args: [],
        package: '',
        desc: 'Selects the last non-null record from an input table.',
        example: 'last()',
        category: 'Selectors',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/selectors/last/',
    },
    {
        name: 'limit',
        args: [
            {
                name: 'n',
                desc: 'The maximum number of records to output.',
                type: 'Integer',
            },
            {
                name: 'offset',
                desc: 'The number of records to skip at the beginning of a table before limiting to `n`. Defaults to `0`.',
                type: 'Integer',
            },
        ],
        package: '',
        desc: 'Limits each output table to the first `n` records, excluding the offset.',
        example: 'limit(n:10, offset: 0)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/limit/',
    },
    {
        name: 'linearBins',
        args: [
            {
                name: 'start',
                desc: 'The first value in the returned list.',
                type: 'Float',
            },
            {
                name: 'width',
                desc: 'The distance between subsequent bin values.',
                type: 'Float',
            },
            {
                name: 'count',
                desc: 'The number of bins to create.',
                type: 'Integer',
            },
            {
                name: 'infinity',
                desc: 'When `true`, adds an additional bin with a value of positive infinity. Defaults to `true`.',
                type: 'Boolean',
            },
        ],
        package: '',
        desc: 'Generates a list of linearly separated floats.',
        example: 'linearBins(start: 0.0, width: 5.0, count: 20, infinity: true)',
        category: 'Miscellaneous',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/misc/linearbins/',
    },
    {
        name: 'logarithmicBins',
        args: [
            {
                name: 'start',
                desc: 'The first value in the returned list.',
                type: 'Float',
            },
            {
                name: 'factor',
                desc: 'The multiplier applied to each subsequent bin.',
                type: 'Float',
            },
            {
                name: 'count',
                desc: 'The number of bins to create.',
                type: 'Integer',
            },
            {
                name: 'infinity',
                desc: 'When `true`, adds an additional bin with a value of positive infinity. Defaults to `true`.',
                type: 'Boolean',
            },
        ],
        package: '',
        desc: 'Generates a list of exponentially separated floats.',
        example: 'logarithmicBins(start: 1.0, factor: 2.0, count: 10, infinity: true)',
        category: 'Miscellaneous',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/misc/logarithmicbins/',
    },
    {
        name: 'lowestAverage',
        args: [
            {
                name: 'n',
                desc: 'Number of records to return.',
                type: 'Integer',
            },
            {
                name: 'column',
                desc: 'Column by which to sort. Default is `"_value"`.',
                type: 'String',
            },
            {
                name: 'groupColumns',
                desc: 'The columns on which to group before performing the aggregation. Default is `[]`.',
                type: 'Array of Strings',
            },
        ],
        package: '',
        desc: 'Returns the bottom `n` records from all groups using the average of each group.',
        example: 'lowestAverage(n:10, groupColumns: ["host"])',
        category: 'Selectors',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/selectors/lowestaverage/',
    },
    {
        name: 'lowestCurrent',
        args: [
            {
                name: 'n',
                desc: 'Number of records to return.',
                type: 'Integer',
            },
            {
                name: 'column',
                desc: 'Column by which to sort. Default is `"_value"`.',
                type: 'String',
            },
            {
                name: 'groupColumns',
                desc: 'The columns on which to group before performing the aggregation. Default is `[]`.',
                type: 'Array of Strings',
            },
        ],
        package: '',
        desc: 'Returns the bottom `n` records from all groups using the last value of each group.',
        example: 'lowestCurrent(n:10, groupColumns: ["host"])',
        category: 'Selectors',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/selectors/lowestcurrent/',
    },
    {
        name: 'lowestMin',
        args: [
            {
                name: 'n',
                desc: 'Number of records to return.',
                type: 'Integer',
            },
            {
                name: 'column',
                desc: 'Column by which to sort. Default is `"_value"`.',
                type: 'String',
            },
            {
                name: 'groupColumns',
                desc: 'The columns on which to group before performing the aggregation. Default is `[]`.',
                type: 'Array of Strings',
            },
        ],
        package: '',
        desc: 'Returns the bottom `n` records from all groups using the maximum of each group.',
        example: 'lowestMin(n:10, groupColumns: ["host"])',
        category: 'Selectors',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/selectors/lowestmin/',
    },
    {
        name: 'map',
        args: [
            {
                name: 'fn',
                desc: 'A single argument function that to apply to each record. The return value must be an object.',
                type: 'Function',
            },
        ],
        package: '',
        desc: 'Applies a function to each record in the input tables.',
        example: 'map(fn: (r) => ({ r with _value: r._value * r._value }))',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/map/',
    },
    MATH_ABS,
    {
        name: 'math.acos',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the arccosine of x in radians.',
        example: 'math.acos(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/acos/',
    },
    {
        name: 'math.acosh',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation. Should be greater than 1.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the inverse hyperbolic cosine of x.',
        example: 'math.acosh(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/acosh/',
    },
    {
        name: 'math.asin',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation. Should be greater than -1 and less than 1.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the arcsine of x in radians.',
        example: 'math.asin(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/asin/',
    },
    {
        name: 'math.asinh',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the inverse hyperbolic sine of x.',
        example: 'math.asinh(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/asinh/',
    },
    {
        name: 'math.atan',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the arctangent of x in radians.',
        example: 'math.atan(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/atan/',
    },
    {
        name: 'math.atan2',
        args: [
            {
                name: 'y',
                desc: 'The y coordinate used in the operation.',
                type: 'Float',
            },
            {
                name: 'x',
                desc: 'The x coordinate used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the arc tangent of y/x, using the signs of the two to determine the quadrant of the return value.',
        example: 'math.atan2(y: r.y_coord, x: r.x_coord)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/atan2/',
    },
    {
        name: 'math.atanh',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation. Should be greater than -1 and less than 1.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the inverse hyperbolic tangent of x.',
        example: 'math.atanh(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/atanh/',
    },
    {
        name: 'math.cbrt',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the cube root of x.',
        example: 'math.cbrt(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/cbrt/',
    },
    {
        name: 'math.ceil',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the least integer value greater than or equal to x.',
        example: 'math.ceil(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/ceil/',
    },
    {
        name: 'math.copysign',
        args: [
            {
                name: 'x',
                desc: 'The magnitude used in the operation.',
                type: 'Float',
            },
            {
                name: 'y',
                desc: 'The sign used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns a value with the magnitude of x and the sign of y.',
        example: 'math.copysign(x: r._magnitude, r._sign)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/copysign/',
    },
    {
        name: 'math.cos',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the cosine of the radian argument x.',
        example: 'math.cos(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/cos/',
    },
    {
        name: 'math.cosh',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the hyperbolic cosine of x.',
        example: 'math.cosh(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/cosh/',
    },
    {
        name: 'math.dim',
        args: [
            {
                name: 'x',
                desc: 'The X value used in the operation.',
                type: 'Float',
            },
            {
                name: 'y',
                desc: 'The Y value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the maximum of (x - y) or 0.',
        example: 'math.dim(x: r._value1, y: r._value2)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/dim/',
    },
    {
        name: 'math.erf',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the error function of x.',
        example: 'math.erf(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/erf/',
    },
    {
        name: 'math.erfc',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the complementary error function of x.',
        example: 'math.erfc(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/erfc/',
    },
    {
        name: 'math.erfcinv',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation. Should be greater than 0 and less than 2.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the inverse of `math.erfc()`.',
        example: 'math.erfcinv(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/erfcinv/',
    },
    {
        name: 'math.erfinv',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation. Should be greater than -1 and less than 1.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the inverse error function of x.',
        example: 'math.erfinv(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/erfinv/',
    },
    {
        name: 'math.exp',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the base-e exponential of x (`e**x`).',
        example: 'math.exp(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/exp/',
    },
    {
        name: 'math.exp2',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the base-2 exponential of x (`2**x`).',
        example: 'math.exp2(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/exp2/',
    },
    {
        name: 'math.expm1',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the base-e exponential of x minus 1 (`e**x - 1`).',
        example: 'math.expm1(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/expm1/',
    },
    {
        name: 'math.float64bits',
        args: [
            {
                name: 'f',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the IEEE 754 binary representation of f, with the sign bit of f and the result in the same bit position.',
        example: 'math.float64bits(f: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/float64bits/',
    },
    MATH_FLOOR,
    {
        name: 'math.frexp',
        args: [
            {
                name: 'f',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Breaks f into a normalized fraction and an integral power of two.',
        example: 'math.frexp(f: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/frexp/',
    },
    {
        name: 'math.gamma',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the Gamma function of x.',
        example: 'math.gamma(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/gamma/',
    },
    {
        name: 'math.hypot',
        args: [
            {
                name: 'p',
                desc: 'The p value used in the operation.',
                type: 'Float',
            },
            {
                name: 'q',
                desc: 'The q value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the square root of `p*p + q*q`, taking care to avoid overflow and underflow.',
        example: 'math.hypot(p: r.opp, p: r.adj)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/hypot/',
    },
    {
        name: 'math.ilogb',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the binary exponent of x as an integer.',
        example: 'math.ilogb(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/ilogb/',
    },
    {
        name: 'math.isInf',
        args: [
            {
                name: 'f',
                desc: 'The value used in the evaluation.',
                type: 'Float',
            },
            {
                name: 'sign',
                desc: 'The sign used in the evaluation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Reports whether f is an infinity, according to sign.',
        example: 'math.isInf(f: r._value, sign: r.sign)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/isinf/',
    },
    {
        name: 'math.isNaN',
        args: [
            {
                name: 'f',
                desc: 'The value used in the evaluation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Reports whether f is an IEEE 754 NaN value.',
        example: 'math.isNaN(f: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/isnan/',
    },
    {
        name: 'math.j0',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the order-zero Bessel function of the first kind.',
        example: 'math.j0(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/j0/',
    },
    {
        name: 'math.j1',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the order-one Bessel function of the first kind.',
        example: 'math.j1(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/j1/',
    },
    {
        name: 'math.jn',
        args: [
            {
                name: 'n',
                desc: 'The order number.',
                type: 'Float',
            },
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the order-n Bessel function of the first kind.',
        example: 'math.jn(n: 2, x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/jn/',
    },
    {
        name: 'math.ldexp',
        args: [
            {
                name: 'frac',
                desc: 'The fraction used in the operation.',
                type: 'Float',
            },
            {
                name: 'exp',
                desc: 'The exponent used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns `frac × 2**exp`. It is the inverse of `math.frexp()`.',
        example: 'math.ldexp(frac: r.frac, exp: r.exp)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/ldexp/',
    },
    {
        name: 'math.lgamma',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the natural logarithm and sign (-1 or +1) of `math.gamma(x:x)`.',
        example: 'math.lgamma(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/lgamma/',
    },
    {
        name: 'math.log',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the natural logarithm of x.',
        example: 'math.log(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/log/',
    },
    {
        name: 'math.log1p',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the natural logarithm of 1 plus its argument x.',
        example: 'math.log1p(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/log1p/',
    },
    {
        name: 'math.log2',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the binary logarithm of x.',
        example: 'math.log2(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/log2/',
    },
    {
        name: 'math.logb',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the binary exponent of x.',
        example: 'math.logb(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/logb/',
    },
    {
        name: 'math.mInf',
        args: [
            {
                name: 'sign',
                desc: 'The sign value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns positive infinity if `sign >= 0`, negative infinity if `sign < 0`.',
        example: 'math.mInf(sign: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/minf/',
    },
    {
        name: 'math.mMax',
        args: [
            {
                name: 'x',
                desc: 'The X value used in the operation.',
                type: 'Float',
            },
            {
                name: 'y',
                desc: 'The Y value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the larger of x or y.',
        example: 'math.mMax(x: r.x_value, y: r.y_value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/mmax/',
    },
    {
        name: 'math.mMin',
        args: [
            {
                name: 'x',
                desc: 'The X value used in the operation.',
                type: 'Float',
            },
            {
                name: 'y',
                desc: 'The Y value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the smaller of x or y.',
        example: 'math.mMin(x: r.x_value, y: r.y_value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/mmin/',
    },
    {
        name: 'math.mod',
        args: [
            {
                name: 'x',
                desc: 'The X value used in the operation.',
                type: 'Float',
            },
            {
                name: 'y',
                desc: 'The Y value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the floating-point remainder of x/y.',
        example: 'math.mod(x: r.x_value, y: r.y_value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/mod/',
    },
    {
        name: 'math.modf',
        args: [
            {
                name: 'f',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns integer and fractional floating-point numbers that sum to f. Both values have the same sign as f.',
        example: 'math.modf(f: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/modf/',
    },
    {
        name: 'math.NaN',
        args: [],
        package: 'math',
        desc: 'Returns an IEEE 754 NaN value.',
        example: 'math.NaN()',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/nan/',
    },
    {
        name: 'math.nextafter',
        args: [
            {
                name: 'x',
                desc: 'The X value used in the operation.',
                type: 'Float',
            },
            {
                name: 'y',
                desc: 'The Y value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the next representable float value after x towards y.',
        example: 'math.nextafter(x: r.x_value, y: r.y_value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/nextafter/',
    },
    {
        name: 'math.pow',
        args: [
            {
                name: 'x',
                desc: 'The X value used in the operation.',
                type: 'Float',
            },
            {
                name: 'y',
                desc: 'The Y value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the base-x exponential of y, `x**y`.',
        example: 'math.pow(x: r.x_value, y: r.y_value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/pow/',
    },
    {
        name: 'math.pow10',
        args: [
            {
                name: 'n',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the base-10 exponential of n, `10**n`.',
        example: 'math.pow10(n: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/pow10/',
    },
    {
        name: 'math.remainder',
        args: [
            {
                name: 'x',
                desc: 'The numerator used in the operation.',
                type: 'Float',
            },
            {
                name: 'y',
                desc: 'The denominator used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the IEEE 754 floating-point remainder of `x / y`.',
        example: 'math.remainder(x: r.numerator, y: r.denominator)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/remainder/',
    },
    {
        name: 'math.round',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the nearest integer, rounding half away from zero.',
        example: 'math.round(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/round/',
    },
    {
        name: 'math.roundtoeven',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the nearest integer, rounding ties to even.',
        example: 'math.roundtoeven(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/roundtoeven/',
    },
    {
        name: 'math.signbit',
        args: [
            {
                name: 'x',
                desc: 'The value used in the evaluation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Reports whether x is negative or negative zero.',
        example: 'math.signbit(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/signbit/',
    },
    {
        name: 'math.sin',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the sine of the radian argument x.',
        example: 'math.sin(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/sin/',
    },
    {
        name: 'math.sincos',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the values of `math.sin(x:x)` and `math.cos(x:x)`.',
        example: 'math.sincos(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/sincos/',
    },
    {
        name: 'math.sinh',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the hyperbolic sine of x.',
        example: 'math.sinh(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/sinh/',
    },
    {
        name: 'math.sqrt',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the square root of x.',
        example: 'math.sqrt(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/sqrt/',
    },
    {
        name: 'math.tan',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the tangent of the radian argument x.',
        example: 'math.tan(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/tan/',
    },
    {
        name: 'math.tanh',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the hyperbolic tangent of x.',
        example: 'math.tanh(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/tanh/',
    },
    {
        name: 'math.trunc',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the integer value of x.',
        example: 'math.trunc(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/trunc/',
    },
    {
        name: 'math.y0',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the order-zero Bessel function of the second kind.',
        example: 'math.y0(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/y0/',
    },
    {
        name: 'math.y1',
        args: [
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the order-one Bessel function of the second kind.',
        example: 'math.y1(x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/y1/',
    },
    {
        name: 'math.yn',
        args: [
            {
                name: 'n',
                desc: 'The order number used in the operation.',
                type: 'Float',
            },
            {
                name: 'x',
                desc: 'The value used in the operation.',
                type: 'Float',
            },
        ],
        package: 'math',
        desc: 'Returns the order-n Bessel function of the second kind.',
        example: 'math.yn(n: 3, x: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/math/yn/',
    },
    {
        name: 'max',
        args: [],
        package: '',
        desc: 'Selects record with the highest `_value` from the input table.',
        example: 'max()',
        category: 'Selectors',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/selectors/max/',
    },
    MEAN,
    {
        name: 'median',
        args: [
            {
                name: 'column',
                desc: 'The column on which to compute the mean. Defaults to `"_value"`',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Returns the median `_value` of an input table. The `median()` function can only be used with float value types.',
        example: 'median(column: "_value")',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/median/',
    },
    {
        name: 'min',
        args: [],
        package: '',
        desc: 'Selects record with the lowest `_value` from the input table.',
        example: 'min()',
        category: 'Selectors',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/selectors/min/',
    },
    {
        name: 'mode',
        args: [
            {
                name: 'column',
                desc: 'The column to use to compute the mode. Defaults to `"_value"`.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Computes the mode or value that occurs most often in a specified column.',
        example: 'mode(column: "_value")',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/mode/',
    },
    {
        name: 'movingAverage',
        args: [
            {
                name: 'n',
                desc: 'The frequency of time windows.',
                type: 'Duration',
            },
        ],
        package: '',
        desc: 'Calculates the mean of values grouped into `n` number of points.',
        example: 'movingAverage(n: 5)',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/movingaverage/',
    },
    {
        name: 'mqtt.to',
        args: [
            {
                name: 'broker',
                desc: 'The MQTT broker connection string.',
                type: 'String',
            },
            {
                name: 'topic',
                desc: 'The MQTT topic to send data to.',
                type: 'String',
            },
            {
                name: 'message',
                desc: 'The message or payload to send to the MQTT broker. The default payload is an output table.',
                type: 'String',
            },
            {
                name: 'qos',
                desc: 'The MQTT Quality of Service (QoS) level. Values range from 0-2. Default is 0.',
                type: 'Integer',
            },
            {
                name: 'clientid',
                desc: 'The MQTT client ID.',
                type: 'String',
            },
            {
                name: 'username',
                desc: 'The username to send to the MQTT broker.',
                type: 'String',
            },
            {
                name: 'password',
                desc: 'The password to send to the MQTT broker.',
                type: 'String',
            },
            {
                name: 'name',
                desc: 'The name for the MQTT message.',
                type: 'String',
            },
            {
                name: 'timeout',
                desc: 'The MQTT connection timeout. Default is 1s.',
                type: 'Duration',
            },
            {
                name: 'timeColumn',
                desc: 'The column to use as time values in the output line protocol. Default is `"_time"`.',
                type: 'String',
            },
            {
                name: 'tagColumns',
                desc: 'The columns to use as tag sets in the output line protocol. Default is `[]`.',
                type: 'Array of Strings',
            },
            {
                name: 'valueColumns',
                desc: 'The columns to use as field values in the output line protocol. Default is `["_value"]`.',
                type: 'Array of Strings',
            },
        ],
        package: 'experimental/mqtt',
        desc: 'Outputs data to an MQTT broker using MQTT protocol.',
        example: 'mqtt.to(broker: "tcp://localhost:8883", topic: "example-topic", clientid: "exampleID", tagColumns: ["exampleTagKey"], valueColumns: ["_value"])',
        category: 'Outputs',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/experimental/mqtt/to/',
    },
    {
        name: 'pearsonr',
        args: [
            {
                name: 'x',
                desc: 'First input stream used in the operation.',
                type: 'Object',
            },
            {
                name: 'y',
                desc: 'Second input stream used in the operation.',
                type: 'Object',
            },
            {
                name: 'on',
                desc: 'List of columns on which to join.',
                type: 'Array of Strings',
            },
        ],
        package: '',
        desc: 'Computes the Pearson R correlation coefficient between two streams by first joining the streams, then performing the covariance operation normalized to compute R.',
        example: 'pearsonr(x: table1, y: table2, on: ["_time", "_field"])',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/pearsonr/',
    },
    {
        name: 'pivot',
        args: [
            {
                name: 'rowKey',
                desc: 'List of columns used to uniquely identify a row for the output.',
                type: 'Array of Strings',
            },
            {
                name: 'columnKey',
                desc: 'List of columns used to pivot values onto each row identified by the rowKey.',
                type: 'Array of Strings',
            },
            {
                name: 'valueColumn',
                desc: 'The single column that contains the value to be moved around the pivot.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Collects values stored vertically (column-wise) in a table and aligns them horizontally (row-wise) into logical sets.',
        example: 'pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/pivot/',
    },
    {
        name: 'prometheus.histogramQuantile',
        args: [
            {
                name: 'quantile',
                desc: 'A value between 0.0 and 1.0 indicating the desired quantile.',
                type: 'Float',
            },
        ],
        package: 'experimental/prometheus',
        desc: 'Calculates quantiles on a set of values assuming the histogram data is scraped or read from a Prometheus data source.',
        example: 'prometheus.histogramQuantile(quantile: 0.99)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/experimental/prometheus/histogramquantile/',
    },
    {
        name: 'prometheus.scrape',
        args: [
            {
                name: 'url',
                desc: 'The URL to scrape Prometheus-formatted metrics from.',
                type: 'String',
            },
        ],
        package: 'experimental/prometheus',
        desc: 'Retrieves Prometheus-formatted metrics from a specified URL.',
        example: 'prometheus.scrape(url: "http://localhost:9999/metrics")',
        category: 'Inputs',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/experimental/prometheus/scrape/',
    },
    {
        name: 'quantile',
        args: [
            {
                name: 'column',
                desc: 'The column on which to compute the quantile. Defaults to `"_value"`.',
                type: 'String',
            },
            {
                name: 'q',
                desc: 'A value between 0 and 1 indicating the desired quantile.',
                type: 'Float',
            },
            {
                name: 'method',
                desc: 'Defines the method of computation. The available options are: `estimate_tdigest`, `exact_mean`, or `exact_selector`.',
                type: 'String',
            },
            {
                name: 'compression',
                desc: 'Indicates how many centroids to use when compressing the dataset. A larger number produces a more accurate result at the cost of increased memory requirements. Defaults to 1000.',
                type: 'Float',
            },
        ],
        package: '',
        desc: 'This is both an aggregate and selector function depending on the `method` used. When using the `estimate_tdigest` or `exact_mean` methods, it outputs non-null records with values that fall within the specified quantile. When using the `exact_selector` method, it outputs the non-null record with the value that represents the specified quantile.',
        example: 'quantile(column: "_value", q: 0.99, method: "estimate_tdigest", compression: 1000.0)',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/quantile/',
    },
    RANGE,
    {
        name: 'reduce',
        args: [
            {
                name: 'fn',
                desc: 'Function to apply to each record with a reducer object. The function expects two objects: `r` and `accumulator`.',
                type: 'Function',
            },
            {
                name: 'identity',
                desc: 'Defines the reducer object and provides initial values to use when creating a reducer.',
                type: 'Object',
            },
        ],
        package: '',
        desc: 'Aggregates records in each table according to the reducer, `fn`',
        example: 'reduce(fn: (r, accumulator) => ({ sum: r._value + accumulator.sum }), identity: {sum: 0.0})',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/reduce/',
    },
    {
        name: 'regexp.compile',
        args: [
            {
                name: 'v',
                desc: 'The string value to parse into a regular expression.',
                type: 'String',
            },
        ],
        package: 'regexp',
        desc: 'Parses a string into a regular expression and returns a regexp object.',
        example: 'regexp.compile(v: "[a-zA-Z]")',
        category: 'Type Conversions',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/regexp/compile/',
    },
    {
        name: 'regexp.findString',
        args: [
            {
                name: 'r',
                desc: 'The regular expression used to search `v`',
                type: 'Regexp',
            },
            {
                name: 'v',
                desc: 'The string value to search.',
                type: 'String',
            },
        ],
        package: 'regexp',
        desc: 'Returns the left-most regular expression match in a string.',
        example: 'regexp.findString(r: /foo.?/, v: "seafood fool")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/regexp/findstring/',
    },
    {
        name: 'regexp.findStringIndex',
        args: [
            {
                name: 'r',
                desc: 'The regular expression used to search `v`',
                type: 'Regexp',
            },
            {
                name: 'v',
                desc: 'The string value to search.',
                type: 'String',
            },
        ],
        package: 'regexp',
        desc: 'Returns a two-element array of integers defining the beginning and ending indexes of the left-most regular expression match in a string.',
        example: 'regexp.findStringIndex(r: /ab?/, v: "tablet")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/regexp/findstringindex/',
    },
    {
        name: 'regexp.getString',
        args: [
            {
                name: 'r',
                desc: 'The regular expression object to convert to a string.',
                type: 'Regexp',
            },
        ],
        package: 'regexp',
        desc: 'Returns the source string used to compile a regular expression.',
        example: 'regexp.getString(r: /[a-zA-Z]/)',
        category: 'Type Conversions',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/regexp/getstring/',
    },
    {
        name: 'regexp.matchRegexpString',
        args: [
            {
                name: 'r',
                desc: 'The regular expression used to search `v`',
                type: 'Regexp',
            },
            {
                name: 'v',
                desc: 'The string value to search.',
                type: 'String',
            },
        ],
        package: 'regexp',
        desc: 'Tests if a string contains any match to a regular expression.',
        example: 'regexp.matchRegexpString(r: /(go){2}/, v: "gogogopher")',
        category: 'Tests',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/regexp/matchregexpstring/',
    },
    {
        name: 'regexp.quoteMeta',
        args: [
            {
                name: 'v',
                desc: 'String value containing regular expression metacharacters to escape.',
                type: 'String',
            },
        ],
        package: 'regexp',
        desc: 'Escapes all regular expression metacharacters inside of a string.',
        example: 'regexp.quoteMeta(v: ".+*?()|[]{}^$")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/regexp/quotemeta/',
    },
    {
        name: 'regexp.replaceAllString',
        args: [
            {
                name: 'r',
                desc: 'The regular expression used to search `v`',
                type: 'Regexp',
            },
            {
                name: 'v',
                desc: 'The string value to search.',
                type: 'String',
            },
            {
                name: 't',
                desc: 'The replacement for matches to `r`',
                type: 'String',
            },
        ],
        package: 'regexp',
        desc: 'Replaces all regular expression matches in a string with a specified replacement.',
        example: 'regexp.replaceAllString(r: /a(x*)b/, v: "-ab-axxb-", t: "T")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/regexp/replaceallstring/',
    },
    {
        name: 'regexp.splitRegexp',
        args: [
            {
                name: 'r',
                desc: 'The regular expression used to search `v`',
                type: 'Regexp',
            },
            {
                name: 'v',
                desc: 'The string value to search.',
                type: 'String',
            },
            {
                name: 'i',
                desc: 'The number of substrings to return.',
                type: 'Integer',
            },
        ],
        package: 'regexp',
        desc: 'Splits a string into substrings separated by regular expression matches and returns an array of `i` substrings between matches.',
        example: 'regexp.splitRegexp(r: /a*/, v: "abaabaccadaaae", i: 5)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/regexp/splitregexp/',
    },
    {
        name: 'relativeStrengthIndex',
        args: [
            {
                name: 'n',
                desc: 'The number of values to use to calculate the relative strength index (RSI).',
                type: 'Integer',
            },
            {
                name: 'columns',
                desc: 'Columns to operate on. Defaults to `["_value"]`.',
                type: 'Array of Strings`',
            },
        ],
        package: '',
        desc: 'Measures the relative speed and change of values in an input table.',
        example: 'relativeStrengthIndex(n: 5)',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/relativestrengthindex/',
    },
    {
        name: 'rename',
        args: [
            {
                name: 'columns',
                desc: 'A map of columns to rename and their corresponding new names. Cannot be used with `fn`.',
                type: 'Object',
            },
            {
                name: 'fn',
                desc: 'A function mapping between old and new column names. Cannot be used with `columns`.',
                type: 'Function',
            },
        ],
        package: '',
        desc: 'Renames specified columns in a table. If a column is renamed and is part of the group key, the column name in the group key will be updated.',
        example: 'rename(columns: {host: "server", _field: "my_field"})',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/rename/',
    },
    {
        name: 'runtime.version',
        args: [],
        package: 'runtime',
        desc: 'Returns the current Flux version.',
        example: 'runtime.version()',
        category: 'Miscellaneous',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/runtime/version/',
    },
    {
        name: 'sample',
        args: [
            {
                name: 'n',
                desc: 'Sample every Nth element.',
                type: 'Integer',
            },
            {
                name: 'pos',
                desc: 'The position offset from the start of results where sampling begins. `pos` must be less than `n`. If `pos` is less than 0, a random offset is used. Defaults to `-1` (random offset).',
                type: 'Integer',
            },
        ],
        package: '',
        desc: 'Selects a subset of the records from the input table.',
        example: 'sample(n:5, pos: -1)',
        category: 'Selectors',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/selectors/sample/',
    },
    {
        name: 'secrets.get',
        args: [
            {
                name: 'key',
                desc: 'The secret key to retrieve.',
                type: 'String',
            },
        ],
        package: 'influxdata/influxdb/secrets',
        desc: 'Retrieves a secret from the InfluxDB secret store.',
        example: 'secrets.get(key: "KEY_NAME")',
        category: 'Miscellaneous',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/secrets/get/',
    },
    {
        name: 'set',
        args: [
            {
                name: 'key',
                desc: 'The label of the column to modify or set.',
                type: 'String',
            },
            {
                name: 'value',
                desc: 'The string value to set.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Assigns a static value to each record in the input table. The key may modify an existing column or add a new column to the tables. If the modified column is part of the group key, the output tables are regrouped as needed.',
        example: 'set(key: "_field", value: "my_field")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/set/',
    },
    {
        name: 'skew',
        args: [
            {
                name: 'column',
                desc: 'The column on which to operate. Defaults to `"_value"`.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Outputs the skew of non-null records as a float.',
        example: 'skew(column: "_value")',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/skew/',
    },
    {
        name: 'sleep',
        args: [
            {
                name: 'v',
                desc: 'Defines input tables.',
                type: 'Object',
            },
            {
                name: 'duration',
                desc: 'The length of time to delay execution.',
                type: 'Duration',
            },
        ],
        package: '',
        desc: 'Delays execution by a specified duration.',
        example: 'sleep(duration: 5s)',
        category: 'Miscellaneous',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/misc/sleep/',
    },
    {
        name: 'sort',
        args: [
            {
                name: 'columns',
                desc: 'List of columns by which to sort. Sort precedence is determined by list order (left to right). Default is `["_value"]`.',
                type: 'Array of Strings',
            },
            {
                name: 'desc',
                desc: 'Sort results in descending order. Default is `false`.',
                type: 'Boolean',
            },
        ],
        package: '',
        desc: 'Orders the records within each table. One output table is produced for each input table. The output tables will have the same schema as their corresponding input tables.',
        example: 'sort(columns: ["_value"], desc: false)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/sort/',
    },
    {
        name: 'spread',
        args: [
            {
                name: 'column',
                desc: 'The column on which to operate. Defaults to `"_value"`.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Outputs the difference between the minimum and maximum values in the specified column. Only `uint`, `int`, and `float` column types can be used.',
        example: 'spread(column: "_value")',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/spread/',
    },
    {
        name: 'sql.from',
        args: [
            {
                name: 'driverName',
                desc: 'The driver used to connect to the SQL database.',
                type: 'String',
            },
            {
                name: 'dataSourceName',
                desc: 'The connection string used to connect to the SQL database. The string’s form and structure depend on the driver.',
                type: 'String',
            },
            {
                name: 'query',
                desc: 'The query to run against the SQL database.',
                type: 'String',
            },
        ],
        package: 'sql',
        desc: 'Retrieves data from a SQL data source.',
        example: 'sql.from(driverName: "postgres", dataSourceName: "postgresql://user:password@localhost", query:"SELECT * FROM example_table")',
        category: 'Inputs',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/sql/from/',
    },
    {
        name: 'sql.to',
        args: [
            {
                name: 'driverName',
                desc: 'The driver used to connect to the SQL database.',
                type: 'String',
            },
            {
                name: 'dataSourceName',
                desc: 'The connection string used to connect to the SQL database. The string’s form and structure depend on the driver.',
                type: 'String',
            },
            {
                name: 'table',
                desc: 'The destination table.',
                type: 'String',
            },
            {
                name: 'batchSize',
                desc: 'The number of parameters or columns that can be queued within each call to `Exec`. Defaults to `10000`.',
                type: 'Integer',
            },
        ],
        package: 'sql',
        desc: 'Writes data to a SQL database.',
        example: 'sql.to(driverName: "postgres", dataSourceName: "postgresql://user:password@localhost", table: "example_table")',
        category: 'Outputs',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/sql/to/',
    },
    {
        name: 'stateCount',
        args: [
            {
                name: 'fn',
                desc: 'A single argument function that evaluates true or false to identify the state of the record.',
                type: 'Function',
            },
            {
                name: 'column',
                desc: 'The name of the column added to each record that contains the incremented state count.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Computes the number of consecutive records in a given state and stores the increment in a new column.',
        example: 'stateCount(fn: (r) => r._field == "state", column: "stateCount")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/statecount/',
    },
    {
        name: 'stateDuration',
        args: [
            {
                name: 'fn',
                desc: 'A single argument function that evaluates true or false to identify the state of the record.',
                type: 'Function',
            },
            {
                name: 'column',
                desc: 'Name of the column added to each record that contains the incremented state duration.',
                type: 'String',
            },
            {
                name: 'unit',
                desc: 'Unit of time in which the state duration is incremented.',
                type: 'Duration',
            },
        ],
        package: '',
        desc: 'Computes the duration of a given state and stores the increment in a new column.',
        example: 'stateDuration(fn: (r) => r._measurement == "state", column: "stateDuration", unit: 1s)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/stateduration/',
    },
    {
        name: 'stddev',
        args: [
            {
                name: 'column',
                desc: 'The column on which to operate. Defaults to `"_value"`.',
                type: 'String',
            },
            {
                name: 'mode',
                desc: 'The standard deviation mode (sample or population). Defaults to `"sample"`.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Computes the standard deviation of non-null records in specified column.',
        example: 'stddev(column: "_value", mode: "sample")',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/stddev/',
    },
    {
        name: 'string',
        args: [
            {
                name: 'v',
                desc: 'The value to convert.',
                type: 'Integer, UInteger, Float, Boolean, Duration, Time',
            },
        ],
        package: '',
        desc: 'Converts a single value to a string.',
        example: 'string(v: r._value)',
        category: 'Type Conversions',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/type-conversions/string/',
    },
    {
        name: 'strings.compare',
        args: [
            {
                name: 'v',
                desc: 'The string value to compare.',
                type: 'String',
            },
            {
                name: 't',
                desc: 'The string value to compare against.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Compares the lexicographical order of two strings.',
        example: 'strings.compare(v: "a", t: "b")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/compare/',
    },
    {
        name: 'strings.containsAny',
        args: [
            {
                name: 'v',
                desc: 'The string value to search.',
                type: 'String',
            },
            {
                name: 'chars',
                desc: 'Characters to search for.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Reports whether a specified string contains characters from another string.',
        example: 'strings.containsAny(v: "abc", chars: "and")',
        category: 'Tests',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/containsany/',
    },
    {
        name: 'strings.containsStr',
        args: [
            {
                name: 'v',
                desc: 'The string value to search.',
                type: 'String',
            },
            {
                name: 'substr',
                desc: 'The substring to search for.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Reports whether a string contains a specified substring.',
        example: 'strings.containsStr(v: "This and that", substr: "and")',
        category: 'Tests',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/containsstr/',
    },
    {
        name: 'strings.countStr',
        args: [
            {
                name: 'v',
                desc: 'The string value to search.',
                type: 'String',
            },
            {
                name: 'substr',
                desc: 'The substring count.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Counts the number of non-overlapping instances of a substring appears in a string.',
        example: 'strings.countStr(v: "Hello mellow fellow", substr: "ello")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/countstr/',
    },
    {
        name: 'strings.equalFold',
        args: [
            {
                name: 'v',
                desc: 'The string value to compare.',
                type: 'String',
            },
            {
                name: 't',
                desc: 'The string value to compare against.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Reports whether two UTF-8 strings are equal under Unicode case-folding.',
        example: 'strings.equalFold(v: "Go", t: "go")',
        category: 'Tests',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/equalfold/',
    },
    {
        name: 'strings.hasPrefix',
        args: [
            {
                name: 'v',
                desc: 'The string value to search.',
                type: 'String',
            },
            {
                name: 't',
                desc: 'The prefix to search for.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Indicates if a string begins with a specified prefix.',
        example: 'strings.hasPrefix(v: "go gopher", t: "go")',
        category: 'Tests',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/hasprefix/',
    },
    {
        name: 'strings.hasSuffix',
        args: [
            {
                name: 'v',
                desc: 'The string value to search.',
                type: 'String',
            },
            {
                name: 't',
                desc: 'The suffix to search for.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Indicates if a string ends with a specified suffix.',
        example: 'strings.hasPrefix(v: "gopher go", t: "go")',
        category: 'Tests',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/hassuffix/',
    },
    {
        name: 'strings.index',
        args: [
            {
                name: 'v',
                desc: 'The string value to search.',
                type: 'String',
            },
            {
                name: 'substr',
                desc: 'The substring to search for.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Returns the index of the first instance of a substring in a string. If the substring is not present, it returns `-1`.',
        example: 'strings.index(v: "go gopher", substr: "go")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/index-func/',
    },
    {
        name: 'strings.indexAny',
        args: [
            {
                name: 'v',
                desc: 'The string value to search.',
                type: 'String',
            },
            {
                name: 'chars',
                desc: 'Characters to search for.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Returns the index of the first instance of specified characters in a string. If none of the specified characters are present, it returns -1.',
        example: 'strings.indexAny(v: "chicken", chars: "aeiouy")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/indexany/',
    },
    {
        name: 'strings.isDigit',
        args: [
            {
                name: 'v',
                desc: 'The single-character string to test.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Tests if a single-character string is a digit (0-9).',
        example: 'strings.isDigit(v: "7")',
        category: 'Tests',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/isdigit/',
    },
    {
        name: 'strings.isLetter',
        args: [
            {
                name: 'v',
                desc: 'The single-character string to test.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Tests if a single-character string is a letter (a-z, A-Z).',
        example: 'strings.isLetter(v: "A")',
        category: 'Tests',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/isletter/',
    },
    {
        name: 'strings.isLower',
        args: [
            {
                name: 'v',
                desc: 'The single-character string to test.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Tests if a single-character string is lowercase.',
        example: 'strings.isLower(v: "a")',
        category: 'Tests',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/islower/',
    },
    {
        name: 'strings.isUpper',
        args: [
            {
                name: 'v',
                desc: 'The single-character string to test.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Tests if a single-character string is uppercase.',
        example: 'strings.isUpper(v: "A")',
        category: 'Tests',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/isupper/',
    },
    {
        name: 'strings.joinStr',
        args: [
            {
                name: 'arr',
                desc: 'The array of strings to concatenate.',
                type: 'Array of Strings',
            },
            {
                name: 'v',
                desc: 'The separator to use in the concatenated value.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Concatenates elements of a string array into a single string using a specified separator.',
        example: 'strings.joinStr(arr: ["a", "b", "c"], v: ",")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/joinstr/',
    },
    {
        name: 'strings.lastIndex',
        args: [
            {
                name: 'v',
                desc: 'The string value to search.',
                type: 'String',
            },
            {
                name: 'substr',
                desc: 'The substring to search for.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Returns the index of the last instance of a substring in a string. If the substring is not present, the function returns -1.',
        example: 'strings.lastIndex(v: "go gopher", t: "go")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/lastindex/',
    },
    {
        name: 'strings.lastIndexAny',
        args: [
            {
                name: 'v',
                desc: 'The string value to search.',
                type: 'String',
            },
            {
                name: 'chars',
                desc: 'Characters to search for.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Returns the index of the last instance of any specified characters in a string. If none of the specified characters are present, the function returns -1.',
        example: 'strings.lastIndexAny(v: "chicken", chars: "aeiouy")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/lastindexany/',
    },
    {
        name: 'strings.repeat',
        args: [
            {
                name: 'v',
                desc: 'The string value to repeat.',
                type: 'String',
            },
            {
                name: 'i',
                desc: 'The number of times to repeat `v`.',
                type: 'Integer',
            },
        ],
        package: 'strings',
        desc: 'Returns a string consisting of `i` copies of a specified string.',
        example: 'strings.repeat(v: "ha", i: 3)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/repeat/',
    },
    {
        name: 'strings.replace',
        args: [
            {
                name: 'v',
                desc: 'The string value to search.',
                type: 'String',
            },
            {
                name: 't',
                desc: 'The substring to replace.',
                type: 'String',
            },
            {
                name: 'u',
                desc: 'The replacement for `i` instances of `t`.',
                type: 'String',
            },
            {
                name: 'i',
                desc: 'The number of non-overlapping `t` matches to replace.',
                type: 'Integer',
            },
        ],
        package: 'strings',
        desc: 'Replaces the first `i` non-overlapping instances of a substring with a specified replacement.',
        example: 'strings.replace(v: "oink oink oink", t: "oink", u: "moo", i: 2)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/replace/',
    },
    {
        name: 'strings.replaceAll',
        args: [
            {
                name: 'v',
                desc: 'The string value to search.',
                type: 'String',
            },
            {
                name: 't',
                desc: 'The substring to replace.',
                type: 'String',
            },
            {
                name: 'u',
                desc: 'The replacement for all instances of `t`.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Replaces all non-overlapping instances of a substring with a specified replacement.',
        example: 'strings.replaceAll(v: "oink oink oink", t: "oink", u: "moo")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/replaceall/',
    },
    {
        name: 'strings.split',
        args: [
            {
                name: 'v',
                desc: 'The string value to split.',
                type: 'String',
            },
            {
                name: 't',
                desc: 'The string value that acts as the separator.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Splits a string on a specified separator and returns an array of substrings.',
        example: 'strings.split(v: "a flux of foxes", t: " ")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/split/',
    },
    {
        name: 'strings.splitAfter',
        args: [
            {
                name: 'v',
                desc: 'The string value to split.',
                type: 'String',
            },
            {
                name: 't',
                desc: 'The string value that acts as the separator.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Splits a string after a specified separator and returns an array of substrings.',
        example: 'strings.splitAfter(v: "a flux of foxes", t: " ")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/splitafter/',
    },
    {
        name: 'strings.splitAfterN',
        args: [
            {
                name: 'v',
                desc: 'The string value to split.',
                type: 'String',
            },
            {
                name: 't',
                desc: 'The string value that acts as the separator.',
                type: 'String',
            },
            {
                name: 'i',
                desc: 'The number of substrings to return.',
                type: 'Integer',
            },
        ],
        package: 'strings',
        desc: 'Splits a string after a specified separator and returns an array of `i` substrings.',
        example: 'strings.splitAfterN(v: "a flux of foxes", t: " ", i: 2)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/splitaftern/',
    },
    {
        name: 'strings.splitN',
        args: [
            {
                name: 'v',
                desc: 'The string value to split.',
                type: 'String',
            },
            {
                name: 't',
                desc: 'The string value that acts as the separator.',
                type: 'String',
            },
            {
                name: 'i',
                desc: 'The number of substrings to return.',
                type: 'Integer',
            },
        ],
        package: 'strings',
        desc: 'Splits a string on a specified separator and returns an array of `i` substrings.',
        example: 'strings.splitN(v: "a flux of foxes", t: " ", i: 2)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/splitn/',
    },
    {
        name: 'strings.strlen',
        args: [
            {
                name: 'v',
                desc: 'The string value to measure.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Returns the length of a string.',
        example: 'strings.strlen(v: "a flux of foxes")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/strlen/',
    },
    {
        name: 'strings.substring',
        args: [
            {
                name: 'v',
                desc: 'The string value to search.',
                type: 'String',
            },
            {
                name: 'start',
                desc: 'The starting index of the substring.',
                type: 'Integer',
            },
            {
                name: 'end',
                desc: 'The ending index of the substring.',
                type: 'Integer',
            },
        ],
        package: 'strings',
        desc: 'Returns a substring based on start and end parameters.',
        example: 'strings.substring(v: "influx", start: 0, end: 3)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/substring/',
    },
    STRINGS_TITLE,
    {
        name: 'strings.toLower',
        args: [
            {
                name: 'v',
                desc: 'The string value to convert.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Converts a string to lower case.',
        example: 'strings.toLower(v: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/tolower/',
    },
    {
        name: 'strings.toTitle',
        args: [
            {
                name: 'v',
                desc: 'The string value to convert.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Converts all characters in a string to title case.',
        example: 'strings.toTitle(v: "a flux of foxes")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/totitle/',
    },
    {
        name: 'strings.toUpper',
        args: [
            {
                name: 'v',
                desc: 'The string value to convert.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Converts a string to upper case.',
        example: 'strings.toUpper(v: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/toupper/',
    },
    STRINGS_TRIM,
    {
        name: 'strings.trimLeft',
        args: [
            {
                name: 'v',
                desc: 'The string to remove characters from.',
                type: 'String',
            },
            {
                name: 'cutset',
                desc: 'The leading characters to remove from the string.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Removes specified leading characters from a string.',
        example: 'strings.trimLeft(v: ".abc", cutset: ".")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/trimleft/',
    },
    {
        name: 'strings.trimPrefix',
        args: [
            {
                name: 'v',
                desc: 'The string value to trim.',
                type: 'String',
            },
            {
                name: 'prefix',
                desc: 'The prefix to remove.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Removes a prefix from a string. Strings that do not start with the prefix are returned unchanged.',
        example: 'strings.trimPrefix(v: r._value, prefix: "abc_")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/trimprefix/',
    },
    {
        name: 'strings.trimRight',
        args: [
            {
                name: 'v',
                desc: 'The string to remove characters from.',
                type: 'String',
            },
            {
                name: 'cutset',
                desc: 'The trailing characters to remove from the string.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Removes specified trailing characters from a string.',
        example: 'strings.trimRight(v: "abc.", cutset: ".")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/trimright/',
    },
    {
        name: 'strings.trimSpace',
        args: [
            {
                name: 'v',
                desc: 'The string value to trim.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Removes leading and trailing spaces from a string.',
        example: 'strings.trimSpace(v: r._value)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/trimspace/',
    },
    {
        name: 'strings.trimSuffix',
        args: [
            {
                name: 'v',
                desc: 'The string value to trim.',
                type: 'String',
            },
            {
                name: 'suffix',
                desc: 'The suffix to remove.',
                type: 'String',
            },
        ],
        package: 'strings',
        desc: 'Removes a suffix from a string. Strings that do not end with the suffix are returned unchanged.',
        example: 'strings.trimSuffix(v: r._value, suffix: "_123")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/strings/trimsuffix/',
    },
    {
        name: 'sum',
        args: [
            {
                name: 'column',
                desc: 'The column on which to operate. Defaults to `"_value"`.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Computes the sum of non-null records in the specified column.',
        example: 'sum(column: "_value")',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/sum/',
    },
    {
        name: 'system.time',
        args: [],
        package: 'system',
        desc: 'Returns the current system time.',
        example: 'system.time()',
        category: 'Miscellaneous',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/system/time/',
    },
    {
        name: 'tableFind',
        args: [
            {
                name: 'fn',
                desc: 'A predicate function for matching keys in a table group key.',
                type: 'Function',
            },
        ],
        package: '',
        desc: 'Extracts the first table in a stream of tables whose group key values match a predicate. If no table is found, the function errors.',
        example: 'tableFind(fn: (key) => key._field == "fieldName")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/stream-table/tablefind/',
    },
    {
        name: 'tail',
        args: [
            {
                name: 'n',
                desc: 'The maximum number of records to output.',
                type: 'Integer',
            },
            {
                name: 'offset',
                desc: 'The number of records to skip at the end of a table before limiting to `n`. Defaults to `0`.',
                type: 'Integer',
            },
        ],
        package: '',
        desc: 'Limits each output table to the last `n` records, excluding the offset.',
        example: 'tail(n: 10)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/tail/',
    },
    {
        name: 'testing.assertEmpty',
        args: [],
        package: 'testing',
        desc: 'Tests if an input stream is empty.',
        example: 'testing.assertEmpty()',
        category: 'Test',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/testing/assertempty/',
    },
    {
        name: 'testing.assertEquals',
        args: [
            {
                name: 'name',
                desc: 'Unique name given to the assertion.',
                type: 'String',
            },
            {
                name: 'got',
                desc: 'The stream containing data to test.',
                type: 'Obscflect',
            },
            {
                name: 'want',
                desc: 'The stream that contains the expected data to test against.',
                type: 'Object',
            },
        ],
        package: 'testing',
        desc: 'Tests whether two streams have identical data.',
        example: 'testing.assertEquals(got: got, want: want)',
        category: 'Test',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/testing/assertequals/',
    },
    {
        name: 'testing.diff',
        args: [
            {
                name: 'got',
                desc: 'The stream containing data to test.',
                type: 'Obscflect',
            },
            {
                name: 'want',
                desc: 'The stream that contains the expected data to test against.',
                type: 'Object',
            },
        ],
        package: 'testing',
        desc: 'Produces a diff between two streams.',
        example: 'testing.assertEquals(got: got, want: want)',
        category: 'Test',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/testing/diff/',
    },
    {
        name: 'time',
        args: [
            {
                name: 'v',
                desc: 'The value to convert.',
                type: 'String, Integer, UInteger',
            },
        ],
        package: '',
        desc: 'Converts a single value to a time.',
        example: 'time(v: r._value)',
        category: 'Type Conversions',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/type-conversions/time/',
    },
    {
        name: 'timedMovingAverage',
        args: [
            {
                name: 'every',
                desc: 'The frequency of time windows.',
                type: 'Duration',
            },
            {
                name: 'period',
                desc: 'The length of each averaged time window.',
                type: 'Duration',
            },
            {
                name: 'column',
                desc: 'The column on which to compute the moving average. Defaults to `"_value"`',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Calculates the mean of values in a defined time range at a specified frequency.',
        example: 'timedMovingAverage(every: 1d, period: 5d)',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/timedmovingaverage/',
    },
    {
        name: 'timeShift',
        args: [
            {
                name: 'duration',
                desc: 'The amount of time to add to each time value. May be a negative duration.',
                type: 'String',
            },
            {
                name: 'columns',
                desc: 'The list of all columns to be shifted. Defaults to `["_start", "_stop", "_time"]`.',
                type: 'Array of Strings',
            },
        ],
        package: '',
        desc: 'Adds a fixed duration to time columns. The output table schema is the same as the input table.',
        example: 'timeShift(duration: 10h, columns: ["_start", "_stop", "_time"])',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/shift/',
    },
    {
        name: 'to',
        args: [
            {
                name: 'bucket',
                desc: 'The bucket to which data is written. Mutually exclusive with `bucketID`.',
                type: 'String',
            },
            {
                name: 'bucketID',
                desc: 'The ID of the bucket to which data is written. Mutually exclusive with `bucket`.',
                type: 'String',
            },
            {
                name: 'org',
                desc: 'The organization name of the specified `bucket`. Only required when writing to a remote host. Mutually exclusive with `orgID`.',
                type: 'String',
            },
            {
                name: 'orgID',
                desc: 'The organization ID of the specified `bucket`. Only required when writing to a remote host. Mutually exclusive with `org`.',
                type: 'String',
            },
            {
                name: 'host',
                desc: 'The remote InfluxDB host to which to write. If specified, a `token` is required.',
                type: 'String',
            },
            {
                name: 'token',
                desc: 'The authorization token to use when writing to a remote host. Required when a `host` is specified.',
                type: 'String',
            },
            {
                name: 'timeColumn',
                desc: 'The time column of the output. Default is `"_time"`.',
                type: 'String',
            },
            {
                name: 'tagColumns',
                desc: 'The tag columns of the output. Defaults to all columns with type `string`, excluding all value columns and the `_field` column if present.',
                type: 'Array of Strings',
            },
            {
                name: 'fieldFn',
                desc: 'Function that takes a record from the input table and returns an object. For each record from the input table, `fieldFn` returns an object that maps output the field key to the output value. Default is `(r) => ({ [r._field]: r._value })`',
                type: 'Function',
            },
        ],
        package: '',
        desc: 'The `to()` function writes data to an InfluxDB v2.0 bucket.',
        example: 'to(bucket:"my-bucket", org:"my-org")',
        category: 'Outputs',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/outputs/to/',
    },
    {
        name: 'toBool',
        args: [],
        package: '',
        desc: 'Converts all values in the `_value` column to a boolean.',
        example: 'toBool()',
        category: 'Type Conversions',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/type-conversions/tobool',
    },
    {
        name: 'toFloat',
        args: [],
        package: '',
        desc: 'Converts all values in the `_value` column to a float.',
        example: 'toFloat()',
        category: 'Type Conversions',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/type-conversions/tofloat/',
    },
    {
        name: 'toInt',
        args: [],
        package: '',
        desc: 'Converts all values in the `_value` column to a integer.',
        example: 'toInt()',
        category: 'Type Conversions',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/type-conversions/toint/',
    },
    {
        name: 'toString',
        args: [],
        package: '',
        desc: 'Converts a value to a string.',
        example: 'toString()',
        category: 'Type Conversions',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/type-conversions/tostring/',
    },
    {
        name: 'toTime',
        args: [],
        package: '',
        desc: 'Converts a value to a time.',
        example: 'toTime()',
        category: 'Type Conversions',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/type-conversions/totime/',
    },
    {
        name: 'toUInt',
        args: [],
        package: '',
        desc: 'Converts a value to an unsigned integer.',
        example: 'toUInt()',
        category: 'Type Conversions',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/type-conversions/touint/',
    },
    {
        name: 'top',
        args: [
            {
                name: 'n',
                desc: 'Number of rows to return.',
                type: 'Integer',
            },
            {
                name: 'columns',
                desc: 'List of columns by which to sort. Sort precedence is determined by list order (left to right). Default is `["_value"]`.',
                type: 'Array of Strings',
            },
        ],
        package: '',
        desc: 'Sorts a table by columns and keeps only the top n rows.',
        example: 'top(n:10, columns: ["_value"])',
        category: 'Selectors',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/selectors/top/',
    },
    {
        name: 'tripleEMA',
        args: [
            {
                name: 'n',
                desc: 'The number of points to average.',
                type: 'Integer',
            },
        ],
        package: '',
        desc: 'Calculates the exponential moving average of values in the `_value` column grouped into `n` number of points, giving more weight to recent data at triple the rate of `exponentialMovingAverage()`.',
        example: 'tripleEMA(n: 5)',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/tripleema/',
    },
    {
        name: 'tripleExponentialDerivative',
        args: [
            {
                name: 'n',
                desc: 'The number of points to use in the calculation.',
                type: 'Integer',
            },
        ],
        package: '',
        desc: 'Calculates a triple exponential derivative (TRIX) of input tables using n points.',
        example: 'tripleExponentialDerivative(n: 5)',
        category: 'Aggregates',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/aggregates/tripleexponentialderivative/',
    },
    {
        name: 'truncateTimeColumn',
        args: [
            {
                name: 'unit',
                desc: 'The unit of time to truncate to.',
                type: 'Duration',
            },
        ],
        package: '',
        desc: 'Truncates all `_time` values to a specified unit.',
        example: 'truncateTimeColumn(unit: 1m)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/truncatetimecolumn/',
    },
    {
        name: 'uint',
        args: [
            {
                name: 'v',
                desc: 'The value to convert.',
                type: 'String, Integer, Boolean',
            },
        ],
        package: '',
        desc: 'Converts a single value to a uinteger.',
        example: 'uint(v: r._value)',
        category: 'Type Conversions',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/type-conversions/uint/',
    },
    UNION,
    {
        name: 'unique',
        args: [
            {
                name: 'column',
                desc: 'The column searched for unique values. Defaults to `"_value"`.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Returns all rows containing unique values in a specified column.',
        example: 'unique(column: "_value")',
        category: 'Selectors',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/selectors/unique/',
    },
    {
        name: 'v1.fieldsAsCols',
        args: [],
        package: 'influxdata/influxdb/v1',
        desc: 'Aligns fields within each input table that have the same timestamp.',
        example: 'v1.fieldsAsCols()',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/influxdb-v1/fieldsascols/',
    },
    {
        name: 'v1.measurementTagKeys',
        args: [
            {
                name: 'bucket',
                desc: 'The bucket from which to return tag keys for a specific measurement.',
                type: 'String',
            },
            {
                name: 'measurement',
                desc: 'The measurement from which to return tag keys.',
                type: 'String',
            },
        ],
        package: 'influxdata/influxdb/v1',
        desc: 'Returns a list of tag keys for a specific measurement.',
        example: 'v1.measurementTagKeys(bucket: "telegraf", measurement: "mem")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/influxdb-v1/measurementtagkeys/',
    },
    {
        name: 'v1.measurementTagValues',
        args: [
            {
                name: 'bucket',
                desc: 'The bucket from which to return tag keys for a specific measurement.',
                type: 'String',
            },
            {
                name: 'measurement',
                desc: 'The measurement from which to return tag values.',
                type: 'String',
            },
            {
                name: 'tag',
                desc: 'The tag from which to return all unique values.',
                type: 'String',
            },
        ],
        package: 'influxdata/influxdb/v1',
        desc: 'Returns a list of tag values for a specific measurement.',
        example: 'v1.measurementTagValues(bucket: "telegraf", measurement: "mem", tag: "host")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/influxdb-v1/measurementtagvalues/',
    },
    {
        name: 'v1.measurements',
        args: [
            {
                name: 'bucket',
                desc: 'The bucket from which to list measurements.',
                type: 'String',
            },
        ],
        package: 'influxdata/influxdb/v1',
        desc: 'Returns a list of measurements in a specific bucket.',
        example: 'v1.measurements(bucket: "telegraf")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/influxdb-v1/measurements/',
    },
    {
        name: 'v1.tagKeys',
        args: [
            {
                name: 'bucket',
                desc: 'The bucket from which to list tag keys.',
                type: 'String',
            },
            {
                name: 'predicate',
                desc: 'The predicate function that filters tag keys. Defaults to `(r) => true.`',
                type: 'Function',
            },
            {
                name: 'start',
                desc: 'Specifies the oldest time to be included in the results. Defaults to `-30d`.',
                type: 'Duration, Time',
            },
        ],
        package: 'influxdata/influxdb/v1',
        desc: 'Returns a list of tag keys for all series that match the predicate.',
        example: 'v1.tagKeys(bucket: "telegraf")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/influxdb-v1/tagkeys/',
    },
    {
        name: 'v1.tagValues',
        args: [
            {
                name: 'bucket',
                desc: 'The bucket from which to list tag values.',
                type: 'String',
            },
            {
                name: 'tag',
                desc: 'The tag for which to return unique values.',
                type: 'String',
            },
            {
                name: 'predicate',
                desc: 'The predicate function that filters tag values. Defaults to `(r) => true.`',
                type: 'Function',
            },
            {
                name: 'start',
                desc: 'Specifies the oldest time to be included in the results. Defaults to `-30d`.',
                type: 'Duration, Time',
            },
        ],
        package: 'influxdata/influxdb/v1',
        desc: 'Returns a list of unique values for a given tag.',
        example: 'v1.tagValues(bucket: "telegraf")',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/influxdb-v1/tagvalues/',
    },
    {
        name: 'window',
        args: [
            {
                name: 'every',
                desc: 'Duration of time between windows. Defaults to `period` value.',
                type: 'Duration',
            },
            {
                name: 'period',
                desc: 'Duration of the window. Period is the length of each interval. It can be negative, indicating the start and stop boundaries are reversed. Defaults to `every` value.',
                type: 'Duration',
            },
            {
                name: 'offset',
                desc: 'The offset duration relative to the `location` offset. It can be negative, indicating that the offset goes backwards in time. The default aligns the window boundaries with `now`.',
                type: 'Duration',
            },
            {
                name: 'intervals',
                desc: 'A function that returns an interval generator, a set of intervals used as windows. See docs for an example.',
                type: 'Function',
            },
            {
                name: 'timeColumn',
                desc: 'The column containing time. Defaults to `"_time"`.',
                type: 'String',
            },
            {
                name: 'startColumn',
                desc: 'The column containing the window start time. Defaults to `"_start"`.',
                type: 'String',
            },
            {
                name: 'stopColumn',
                desc: 'The column containing the window stop time. Defaults to `"_stop"`.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Groups records based on a time value. New columns are added to uniquely identify each window. Those columns are added to the group key of the output tables. A single input record will be placed into zero or more output tables, depending on the specific windowing function.',
        example: 'window(every: v.windowPeriod)',
        category: 'Transformations',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/transformations/window/',
    },
    {
        name: 'yield',
        args: [
            {
                name: 'name',
                desc: 'A unique name for the yielded results.',
                type: 'String',
            },
        ],
        package: '',
        desc: 'Indicates the input tables received should be delivered as a result of the query. Yield outputs the input stream unmodified. A query may have multiple results, each identified by the name provided to the `yield()` function.',
        example: 'yield(name: "custom-name")',
        category: 'Outputs',
        link: 'https://v2.docs.influxdata.com/v2.0/reference/flux/stdlib/built-in/outputs/yield/',
    },
];

// CONCATENATED MODULE: ./src/timeMachine/components/fluxFunctionsToolbar/FluxFunctionsToolbar.tsx










class FluxFunctionsToolbar_FluxFunctionsToolbar extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = { searchTerm: '' };
        this.handleSearch = (searchTerm) => {
            this.setState({ searchTerm });
        };
        this.handleClickFunction = (func) => {
            this.props.onInsertFluxFunction(func);
        };
    }
    render() {
        const { searchTerm } = this.state;
        return (react_default.a.createElement("div", { className: "flux-functions-toolbar" },
            react_default.a.createElement(components_SearchBar, { onSearch: this.handleSearch, resourceName: "Functions" }),
            react_default.a.createElement(FancyScrollbar["a" /* default */], null,
                react_default.a.createElement("div", { className: "flux-functions-toolbar--list" },
                    react_default.a.createElement(fluxFunctionsToolbar_TransformToolbarFunctions, { funcs: FLUX_FUNCTIONS, searchTerm: searchTerm }, sortedFunctions => Object.entries(sortedFunctions).map(([category, funcs]) => (react_default.a.createElement(fluxFunctionsToolbar_FunctionCategory, { key: category, category: category, funcs: funcs, onClickFunction: this.handleClickFunction }))))))));
    }
}
const FluxFunctionsToolbar_mstp = (state) => {
    const activeQueryText = Object(timeMachine_selectors["a" /* getActiveQuery */])(state).text;
    return { activeQueryText };
};
const FluxFunctionsToolbar_mdtp = {
    onSetActiveQueryText: timeMachine_actions["h" /* setActiveQueryText */],
};
/* harmony default export */ var fluxFunctionsToolbar_FluxFunctionsToolbar = (Object(es["b" /* connect */])(FluxFunctionsToolbar_mstp, FluxFunctionsToolbar_mdtp)(Object(decorators_errors["a" /* ErrorHandling */])(FluxFunctionsToolbar_FluxFunctionsToolbar)));

// EXTERNAL MODULE: ./src/timeMachine/actions/queries.ts
var actions_queries = __webpack_require__(137);

// CONCATENATED MODULE: ./src/shared/utils/toComponentStatus.ts


const toComponentStatus = (status) => {
    if (status === types["RemoteDataState"].NotStarted) {
        return clockface["e" /* ComponentStatus */].Disabled;
    }
    if (status === types["RemoteDataState"].Loading) {
        return clockface["e" /* ComponentStatus */].Loading;
    }
    if (status === types["RemoteDataState"].Error) {
        return clockface["e" /* ComponentStatus */].Error;
    }
    return clockface["e" /* ComponentStatus */].Default;
};

// CONCATENATED MODULE: ./src/timeMachine/components/variableToolbar/VariableTooltipContents.tsx








const VariableTooltipContents = ({ variableID, values, valuesStatus, onAddVariableToTimeMachine, onSelectVariableValue, }) => {
    const dropdownItems = Object(lodash["get"])(values, 'values') || [];
    const handleMouseEnter = () => {
        if (values || valuesStatus === types["RemoteDataState"].Loading) {
            return;
        }
        onAddVariableToTimeMachine(variableID);
    };
    let selectedOption = 'None Selected';
    let icon;
    let status = toComponentStatus(valuesStatus);
    if (!values) {
        selectedOption = 'Failed to Load';
        icon = clockface_dist["IconFont"].AlertTriangle;
        status = clockface_dist["ComponentStatus"].Disabled;
    }
    else if (values.error) {
        selectedOption = 'Failed to Load';
        icon = clockface_dist["IconFont"].AlertTriangle;
        status = clockface_dist["ComponentStatus"].Disabled;
    }
    else if (!values.values.length) {
        selectedOption = 'No Results';
    }
    else {
        selectedOption = Object(lodash["get"])(values, 'selectedValue', 'None Selected');
    }
    return (react_default.a.createElement("div", { onMouseEnter: handleMouseEnter },
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Value" },
            react_default.a.createElement(clockface_dist["SelectDropdown"], { buttonIcon: icon, options: dropdownItems, selectedOption: selectedOption, buttonStatus: status, style: { width: '200px' }, onSelect: value => onSelectVariableValue(variableID, value) }))));
};
const VariableTooltipContents_mstp = (state, ownProps) => {
    const valuesStatus = Object(variables_selectors["l" /* getTimeMachineValuesStatus */])(state);
    const values = Object(variables_selectors["k" /* getTimeMachineValues */])(state, ownProps.variableID);
    return { values, valuesStatus };
};
const VariableTooltipContents_mdtp = {
    onAddVariableToTimeMachine: actions_queries["a" /* addVariableToTimeMachine */],
    onSelectVariableValue: actions_queries["f" /* selectVariableValue */],
};
/* harmony default export */ var variableToolbar_VariableTooltipContents = (Object(es["b" /* connect */])(VariableTooltipContents_mstp, VariableTooltipContents_mdtp)(VariableTooltipContents));

// CONCATENATED MODULE: ./src/timeMachine/components/variableToolbar/VariableLabel.tsx

const VariableLabel = ({ onClickVariable, name }) => {
    return (react_default.a.createElement("div", { className: "variables-toolbar--label", onClick: () => {
            onClickVariable(name);
        } }, name));
};
/* harmony default export */ var variableToolbar_VariableLabel = (VariableLabel);

// CONCATENATED MODULE: ./src/timeMachine/components/variableToolbar/VariableItem.tsx




const VariableItem = ({ variable, onClickVariable }) => {
    const trigger = Object(react["useRef"])(null);
    return (react_default.a.createElement("div", { className: "variables-toolbar--item", ref: trigger },
        react_default.a.createElement(variableToolbar_VariableLabel, { name: variable.name, onClickVariable: onClickVariable }),
        react_default.a.createElement(clockface_dist["Popover"], { appearance: clockface_dist["Appearance"].Outline, position: clockface_dist["PopoverPosition"].ToTheLeft, triggerRef: trigger, showEvent: clockface_dist["PopoverInteraction"].Hover, hideEvent: clockface_dist["PopoverInteraction"].Hover, distanceFromTrigger: 8, testID: "toolbar-popover", contents: () => react_default.a.createElement(variableToolbar_VariableTooltipContents, { variableID: variable.id }) })));
};
/* harmony default export */ var variableToolbar_VariableItem = (VariableItem);

// CONCATENATED MODULE: ./src/timeMachine/components/variableToolbar/VariableToolbar.tsx






const VariableToolbar = ({ variables, onClickVariable, }) => {
    const [searchTerm, setSearchTerm] = Object(react["useState"])('');
    return (react_default.a.createElement("div", { className: "variable-toolbar" },
        react_default.a.createElement(components_SearchBar, { onSearch: setSearchTerm, resourceName: "Variables" }),
        react_default.a.createElement(FancyScrollbar["a" /* default */], { style: { marginBottom: '40px' } },
            react_default.a.createElement("div", { className: "variables-toolbar--list" }, variables
                .filter(v => v.name.includes(searchTerm))
                .map(v => (react_default.a.createElement(variableToolbar_VariableItem, { variable: v, key: v.id, onClickVariable: onClickVariable })))))));
};
const VariableToolbar_mstp = (state) => {
    const variables = Object(variables_selectors["f" /* extractVariablesList */])(state);
    return { variables };
};
/* harmony default export */ var variableToolbar_VariableToolbar = (Object(es["b" /* connect */])(VariableToolbar_mstp)(VariableToolbar));

// CONCATENATED MODULE: ./src/timeMachine/components/ToolbarTab.tsx

class ToolbarTab_ToolbarTab extends react["PureComponent"] {
    render() {
        const { active, onSetActive, name, testID } = this.props;
        return (react_default.a.createElement("div", { className: `toolbar-tab ${active ? 'active' : ''}`, onClick: onSetActive, title: name, "data-testid": testID }, name));
    }
}
ToolbarTab_ToolbarTab.defaultProps = {
    testID: 'toolbar-tab',
};

// CONCATENATED MODULE: ./src/timeMachine/utils/insertFunction.ts

const functionRequiresNewLine = (funcName) => {
    switch (funcName) {
        case FROM.name:
        case UNION.name: {
            return true;
        }
        default:
            return false;
    }
};
const formatFunctionForInsert = (funcName, fluxFunction) => {
    if (functionRequiresNewLine(funcName)) {
        return `\n${fluxFunction}`;
    }
    return `  |> ${fluxFunction}`;
};
const generateImport = (funcPackage, script) => {
    const importStatement = `import "${funcPackage}"`;
    if (!funcPackage || script.includes(importStatement)) {
        return false;
    }
    return importStatement;
};

// CONCATENATED MODULE: ./src/timeMachine/components/TimeMachineFluxEditor.tsx












const TimeMachineFluxEditor = ({ activeQueryText, onSubmitQueries, onSetActiveQueryText, activeTab, }) => {
    const [displayFluxFunctions, setDisplayFluxFunctions] = Object(react["useState"])(true);
    const [editorInstance, setEditorInstance] = Object(react["useState"])(null);
    const showFluxFunctions = () => {
        setDisplayFluxFunctions(true);
    };
    const hideFluxFunctions = () => {
        setDisplayFluxFunctions(false);
    };
    const handleInsertVariable = (variableName) => {
        const p = editorInstance.getPosition();
        editorInstance.executeEdits('', [
            {
                range: new window.monaco.Range(p.lineNumber, p.column, p.lineNumber, p.column),
                text: `v.${variableName}`,
            },
        ]);
        onSetActiveQueryText(editorInstance.getValue());
    };
    const handleInsertFluxFunction = (func) => {
        const p = editorInstance.getPosition();
        const edits = [
            {
                range: new window.monaco.Range(p.lineNumber, p.column, p.lineNumber, p.column),
                text: formatFunctionForInsert(func.name, func.example),
            },
        ];
        const importStatement = generateImport(func.package, editorInstance.getValue());
        if (importStatement) {
            edits.unshift({
                range: new window.monaco.Range(1, 1, 1, 1),
                text: `${importStatement}\n`,
            });
        }
        editorInstance.executeEdits('', edits);
        onSetActiveQueryText(editorInstance.getValue());
    };
    const divisions = [
        {
            size: 0.75,
            handleDisplay: constants["u" /* HANDLE_NONE */],
            render: () => {
                return (react_default.a.createElement(components_FluxMonacoEditor, { script: activeQueryText, onChangeScript: onSetActiveQueryText, onSubmitScript: onSubmitQueries, setEditorInstance: setEditorInstance }));
            },
        },
        {
            render: () => {
                return (react_default.a.createElement(react_default.a.Fragment, null,
                    react_default.a.createElement("div", { className: "toolbar-tab-container" },
                        activeTab !== 'customCheckQuery' && (react_default.a.createElement(ToolbarTab_ToolbarTab, { onSetActive: hideFluxFunctions, name: "Variables", active: !displayFluxFunctions })),
                        react_default.a.createElement(ToolbarTab_ToolbarTab, { onSetActive: showFluxFunctions, name: "Functions", active: displayFluxFunctions, testID: "functions-toolbar-tab" })),
                    displayFluxFunctions ? (react_default.a.createElement(fluxFunctionsToolbar_FluxFunctionsToolbar, { onInsertFluxFunction: handleInsertFluxFunction })) : (react_default.a.createElement(variableToolbar_VariableToolbar, { onClickVariable: handleInsertVariable }))));
            },
            handlePixels: 6,
            size: 0.25,
        },
    ];
    return (react_default.a.createElement("div", { className: "time-machine-flux-editor" },
        react_default.a.createElement(threesizer_Threesizer, { orientation: constants["w" /* HANDLE_VERTICAL */], divisions: divisions })));
};
const TimeMachineFluxEditor_mstp = (state) => {
    const activeQueryText = Object(timeMachine_selectors["a" /* getActiveQuery */])(state).text;
    const { activeTab } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    return { activeQueryText, activeTab };
};
const TimeMachineFluxEditor_mdtp = {
    onSetActiveQueryText: timeMachine_actions["h" /* setActiveQueryText */],
    onSubmitQueries: actions_queries["e" /* saveAndExecuteQueries */],
};
/* harmony default export */ var components_TimeMachineFluxEditor = (Object(es["b" /* connect */])(TimeMachineFluxEditor_mstp, TimeMachineFluxEditor_mdtp)(TimeMachineFluxEditor));

// CONCATENATED MODULE: ./src/shared/components/CSVExportButton.tsx






class CSVExportButton_CSVExportButton extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleClick = () => {
            const { files } = this.props;
            const csv = files.join('\n\n');
            const now = moment_default()().format('YYYY-MM-DD-HH-mm');
            const filename = `${now} Chronograf Data`;
            downloadTextFile(csv, filename, '.csv', 'text/csv');
        };
    }
    render() {
        return (react_default.a.createElement(clockface_dist["Button"], { titleText: this.titleText, text: "CSV", icon: clockface_dist["IconFont"].Download, onClick: this.handleClick, status: this.buttonStatus }));
    }
    get buttonStatus() {
        const { files } = this.props;
        if (files) {
            return clockface_dist["ComponentStatus"].Default;
        }
        return clockface_dist["ComponentStatus"].Disabled;
    }
    get titleText() {
        const { files } = this.props;
        if (files) {
            return 'Download query results as a .CSV file';
        }
        return 'Create a query in order to download results as .CSV';
    }
}
const CSVExportButton_mstp = (state) => {
    const { queryResults: { files }, } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    return { files };
};
/* harmony default export */ var components_CSVExportButton = (Object(es["b" /* connect */])(CSVExportButton_mstp)(CSVExportButton_CSVExportButton));

// CONCATENATED MODULE: ./src/timeMachine/components/QueriesSwitcher.tsx






class QueriesSwitcher_TimeMachineQueriesSwitcher extends react["PureComponent"] {
    render() {
        const { onEditAsFlux, onEditWithBuilder } = this.props;
        const { editMode, text, builderConfig } = this.props.activeQuery;
        const scriptMode = editMode !== 'builder';
        let button = (react_default.a.createElement(clockface_dist["Button"], { text: "Script Editor", titleText: "Switch to Script Editor", onClick: onEditAsFlux, testID: "switch-to-script-editor" }));
        if (scriptMode) {
            button = (react_default.a.createElement(clockface_dist["Button"], { text: "Query Builder", titleText: "Switch to Query Builder", onClick: onEditWithBuilder, testID: "switch-to-query-builder" }));
        }
        if (scriptMode &&
            Object(utils_queryBuilder["c" /* confirmationState */])(text, builderConfig) === utils_queryBuilder["a" /* ConfirmationState */].Required) {
            button = (react_default.a.createElement(clockface_dist["ConfirmationButton"], { popoverColor: clockface_dist["ComponentColor"].Danger, popoverAppearance: clockface_dist["Appearance"].Outline, popoverStyle: { width: '400px' }, confirmationLabel: "Switching to Query Builder mode will discard any changes you\n                have made using Flux. This cannot be recovered.", confirmationButtonText: "Switch to Builder", text: "Query Builder", onConfirm: onEditWithBuilder, testID: "switch-query-builder-confirm" }));
        }
        return button;
    }
}
const QueriesSwitcher_mstp = (state) => {
    const activeQuery = Object(timeMachine_selectors["a" /* getActiveQuery */])(state);
    return { activeQuery };
};
const QueriesSwitcher_mdtp = {
    onEditWithBuilder: timeMachine_actions["c" /* editActiveQueryWithBuilder */],
    onEditAsFlux: timeMachine_actions["b" /* editActiveQueryAsFlux */],
};
/* harmony default export */ var QueriesSwitcher = (Object(es["b" /* connect */])(QueriesSwitcher_mstp, QueriesSwitcher_mdtp)(QueriesSwitcher_TimeMachineQueriesSwitcher));

// CONCATENATED MODULE: ./src/timeMachine/components/RefreshDropdown.tsx









class RefreshDropdown_TimeMachineRefreshDropdown extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.autoRefresher = new AutoRefresher();
        this.handleChooseAutoRefresh = (interval) => {
            const { onSetAutoRefresh, autoRefresh } = this.props;
            if (interval === 0) {
                onSetAutoRefresh(Object.assign(Object.assign({}, autoRefresh), { status: types["AutoRefreshStatus"].Paused, interval }));
                return;
            }
            onSetAutoRefresh(Object.assign(Object.assign({}, autoRefresh), { interval, status: types["AutoRefreshStatus"].Active }));
        };
        this.executeQueries = () => {
            this.props.onExecuteQueries();
        };
    }
    componentDidMount() {
        const { autoRefresh } = this.props;
        if (autoRefresh.status === types["AutoRefreshStatus"].Active) {
            this.autoRefresher.poll(autoRefresh.interval);
        }
        this.autoRefresher.subscribe(this.executeQueries);
    }
    componentDidUpdate(prevProps) {
        const { autoRefresh } = this.props;
        if (!Object(lodash["isEqual"])(autoRefresh, prevProps.autoRefresh)) {
            if (autoRefresh.status === types["AutoRefreshStatus"].Active) {
                this.autoRefresher.poll(autoRefresh.interval);
                return;
            }
            this.autoRefresher.stopPolling();
        }
    }
    componentWillUnmount() {
        this.autoRefresher.unsubscribe(this.executeQueries);
        this.autoRefresher.stopPolling();
    }
    render() {
        const { autoRefresh } = this.props;
        return (react_default.a.createElement(dropdown_auto_refresh_AutoRefreshDropdown, { selected: autoRefresh, onChoose: this.handleChooseAutoRefresh, onManualRefresh: this.executeQueries }));
    }
}
const RefreshDropdown_mstp = (state) => {
    const { autoRefresh } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    return { autoRefresh };
};
const RefreshDropdown_mdtp = {
    onExecuteQueries: actions_queries["c" /* executeQueries */],
    onSetAutoRefresh: timeMachine_actions["k" /* setAutoRefresh */],
};
/* harmony default export */ var RefreshDropdown = (Object(es["b" /* connect */])(RefreshDropdown_mstp, RefreshDropdown_mdtp)(RefreshDropdown_TimeMachineRefreshDropdown));

// CONCATENATED MODULE: ./src/shared/components/SearchableDropdown.tsx




let SearchableDropdown_SearchableDropdown = class SearchableDropdown extends react["Component"] {
    constructor() {
        super(...arguments);
        this.handleChange = (e) => {
            const { onChangeSearchTerm } = this.props;
            if (onChangeSearchTerm) {
                onChangeSearchTerm(e.target.value);
            }
        };
    }
    render() {
        const { searchTerm, searchPlaceholder, buttonSize, buttonColor, buttonStatus, buttonTestID, selectedOption, testID, className, style, menuTheme, menuTestID, } = this.props;
        return (react_default.a.createElement(clockface_dist["Dropdown"], { testID: testID, className: className, style: style, button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { active: active, onClick: onClick, testID: buttonTestID, color: buttonColor, size: buttonSize, status: buttonStatus }, selectedOption)), menu: onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse, theme: menuTheme, testID: menuTestID },
                react_default.a.createElement("div", { className: "searchable-dropdown--input-container" },
                    react_default.a.createElement(clockface_dist["Input"], { onChange: this.handleChange, value: searchTerm, placeholder: searchPlaceholder, size: buttonSize, autoFocus: true })),
                this.filteredMenuOptions)) }));
    }
    get filteredMenuOptions() {
        const { searchTerm, options, emptyText, selectedOption, onSelect, } = this.props;
        const filteredOptions = options.filter(option => `${option}`.toLocaleLowerCase().includes(searchTerm.toLocaleLowerCase()));
        if (!filteredOptions.length) {
            return react_default.a.createElement("div", { className: "searchable-dropdown--empty" }, emptyText);
        }
        return filteredOptions.map(option => (react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: option, value: option, selected: option === selectedOption, onClick: onSelect, testID: `searchable-dropdown--item ${option}` }, option)));
    }
};
SearchableDropdown_SearchableDropdown.defaultProps = {
    buttonSize: clockface_dist["ComponentSize"].Small,
    buttonColor: clockface_dist["ComponentColor"].Default,
    buttonStatus: clockface_dist["ComponentStatus"].Default,
    menuTheme: clockface_dist["DropdownMenuTheme"].Onyx,
    testID: 'searchable-dropdown',
    buttonTestID: 'searchable-dropdown--button',
    menuTestID: 'searchable-dropdown--menu',
};
SearchableDropdown_SearchableDropdown = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], SearchableDropdown_SearchableDropdown);
/* harmony default export */ var components_SearchableDropdown = (SearchableDropdown_SearchableDropdown);

// CONCATENATED MODULE: ./src/shared/components/WaitingText.tsx

const WaitingText = ({ text, className }) => {
    return react_default.a.createElement("div", { className: `waiting-text ${className || ''}` }, text);
};
/* harmony default export */ var components_WaitingText = (WaitingText);

// EXTERNAL MODULE: ./src/timeMachine/actions/queryBuilder.ts
var actions_queryBuilder = __webpack_require__(216);

// CONCATENATED MODULE: ./src/shared/utils/debouncer.ts
class DefaultDebouncer {
    constructor() {
        this.timers = {};
    }
    call(f, ms) {
        const timer = this.timers[f];
        if (timer) {
            clearTimeout(timer);
        }
        this.timers[f] = setTimeout(f, ms);
    }
    cancel(f) {
        const timer = this.timers[f];
        if (timer) {
            clearTimeout(timer);
        }
    }
    cancelAll() {
        const timers = Object.values(this.timers);
        for (const timer of timers) {
            clearTimeout(timer);
        }
    }
}
/* harmony default export */ var debouncer = (DefaultDebouncer);

// CONCATENATED MODULE: ./src/timeMachine/components/TagSelector.tsx














const SEARCH_DEBOUNCE_MS = 500;
let TagSelector_TagSelector = class TagSelector extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.debouncer = new debouncer();
        this.handleSelectTag = (tag) => {
            const { index, onSelectTag } = this.props;
            onSelectTag(index, tag);
        };
        this.handleSelectValue = (value) => {
            const { index, onSelectValue } = this.props;
            onSelectValue(index, value);
        };
        this.handleRemoveTagSelector = () => {
            const { index, onRemoveTagSelector } = this.props;
            onRemoveTagSelector(index);
        };
        this.handleKeysSearch = (value) => {
            const { onSetKeysSearchTerm, index } = this.props;
            onSetKeysSearchTerm(index, value);
            this.debouncer.call(this.emitKeysSearch, SEARCH_DEBOUNCE_MS);
        };
        this.emitKeysSearch = () => {
            const { index, onSearchKeys } = this.props;
            onSearchKeys(index);
        };
        this.handleValuesSearch = (e) => {
            const { onSetValuesSearchTerm, index } = this.props;
            const { value } = e.target;
            onSetValuesSearchTerm(index, value);
            this.debouncer.call(this.emitValuesSearch, SEARCH_DEBOUNCE_MS);
        };
        this.emitValuesSearch = () => {
            const { index, onSearchValues } = this.props;
            onSearchValues(index);
        };
        this.handleAggregateFunctionSelect = (option) => {
            const { index, onSetBuilderAggregateFunctionType } = this.props;
            onSetBuilderAggregateFunctionType(option, index);
        };
    }
    renderAggregateFunctionType(aggregateFunctionType) {
        if (aggregateFunctionType === 'group') {
            return 'Group';
        }
        return 'Filter';
    }
    render() {
        return (react_default.a.createElement(BuilderCard_BuilderCard, null,
            this.header,
            this.body));
    }
    get header() {
        const { aggregateFunctionType, index } = this.props;
        return (react_default.a.createElement(BuilderCard_BuilderCard.DropdownHeader, { options: ['filter', 'group'], selectedOption: this.renderAggregateFunctionType(aggregateFunctionType), onDelete: index !== 0 && this.handleRemoveTagSelector, onSelect: this.handleAggregateFunctionSelect }));
    }
    get body() {
        const { aggregateFunctionType, index, keys, keysStatus, selectedKey, emptyText, valuesSearchTerm, keysSearchTerm, } = this.props;
        if (keysStatus === types["RemoteDataState"].NotStarted) {
            return react_default.a.createElement(BuilderCard_BuilderCard.Empty, null, emptyText);
        }
        if (keysStatus === types["RemoteDataState"].Error) {
            return react_default.a.createElement(BuilderCard_BuilderCard.Empty, null, "Failed to load tag keys");
        }
        if (keysStatus === types["RemoteDataState"].Done && !keys.length) {
            return (react_default.a.createElement(BuilderCard_BuilderCard.Empty, { testID: "empty-tag-keys" },
                "No tag keys found ",
                react_default.a.createElement("small", null, "in the current time range")));
        }
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(BuilderCard_BuilderCard.Menu, { testID: `tag-selector--container ${index}` },
                aggregateFunctionType !== 'group' && (react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, alignItems: clockface_dist["AlignItems"].Center, margin: clockface_dist["ComponentSize"].Small },
                    react_default.a.createElement(components_SearchableDropdown, { searchTerm: keysSearchTerm, emptyText: "No Tags Found", searchPlaceholder: "Search keys...", selectedOption: selectedKey, onSelect: this.handleSelectTag, buttonStatus: toComponentStatus(keysStatus), onChangeSearchTerm: this.handleKeysSearch, testID: "tag-selector--dropdown", buttonTestID: "tag-selector--dropdown-button", menuTestID: "tag-selector--dropdown-menu", options: keys }),
                    this.selectedCounter)),
                react_default.a.createElement(clockface_dist["Input"], { value: valuesSearchTerm, placeholder: `Search ${selectedKey} tag values`, className: "tag-selector--search", onChange: this.handleValuesSearch })),
            this.values));
    }
    get values() {
        const { selectedKey, values, valuesStatus, selectedValues } = this.props;
        if (valuesStatus === types["RemoteDataState"].Error) {
            return (react_default.a.createElement(BuilderCard_BuilderCard.Empty, null, `Failed to load tag values for ${selectedKey}`));
        }
        if (valuesStatus === types["RemoteDataState"].Loading) {
            return (react_default.a.createElement(BuilderCard_BuilderCard.Empty, null,
                react_default.a.createElement(components_WaitingText, { text: "Loading tag values" })));
        }
        if (valuesStatus === types["RemoteDataState"].Done && !values.length) {
            return (react_default.a.createElement(BuilderCard_BuilderCard.Empty, null,
                "No values found ",
                react_default.a.createElement("small", null, "in the current time range")));
        }
        return (react_default.a.createElement(components_SelectorList, { items: values, selectedItems: selectedValues, onSelectItem: this.handleSelectValue, multiSelect: !this.props.isInCheckOverlay }));
    }
    get selectedCounter() {
        const { selectedValues } = this.props;
        const pluralizer = selectedValues.length === 1 ? '' : 's';
        if (selectedValues.length > 0) {
            return (react_default.a.createElement("div", { className: "tag-selector--count", title: `${selectedValues.length} value${pluralizer} selected` }, selectedValues.length));
        }
    }
};
TagSelector_TagSelector = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], TagSelector_TagSelector);
const TagSelector_mstp = (state, ownProps) => {
    const activeQueryBuilder = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state).queryBuilder;
    const { keys, keysSearchTerm, keysStatus, valuesSearchTerm, valuesStatus, } = activeQueryBuilder.tags[ownProps.index];
    const tags = Object(timeMachine_selectors["a" /* getActiveQuery */])(state).builderConfig.tags;
    let emptyText;
    const previousTagSelector = tags[ownProps.index - 1];
    if (ownProps.index === 0 ||
        !previousTagSelector ||
        !previousTagSelector.key) {
        emptyText = '';
    }
    else {
        emptyText = `Select a ${tags[ownProps.index - 1].key} value first`;
    }
    const { key: selectedKey, values: selectedValues, aggregateFunctionType, } = tags[ownProps.index];
    const values = Object(timeMachine_selectors["b" /* getActiveTagValues */])(activeQueryBuilder.tags, aggregateFunctionType, ownProps.index);
    const isInCheckOverlay = Object(timeMachine_selectors["i" /* getIsInCheckOverlay */])(state);
    return {
        aggregateFunctionType,
        emptyText,
        keys,
        keysStatus,
        selectedKey,
        values,
        valuesStatus,
        selectedValues,
        valuesSearchTerm,
        keysSearchTerm,
        isInCheckOverlay,
    };
};
const TagSelector_mdtp = {
    onRemoveTagSelector: actions_queryBuilder["d" /* removeTagSelector */],
    onSearchKeys: actions_queryBuilder["e" /* searchTagKeys */],
    onSearchValues: actions_queryBuilder["f" /* searchTagValues */],
    onSelectTag: actions_queryBuilder["j" /* selectTagKey */],
    onSelectValue: actions_queryBuilder["k" /* selectTagValue */],
    onSetBuilderAggregateFunctionType: actions_queryBuilder["l" /* setBuilderAggregateFunctionType */],
    onSetKeysSearchTerm: actions_queryBuilder["m" /* setKeysSearchTerm */],
    onSetValuesSearchTerm: actions_queryBuilder["n" /* setValuesSearchTerm */],
};
/* harmony default export */ var components_TagSelector = (Object(es["b" /* connect */])(TagSelector_mstp, TagSelector_mdtp)(TagSelector_TagSelector));

// CONCATENATED MODULE: ./src/shared/components/DurationInput.tsx



const SUGGESTION_CLASS = 'duration-input--suggestion';
const DurationInput = ({ suggestions, onSubmit, value, placeholder, submitInvalid = true, showDivider = true, testID = 'duration-input', validFunction = _ => false, }) => {
    const [isFocused, setIsFocused] = Object(react["useState"])(false);
    const [inputValue, setInputValue] = Object(react["useState"])(value);
    Object(react["useEffect"])(() => {
        if (value != inputValue) {
            setInputValue(value);
        }
    }, [value]);
    const handleClickSuggestion = (suggestion) => {
        setInputValue(suggestion);
        onSubmit(suggestion);
        setIsFocused(false);
    };
    const handleClickOutside = e => {
        const didClickSuggestion = e.target.classList.contains(SUGGESTION_CLASS) ||
            e.target.parentNode.classList.contains(SUGGESTION_CLASS);
        if (!didClickSuggestion) {
            setIsFocused(false);
        }
    };
    const isValid = (i) => Object(utils_duration["e" /* isDurationParseable */])(i) || validFunction(i);
    const inputStatus = isValid(inputValue)
        ? clockface_dist["ComponentStatus"].Default
        : clockface_dist["ComponentStatus"].Error;
    const onChange = (i) => {
        setInputValue(i);
        if (submitInvalid || (!submitInvalid && isValid(i))) {
            onSubmit(i);
        }
    };
    return (react_default.a.createElement("div", { className: "status-search-bar" },
        react_default.a.createElement(clockface_dist["ClickOutside"], { onClickOutside: handleClickOutside },
            react_default.a.createElement(clockface_dist["Input"], { placeholder: placeholder, value: inputValue, status: inputStatus, onChange: e => onChange(e.target.value), onFocus: () => setIsFocused(true), testID: testID })),
        isFocused && (react_default.a.createElement(clockface_dist["DropdownMenu"], { className: "status-search-bar--suggestions", noScrollX: true },
            showDivider && react_default.a.createElement(clockface_dist["DropdownDivider"], { text: "Examples" }),
            suggestions.map(s => (react_default.a.createElement(clockface_dist["DropdownItem"], { key: s, value: s, className: SUGGESTION_CLASS, onClick: handleClickSuggestion }, s)))))));
};
/* harmony default export */ var components_DurationInput = (DurationInput);

// EXTERNAL MODULE: ./src/timeMachine/constants/queryBuilder.ts
var constants_queryBuilder = __webpack_require__(243);

// CONCATENATED MODULE: ./src/timeMachine/components/FunctionSelector.tsx










const FUNCTION_NAMES = constants_queryBuilder["d" /* FUNCTIONS */].map(f => f.name);
class FunctionSelector_FunctionSelector extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = { searchTerm: '' };
        this.handleSetSearchTerm = (e) => {
            this.setState({ searchTerm: e.target.value });
        };
        this.handleSelectFunction = (functionName) => {
            const { isInCheckOverlay, selectedFunctions, onSelectFunction } = this.props;
            if (isInCheckOverlay && selectedFunctions[0].name === functionName) {
                return;
            }
            onSelectFunction(functionName);
        };
        this.handleSelectAggregateWindow = (input) => {
            if (input.startsWith(constants_queryBuilder["a" /* AGG_WINDOW_AUTO */])) {
                this.props.onSelectAggregateWindow(constants_queryBuilder["a" /* AGG_WINDOW_AUTO */]);
                return;
            }
            this.props.onSelectAggregateWindow(input);
        };
        this.windowInputValid = (input) => input == 'none' || input == this.autoLabel;
    }
    render() {
        const { isInCheckOverlay } = this.props;
        const { searchTerm } = this.state;
        return (react_default.a.createElement(BuilderCard_BuilderCard, { className: "function-selector", testID: "function-selector" },
            react_default.a.createElement(BuilderCard_BuilderCard.Header, { title: "Aggregate Functions" }),
            react_default.a.createElement(BuilderCard_BuilderCard.Menu, null,
                react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Column, margin: clockface_dist["ComponentSize"].Small },
                    react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, margin: clockface_dist["ComponentSize"].Small, stretchToFitWidth: true },
                        react_default.a.createElement(clockface_dist["FlexBox"].Child, { grow: 2, testID: "component-spacer--flex-child" },
                            react_default.a.createElement(clockface_dist["Input"], { className: "tag-selector--search", value: searchTerm, onChange: this.handleSetSearchTerm, placeholder: "Search functions..." }))),
                    react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, margin: clockface_dist["ComponentSize"].Small, stretchToFitWidth: true, testID: "component-spacer" },
                        react_default.a.createElement(clockface_dist["TextBlock"], { textColor: clockface_dist["InfluxColors"].Sidewalk, text: "Window period:" }),
                        react_default.a.createElement(clockface_dist["FlexBox"].Child, { grow: 2, testID: "component-spacer--flex-child" },
                            react_default.a.createElement(components_DurationInput, { onSubmit: this.handleSelectAggregateWindow, value: this.duration, suggestions: this.durations, submitInvalid: false, validFunction: this.windowInputValid }))))),
            react_default.a.createElement(components_SelectorList, { items: this.functions, selectedItems: this.selectedFunctions, onSelectItem: this.handleSelectFunction, multiSelect: !isInCheckOverlay })));
    }
    get autoLabel() {
        const { autoWindowPeriod } = this.props;
        return autoWindowPeriod
            ? `${constants_queryBuilder["a" /* AGG_WINDOW_AUTO */]} (${Object(utils_duration["g" /* millisecondsToDuration */])(autoWindowPeriod)})`
            : constants_queryBuilder["a" /* AGG_WINDOW_AUTO */];
    }
    get duration() {
        const { aggregateWindow } = this.props;
        if (!aggregateWindow.period || aggregateWindow.period === constants_queryBuilder["a" /* AGG_WINDOW_AUTO */]) {
            return this.autoLabel;
        }
        return aggregateWindow.period;
    }
    get durations() {
        return this.props.isInCheckOverlay
            ? constants_queryBuilder["c" /* DURATIONS */]
            : [this.autoLabel, constants_queryBuilder["b" /* AGG_WINDOW_NONE */], ...constants_queryBuilder["c" /* DURATIONS */]];
    }
    get functions() {
        return FUNCTION_NAMES.filter(f => f.includes(this.state.searchTerm));
    }
    get selectedFunctions() {
        return this.props.selectedFunctions.map(f => f.name);
    }
}
const FunctionSelector_mstp = (state) => {
    const { builderConfig } = Object(timeMachine_selectors["a" /* getActiveQuery */])(state);
    const { functions: selectedFunctions, aggregateWindow } = builderConfig;
    return {
        selectedFunctions,
        aggregateWindow,
        autoWindowPeriod: Object(timeMachine_selectors["e" /* getActiveWindowPeriod */])(state),
        isInCheckOverlay: Object(timeMachine_selectors["i" /* getIsInCheckOverlay */])(state),
    };
};
const FunctionSelector_mdtp = {
    onSelectFunction: actions_queryBuilder["i" /* selectBuilderFunction */],
    onSelectAggregateWindow: actions_queryBuilder["g" /* selectAggregateWindow */],
};
/* harmony default export */ var components_FunctionSelector = (Object(es["b" /* connect */])(FunctionSelector_mstp, FunctionSelector_mdtp)(FunctionSelector_FunctionSelector));

// CONCATENATED MODULE: ./src/timeMachine/components/AddCardButton.tsx


class AddCardButton_AddCardButton extends react["PureComponent"] {
    render() {
        const { onClick } = this.props;
        return (react_default.a.createElement(clockface_dist["SquareButton"], { className: "query-builder--add-card-button", onClick: onClick, icon: clockface_dist["IconFont"].Plus }));
    }
}

// CONCATENATED MODULE: ./src/timeMachine/components/queryBuilder/BucketsSelector.tsx









const fb = term => b => b.toLocaleLowerCase().includes(term.toLocaleLowerCase());
const BucketSelector = ({ selectedBucket, buckets, bucketsStatus, onSelectBucket, }) => {
    const [searchTerm, setSearchTerm] = Object(react["useState"])('');
    const list = buckets.filter(fb(searchTerm));
    const onSelect = (bucket) => {
        onSelectBucket(bucket, true);
    };
    if (bucketsStatus === types["RemoteDataState"].Error) {
        return react_default.a.createElement(BuilderCard_BuilderCard.Empty, null, "Failed to load buckets");
    }
    if (bucketsStatus === types["RemoteDataState"].Loading) {
        return (react_default.a.createElement(BuilderCard_BuilderCard.Empty, null,
            react_default.a.createElement(components_WaitingText, { text: "Loading buckets" })));
    }
    if (bucketsStatus === types["RemoteDataState"].Done && !buckets.length) {
        return react_default.a.createElement(BuilderCard_BuilderCard.Empty, null, "No buckets found");
    }
    return (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement(BuilderCard_BuilderCard.Menu, null,
            react_default.a.createElement(clockface_dist["Input"], { value: searchTerm, placeholder: "Search for a bucket", className: "tag-selector--search", onChange: e => setSearchTerm(e.target.value) })),
        react_default.a.createElement(Selector, { list: list, selected: selectedBucket, onSelect: onSelect })));
};
const Selector = ({ list, selected, onSelect, }) => {
    if (!list.length) {
        return react_default.a.createElement(BuilderCard_BuilderCard.Empty, null, "No buckets matched your search");
    }
    return (react_default.a.createElement(components_SelectorList, { items: list, selectedItems: [selected], onSelectItem: onSelect, multiSelect: false }));
};
const BucketsSelector_mstp = (state) => {
    const { buckets, bucketsStatus } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state).queryBuilder;
    const selectedBucket = Object(timeMachine_selectors["a" /* getActiveQuery */])(state).builderConfig.buckets[0] || buckets[0];
    return { selectedBucket, buckets, bucketsStatus };
};
const BucketsSelector_mdtp = {
    onSelectBucket: actions_queryBuilder["h" /* selectBucket */],
};
/* harmony default export */ var queryBuilder_BucketsSelector = (Object(es["b" /* connect */])(BucketsSelector_mstp, BucketsSelector_mdtp)(BucketSelector));

// CONCATENATED MODULE: ./src/timeMachine/components/QueryBuilder.tsx












class QueryBuilder_TimeMachineQueryBuilder extends react["PureComponent"] {
    componentDidMount() {
        this.props.onLoadBuckets();
    }
    render() {
        const { tagFiltersLength } = this.props;
        return (react_default.a.createElement("div", { className: "query-builder", "data-testid": "query-builder" },
            react_default.a.createElement("div", { className: "query-builder--cards" },
                react_default.a.createElement(FancyScrollbar["a" /* default */], null,
                    react_default.a.createElement("div", { className: "builder-card--list" },
                        react_default.a.createElement(BuilderCard_BuilderCard, { testID: "bucket-selector" },
                            react_default.a.createElement(BuilderCard_BuilderCard.Header, { title: "From" }),
                            react_default.a.createElement(queryBuilder_BucketsSelector, null)),
                        Object(lodash["range"])(tagFiltersLength).map(i => (react_default.a.createElement(components_TagSelector, { key: i, index: i }))),
                        this.addButton)),
                this.functionSelector)));
    }
    get functionSelector() {
        const { checkType } = this.props;
        if (checkType === 'deadman') {
            return;
        }
        return react_default.a.createElement(components_FunctionSelector, null);
    }
    get addButton() {
        const { moreTags, onAddTagSelector } = this.props;
        if (!moreTags) {
            return null;
        }
        return react_default.a.createElement(AddCardButton_AddCardButton, { onClick: onAddTagSelector, collapsible: false });
    }
}
const QueryBuilder_mstp = (state) => {
    const tagFiltersLength = Object(timeMachine_selectors["a" /* getActiveQuery */])(state).builderConfig.tags.length;
    const { queryBuilder: { tags }, } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    const { alertBuilder: { type: checkType }, } = state;
    const { keys, keysStatus } = tags[tags.length - 1];
    return {
        tagFiltersLength,
        moreTags: !(keys.length === 0 && keysStatus === types["RemoteDataState"].Done),
        checkType,
    };
};
const QueryBuilder_mdtp = {
    onLoadBuckets: actions_queryBuilder["b" /* loadBuckets */],
    onAddTagSelector: actions_queryBuilder["a" /* addTagSelector */],
};
/* harmony default export */ var QueryBuilder = (Object(es["b" /* connect */])(QueryBuilder_mstp, QueryBuilder_mdtp)(QueryBuilder_TimeMachineQueryBuilder));

// CONCATENATED MODULE: ./src/timeMachine/components/SubmitQueryButton.tsx






class SubmitQueryButton_SubmitQueryButton extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = { didClick: false };
        this.handleClick = () => {
            this.props.onSubmit();
            this.setState({ didClick: true });
        };
    }
    componentDidUpdate(prevProps) {
        if (prevProps.queryStatus === types["RemoteDataState"].Loading &&
            this.props.queryStatus === types["RemoteDataState"].Done) {
            this.setState({ didClick: false });
        }
    }
    render() {
        return (react_default.a.createElement(clockface_dist["Button"], { text: "Submit", size: clockface_dist["ComponentSize"].Small, status: this.buttonStatus, onClick: this.handleClick, color: clockface_dist["ComponentColor"].Primary, testID: "time-machine-submit-button" }));
    }
    get buttonStatus() {
        const { queryStatus, submitButtonDisabled } = this.props;
        const { didClick } = this.state;
        if (submitButtonDisabled) {
            return clockface_dist["ComponentStatus"].Disabled;
        }
        if (queryStatus === types["RemoteDataState"].Loading && didClick) {
            return clockface_dist["ComponentStatus"].Loading;
        }
        return clockface_dist["ComponentStatus"].Default;
    }
}
const SubmitQueryButton_mstp = (state) => {
    const submitButtonDisabled = Object(timeMachine_selectors["a" /* getActiveQuery */])(state).text === '';
    const queryStatus = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state).queryResults.status;
    return { submitButtonDisabled, queryStatus };
};
const SubmitQueryButton_mdtp = {
    onSubmit: actions_queries["e" /* saveAndExecuteQueries */],
};
/* harmony default export */ var components_SubmitQueryButton = (Object(es["b" /* connect */])(SubmitQueryButton_mstp, SubmitQueryButton_mdtp)(SubmitQueryButton_SubmitQueryButton));

// CONCATENATED MODULE: ./src/timeMachine/components/RawDataToggle.tsx





class RawDataToggle_TimeMachineQueries extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleToggleIsViewingRawData = () => {
            const { isViewingRawData, onSetIsViewingRawData } = this.props;
            onSetIsViewingRawData(!isViewingRawData);
        };
    }
    render() {
        const { isViewingRawData } = this.props;
        return (react_default.a.createElement("div", { className: "view-raw-data-toggle" },
            react_default.a.createElement(clockface_dist["InputLabel"], null, "View Raw Data"),
            react_default.a.createElement(clockface_dist["SlideToggle"], { active: isViewingRawData, onChange: this.handleToggleIsViewingRawData, size: clockface_dist["ComponentSize"].ExtraSmall, testID: "raw-data--toggle" })));
    }
}
const RawDataToggle_mstp = (state) => {
    const { isViewingRawData } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    return { isViewingRawData };
};
const RawDataToggle_mdtp = {
    onSetIsViewingRawData: timeMachine_actions["x" /* setIsViewingRawData */],
};
/* harmony default export */ var RawDataToggle = (Object(es["b" /* connect */])(RawDataToggle_mstp, RawDataToggle_mdtp)(RawDataToggle_TimeMachineQueries));

// CONCATENATED MODULE: ./src/timeMachine/components/QueryTabName.tsx



class QueryTabName_TimeMachineQueryTabName extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = { newName: null };
        this.handleDoubleClick = () => {
            if (this.props.isActive) {
                this.props.onEdit();
                this.setState({ newName: this.props.name || '' });
            }
        };
        this.handleChange = (e) => {
            this.setState({ newName: e.target.value });
        };
        this.handleEnterKey = (e) => {
            switch (e.key) {
                case 'Enter':
                    return this.handleUpdate();
                case 'Escape':
                    return this.props.onCancelEdit();
            }
        };
    }
    render() {
        const { queryIndex, name, isEditing, onCancelEdit } = this.props;
        const queryName = !!name ? name : `Query ${queryIndex + 1}`;
        if (isEditing) {
            return (react_default.a.createElement(clockface_dist["Input"], { type: clockface_dist["InputType"].Text, value: this.state.newName || '', onChange: this.handleChange, onBlur: onCancelEdit, onKeyUp: this.handleEnterKey, size: clockface_dist["ComponentSize"].ExtraSmall, autoFocus: true }));
        }
        return (react_default.a.createElement("div", { className: "query-tab--name", onDoubleClick: this.handleDoubleClick, title: queryName }, queryName));
    }
    handleUpdate() {
        const { onUpdate, onCancelEdit } = this.props;
        const { newName } = this.state;
        if (newName !== null) {
            onUpdate(newName);
            onCancelEdit();
        }
        this.setState({ newName: null });
    }
}
/* harmony default export */ var QueryTabName = (QueryTabName_TimeMachineQueryTabName);

// CONCATENATED MODULE: ./src/timeMachine/components/QueriesTimer.tsx




const TimeMachineQueriesTimer = ({ duration, status }) => {
    const visibleClass = status === types["RemoteDataState"].Done ? 'visible' : '';
    return (react_default.a.createElement("div", { className: `queries-timer ${visibleClass}` }, `(${(duration / 1000).toFixed(2)}s)`));
};
const QueriesTimer_mstp = (state) => {
    const { status, fetchDuration } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state).queryResults;
    return { status, duration: fetchDuration };
};
/* harmony default export */ var QueriesTimer = (Object(es["b" /* connect */])(QueriesTimer_mstp)(TimeMachineQueriesTimer));

// CONCATENATED MODULE: ./src/timeMachine/components/QueryTab.tsx







class QueryTab_TimeMachineQueryTab extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.triggerRef = Object(react["createRef"])();
        this.state = { isEditingName: false };
        this.handleEditActiveQueryName = () => {
            this.handleSetActive();
            this.handleEditName();
        };
        this.handleUpdateName = (queryName) => {
            this.props.onUpdateActiveQueryName(queryName);
        };
        this.handleSetActive = () => {
            const { queryIndex, activeQueryIndex, onSetActiveQueryIndex } = this.props;
            if (queryIndex === activeQueryIndex) {
                return;
            }
            onSetActiveQueryIndex(queryIndex);
        };
        this.handleCancelEditName = () => {
            this.setState({ isEditingName: false });
        };
        this.handleEditName = () => {
            this.setState({ isEditingName: true });
        };
        this.handleRemove = () => {
            const { queryIndex, onRemoveQuery } = this.props;
            onRemoveQuery(queryIndex);
        };
        this.handleToggleView = (e) => {
            const { queryIndex, onToggleQuery } = this.props;
            e.stopPropagation();
            onToggleQuery(queryIndex);
        };
    }
    static getDerivedStateFromProps(props) {
        if (props.queryIndex !== props.activeQueryIndex) {
            return { isEditingName: false };
        }
        return null;
    }
    render() {
        const { queryIndex, activeQueryIndex, query } = this.props;
        const isActive = queryIndex === activeQueryIndex;
        const activeClass = queryIndex === activeQueryIndex ? 'active' : '';
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement("div", { className: `query-tab ${activeClass}`, onClick: this.handleSetActive, ref: this.triggerRef },
                this.showHideButton,
                react_default.a.createElement(QueryTabName, { isActive: isActive, name: query.name, queryIndex: queryIndex, isEditing: this.state.isEditingName, onUpdate: this.handleUpdateName, onEdit: this.handleEditName, onCancelEdit: this.handleCancelEditName }),
                this.queriesTimer,
                this.removeButton),
            react_default.a.createElement(clockface_dist["RightClick"], { triggerRef: this.triggerRef, color: clockface_dist["ComponentColor"].Primary },
                react_default.a.createElement(clockface_dist["RightClick"].MenuItem, { onClick: this.handleEditActiveQueryName, testID: "right-click--edit-tab" }, "Edit"),
                react_default.a.createElement(clockface_dist["RightClick"].MenuItem, { onClick: this.handleRemove, disabled: !this.isRemovable, testID: "right-click--remove-tab" }, "Remove"))));
    }
    get queriesTimer() {
        const { queryIndex, activeQueryIndex } = this.props;
        if (queryIndex === activeQueryIndex) {
            return react_default.a.createElement(QueriesTimer, null);
        }
    }
    get removeButton() {
        if (this.state.isEditingName || !this.isRemovable) {
            return null;
        }
        return (react_default.a.createElement("div", { className: "query-tab--close", onClick: this.handleRemove },
            react_default.a.createElement("span", { className: "icon remove" })));
    }
    get showHideButton() {
        const { query } = this.props;
        if (this.state.isEditingName || !this.isRemovable) {
            return null;
        }
        const icon = query.hidden ? 'eye-closed' : 'eye-open';
        return (react_default.a.createElement("div", { className: "query-tab--hide", onClick: this.handleToggleView },
            react_default.a.createElement("span", { className: `icon ${icon}` })));
    }
    get isRemovable() {
        return this.props.queryCount > 1;
    }
}
const QueryTab_mstp = (state) => {
    const { activeQueryIndex, draftQueries } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    return { activeQueryIndex, queryCount: draftQueries.length };
};
const QueryTab_mdtp = {
    onSetActiveQueryIndex: timeMachine_actions["g" /* setActiveQueryIndex */],
    onRemoveQuery: timeMachine_actions["f" /* removeQuery */],
    onUpdateActiveQueryName: timeMachine_actions["V" /* updateActiveQueryName */],
    onToggleQuery: timeMachine_actions["T" /* toggleQuery */],
};
/* harmony default export */ var QueryTab = (Object(es["b" /* connect */])(QueryTab_mstp, QueryTab_mdtp)(QueryTab_TimeMachineQueryTab));

// CONCATENATED MODULE: ./src/timeMachine/components/QueryTabs.tsx






const QueryTabs = ({ draftQueries, isInCheckOverlay, onAddQuery }) => {
    return (react_default.a.createElement("div", { className: "time-machine-queries--tabs" },
        draftQueries.map((query, queryIndex) => (react_default.a.createElement(QueryTab, { key: queryIndex, queryIndex: queryIndex, query: query }))),
        !isInCheckOverlay && (react_default.a.createElement(clockface_dist["SquareButton"], { className: "time-machine-queries--new", icon: clockface_dist["IconFont"].PlusSkinny, size: clockface_dist["ComponentSize"].ExtraSmall, color: clockface_dist["ComponentColor"].Default, onClick: onAddQuery }))));
};
const QueryTabs_mstp = (state) => {
    const { draftQueries } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    const isInCheckOverlay = Object(timeMachine_selectors["i" /* getIsInCheckOverlay */])(state);
    return { draftQueries, isInCheckOverlay };
};
const QueryTabs_mdtp = {
    onAddQuery: timeMachine_actions["a" /* addQuery */],
};
/* harmony default export */ var components_QueryTabs = (Object(es["b" /* connect */])(QueryTabs_mstp, QueryTabs_mdtp)(QueryTabs));

// CONCATENATED MODULE: ./src/timeMachine/components/EditorShortcutsTooltip.tsx


const EditorShortcutsTooltip = () => {
    return (react_default.a.createElement(clockface_dist["QuestionMarkTooltip"], { testID: "editor-shortcuts", tooltipContents: react_default.a.createElement("div", { className: "editor-shortcuts" },
            react_default.a.createElement("h5", null, "Shortcuts"),
            react_default.a.createElement("dl", { className: "editor-shortcuts--body" },
                react_default.a.createElement("dt", null, "Ctl-/:"),
                " ",
                react_default.a.createElement("dd", null, "Toggle comment for line or lines"),
                react_default.a.createElement("dt", null, "Ctl-Enter:"),
                " ",
                react_default.a.createElement("dd", null, "Submit Script"))) }));
};
/* harmony default export */ var components_EditorShortcutsTooltip = (EditorShortcutsTooltip);

// CONCATENATED MODULE: ./src/timeMachine/components/Queries.tsx

















class Queries_TimeMachineQueries extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleSetTimeRange = (timeRange) => {
            const { autoRefresh, onSetAutoRefresh, onSetTimeRange } = this.props;
            onSetTimeRange(timeRange);
            if (timeRange.type === 'custom') {
                onSetAutoRefresh(Object.assign(Object.assign({}, autoRefresh), { status: types["AutoRefreshStatus"].Disabled }));
                return;
            }
            if (autoRefresh.status === types["AutoRefreshStatus"].Disabled) {
                if (autoRefresh.interval === 0) {
                    onSetAutoRefresh(Object.assign(Object.assign({}, autoRefresh), { status: types["AutoRefreshStatus"].Paused }));
                    return;
                }
                onSetAutoRefresh(Object.assign(Object.assign({}, autoRefresh), { status: types["AutoRefreshStatus"].Active }));
            }
        };
    }
    render() {
        const { timeRange, isInCheckOverlay, activeQuery } = this.props;
        return (react_default.a.createElement("div", { className: "time-machine-queries" },
            react_default.a.createElement("div", { className: "time-machine-queries--controls" },
                react_default.a.createElement(components_QueryTabs, null),
                react_default.a.createElement("div", { className: "time-machine-queries--buttons" },
                    react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, justifyContent: clockface_dist["JustifyContent"].FlexEnd, margin: clockface_dist["ComponentSize"].Small },
                        activeQuery.editMode === 'advanced' && (react_default.a.createElement(components_EditorShortcutsTooltip, null)),
                        react_default.a.createElement(RawDataToggle, null),
                        !isInCheckOverlay && (react_default.a.createElement(react_default.a.Fragment, null,
                            react_default.a.createElement(components_CSVExportButton, null),
                            react_default.a.createElement(RefreshDropdown, null),
                            react_default.a.createElement(components_TimeRangeDropdown, { timeRange: timeRange, onSetTimeRange: this.handleSetTimeRange }),
                            react_default.a.createElement(QueriesSwitcher, null))),
                        react_default.a.createElement(components_SubmitQueryButton, null)))),
            react_default.a.createElement("div", { className: "time-machine-queries--body" }, this.queryEditor)));
    }
    get queryEditor() {
        const { activeQuery } = this.props;
        if (activeQuery.editMode === 'builder') {
            return react_default.a.createElement(QueryBuilder, null);
        }
        else if (activeQuery.editMode === 'advanced') {
            return react_default.a.createElement(components_TimeMachineFluxEditor, null);
        }
        else {
            return null;
        }
    }
}
const Queries_mstp = (state) => {
    const { timeRange, autoRefresh } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    const activeQuery = Object(timeMachine_selectors["a" /* getActiveQuery */])(state);
    return {
        timeRange,
        activeQuery,
        autoRefresh,
        isInCheckOverlay: Object(timeMachine_selectors["i" /* getIsInCheckOverlay */])(state),
    };
};
const Queries_mdtp = {
    onSetTimeRange: timeMachine_actions["J" /* setTimeRange */],
    onSetAutoRefresh: timeMachine_actions["k" /* setAutoRefresh */],
};
/* harmony default export */ var Queries = (Object(es["b" /* connect */])(Queries_mstp, Queries_mdtp)(Queries_TimeMachineQueries));

// CONCATENATED MODULE: ./src/shared/components/dashed_button/DashedButton.tsx



const DashedButton = ({ text, onClick, color = clockface_dist["ComponentColor"].Primary, size = clockface_dist["ComponentSize"].Medium, testID = 'dashed-button', }) => {
    const classname = classnames_default()('dashed-button', {
        [`dashed-button__${color}`]: color,
        [`dashed-button__${size}`]: size,
    });
    return (react_default.a.createElement("button", { className: classname, onClick: onClick, type: "button", "data-testid": testID }, text));
};
/* harmony default export */ var dashed_button_DashedButton = (DashedButton);

// CONCATENATED MODULE: ./src/checks/components/CheckTagRow.tsx


const CheckTagRow = ({ tagSet, index, handleChangeTagRow, handleRemoveTagRow, }) => {
    const handleChange = (e) => {
        handleChangeTagRow(index, Object.assign(Object.assign({}, tagSet), { [e.target.name]: e.target.value }));
    };
    return (react_default.a.createElement(clockface_dist["Panel"], { testID: "tag-rule", className: "alert-builder--tag-row" },
        react_default.a.createElement(clockface_dist["DismissButton"], { onClick: () => {
                handleRemoveTagRow(index);
            }, color: clockface_dist["ComponentColor"].Default }),
        react_default.a.createElement(clockface_dist["Panel"].Body, { size: clockface_dist["ComponentSize"].ExtraSmall },
            react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, margin: clockface_dist["ComponentSize"].Small },
                react_default.a.createElement(clockface_dist["FlexBox"].Child, { grow: 1 },
                    react_default.a.createElement(clockface_dist["Input"], { testID: "tag-rule-key--input", placeholder: "Tag", value: tagSet.key, name: "key", onChange: handleChange })),
                react_default.a.createElement(clockface_dist["FlexBox"].Child, { grow: 0, basis: 20 },
                    react_default.a.createElement(clockface_dist["TextBlock"], { text: "=" })),
                react_default.a.createElement(clockface_dist["FlexBox"].Child, { grow: 1 },
                    react_default.a.createElement(clockface_dist["Input"], { testID: "tag-rule-key--input", placeholder: "Value", value: tagSet.value, name: "value", onChange: handleChange }))))));
};
/* harmony default export */ var components_CheckTagRow = (CheckTagRow);

// CONCATENATED MODULE: ./src/checks/components/CheckMetaCard.tsx










const EMPTY_TAG_SET = {
    key: '',
    value: '',
};
const CheckMetaCard = ({ tags, offset, every, onSelectCheckEvery, onSetOffset, onRemoveTagSet, onEditTagSetByIndex, }) => {
    return (react_default.a.createElement(BuilderCard_BuilderCard, { testID: "builder-meta", className: "alert-builder--card alert-builder--meta-card" },
        react_default.a.createElement(BuilderCard_BuilderCard.Header, { title: "Properties" }),
        react_default.a.createElement(BuilderCard_BuilderCard.Body, { addPadding: true, autoHideScrollbars: true },
            react_default.a.createElement(clockface_dist["Grid"], null,
                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: 6 },
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Schedule Every" },
                            react_default.a.createElement(components_DurationInput, { value: every, suggestions: constants_queryBuilder["c" /* DURATIONS */], onSubmit: onSelectCheckEvery }))),
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: 6 },
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Offset" },
                            react_default.a.createElement(components_DurationInput, { value: offset, suggestions: alerting_constants["b" /* CHECK_OFFSET_OPTIONS */], onSubmit: onSetOffset }))))),
            react_default.a.createElement(clockface_dist["Form"].Label, { label: "Tags" }),
            tags.map((t, i) => (react_default.a.createElement(components_CheckTagRow, { key: i, index: i, tagSet: t, handleChangeTagRow: onEditTagSetByIndex, handleRemoveTagRow: onRemoveTagSet }))),
            react_default.a.createElement(dashed_button_DashedButton, { text: "+ Tag", onClick: () => onEditTagSetByIndex(tags.length, EMPTY_TAG_SET), color: clockface_dist["ComponentColor"].Primary, size: clockface_dist["ComponentSize"].Small }))));
};
const CheckMetaCard_mstp = ({ alertBuilder: { tags, offset, every } }) => {
    return {
        tags: tags || [],
        offset,
        every,
    };
};
const CheckMetaCard_mdtp = {
    onSelectCheckEvery: actions_alertBuilder["g" /* selectCheckEvery */],
    onSetOffset: actions_alertBuilder["l" /* setOffset */],
    onRemoveTagSet: actions_alertBuilder["d" /* removeTagSet */],
    onEditTagSetByIndex: actions_alertBuilder["b" /* editTagSetByIndex */],
};
/* harmony default export */ var components_CheckMetaCard = (Object(es["b" /* connect */])(CheckMetaCard_mstp, CheckMetaCard_mdtp)(CheckMetaCard));

// CONCATENATED MODULE: ./src/checks/components/CheckMessageCard.tsx





const CheckMessageCard = ({ statusMessageTemplate, onSetStatusMessageTemplate, }) => {
    const handleChange = (e) => {
        onSetStatusMessageTemplate(e.target.value);
    };
    return (react_default.a.createElement(BuilderCard_BuilderCard, { testID: "builder-message", className: "alert-builder--card alert-builder--message-card" },
        react_default.a.createElement(BuilderCard_BuilderCard.Header, { title: "Status Message Template" }),
        react_default.a.createElement(BuilderCard_BuilderCard.Body, { addPadding: true, autoHideScrollbars: true },
            react_default.a.createElement(clockface_dist["TextArea"], { className: "alert-builder--message-template", autoFocus: false, autocomplete: clockface_dist["AutoComplete"].Off, form: "", maxLength: 500, minLength: 5, name: "statusMessageTemplate", onChange: handleChange, readOnly: false, required: false, size: clockface_dist["ComponentSize"].Medium, spellCheck: false, testID: "status-message-textarea", value: statusMessageTemplate, wrap: clockface_dist["Wrap"].Soft, placeholder: "This template what this Check will use to write status messages" }),
            react_default.a.createElement("div", { className: "alert-builder--message-help" },
                react_default.a.createElement("p", null, "You can use any columns from your query as well as the following:"),
                react_default.a.createElement("p", null,
                    react_default.a.createElement("code", null, '${r._check_name}'),
                    " The name of this check"),
                react_default.a.createElement("p", null,
                    react_default.a.createElement("code", null, '${r._level}'),
                    " Indicates the level of the check"),
                react_default.a.createElement("p", null,
                    react_default.a.createElement("code", null, '${string(v: r.numericColumn)}'),
                    " Functions can be used",
                    ' ',
                    "as well"),
                react_default.a.createElement("p", null,
                    "Need help? Check out the Status Message Template",
                    ' ',
                    react_default.a.createElement("a", { href: "https://v2.docs.influxdata.com/v2.0/monitor-alert/checks/create/#flux-only-interpolates-string-values", target: "_blank" }, "Documentation"))))));
};
const CheckMessageCard_mstp = ({ alertBuilder: { statusMessageTemplate }, }) => ({
    statusMessageTemplate,
});
const CheckMessageCard_mdtp = {
    onSetStatusMessageTemplate: actions_alertBuilder["n" /* setStatusMessageTemplate */],
};
/* harmony default export */ var components_CheckMessageCard = (Object(es["b" /* connect */])(CheckMessageCard_mstp, CheckMessageCard_mdtp)(CheckMessageCard));

// CONCATENATED MODULE: ./src/alerting/components/builder/ThresholdStatement.tsx



const OptionSelector = (threshold) => {
    if (threshold.type == 'greater') {
        return 'is above';
    }
    if (threshold.type == 'lesser') {
        return 'is below';
    }
    if (threshold.within) {
        return 'is inside range';
    }
    return 'is outside range';
};
const ThresholdStatement = ({ threshold, children, removeLevel, changeThresholdType, }) => {
    const dropdownOptions = {
        ['is above']: 'greater',
        ['is below']: 'lesser',
        ['is inside range']: 'range',
        ['is outside range']: 'range',
    };
    const levelColor = alerting_constants["l" /* LEVEL_COLORS */][threshold.level];
    const selectedOption = OptionSelector(threshold);
    const onChangeThresholdType = (option) => {
        changeThresholdType(dropdownOptions[option], option === 'is inside range');
    };
    return (react_default.a.createElement(clockface_dist["Panel"], { backgroundColor: clockface_dist["InfluxColors"].Castle, testID: "panel" },
        react_default.a.createElement(clockface_dist["DismissButton"], { color: clockface_dist["ComponentColor"].Default, onClick: removeLevel, testID: "dismiss-button", type: clockface_dist["ButtonType"].Button }),
        react_default.a.createElement(clockface_dist["PanelBody"], { testID: "panel--body" },
            react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Column, margin: clockface_dist["ComponentSize"].Small, testID: "component-spacer" },
                react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, margin: clockface_dist["ComponentSize"].Small, stretchToFitWidth: true, testID: "component-spacer" },
                    react_default.a.createElement(clockface_dist["TextBlock"], { testID: "when-value-text-block", text: "When value" }),
                    react_default.a.createElement(clockface_dist["FlexBox"].Child, { grow: 2, testID: "component-spacer--flex-child" },
                        react_default.a.createElement(clockface_dist["SelectDropdown"], { options: Object.keys(dropdownOptions), selectedOption: selectedOption, onSelect: onChangeThresholdType, testID: "select-option-dropdown" }))),
                react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, margin: clockface_dist["ComponentSize"].Small, stretchToFitWidth: true, testID: "component-spacer" },
                    children,
                    react_default.a.createElement(clockface_dist["TextBlock"], { testID: "set-status-to-text-block", text: "set status to" }),
                    react_default.a.createElement(clockface_dist["TextBlock"], { backgroundColor: levelColor, testID: "threshold-level-text-block", text: threshold.level }))))));
};
/* harmony default export */ var builder_ThresholdStatement = (ThresholdStatement);

// CONCATENATED MODULE: ./src/shared/utils/convertUserInput.ts
const convertUserInputToNumOrNaN = (e) => (e.target.value === '' ? NaN : Number(e.target.value));

// CONCATENATED MODULE: ./src/alerting/components/builder/ThresholdValueInput.tsx



const ThresholdValueStatement = ({ threshold, changeValue }) => {
    const onChangeValue = (e) => {
        changeValue(convertUserInputToNumOrNaN(e));
    };
    return (react_default.a.createElement(clockface_dist["FlexBox"].Child, { testID: "component-spacer--flex-child" },
        react_default.a.createElement(clockface_dist["Input"], { onChange: onChangeValue, name: "", testID: "input-field", type: clockface_dist["InputType"].Number, value: threshold.value })));
};
/* harmony default export */ var ThresholdValueInput = (ThresholdValueStatement);

// CONCATENATED MODULE: ./src/alerting/components/builder/ThresholdRangeInput.tsx



const ThresholdRangeStatement = ({ threshold, changeRange }) => {
    const onChangeMin = (e) => {
        const min = convertUserInputToNumOrNaN(e);
        changeRange(min, threshold.max);
    };
    const onChangeMax = (e) => {
        const max = convertUserInputToNumOrNaN(e);
        changeRange(threshold.min, max);
    };
    return (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement(clockface_dist["FlexBox"].Child, { testID: "component-spacer--flex-child" },
            react_default.a.createElement(clockface_dist["Input"], { onChange: onChangeMin, name: "min", testID: "input-field", type: clockface_dist["InputType"].Number, value: threshold.min })),
        react_default.a.createElement(clockface_dist["TextBlock"], { testID: "text-block", text: "to" }),
        react_default.a.createElement(clockface_dist["FlexBox"].Child, { testID: "component-spacer--flex-child" },
            react_default.a.createElement(clockface_dist["Input"], { onChange: onChangeMax, disabledTitleText: "This input is disabled", name: "max", testID: "input-field", type: clockface_dist["InputType"].Number, value: threshold.max }))));
};
/* harmony default export */ var ThresholdRangeInput = (ThresholdRangeStatement);

// CONCATENATED MODULE: ./src/alerting/components/builder/ThresholdCondition.tsx












const defaultThreshold = {
    type: 'greater',
};
const ThresholdCondition = ({ level, table, threshold, onUpdateThreshold, onRemoveThreshold, }) => {
    const [inputs, changeInputs] = Object(react["useState"])([
        Object(lodash["get"])(threshold, 'value') || Object(lodash["get"])(threshold, 'min', 0),
        Object(lodash["get"])(threshold, 'max', 100),
    ]);
    Object(react["useEffect"])(() => {
        changeInputs([
            Object(lodash["get"])(threshold, 'value') || Object(lodash["get"])(threshold, 'min', inputs[0]),
            Object(lodash["get"])(threshold, 'max', inputs[1]),
        ]);
    }, [threshold]);
    const [yDomain] = Object(utils_vis["b" /* useCheckYDomain */])(table.getColumn('_value', 'number'), []);
    const addLevel = () => {
        const low = yDomain[0] || 0;
        const high = yDomain[1] || 40;
        const newThreshold = Object.assign(Object.assign({}, defaultThreshold), { value: (high - low) / 2 + low, level });
        onUpdateThreshold(newThreshold);
    };
    const removeLevel = () => {
        onRemoveThreshold(level);
    };
    const changeValue = (value) => {
        const newThreshold = Object.assign(Object.assign({}, threshold), { value });
        onUpdateThreshold(newThreshold);
    };
    const changeRange = (min, max) => {
        const newThreshold = Object.assign(Object.assign({}, threshold), { min, max });
        onUpdateThreshold(newThreshold);
    };
    const changeThresholdType = (toType, within) => {
        if (toType === 'greater' || toType === 'lesser') {
            const valueThreshold = {
                type: toType,
                level: threshold.level,
                value: inputs[0],
            };
            onUpdateThreshold(valueThreshold);
        }
        if (toType === 'range') {
            const rangeThreshold = {
                type: toType,
                level: threshold.level,
                min: inputs[0],
                max: inputs[1],
                within,
            };
            onUpdateThreshold(rangeThreshold);
        }
    };
    if (!threshold) {
        return (react_default.a.createElement(dashed_button_DashedButton, { text: `+ ${level}`, color: alerting_constants["m" /* LEVEL_COMPONENT_COLORS */][level], size: clockface_dist["ComponentSize"].Large, onClick: addLevel, testID: `add-threshold-condition-${level}` }));
    }
    return (react_default.a.createElement(builder_ThresholdStatement, { threshold: threshold, removeLevel: removeLevel, changeThresholdType: changeThresholdType }, threshold.type === 'range' ? (react_default.a.createElement(ThresholdRangeInput, { threshold: threshold, changeRange: changeRange })) : (react_default.a.createElement(ThresholdValueInput, { threshold: threshold, changeValue: changeValue }))));
};
const ThresholdCondition_mstp = (state) => {
    const giraffeResult = Object(timeMachine_selectors["p" /* getVisTable */])(state);
    return {
        table: giraffeResult.table,
    };
};
const ThresholdCondition_mdtp = {
    onUpdateThreshold: actions_alertBuilder["q" /* updateThreshold */],
    onRemoveThreshold: actions_alertBuilder["e" /* removeThreshold */],
};

/* harmony default export */ var builder_ThresholdCondition = (Object(es["b" /* connect */])(ThresholdCondition_mstp, ThresholdCondition_mdtp)(ThresholdCondition));

// CONCATENATED MODULE: ./src/alerting/components/builder/ThresholdConditions.tsx



const ThresholdConditions = ({ thresholds }) => {
    return (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement(builder_ThresholdCondition, { level: "CRIT", threshold: thresholds['CRIT'] }),
        react_default.a.createElement(builder_ThresholdCondition, { level: "WARN", threshold: thresholds['WARN'] }),
        react_default.a.createElement(builder_ThresholdCondition, { level: "INFO", threshold: thresholds['INFO'] }),
        react_default.a.createElement(builder_ThresholdCondition, { level: "OK", threshold: thresholds['OK'] })));
};
const ThresholdConditions_mstp = ({ alertBuilder: { thresholds: thresholdsArray }, }) => {
    const thresholds = {};
    thresholdsArray.forEach(t => {
        thresholds[t.level] = t;
    });
    return { thresholds };
};
/* harmony default export */ var builder_ThresholdConditions = (Object(es["b" /* connect */])(ThresholdConditions_mstp, null)(ThresholdConditions));

// CONCATENATED MODULE: ./src/checks/components/CheckLevelsDropdown.tsx


const CheckLevelsDropdown_levels = [
    { display: 'CRIT', hex: clockface_dist["InfluxColors"].Fire, value: 'CRIT' },
    { display: 'INFO', hex: clockface_dist["InfluxColors"].Ocean, value: 'INFO' },
    { display: 'WARN', hex: clockface_dist["InfluxColors"].Thunder, value: 'WARN' },
    { display: 'OK', hex: clockface_dist["InfluxColors"].Viridian, value: 'OK' },
];
const CheckLevelsDropdown = ({ selectedLevel, onClickLevel }) => {
    const selected = CheckLevelsDropdown_levels.find(l => l.value === selectedLevel);
    if (!selected) {
        throw new Error('Unknown level type provided to <CheckLevelsDropdown/>');
    }
    const button = (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { color: clockface_dist["ComponentColor"].Default, active: active, onClick: onClick, testID: "check-levels--dropdown--button" },
        react_default.a.createElement("div", { className: "color-dropdown--item" },
            react_default.a.createElement("div", { className: "color-dropdown--swatch", style: { backgroundColor: selected.hex } }),
            react_default.a.createElement("div", { className: "color-dropdown--name" }, selected.value))));
    const items = CheckLevelsDropdown_levels.map(({ value, display, hex }) => (react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: value, id: value, value: value, onClick: () => onClickLevel(value), testID: `check-levels--dropdown-item ${value}` },
        react_default.a.createElement("div", { className: "color-dropdown--item" },
            react_default.a.createElement("div", { className: "color-dropdown--swatch", style: { backgroundColor: hex } }),
            react_default.a.createElement("div", { className: "color-dropdown--name" }, display)))));
    const menu = (onCollapse) => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { theme: clockface_dist["DropdownMenuTheme"].Onyx, onCollapse: onCollapse }, items));
    return (react_default.a.createElement(clockface_dist["Dropdown"], { button: button, menu: menu, testID: "check-levels--dropdown" }));
};
/* harmony default export */ var components_CheckLevelsDropdown = (CheckLevelsDropdown);

// CONCATENATED MODULE: ./src/alerting/components/builder/DeadmanConditions.tsx







const DeadmanConditions = ({ staleTime, timeSince, level, onSetStaleTime, onSetTimeSince, onSetLevel, }) => {
    return (react_default.a.createElement(clockface_dist["Panel"], { backgroundColor: clockface_dist["InfluxColors"].Castle, testID: "panel" },
        react_default.a.createElement(clockface_dist["PanelBody"], { testID: "panel--body" },
            react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Column, margin: clockface_dist["ComponentSize"].Small, testID: "component-spacer" },
                react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, margin: clockface_dist["ComponentSize"].Small, stretchToFitWidth: true, testID: "component-spacer" },
                    react_default.a.createElement(clockface_dist["FlexBox"].Child, { testID: "component-spacer--flex-child" },
                        react_default.a.createElement(clockface_dist["TextBlock"], { testID: "when-value-text-block", text: "When values are not reporting" }))),
                react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, margin: clockface_dist["ComponentSize"].Small, stretchToFitWidth: true, testID: "component-spacer" },
                    react_default.a.createElement(clockface_dist["TextBlock"], { testID: "when-value-text-block", text: "for" }),
                    react_default.a.createElement(clockface_dist["FlexBox"].Child, { testID: "component-spacer--flex-child" },
                        react_default.a.createElement(components_DurationInput, { suggestions: alerting_constants["b" /* CHECK_OFFSET_OPTIONS */], onSubmit: onSetTimeSince, value: timeSince, showDivider: false })),
                    react_default.a.createElement(clockface_dist["TextBlock"], { testID: "set-status-to-text-block", text: "set status to" }),
                    react_default.a.createElement(clockface_dist["FlexBox"].Child, { testID: "component-spacer--flex-child" },
                        react_default.a.createElement(components_CheckLevelsDropdown, { selectedLevel: level, onClickLevel: onSetLevel }))),
                react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, margin: clockface_dist["ComponentSize"].Small, stretchToFitWidth: true, testID: "component-spacer" },
                    react_default.a.createElement(clockface_dist["TextBlock"], { testID: "when-value-text-block", text: "And stop checking after" }),
                    react_default.a.createElement(clockface_dist["FlexBox"].Child, { testID: "component-spacer--flex-child" },
                        react_default.a.createElement(components_DurationInput, { suggestions: alerting_constants["b" /* CHECK_OFFSET_OPTIONS */], onSubmit: onSetStaleTime, value: staleTime, showDivider: false })))))));
};
const DeadmanConditions_mstp = ({ alertBuilder: { staleTime, timeSince, level }, }) => ({ staleTime, timeSince, level });
const DeadmanConditions_mdtp = {
    onSetStaleTime: actions_alertBuilder["m" /* setStaleTime */],
    onSetTimeSince: actions_alertBuilder["o" /* setTimeSince */],
    onSetLevel: actions_alertBuilder["k" /* setLevel */],
};
/* harmony default export */ var builder_DeadmanConditions = (Object(es["b" /* connect */])(DeadmanConditions_mstp, DeadmanConditions_mdtp)(DeadmanConditions));

// CONCATENATED MODULE: ./src/checks/components/CheckConditionsCard.tsx






const CheckConditionsCard = ({ checkType }) => {
    let cardTitle;
    let conditionsComponent;
    if (checkType === 'deadman') {
        cardTitle = 'Deadman';
        conditionsComponent = react_default.a.createElement(builder_DeadmanConditions, null);
    }
    else if (checkType === 'threshold') {
        cardTitle = 'Thresholds';
        conditionsComponent = react_default.a.createElement(builder_ThresholdConditions, null);
    }
    else {
        throw new Error('Incorrect check type provided to <CheckConditionsCard/>');
    }
    return (react_default.a.createElement(BuilderCard_BuilderCard, { testID: "builder-conditions", className: "alert-builder--card alert-builder--conditions-card" },
        react_default.a.createElement(BuilderCard_BuilderCard.Header, { title: cardTitle }),
        react_default.a.createElement(BuilderCard_BuilderCard.Body, { addPadding: true, autoHideScrollbars: true },
            react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Column, alignItems: clockface_dist["AlignItems"].Stretch, margin: clockface_dist["ComponentSize"].Medium }, conditionsComponent))));
};
const CheckConditionsCard_mstp = ({ alertBuilder: { type } }) => {
    return { checkType: type };
};
/* harmony default export */ var components_CheckConditionsCard = (Object(es["b" /* connect */])(CheckConditionsCard_mstp, null)(CheckConditionsCard));

// CONCATENATED MODULE: ./src/alerting/components/builder/MatchingRuleCard.tsx





const MatchingRuleCard = ({ rule, endpoints }) => {
    const endpoint = endpoints.find(e => e.id === rule.endpointID);
    return (react_default.a.createElement(clockface_dist["ResourceCard"], { key: `rule-id--${rule.id}`, testID: "rule-card", name: react_default.a.createElement(clockface_dist["ResourceCard"].Name, { name: rule.name }), description: react_default.a.createElement(clockface_dist["ResourceCard"].Description, { description: rule.description }), metaData: [
            react_default.a.createElement(react_default.a.Fragment, null, `Checks every: ${rule.every}`),
            react_default.a.createElement(react_default.a.Fragment, null, `Sends notifications to: ${endpoint.name}`),
        ] }));
};
const MatchingRuleCard_mstp = (state) => {
    const endpoints = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].NotificationEndpoints);
    return {
        endpoints,
    };
};
/* harmony default export */ var builder_MatchingRuleCard = (Object(es["b" /* connect */])(MatchingRuleCard_mstp)(MatchingRuleCard));

// EXTERNAL MODULE: ./src/notifications/rules/utils/index.ts
var rules_utils = __webpack_require__(190);

// CONCATENATED MODULE: ./src/checks/components/CheckMatchingRulesCard.tsx












const CheckMatchingRulesCard = ({ orgID, tags, queryResults, }) => {
    const getMatchingRules = async () => {
        const checkTags = tags
            .filter(t => t.key && t.value)
            .map(t => [t.key, t.value]);
        const queryTags = [];
        if (queryResults) {
            const joined = queryResults.join('\n\n');
            const table = Object(giraffe_dist["fromFlux"])(joined).table;
            const fluxGroupKeyUnion = Object(giraffe_dist["fromFlux"])(joined).fluxGroupKeyUnion.filter(v => v !== '_start' && v !== '_stop');
            fluxGroupKeyUnion.forEach(gk => {
                const values = Object(lodash["uniq"])(table.getColumn(gk, 'string'));
                values.forEach(v => {
                    queryTags.push([gk, v]);
                });
            });
        }
        const tagsList = [...checkTags, ...queryTags].map(t => [
            'tag',
            `${t[0].trim()}:${t[1].trim()}`,
        ]);
        const resp = await Object(client["F" /* getNotificationRules */])({
            query: [['orgID', orgID], ...tagsList],
        });
        if (resp.status !== 200) {
            setMatchingRules({ matchingRules: [], status: clockface_dist["RemoteDataState"].Error });
            return;
        }
        const matchingRules = resp.data.notificationRules.map((r) => Object(rules_utils["h" /* ruleToDraftRule */])(r));
        setMatchingRules({
            matchingRules,
            status: clockface_dist["RemoteDataState"].Done,
        });
    };
    const [{ matchingRules, status }, setMatchingRules] = Object(react["useState"])({ matchingRules: [], status: clockface_dist["RemoteDataState"].NotStarted });
    Object(react["useEffect"])(() => {
        setMatchingRules({
            matchingRules,
            status: clockface_dist["RemoteDataState"].Loading,
        });
        getMatchingRules();
    }, [tags, queryResults]);
    let contents;
    if (status === clockface_dist["RemoteDataState"].NotStarted ||
        status === clockface_dist["RemoteDataState"].Loading) {
        contents = (react_default.a.createElement(clockface_dist["SpinnerContainer"], { spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null), loading: status }));
    }
    else if (!matchingRules.length) {
        contents = (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Small, className: "alert-builder--card__empty" },
            react_default.a.createElement(clockface_dist["EmptyState"].Text, null, "Notification Rules configured to act on tag sets matching this Alert Check will show up here"),
            react_default.a.createElement(clockface_dist["EmptyState"].Text, null, "Looks like no notification rules match the tag set defined in this Alert Check")));
    }
    else {
        contents = (react_default.a.createElement(react_default.a.Fragment, null, matchingRules.map(r => (react_default.a.createElement(builder_MatchingRuleCard, { key: r.id, rule: r })))));
    }
    return (react_default.a.createElement(BuilderCard_BuilderCard, { testID: "builder-conditions", className: "alert-builder--card alert-builder--conditions-card" },
        react_default.a.createElement(BuilderCard_BuilderCard.Header, { title: "Matching Notification Rules" }),
        react_default.a.createElement(BuilderCard_BuilderCard.Body, { addPadding: true, autoHideScrollbars: true },
            react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Column, alignItems: clockface_dist["AlignItems"].Stretch, margin: clockface_dist["ComponentSize"].Medium }, contents))));
};
const CheckMatchingRulesCard_mstp = (state) => {
    const { alertBuilder: { tags }, } = state;
    const { id: orgID } = Object(selectors["a" /* getOrg */])(state);
    const { queryResults: { files }, } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    return { tags, orgID, queryResults: files };
};
/* harmony default export */ var components_CheckMatchingRulesCard = (Object(es["b" /* connect */])(CheckMatchingRulesCard_mstp, null)(CheckMatchingRulesCard));

// CONCATENATED MODULE: ./src/alerting/components/builder/AlertBuilder.tsx







const AlertBuilder = () => {
    return (react_default.a.createElement("div", { className: "query-builder alert-builder", "data-testid": "query-builder" },
        react_default.a.createElement("div", { className: "query-builder--cards" },
            react_default.a.createElement(FancyScrollbar["a" /* default */], null,
                react_default.a.createElement("div", { className: "builder-card--list alert-builder--list" },
                    react_default.a.createElement(components_CheckMetaCard, null),
                    react_default.a.createElement(components_CheckMessageCard, null),
                    react_default.a.createElement(components_CheckConditionsCard, null),
                    Object(featureFlag["c" /* isFlagEnabled */])('matchingNotificationRules') && (react_default.a.createElement(components_CheckMatchingRulesCard, null)))))));
};
/* harmony default export */ var builder_AlertBuilder = (AlertBuilder);

// CONCATENATED MODULE: ./src/timeMachine/components/CustomizeCheckQueryButton.tsx




const CustomizeCheckQueryButton = ({ onLoadCustomCheckQueryState, }) => {
    const switchToEditor = () => {
        onLoadCustomCheckQueryState();
    };
    return (react_default.a.createElement(clockface_dist["Button"], { text: "Customize Check Query", titleText: "Switch to Script Editor", onClick: switchToEditor, testID: "switch-to-custom-check" }));
};
const CustomizeCheckQueryButton_mdtp = {
    onLoadCustomCheckQueryState: timeMachine_actions["d" /* loadCustomCheckQueryState */],
};
/* harmony default export */ var components_CustomizeCheckQueryButton = (Object(es["b" /* connect */])(null, CustomizeCheckQueryButton_mdtp)(CustomizeCheckQueryButton));

// CONCATENATED MODULE: ./src/alerting/components/builder/HelpButton.tsx


const HelpButton = () => {
    const handleClick = () => {
        const newTab = window.open('https://v2.docs.influxdata.com/v2.0/monitor-alert/checks/create/#configure-the-check');
        newTab.focus();
    };
    return (react_default.a.createElement(clockface_dist["Button"], { titleText: "Learn more about alerting", text: "Help", onClick: handleClick }));
};
/* harmony default export */ var builder_HelpButton = (HelpButton);

// CONCATENATED MODULE: ./src/timeMachine/components/TimeMachineAlerting.tsx







const TimeMachineAlerting = () => {
    return (react_default.a.createElement("div", { className: "time-machine-queries" },
        react_default.a.createElement("div", { className: "time-machine-queries--controls alert-builder--controls" },
            react_default.a.createElement("div", { className: "time-machine--editor-title" }, "Configure a Check"),
            react_default.a.createElement("div", { className: "time-machine-queries--buttons" },
                react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, justifyContent: clockface_dist["JustifyContent"].FlexEnd, margin: clockface_dist["ComponentSize"].Small },
                    Object(featureFlag["c" /* isFlagEnabled */])('customCheckQuery') && react_default.a.createElement(components_CustomizeCheckQueryButton, null),
                    react_default.a.createElement(RawDataToggle, null),
                    react_default.a.createElement(builder_HelpButton, null)))),
        react_default.a.createElement("div", { className: "time-machine-queries--body" },
            react_default.a.createElement(builder_AlertBuilder, null))));
};
/* harmony default export */ var components_TimeMachineAlerting = (TimeMachineAlerting);

// CONCATENATED MODULE: ./src/timeMachine/components/RawFluxDataGrid.tsx



const RawFluxDataGrid_ROW_HEIGHT = 27;
const MIN_COLUMN_WIDTH = 150;
const TIME_COLUMN_WIDTH = 300;
/* harmony default export */ var RawFluxDataGrid = (class extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.columnWidth = ({ index }) => {
            const { maxColumnCount, width } = this.props;
            const isDateTimeColumn = lodash_default.a.find(this.state.headerRows, i => {
                return (this.getCellData(i, index) || '').includes('dateTime');
            });
            if (!isDateTimeColumn) {
                return Math.max(MIN_COLUMN_WIDTH, width / maxColumnCount);
            }
            return TIME_COLUMN_WIDTH;
        };
        this.renderCell = ({ columnIndex, key, rowIndex, style }) => {
            const datum = this.getCellData(rowIndex, columnIndex);
            return (react_default.a.createElement("div", { key: key, style: style, className: "raw-flux-data-table--cell", title: datum },
                react_default.a.createElement("div", { className: "raw-flux-data-table--cell-bg" }, datum)));
        };
        this.state = { headerRows: [] };
    }
    static getDerivedStateFromProps(nextProps) {
        const headerRows = lodash_default.a.reduce(nextProps.data, (acc, row, index) => {
            if (row[0] === '#datatype') {
                acc.push(index);
            }
            return acc;
        }, []);
        return { headerRows };
    }
    render() {
        const { maxColumnCount, width, height, scrollTop, scrollLeft } = this.props;
        return (react_default.a.createElement(dist_es["c" /* Grid */], { width: width, height: height, cellRenderer: this.renderCell, columnCount: maxColumnCount, rowCount: this.rowCount, rowHeight: RawFluxDataGrid_ROW_HEIGHT, columnWidth: this.columnWidth, scrollLeft: scrollLeft, scrollTop: scrollTop, style: this.gridStyle }));
    }
    get rowCount() {
        return this.props.data.length;
    }
    get gridStyle() {
        const width = this.calculateWidth();
        const height = RawFluxDataGrid_ROW_HEIGHT * this.rowCount;
        return { width, height };
    }
    calculateWidth() {
        const { maxColumnCount } = this.props;
        return lodash_default.a.reduce(lodash_default.a.range(0, maxColumnCount), (acc, index) => acc + this.columnWidth({ index }), 0);
    }
    getCellData(row, column) {
        const { data } = this.props;
        return data[row][column];
    }
});

// CONCATENATED MODULE: ./src/timeMachine/utils/rawFluxDataTable.ts


const parseFiles = (responses) => {
    const chunks = Object(flux_response["a" /* parseChunks */])(responses.join('\n\n'));
    const parsedChunks = chunks.map(c => papaparse_min_default.a.parse(c).data);
    const maxColumnCount = Math.max(...parsedChunks.map(c => c[0].length));
    const data = [];
    for (let i = 0; i < parsedChunks.length; i++) {
        if (i !== 0) {
            data.push([]);
        }
        for (let j = 0; j < parsedChunks[i].length; j++) {
            data.push(parsedChunks[i][j]);
        }
    }
    return { data, maxColumnCount };
};

// CONCATENATED MODULE: ./src/timeMachine/components/RawFluxDataTable.tsx





class RawFluxDataTable_RawFluxDataTable extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = { scrollLeft: 0, scrollTop: 0 };
        this.parseFiles = Object(memoize_one_esm["a" /* default */])(parseFiles);
        this.onScrollbarsScroll = (e) => {
            e.preventDefault();
            e.stopPropagation();
            const { scrollTop, scrollLeft } = e.currentTarget;
            this.setState({ scrollLeft, scrollTop });
        };
    }
    render() {
        const { width, height, files } = this.props;
        const { scrollTop, scrollLeft } = this.state;
        const { data, maxColumnCount } = this.parseFiles(files);
        const tableWidth = width;
        const tableHeight = height;
        return (react_default.a.createElement("div", { className: "raw-flux-data-table", "data-testid": "raw-data-table" },
            react_default.a.createElement(FancyScrollbar["a" /* default */], { style: {
                    overflowY: 'hidden',
                    width: tableWidth,
                    height: tableHeight,
                }, autoHide: false, scrollTop: scrollTop, scrollLeft: scrollLeft, setScrollTop: this.onScrollbarsScroll },
                react_default.a.createElement(RawFluxDataGrid, { scrollTop: scrollTop, scrollLeft: scrollLeft, width: tableWidth, height: tableHeight, maxColumnCount: maxColumnCount, data: data, key: files[0] }))));
    }
}
/* harmony default export */ var components_RawFluxDataTable = (RawFluxDataTable_RawFluxDataTable);

// CONCATENATED MODULE: ./src/timeMachine/components/Vis.tsx











const TimeMachineVis = ({ loading, errorMessage, timeRange, isInitialFetch, isViewingRawData, files, checkType, checkThresholds, viewProperties, giraffeResult, xColumn, yColumn, fillColumns, symbolColumns, timeZone, statuses, }) => {
    const resolvedViewProperties = Object.assign(Object.assign({}, viewProperties), { xColumn,
        yColumn,
        fillColumns,
        symbolColumns });
    return (react_default.a.createElement("div", { className: "time-machine--view" },
        react_default.a.createElement(components_ErrorBoundary, null,
            react_default.a.createElement(EmptyQueryView_EmptyQueryView, { loading: loading, errorFormat: ErrorFormat.Scroll, errorMessage: errorMessage, isInitialFetch: isInitialFetch, queries: viewProperties.queries, hasResults: Object(vis["a" /* checkResultsLength */])(giraffeResult) }, isViewingRawData ? (react_default.a.createElement(dist_es["a" /* AutoSizer */], null, ({ width, height }) => width &&
                height && (react_default.a.createElement(components_RawFluxDataTable, { files: files, width: width, height: height })))) : (react_default.a.createElement(components_ViewSwitcher, { giraffeResult: giraffeResult, timeRange: timeRange, files: files, loading: loading, properties: resolvedViewProperties, checkType: checkType, checkThresholds: checkThresholds, timeZone: timeZone, statuses: statuses }))))));
};
const Vis_mstp = (state) => {
    const { isViewingRawData, view: { properties: viewProperties }, queryResults: { status: loading, errorMessage, isInitialFetch, files, statuses, }, timeRange, } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    const { alertBuilder: { type: checkType, thresholds: checkThresholds }, } = state;
    const giraffeResult = Object(timeMachine_selectors["p" /* getVisTable */])(state);
    const xColumn = Object(timeMachine_selectors["q" /* getXColumnSelection */])(state);
    const yColumn = Object(timeMachine_selectors["r" /* getYColumnSelection */])(state);
    const fillColumns = Object(timeMachine_selectors["g" /* getFillColumnsSelection */])(state);
    const symbolColumns = Object(timeMachine_selectors["m" /* getSymbolColumnsSelection */])(state);
    const timeZone = state.app.persisted.timeZone;
    return {
        loading,
        checkType,
        checkThresholds,
        errorMessage,
        isInitialFetch,
        files,
        viewProperties,
        isViewingRawData,
        giraffeResult,
        xColumn,
        yColumn,
        fillColumns,
        symbolColumns,
        timeZone,
        timeRange: Object(timeMachine_selectors["d" /* getActiveTimeRange */])(timeRange, viewProperties.queries),
        statuses,
    };
};
/* harmony default export */ var Vis = (Object(es["b" /* connect */])(Vis_mstp)(TimeMachineVis));

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/Geom.tsx




const getGeomLabel = (geom) => {
    switch (geom) {
        case 'monotoneX':
            return 'Smooth';
        case 'step':
            return 'Step';
        default:
        case 'line':
            return 'Linear';
    }
};
const Geom = ({ geom, onSetGeom }) => {
    return (react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Interpolation" },
            react_default.a.createElement(clockface_dist["Dropdown"], { button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { active: active, onClick: onClick }, getGeomLabel(Object(vis["m" /* resolveGeom */])(geom)))), menu: onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse },
                    react_default.a.createElement(clockface_dist["Dropdown"].Item, { value: "line", onClick: onSetGeom, selected: geom === 'line' }, "Linear"),
                    react_default.a.createElement(clockface_dist["Dropdown"].Item, { value: "monotoneX", onClick: onSetGeom, selected: geom === 'monotoneX' }, "Smooth"),
                    react_default.a.createElement(clockface_dist["Dropdown"].Item, { value: "step", onClick: onSetGeom, selected: geom === 'step' }, "Step"))) }))));
};
/* harmony default export */ var view_options_Geom = (Geom);

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/YAxisTitle.tsx



class YAxisTitle_YAxisTitle extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleChange = (e) => {
            const { onUpdateYAxisLabel } = this.props;
            onUpdateYAxisLabel(e.target.value);
        };
    }
    render() {
        const { label } = this.props;
        return (react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
            react_default.a.createElement(clockface_dist["Form"].Element, { label: "Y Axis Label" },
                react_default.a.createElement(clockface_dist["Input"], { value: label, onChange: this.handleChange }))));
    }
}
/* harmony default export */ var view_options_YAxisTitle = (YAxisTitle_YAxisTitle);

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/AxisAffixes.tsx



class AxisAffixes_AxisAffixes extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleUpdateAxisPrefix = (e) => {
            const { onUpdateAxisPrefix } = this.props;
            const prefix = e.target.value;
            onUpdateAxisPrefix(prefix);
        };
        this.handleUpdateAxisSuffix = (e) => {
            const { onUpdateAxisSuffix } = this.props;
            const suffix = e.target.value;
            onUpdateAxisSuffix(suffix);
        };
    }
    render() {
        const { prefix, suffix, axisName } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Six },
                react_default.a.createElement(clockface_dist["FormElement"], { label: `${axisName.toUpperCase()} Axis Prefix` },
                    react_default.a.createElement(clockface_dist["Input"], { value: prefix, onChange: this.handleUpdateAxisPrefix }))),
            react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Six },
                react_default.a.createElement(clockface_dist["FormElement"], { label: `${axisName.toUpperCase()} Axis Suffix` },
                    react_default.a.createElement(clockface_dist["Input"], { value: suffix, onChange: this.handleUpdateAxisSuffix })))));
    }
}
/* harmony default export */ var view_options_AxisAffixes = (AxisAffixes_AxisAffixes);

// CONCATENATED MODULE: ./src/shared/components/ColorSchemeDropdownItem.tsx

const generateGradientStyle = (colors) => {
    const stops = colors
        .map((hex, i) => `${hex} ${Math.round((i / (colors.length - 1)) * 100)}%`)
        .join(', ');
    return {
        background: `linear-gradient(to right, ${stops})`,
    };
};
const ColorSchemeDropdownItem = ({ name, colors }) => {
    return (react_default.a.createElement("div", { className: "color-scheme-dropdown-item" },
        react_default.a.createElement("div", { className: "color-scheme-dropdown-item--swatches", style: generateGradientStyle(colors) }),
        react_default.a.createElement("div", { className: "color-scheme-dropdown-item--name" }, name)));
};
/* harmony default export */ var components_ColorSchemeDropdownItem = (ColorSchemeDropdownItem);

// CONCATENATED MODULE: ./src/shared/components/ColorSchemeDropdown.tsx




const findSelectedScale = (colors) => {
    const key = (colors) => colors.map(color => color.hex).join(', ');
    const needle = key(colors);
    const selectedScale = graphColorPalettes["b" /* LINE_COLOR_SCALES */].find(d => key(d.colors) === needle);
    if (selectedScale) {
        return selectedScale;
    }
    else {
        return graphColorPalettes["b" /* LINE_COLOR_SCALES */][0];
    }
};
const ColorSchemeDropdown = ({ value, onChange }) => {
    const selectedScale = findSelectedScale(value);
    return (react_default.a.createElement(clockface_dist["Dropdown"], { button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { active: active, onClick: onClick },
            react_default.a.createElement(components_ColorSchemeDropdownItem, { name: selectedScale.name, colors: selectedScale.colors.map(c => c.hex) }))), menu: onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse, theme: clockface_dist["DropdownMenuTheme"].Onyx }, graphColorPalettes["b" /* LINE_COLOR_SCALES */].map(({ id, name, colors }) => (react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: id, id: id, value: colors, selected: selectedScale.id === id, onClick: onChange },
            react_default.a.createElement(components_ColorSchemeDropdownItem, { name: name, colors: colors.map(c => c.hex) })))))) }));
};
/* harmony default export */ var components_ColorSchemeDropdown = (ColorSchemeDropdown);

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/ColorSelector.tsx






let ColorSelector_LineGraphColorSelector = class LineGraphColorSelector extends react["PureComponent"] {
    render() {
        const { colors, onUpdateColors } = this.props;
        return (react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
            react_default.a.createElement(clockface_dist["Form"].Element, { label: "Line Colors" },
                react_default.a.createElement(components_ColorSchemeDropdown, { value: colors, onChange: onUpdateColors }))));
    }
};
ColorSelector_LineGraphColorSelector = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], ColorSelector_LineGraphColorSelector);
/* harmony default export */ var ColorSelector = (ColorSelector_LineGraphColorSelector);

// CONCATENATED MODULE: ./src/shared/components/AutoDomainInput.tsx




const MinMaxInputs = ({ initialMin, initialMax, onSetMinMax, onSetErrorMessage, }) => {
    const [minInput, setMinInput] = Object(useOneWayState["a" /* useOneWayState */])(initialMin);
    const [maxInput, setMaxInput] = Object(useOneWayState["a" /* useOneWayState */])(initialMax);
    const emitIfValid = () => {
        const newMin = parseFloat(minInput);
        const newMax = parseFloat(maxInput);
        if (isNaN(newMin)) {
            onSetErrorMessage('Must supply a valid minimum value');
            return;
        }
        if (isNaN(newMax)) {
            onSetErrorMessage('Must supply a valid maximum value');
            return;
        }
        if (newMin >= newMax) {
            onSetErrorMessage('Minium value must be less than maximum');
            return;
        }
        if (initialMin === minInput && initialMax === maxInput) {
            return;
        }
        onSetErrorMessage('');
        onSetMinMax([newMin, newMax]);
    };
    const handleKeyPress = (e) => {
        if (e.key === 'Enter') {
            emitIfValid();
        }
    };
    return (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Six },
            react_default.a.createElement(clockface_dist["Form"].Element, { label: "Min" },
                react_default.a.createElement(clockface_dist["Input"], { value: minInput, onChange: e => setMinInput(e.target.value), onBlur: emitIfValid, onKeyPress: handleKeyPress }))),
        react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Six },
            react_default.a.createElement(clockface_dist["Form"].Element, { label: "Max" },
                react_default.a.createElement(clockface_dist["Input"], { value: maxInput, onChange: e => setMaxInput(e.target.value), onBlur: emitIfValid, onKeyPress: handleKeyPress })))));
};
const AutoDomainInput = ({ domain, onSetDomain, label = 'Set Domain', }) => {
    const [showInputs, setShowInputs] = Object(react["useState"])(!!domain);
    const [errorMessage, setErrorMessage] = Object(react["useState"])('');
    const handleChooseAuto = () => {
        setShowInputs(false);
        setErrorMessage('');
        onSetDomain(null);
    };
    const handleChooseCustom = () => {
        setShowInputs(true);
        setErrorMessage('');
    };
    const initialMin = domain ? String(domain[0]) : '';
    const initialMax = domain ? String(domain[1]) : '';
    return (react_default.a.createElement(clockface_dist["Form"].Element, { label: label, errorMessage: errorMessage, className: "auto-domain-input" },
        react_default.a.createElement(clockface_dist["Grid"], null,
            react_default.a.createElement(clockface_dist["Grid"].Row, null,
                react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
                    react_default.a.createElement(clockface_dist["SelectGroup"], { shape: clockface_dist["ButtonShape"].StretchToFit },
                        react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "auto-domain", id: "radio_auto", titleText: "Auto", active: !showInputs, onClick: handleChooseAuto, value: "Auto" }, "Auto"),
                        react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "auto-domain", id: "radio_custom", titleText: "Custom", active: showInputs, onClick: handleChooseCustom, value: "Custom" }, "Custom")))),
            showInputs && (react_default.a.createElement(clockface_dist["Grid"].Row, { className: "auto-domain-input--custom" },
                react_default.a.createElement(MinMaxInputs, { initialMin: initialMin, initialMax: initialMax, onSetMinMax: onSetDomain, onSetErrorMessage: setErrorMessage }))))));
};
/* harmony default export */ var components_AutoDomainInput = (AutoDomainInput);

// CONCATENATED MODULE: ./src/dashboards/constants/cellEditor.ts
const AXES_SCALE_OPTIONS = {
    LINEAR: 'linear',
    LOG: 'log',
    BASE_2: '2',
    BASE_10: '10',
};

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/YAxisBase.tsx




const { BASE_2, BASE_10 } = AXES_SCALE_OPTIONS;
class YAxisBase_YAxisBase extends react["PureComponent"] {
    render() {
        const { base, onUpdateYAxisBase } = this.props;
        return (react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
            react_default.a.createElement(clockface_dist["Form"].Element, { label: "Y-Value Unit Prefix" },
                react_default.a.createElement(clockface_dist["SelectGroup"], { shape: clockface_dist["ButtonShape"].StretchToFit },
                    react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "y-values-format", id: "y-values-format-tab--raw", value: "", active: base === '', titleText: "Do not format values using a unit prefix", onClick: onUpdateYAxisBase }, "None"),
                    react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "y-values-format", id: "y-values-format-tab--kmb", value: BASE_10, active: base === BASE_10, titleText: "Format values using an International System of Units prefix", onClick: onUpdateYAxisBase }, "SI"),
                    react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "y-values-format", id: "y-values-format-tab--kmg", value: BASE_2, active: base === BASE_2, titleText: "Format values using a binary unit prefix (for formatting bits or bytes)", onClick: onUpdateYAxisBase }, "Binary")))));
    }
}
/* harmony default export */ var view_options_YAxisBase = (YAxisBase_YAxisBase);

// CONCATENATED MODULE: ./src/shared/components/ColumnSelector.tsx


const ColumnSelector = ({ selectedColumn, onSelectColumn, availableColumns, axisName, }) => {
    return (react_default.a.createElement(clockface_dist["Form"].Element, { label: `${axisName.toUpperCase()} Column` },
        react_default.a.createElement(clockface_dist["SelectDropdown"], { options: availableColumns, selectedOption: selectedColumn || 'Build a query before selecting...', onSelect: onSelectColumn, buttonStatus: availableColumns.length == 0
                ? clockface_dist["ComponentStatus"].Disabled
                : clockface_dist["ComponentStatus"].Default })));
};
/* harmony default export */ var components_ColumnSelector = (ColumnSelector);

// CONCATENATED MODULE: ./src/shared/components/Checkbox.tsx

const Checkbox = ({ label, checked, onSetChecked, testID }) => {
    return (react_default.a.createElement("label", { className: `fancy-checkbox ${checked ? 'checked' : ''}` },
        react_default.a.createElement("input", { "data-testid": testID || 'checkbox', type: "checkbox", checked: !!checked, onChange: () => onSetChecked(!checked) }),
        label));
};
/* harmony default export */ var components_Checkbox = (Checkbox);

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/TimeFormat.tsx




const TimeFormatSetting = ({ timeFormat, onTimeFormatChange, }) => (react_default.a.createElement(clockface_dist["SelectDropdown"], { options: dashboards_constants["k" /* FORMAT_OPTIONS */].map(option => option.text), selectedOption: Object(utils_tableGraph["b" /* resolveTimeFormat */])(timeFormat), onSelect: onTimeFormatChange }));
/* harmony default export */ var TimeFormat = (TimeFormatSetting);

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/LineOptions.tsx
















class LineOptions_LineOptions extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleSetYDomain = (yDomain) => {
            let bounds;
            if (yDomain) {
                bounds = [String(yDomain[0]), String(yDomain[1])];
            }
            else {
                bounds = [null, null];
            }
            this.props.onUpdateYAxisBounds(bounds);
        };
    }
    render() {
        const { axes: { y: { label, prefix, suffix, base }, }, colors, geom, shadeBelow, position, onSetPosition, onUpdateColors, onUpdateYAxisLabel, onUpdateAxisPrefix, onUpdateAxisSuffix, onUpdateYAxisBase, onSetShadeBelow, onSetGeom, onSetYColumn, yColumn, onSetXColumn, xColumn, numericColumns, onSetTimeFormat, timeFormat, } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Grid"].Column, null,
                react_default.a.createElement("h4", { className: "view-options--header" }, "Customize Line Graph"),
                react_default.a.createElement("h5", { className: "view-options--header" }, "Data"),
                react_default.a.createElement(components_ColumnSelector, { selectedColumn: xColumn, onSelectColumn: onSetXColumn, availableColumns: numericColumns, axisName: "x" }),
                react_default.a.createElement(components_ColumnSelector, { selectedColumn: yColumn, onSelectColumn: onSetYColumn, availableColumns: numericColumns, axisName: "y" }),
                react_default.a.createElement(clockface_dist["Form"].Element, { label: "Time Format" },
                    react_default.a.createElement(TimeFormat, { timeFormat: timeFormat, onTimeFormatChange: onSetTimeFormat })),
                react_default.a.createElement("h5", { className: "view-options--header" }, "Options")),
            geom && react_default.a.createElement(view_options_Geom, { geom: geom, onSetGeom: onSetGeom }),
            react_default.a.createElement(ColorSelector, { colors: colors.filter(c => c.type === 'scale'), onUpdateColors: onUpdateColors }),
            react_default.a.createElement(clockface_dist["Grid"].Column, null,
                react_default.a.createElement(components_Checkbox, { label: "Shade Area Below Lines", checked: !!shadeBelow, onSetChecked: onSetShadeBelow })),
            react_default.a.createElement(clockface_dist["Grid"].Column, null,
                react_default.a.createElement("h5", { className: "view-options--header" }, "Y Axis")),
            react_default.a.createElement(view_options_YAxisTitle, { label: label, onUpdateYAxisLabel: onUpdateYAxisLabel }),
            react_default.a.createElement(view_options_YAxisBase, { base: base, onUpdateYAxisBase: onUpdateYAxisBase }),
            react_default.a.createElement(view_options_AxisAffixes, { prefix: prefix, suffix: suffix, axisName: "y", onUpdateAxisPrefix: prefix => onUpdateAxisPrefix(prefix, 'y'), onUpdateAxisSuffix: suffix => onUpdateAxisSuffix(suffix, 'y') }),
            react_default.a.createElement(clockface_dist["Grid"].Column, null,
                react_default.a.createElement(components_AutoDomainInput, { domain: this.yDomain, onSetDomain: this.handleSetYDomain, label: "Y Axis Domain" }),
                react_default.a.createElement(clockface_dist["Form"].Element, { label: "Positioning" },
                    react_default.a.createElement(clockface_dist["Dropdown"], { button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { active: active, onClick: onClick }, Object(lodash["capitalize"])(position))), menu: onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse },
                            react_default.a.createElement(clockface_dist["Dropdown"].Item, { id: "overlaid", value: "overlaid", onClick: onSetPosition, selected: position === 'overlaid' }, "Overlaid"),
                            react_default.a.createElement(clockface_dist["Dropdown"].Item, { id: "stacked", value: "stacked", onClick: onSetPosition, selected: position === 'stacked' }, "Stacked"))) })))));
    }
    get yDomain() {
        return Object(vis["l" /* parseBounds */])(this.props.axes.y.bounds);
    }
}
const LineOptions_mstp = (state) => {
    const xColumn = Object(timeMachine_selectors["q" /* getXColumnSelection */])(state);
    const yColumn = Object(timeMachine_selectors["r" /* getYColumnSelection */])(state);
    const numericColumns = Object(timeMachine_selectors["j" /* getNumericColumns */])(state);
    const view = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state).view;
    const { timeFormat } = view.properties;
    return { xColumn, yColumn, numericColumns, timeFormat };
};
const LineOptions_mdtp = {
    onUpdateYAxisLabel: timeMachine_actions["Q" /* setYAxisLabel */],
    onUpdateAxisPrefix: timeMachine_actions["l" /* setAxisPrefix */],
    onUpdateAxisSuffix: timeMachine_actions["m" /* setAxisSuffix */],
    onUpdateYAxisBounds: timeMachine_actions["P" /* setYAxisBounds */],
    onUpdateYAxisBase: timeMachine_actions["O" /* setYAxisBase */],
    onSetXColumn: timeMachine_actions["M" /* setXColumn */],
    onSetYColumn: timeMachine_actions["R" /* setYColumn */],
    onSetShadeBelow: timeMachine_actions["B" /* setShadeBelow */],
    onUpdateColors: timeMachine_actions["r" /* setColors */],
    onSetGeom: timeMachine_actions["v" /* setGeom */],
    onSetPosition: timeMachine_actions["y" /* setLinePosition */],
    onSetTimeFormat: timeMachine_actions["I" /* setTimeFormat */],
};
/* harmony default export */ var view_options_LineOptions = (Object(es["b" /* connect */])(LineOptions_mstp, LineOptions_mdtp)(LineOptions_LineOptions));

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/Affixes.tsx



class Affixes_Affixes extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleUpdatePrefix = (e) => {
            const { onUpdatePrefix } = this.props;
            const prefix = e.target.value;
            onUpdatePrefix(prefix);
        };
        this.handleUpdateSuffix = (e) => {
            const { onUpdateSuffix } = this.props;
            const suffix = e.target.value;
            onUpdateSuffix(suffix);
        };
        this.handleUpdateTickSuffix = (e) => {
            const { onUpdateTickSuffix } = this.props;
            if (e === 'false' || !!!e) {
                onUpdateTickSuffix('true');
            }
            else {
                onUpdateTickSuffix('false');
            }
        };
        this.handleUpdateTickPrefix = (e) => {
            const { onUpdateTickPrefix } = this.props;
            if (e === 'false' || !!!e) {
                onUpdateTickPrefix('true');
            }
            else {
                onUpdateTickPrefix('false');
            }
        };
    }
    render() {
        const { prefix, suffix } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Six },
                react_default.a.createElement(clockface_dist["Form"].Element, { label: "Prefix" },
                    react_default.a.createElement(clockface_dist["Input"], { testID: "prefix-input", value: prefix, onChange: this.handleUpdatePrefix, placeholder: "%, MPH, etc." }))),
            react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Six },
                react_default.a.createElement(clockface_dist["Form"].Element, { label: "Suffix" },
                    react_default.a.createElement(clockface_dist["Input"], { testID: "suffix-input", value: suffix, onChange: this.handleUpdateSuffix, placeholder: "%, MPH, etc." }))),
            this.optionalTicks));
    }
    get optionalTicks() {
        const { type, tickPrefix, tickSuffix } = this.props;
        if (type === 'single-stat') {
            return null;
        }
        else {
            return (react_default.a.createElement(react_default.a.Fragment, null,
                react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Six },
                    react_default.a.createElement(clockface_dist["FlexBox"], { alignItems: clockface_dist["AlignItems"].Center, margin: clockface_dist["ComponentSize"].Small, className: "view-options--checkbox" },
                        react_default.a.createElement(clockface_dist["Toggle"], { id: "prefixoptional", testID: "tickprefix-input", type: clockface_dist["InputToggleType"].Checkbox, value: tickPrefix, onChange: this.handleUpdateTickPrefix, size: clockface_dist["ComponentSize"].ExtraSmall }),
                        react_default.a.createElement(clockface_dist["InputLabel"], { active: !!tickPrefix }, "Optional Prefix"))),
                react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Six },
                    react_default.a.createElement(clockface_dist["FlexBox"], { alignItems: clockface_dist["AlignItems"].Center, margin: clockface_dist["ComponentSize"].Small, className: "view-options--checkbox" },
                        react_default.a.createElement(clockface_dist["Toggle"], { id: "suffixoptional", testID: "ticksuffix-input", type: clockface_dist["InputToggleType"].Checkbox, value: tickSuffix, onChange: this.handleUpdateTickSuffix, size: clockface_dist["ComponentSize"].ExtraSmall }),
                        react_default.a.createElement(clockface_dist["InputLabel"], { active: !!tickSuffix }, "Optional Suffix")))));
        }
    }
}
/* harmony default export */ var view_options_Affixes = (Affixes_Affixes);

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/DecimalPlaces.tsx






let DecimalPlaces_DecimalPlacesOption = class DecimalPlacesOption extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleSetValue = (e) => {
            const value = convertUserInputToNumOrNaN(e);
            const { digits, onDecimalPlacesChange } = this.props;
            if (value === value && value >= dashboards_constants["m" /* MIN_DECIMAL_PLACES */]) {
                onDecimalPlacesChange({
                    digits: Math.min(value, dashboards_constants["l" /* MAX_DECIMAL_PLACES */]),
                    isEnforced: true,
                });
            }
            else {
                onDecimalPlacesChange({ digits, isEnforced: false });
            }
            this.setState({ value });
        };
        this.handleChangeMode = (mode) => {
            this.setState({ mode });
        };
        this.state = {
            mode: this.props.digits ? clockface_dist["AutoInputMode"].Custom : clockface_dist["AutoInputMode"].Auto,
            value: this.props.digits,
        };
    }
    render() {
        const { mode } = this.state;
        return (react_default.a.createElement(clockface_dist["Grid"].Column, null,
            react_default.a.createElement(clockface_dist["Form"].Element, { label: "Decimal Places" },
                react_default.a.createElement(clockface_dist["AutoInput"], { mode: mode, onChangeMode: this.handleChangeMode, inputComponent: react_default.a.createElement(clockface_dist["Input"], { name: "decimal-places", placeholder: "Enter a number", onChange: this.handleSetValue, value: this.state.value, min: dashboards_constants["m" /* MIN_DECIMAL_PLACES */], max: dashboards_constants["l" /* MAX_DECIMAL_PLACES */], type: clockface_dist["InputType"].Number }) }))));
    }
};
DecimalPlaces_DecimalPlacesOption = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], DecimalPlaces_DecimalPlacesOption);
/* harmony default export */ var DecimalPlaces = (DecimalPlaces_DecimalPlacesOption);

// CONCATENATED MODULE: ./src/shared/components/ColorDropdown.tsx



const ColorDropdown = props => {
    const { selected, colors, onChoose, disabled, style } = props;
    const status = disabled ? clockface_dist["ComponentStatus"].Disabled : clockface_dist["ComponentStatus"].Default;
    return (react_default.a.createElement(clockface_dist["Dropdown"], { style: style, button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { active: active, onClick: onClick, status: status },
            react_default.a.createElement("div", { className: "color-dropdown--item" },
                react_default.a.createElement("div", { className: "color-dropdown--swatch", style: { backgroundColor: selected.hex } }),
                react_default.a.createElement("div", { className: "color-dropdown--name" }, Object(lodash["capitalize"])(selected.name))))), menu: onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse, theme: clockface_dist["DropdownMenuTheme"].Onyx }, colors.map(color => (react_default.a.createElement(clockface_dist["Dropdown"].Item, { id: color.name, key: color.name, value: color, selected: color.name === selected.name, onClick: onChoose },
            react_default.a.createElement("div", { className: "color-dropdown--item" },
                react_default.a.createElement("div", { className: "color-dropdown--swatch", style: { backgroundColor: color.hex } }),
                react_default.a.createElement("div", { className: "color-dropdown--name" }, Object(lodash["capitalize"])(color.name)))))))) }));
};
ColorDropdown.defaultProps = {
    disabled: false,
    style: { flex: '0 0 120px' },
};
/* harmony default export */ var components_ColorDropdown = (ColorDropdown);

// CONCATENATED MODULE: ./src/shared/components/ThresholdSetting.tsx




const ThresholdSetting = ({ id, type, name, value, error, onChangeValue, onChangeColor, onRemove, onBlur, }) => {
    const isBaseThreshold = id === constants_thresholds["a" /* BASE_THRESHOLD_ID */];
    let label = '';
    if (isBaseThreshold) {
        label = 'Base';
    }
    else if (type === constants_thresholds["c" /* COLOR_TYPE_MIN */]) {
        label = 'Minimum';
    }
    else if (type === constants_thresholds["b" /* COLOR_TYPE_MAX */]) {
        label = 'Maximum';
    }
    else {
        label = 'Value is >=';
    }
    const isRemoveable = !isBaseThreshold && type !== constants_thresholds["c" /* COLOR_TYPE_MIN */] && type !== constants_thresholds["b" /* COLOR_TYPE_MAX */];
    const inputStatus = error ? clockface_dist["ComponentStatus"].Error : clockface_dist["ComponentStatus"].Default;
    const dropdownStyle = isBaseThreshold
        ? { flex: '1 0 120px' }
        : { flex: '0 0 120px' };
    return (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, alignItems: clockface_dist["AlignItems"].Center, margin: clockface_dist["ComponentSize"].Small, testID: id },
            react_default.a.createElement(clockface_dist["TextBlock"], { text: label, style: { flex: '0 0 90px' } }),
            !isBaseThreshold && (react_default.a.createElement(clockface_dist["Input"], { style: { flex: '1 0 0' }, testID: `threshold-${id}-input`, className: "threshold-setting--value", value: value, status: inputStatus, onChange: e => onChangeValue(e.target.value), onBlur: onBlur, onKeyDown: e => {
                    if (e.key === 'Enter') {
                        onBlur();
                    }
                } })),
            react_default.a.createElement(components_ColorDropdown, { colors: constants_thresholds["k" /* THRESHOLD_COLORS */], selected: constants_thresholds["k" /* THRESHOLD_COLORS */].find(d => d.name === name), onChoose: ({ name, hex }) => onChangeColor(name, hex), style: dropdownStyle }),
            isRemoveable && (react_default.a.createElement(clockface_dist["SquareButton"], { icon: clockface_dist["IconFont"].Remove, onClick: onRemove, style: { flex: '0 0 30px' } }))),
        error && (react_default.a.createElement("div", { className: "threshold-setting--error", "data-testid": `threshold-${id}-error` }, error))));
};
/* harmony default export */ var components_ThresholdSetting = (ThresholdSetting);

// CONCATENATED MODULE: ./src/shared/utils/useOneWayReducer.ts

const useOneWayReducer = (reducer, defaultState) => {
    const prevDefaultState = Object(react["useRef"])(defaultState);
    const reduceDefaultState = Object(react["useRef"])(false);
    const wrappedReducer = Object(react["useCallback"])((state, action) => {
        if (reduceDefaultState.current) {
            reduceDefaultState.current = false;
            return reducer(prevDefaultState.current, action);
        }
        return reducer(state, action);
    }, []);
    const [reducerState, dispatch] = Object(react["useReducer"])(wrappedReducer, defaultState);
    if (defaultState !== prevDefaultState.current) {
        reduceDefaultState.current = true;
        prevDefaultState.current = defaultState;
        return [defaultState, dispatch];
    }
    return [reducerState, dispatch];
};

// CONCATENATED MODULE: ./src/shared/utils/thresholds.ts


const sortThresholds = (thresholds) => {
    const result = [...thresholds];
    result.sort((a, b) => a.id === constants_thresholds["a" /* BASE_THRESHOLD_ID */] ? -Infinity : a.value - b.value);
    return result;
};
const validateThresholds = (thresholds) => {
    const minThreshold = thresholds.find(({ type }) => type === constants_thresholds["c" /* COLOR_TYPE_MIN */]);
    const maxThreshold = thresholds.find(({ type }) => type === constants_thresholds["b" /* COLOR_TYPE_MAX */]);
    const errors = {};
    for (const { id, value, type } of thresholds) {
        if (isNaN(value)) {
            errors[id] = 'Please enter a valid number';
        }
        else if (minThreshold &&
            type !== constants_thresholds["c" /* COLOR_TYPE_MIN */] &&
            value < minThreshold.value) {
            errors[id] = 'Please enter a value greater than the minimum threshold';
        }
        else if (maxThreshold &&
            type !== constants_thresholds["b" /* COLOR_TYPE_MAX */] &&
            value > maxThreshold.value) {
            errors[id] = 'Please enter a value less than the maximum threshold';
        }
    }
    return errors;
};
const addThreshold = (thresholds) => {
    const values = thresholds.map(threshold => threshold.value);
    let minValue = Math.min(...values);
    let maxValue = Math.max(...values);
    if (minValue === Infinity || isNaN(minValue) || minValue === maxValue) {
        minValue = constants_thresholds["i" /* DEFAULT_VALUE_MIN */];
        maxValue = constants_thresholds["h" /* DEFAULT_VALUE_MAX */];
    }
    const value = randomTick(minValue, maxValue);
    const colorChoice = constants_thresholds["k" /* THRESHOLD_COLORS */][Math.floor(Math.random() * constants_thresholds["k" /* THRESHOLD_COLORS */].length)];
    const firstThresholdType = thresholds[0].type;
    const thresholdType = firstThresholdType === constants_thresholds["c" /* COLOR_TYPE_MIN */] ||
        firstThresholdType === constants_thresholds["b" /* COLOR_TYPE_MAX */]
        ? constants_thresholds["d" /* COLOR_TYPE_THRESHOLD */]
        : firstThresholdType;
    const threshold = Object.assign(Object.assign({}, colorChoice), { id: uuid_default.a.v4(), type: thresholdType, value });
    return threshold;
};
const randomTick = (min, max) => {
    const domainWidth = max - min;
    let roundTo;
    if (domainWidth > 1000) {
        roundTo = 100;
    }
    else if (domainWidth > 100) {
        roundTo = 10;
    }
    else if (domainWidth > 50) {
        roundTo = 5;
    }
    else if (domainWidth > 10) {
        roundTo = 1;
    }
    else {
        roundTo = null;
    }
    let value;
    if (roundTo) {
        value = Math.round((Math.random() * (max - min)) / roundTo) * roundTo;
    }
    else {
        value = Number((Math.random() * (max - min)).toFixed(2));
    }
    return value;
};

// CONCATENATED MODULE: ./src/shared/components/ThresholdsSettings.tsx






const ThresholdsSettings_reducer = (state, action) => {
    switch (action.type) {
        case 'COLOR_CHANGED': {
            const { id, name, hex } = action;
            const thresholds = state.thresholds.map(threshold => threshold.id === id ? Object.assign(Object.assign({}, threshold), { name, hex }) : threshold);
            return Object.assign(Object.assign({}, state), { thresholds, isDirty: true });
        }
        case 'VALUE_CHANGED': {
            const { id, value } = action;
            const inputs = Object.assign(Object.assign({}, state.inputs), { [id]: value });
            return Object.assign(Object.assign({}, state), { inputs, isDirty: true, isValid: false });
        }
        case 'VALUE_BLURRED': {
            const thresholds = state.thresholds.map(threshold => threshold.id === action.id
                ? Object.assign(Object.assign({}, threshold), { value: parseFloat(state.inputs[action.id]) }) : threshold);
            const errors = validateThresholds(thresholds);
            const isValid = Object.values(errors).length === 0;
            return Object.assign(Object.assign({}, state), { thresholds, errors, isValid });
        }
        case 'THRESHOLD_ADDED': {
            const newThreshold = addThreshold(state.thresholds);
            const thresholds = sortThresholds([...state.thresholds, newThreshold]);
            const inputs = Object.assign(Object.assign({}, state.inputs), { [newThreshold.id]: String(newThreshold.value) });
            return Object.assign(Object.assign({}, state), { thresholds, inputs, isDirty: true });
        }
        case 'THRESHOLD_REMOVED': {
            const thresholds = state.thresholds.filter(threshold => threshold.id !== action.id);
            return Object.assign(Object.assign({}, state), { thresholds, isDirty: true });
        }
        default:
            const unknownAction = action;
            const unknownActionType = unknownAction.type;
            throw new Error(`unhandled action of type "${unknownActionType}" in ThresholdsSettings`);
    }
};
const ThresholdsSettings = ({ thresholds, onSetThresholds, }) => {
    const initialState = Object(react["useMemo"])(() => ({
        thresholds: sortThresholds(Object(lodash["cloneDeep"])(thresholds.filter(({ type }) => type !== 'scale'))),
        inputs: thresholds.reduce((acc, { id, value }) => (Object.assign(Object.assign({}, acc), { [id]: String(value) })), {}),
        errors: {},
        isDirty: false,
        isValid: true,
    }), [thresholds]);
    const [state, dispatch] = useOneWayReducer(ThresholdsSettings_reducer, initialState);
    Object(react["useEffect"])(() => {
        if (state.isDirty && state.isValid) {
            onSetThresholds(state.thresholds);
        }
    }, [state]);
    return (react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Column, alignItems: clockface_dist["AlignItems"].Stretch, margin: clockface_dist["ComponentSize"].Medium, testID: "threshold-settings" },
        react_default.a.createElement(clockface_dist["Button"], { shape: clockface_dist["ButtonShape"].StretchToFit, icon: clockface_dist["IconFont"].Plus, text: "Add a Threshold", onClick: () => dispatch({ type: 'THRESHOLD_ADDED' }) }),
        state.thresholds.map(threshold => {
            const onChangeValue = value => dispatch({
                type: 'VALUE_CHANGED',
                id: threshold.id,
                value,
            });
            const onChangeColor = (name, hex) => dispatch({
                type: 'COLOR_CHANGED',
                id: threshold.id,
                name,
                hex,
            });
            const onRemove = () => dispatch({
                type: 'THRESHOLD_REMOVED',
                id: threshold.id,
            });
            const onBlur = () => dispatch({
                type: 'VALUE_BLURRED',
                id: threshold.id,
            });
            return (react_default.a.createElement(components_ThresholdSetting, { key: threshold.id, id: threshold.id, name: threshold.name, type: threshold.type, value: state.inputs[threshold.id], error: state.errors[threshold.id], onBlur: onBlur, onRemove: onRemove, onChangeValue: onChangeValue, onChangeColor: onChangeColor }));
        })));
};
/* harmony default export */ var components_ThresholdsSettings = (ThresholdsSettings);

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/GaugeOptions.tsx







class GaugeOptions_GaugeOptions extends react["PureComponent"] {
    render() {
        const { prefix, tickPrefix, suffix, tickSuffix, onUpdatePrefix, onUpdateTickPrefix, onUpdateSuffix, onUpdateTickSuffix, onUpdateColors, } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Grid"].Column, null,
                react_default.a.createElement("h4", { className: "view-options--header" }, "Customize Gauge")),
            react_default.a.createElement(view_options_Affixes, { prefix: prefix, tickPrefix: tickPrefix, suffix: suffix, type: "gauge", tickSuffix: tickSuffix, onUpdatePrefix: onUpdatePrefix, onUpdateTickPrefix: onUpdateTickPrefix, onUpdateSuffix: onUpdateSuffix, onUpdateTickSuffix: onUpdateTickSuffix }),
            this.decimalPlaces,
            react_default.a.createElement(clockface_dist["Grid"].Column, null,
                react_default.a.createElement("h4", { className: "view-options--header" }, "Colorized Thresholds")),
            react_default.a.createElement(clockface_dist["Grid"].Column, null,
                react_default.a.createElement(components_ThresholdsSettings, { thresholds: this.props.colors, onSetThresholds: onUpdateColors }))));
    }
    get decimalPlaces() {
        const { onUpdateDecimalPlaces, decimalPlaces } = this.props;
        if (!decimalPlaces) {
            return null;
        }
        return (react_default.a.createElement(DecimalPlaces, { digits: decimalPlaces.digits, isEnforced: decimalPlaces.isEnforced, onDecimalPlacesChange: onUpdateDecimalPlaces }));
    }
}
const GaugeOptions_mdtp = {
    onUpdatePrefix: timeMachine_actions["A" /* setPrefix */],
    onUpdateTickPrefix: timeMachine_actions["G" /* setTickPrefix */],
    onUpdateSuffix: timeMachine_actions["C" /* setSuffix */],
    onUpdateTickSuffix: timeMachine_actions["H" /* setTickSuffix */],
    onUpdateDecimalPlaces: timeMachine_actions["s" /* setDecimalPlaces */],
    onUpdateColors: timeMachine_actions["r" /* setColors */],
};
/* harmony default export */ var view_options_GaugeOptions = (Object(es["b" /* connect */])(null, GaugeOptions_mdtp)(GaugeOptions_GaugeOptions));

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/ThresholdColoring.tsx







var ThresholdColoringSetting;
(function (ThresholdColoringSetting) {
    ThresholdColoringSetting["Background"] = "background";
    ThresholdColoringSetting["Text"] = "text";
})(ThresholdColoringSetting || (ThresholdColoringSetting = {}));
class ThresholdColoring_ThresholdColoring extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleClick = (setting) => {
            if (setting === ThresholdColoringSetting.Background) {
                this.props.onSetBackground();
            }
            else if (setting === ThresholdColoringSetting.Text) {
                this.props.onSetText();
            }
        };
    }
    render() {
        return (react_default.a.createElement(clockface_dist["Form"].Element, { label: "Colorization", style: { marginTop: '16px' } },
            react_default.a.createElement(clockface_dist["SelectGroup"], { shape: clockface_dist["ButtonShape"].StretchToFit },
                react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "threshold-coloring", id: ThresholdColoringSetting.Background, titleText: ThresholdColoringSetting.Background, active: this.activeSetting === ThresholdColoringSetting.Background, onClick: this.handleClick, value: ThresholdColoringSetting.Background }, "Background"),
                react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "threshold-coloring", id: ThresholdColoringSetting.Text, titleText: ThresholdColoringSetting.Text, active: this.activeSetting === ThresholdColoringSetting.Text, onClick: this.handleClick, value: ThresholdColoringSetting.Text }, "Text"))));
    }
    get activeSetting() {
        const { colors } = this.props;
        const activeSetting = Object(lodash["get"])(colors.filter(c => c.type !== 'scale'), '0.type', ThresholdColoringSetting.Text);
        return activeSetting;
    }
}
const ThresholdColoring_mstp = (state) => {
    const colors = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state).view.properties.colors;
    return { colors };
};
const ThresholdColoring_mdtp = {
    onSetBackground: timeMachine_actions["n" /* setBackgroundThresholdColoring */],
    onSetText: timeMachine_actions["F" /* setTextThresholdColoring */],
};
/* harmony default export */ var view_options_ThresholdColoring = (Object(es["b" /* connect */])(ThresholdColoring_mstp, ThresholdColoring_mdtp)(ThresholdColoring_ThresholdColoring));

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/SingleStatOptions.tsx









const SingleStatOptions = props => {
    const { colors, prefix, tickPrefix, suffix, tickSuffix, decimalPlaces, onSetPrefix, onSetTickPrefix, onSetSuffix, onSetTickSuffix, onSetDecimalPlaces, onSetColors, } = props;
    return (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement(clockface_dist["Grid"].Column, null,
            react_default.a.createElement("h4", { className: "view-options--header" }, "Customize Single-Stat")),
        react_default.a.createElement(view_options_Affixes, { prefix: prefix, tickPrefix: tickPrefix, suffix: suffix, type: "single-stat", tickSuffix: tickSuffix, onUpdatePrefix: onSetPrefix, onUpdateTickPrefix: onSetTickPrefix, onUpdateSuffix: onSetSuffix, onUpdateTickSuffix: onSetTickSuffix }),
        decimalPlaces && (react_default.a.createElement(DecimalPlaces, { digits: decimalPlaces.digits, isEnforced: decimalPlaces.isEnforced, onDecimalPlacesChange: onSetDecimalPlaces })),
        react_default.a.createElement(clockface_dist["Grid"].Column, null,
            react_default.a.createElement("h4", { className: "view-options--header" }, "Colorized Thresholds")),
        react_default.a.createElement(clockface_dist["Grid"].Column, null,
            react_default.a.createElement(components_ThresholdsSettings, { thresholds: colors, onSetThresholds: onSetColors })),
        react_default.a.createElement(clockface_dist["Grid"].Column, null,
            react_default.a.createElement(view_options_ThresholdColoring, null))));
};
const SingleStatOptions_mstp = (state) => {
    const view = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state).view;
    const { colors, prefix, suffix, decimalPlaces, tickPrefix, tickSuffix, } = view.properties;
    return { colors, prefix, suffix, decimalPlaces, tickPrefix, tickSuffix };
};
const SingleStatOptions_mdtp = {
    onSetPrefix: timeMachine_actions["A" /* setPrefix */],
    onSetTickPrefix: timeMachine_actions["G" /* setTickPrefix */],
    onSetSuffix: timeMachine_actions["C" /* setSuffix */],
    onSetTickSuffix: timeMachine_actions["H" /* setTickSuffix */],
    onSetDecimalPlaces: timeMachine_actions["s" /* setDecimalPlaces */],
    onSetColors: timeMachine_actions["r" /* setColors */],
};
/* harmony default export */ var view_options_SingleStatOptions = (Object(es["b" /* connect */])(SingleStatOptions_mstp, SingleStatOptions_mdtp)(SingleStatOptions));

// CONCATENATED MODULE: ./src/shared/components/draggable_column/DraggableColumn.tsx







const columnType = 'column';
const columnSource = {
    beginDrag(props) {
        return {
            id: props.id,
            index: props.index,
        };
    },
};
const columnTarget = {
    hover(props, monitor, component) {
        const dragIndex = monitor.getItem().index;
        const hoverIndex = props.index;
        if (dragIndex === hoverIndex) {
            return;
        }
        const domNode = Object(react_dom["findDOMNode"])(component);
        const hoverBoundingRect = domNode.getBoundingClientRect();
        const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;
        const clientOffset = monitor.getClientOffset();
        const hoverClientY = clientOffset.y - hoverBoundingRect.top;
        if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {
            return;
        }
        if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {
            return;
        }
        props.onMoveColumn(dragIndex, hoverIndex);
        monitor.getItem().index = hoverIndex;
    },
};
function ColumnDropTarget(dropColumnType, dropColumnTarget, dropHandler) {
    return target => Object(react_dnd_lib["DropTarget"])(dropColumnType, dropColumnTarget, dropHandler)(target);
}
function ColumnDragSource(dragColumnType, dragColumnSource, dragHandler) {
    return target => Object(react_dnd_lib["DragSource"])(dragColumnType, dragColumnSource, dragHandler)(target);
}
let DraggableColumn_DraggableColumn = class DraggableColumn extends react["Component"] {
    constructor(props) {
        super(props);
        this.handleColumnRename = (e) => {
            const { onUpdateColumn, internalName, visible } = this.props;
            onUpdateColumn({ internalName, displayName: e.target.value, visible });
        };
        this.handleToggleVisible = () => {
            const { onUpdateColumn, internalName, displayName, visible } = this.props;
            onUpdateColumn({ internalName, displayName, visible: !visible });
        };
        this.handleColumnRename = this.handleColumnRename.bind(this);
        this.handleToggleVisible = this.handleToggleVisible.bind(this);
    }
    render() {
        const { internalName, displayName, connectDragPreview, connectDropTarget, } = this.props;
        return connectDragPreview(connectDropTarget(react_default.a.createElement("div", { className: this.columnClassName },
            react_default.a.createElement("div", { className: this.labelClassName },
                this.dragHandle,
                this.visibilityToggle,
                react_default.a.createElement("div", { className: "customizable-field--name" }, internalName)),
            react_default.a.createElement(clockface_dist["Input"], { className: "customizable-field--input", id: "internalName", value: displayName, onChange: this.handleColumnRename, placeholder: `Rename ${internalName}`, status: this.inputStatus }))));
    }
    get inputStatus() {
        const { visible } = this.props;
        if (visible) {
            return clockface_dist["ComponentStatus"].Default;
        }
        return clockface_dist["ComponentStatus"].Disabled;
    }
    get dragHandle() {
        const { connectDragSource } = this.props;
        return connectDragSource(react_default.a.createElement("div", { className: "customizable-field--drag" },
            react_default.a.createElement("span", { className: "hamburger" })));
    }
    get visibilityToggle() {
        const { visible, internalName } = this.props;
        if (visible) {
            return (react_default.a.createElement("div", { className: "customizable-field--visibility", onClick: this.handleToggleVisible, title: `Click to HIDE ${internalName}` },
                react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].EyeOpen })));
        }
        return (react_default.a.createElement("div", { className: "customizable-field--visibility", onClick: this.handleToggleVisible, title: `Click to SHOW ${internalName}` },
            react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].EyeClosed })));
    }
    get labelClassName() {
        const { visible } = this.props;
        if (visible) {
            return 'customizable-field--label';
        }
        return 'customizable-field--label__hidden';
    }
    get columnClassName() {
        const { isDragging } = this.props;
        if (isDragging) {
            return 'customizable-field dragging';
        }
        return 'customizable-field';
    }
};
DraggableColumn_DraggableColumn = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    ColumnDropTarget(columnType, columnTarget, (connect) => ({
        connectDropTarget: connect.dropTarget(),
    })),
    ColumnDragSource(columnType, columnSource, (connect, monitor) => ({
        connectDragSource: connect.dragSource(),
        connectDragPreview: connect.dragPreview(),
        isDragging: monitor.isDragging(),
    })),
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], DraggableColumn_DraggableColumn);
/* harmony default export */ var draggable_column_DraggableColumn = (DraggableColumn_DraggableColumn);

// CONCATENATED MODULE: ./src/shared/components/columns_options/ColumnsOptions.tsx





class ColumnsOptions_ColumnsOptions extends react["Component"] {
    render() {
        const { className } = this.props;
        return (react_default.a.createElement(clockface_dist["Grid"].Column, null,
            react_default.a.createElement(clockface_dist["Form"].Element, { label: "Table Columns" },
                react_default.a.createElement("div", { className: className }, this.draggableColumns))));
    }
    get draggableColumns() {
        const { columns, onMoveColumn, onUpdateColumn } = this.props;
        if (columns.length) {
            return columns.map((column, i) => (react_default.a.createElement(draggable_column_DraggableColumn, { key: column.internalName, index: i, id: column.internalName, internalName: column.internalName, displayName: column.displayName, visible: column.visible, onUpdateColumn: onUpdateColumn, onMoveColumn: onMoveColumn })));
        }
        return (react_default.a.createElement(clockface_dist["Form"].Box, null,
            react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Small },
                react_default.a.createElement(clockface_dist["EmptyState"].Text, null, "This query returned no columns"))));
    }
}
/* harmony default export */ var columns_options_ColumnsOptions = (withDragDropContext(ColumnsOptions_ColumnsOptions));

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/FixFirstColumn.tsx



const GraphOptionsFixFirstColumn = ({ fixed, onToggleFixFirstColumn, }) => (react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
    react_default.a.createElement(clockface_dist["Form"].Element, { label: "First Column" },
        react_default.a.createElement(clockface_dist["Form"].Box, null,
            react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, margin: clockface_dist["ComponentSize"].Small },
                react_default.a.createElement(clockface_dist["InputLabel"], null, "Scroll with table"),
                react_default.a.createElement(clockface_dist["SlideToggle"], { active: fixed, onChange: onToggleFixFirstColumn, size: clockface_dist["ComponentSize"].ExtraSmall }),
                react_default.a.createElement(clockface_dist["InputLabel"], null, "Fixed"))))));
/* harmony default export */ var FixFirstColumn = (GraphOptionsFixFirstColumn);

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/SortBy.tsx



const SortBy = ({ fieldOptions, onChange, selected }) => {
    return (react_default.a.createElement(clockface_dist["Grid"].Column, null,
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Default Sort Field" },
            react_default.a.createElement(clockface_dist["Dropdown"], { className: "dropdown-stretch", button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { active: active, onClick: onClick }, lodash_default.a.get(selected, 'displayName', 'Choose a sort field'))), menu: onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse }, fieldOptions
                    .filter(field => !!field.internalName)
                    .map(field => (react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: field.internalName, id: field.internalName, value: field, onClick: onChange, selected: field.internalName ===
                        lodash_default.a.get(selected, 'internalName', null) }, field.displayName))))) }))));
};
/* harmony default export */ var view_options_SortBy = (SortBy);

// CONCATENATED MODULE: ./src/shared/utils/move.ts
const move = (values, fromIndex, toIndex) => {
    if (fromIndex === toIndex) {
        return values.slice();
    }
    const targetValue = values[fromIndex];
    const valuesRemoved = [
        ...values.slice(0, fromIndex),
        ...values.slice(fromIndex + 1),
    ];
    return [
        ...valuesRemoved.slice(0, toIndex),
        targetValue,
        ...valuesRemoved.slice(toIndex),
    ];
};

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/TableOptions.tsx















let TableOptions_TableOptions = class TableOptions extends react["Component"] {
    constructor() {
        super(...arguments);
        this.filterFieldOptions = (fieldOptions) => {
            return fieldOptions.filter(col => col.internalName !== 'time' &&
                col.internalName !== '' &&
                col.internalName !== 'result' &&
                col.internalName !== 'table');
        };
        this.handleChangeSortBy = (sortBy) => {
            const { tableOptions, onSetTableOptions } = this.props;
            onSetTableOptions(Object.assign(Object.assign({}, tableOptions), { sortBy }));
        };
        this.handleMoveColumn = (dragIndex, hoverIndex) => {
            const fieldOptions = move(this.filterFieldOptions(this.props.fieldOptions), dragIndex, hoverIndex);
            this.props.onSetFieldOptions(fieldOptions);
        };
        this.handleUpdateColumn = (fieldOption) => {
            this.props.onUpdateFieldOption(fieldOption);
        };
        this.handleToggleFixFirstColumn = () => {
            const { onSetTableOptions, tableOptions } = this.props;
            const fixFirstColumn = !tableOptions.fixFirstColumn;
            onSetTableOptions(Object.assign(Object.assign({}, tableOptions), { fixFirstColumn }));
        };
    }
    render() {
        const { timeFormat, onSetColors, fieldOptions, tableOptions, colors, decimalPlaces, onSetTimeFormat, onSetDecimalPlaces, } = this.props;
        const filteredColumns = this.filterFieldOptions(fieldOptions);
        const { fixFirstColumn, sortBy } = tableOptions;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Grid"].Column, null,
                react_default.a.createElement("h4", { className: "view-options--header" }, "Customize Table")),
            !!fieldOptions.length && (react_default.a.createElement(view_options_SortBy, { selected: sortBy, fieldOptions: fieldOptions, onChange: this.handleChangeSortBy })),
            react_default.a.createElement(clockface_dist["Grid"].Column, null,
                react_default.a.createElement(clockface_dist["Form"].Element, { label: "Time Format" },
                    react_default.a.createElement(TimeFormat, { timeFormat: timeFormat, onTimeFormatChange: onSetTimeFormat }))),
            decimalPlaces && (react_default.a.createElement(DecimalPlaces, { digits: decimalPlaces.digits, isEnforced: decimalPlaces.isEnforced, onDecimalPlacesChange: onSetDecimalPlaces })),
            react_default.a.createElement(clockface_dist["Grid"].Column, null,
                react_default.a.createElement("h4", { className: "view-options--header" }, "Column Settings")),
            react_default.a.createElement(FixFirstColumn, { fixed: fixFirstColumn, onToggleFixFirstColumn: this.handleToggleFixFirstColumn }),
            react_default.a.createElement(columns_options_ColumnsOptions, { columns: filteredColumns, onMoveColumn: this.handleMoveColumn, onUpdateColumn: this.handleUpdateColumn }),
            react_default.a.createElement(clockface_dist["Grid"].Column, null,
                react_default.a.createElement("h4", { className: "view-options--header" }, "Colorized Thresholds")),
            react_default.a.createElement(clockface_dist["Grid"].Column, null,
                react_default.a.createElement(components_ThresholdsSettings, { thresholds: colors, onSetThresholds: onSetColors })),
            react_default.a.createElement(clockface_dist["Grid"].Column, null,
                react_default.a.createElement(view_options_ThresholdColoring, null))));
    }
};
TableOptions_TableOptions = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], TableOptions_TableOptions);

const TableOptions_mstp = (state) => {
    const view = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state).view;
    const { colors, decimalPlaces, fieldOptions, tableOptions, timeFormat, } = view.properties;
    return { colors, decimalPlaces, fieldOptions, tableOptions, timeFormat };
};
const TableOptions_mdtp = {
    onSetDecimalPlaces: timeMachine_actions["s" /* setDecimalPlaces */],
    onSetColors: timeMachine_actions["r" /* setColors */],
    onSetFieldOptions: timeMachine_actions["t" /* setFieldOptions */],
    onUpdateFieldOption: timeMachine_actions["W" /* updateFieldOption */],
    onSetTableOptions: timeMachine_actions["E" /* setTableOptions */],
    onSetTimeFormat: timeMachine_actions["I" /* setTimeFormat */],
};
/* harmony default export */ var view_options_TableOptions = (Object(es["b" /* connect */])(TableOptions_mstp, TableOptions_mdtp)(TableOptions_TableOptions));

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/BinCountInput.tsx



const BinCountInput = ({ binCount, onSetBinCount }) => {
    const handleInputChange = (e) => {
        const binCount = convertUserInputToNumOrNaN(e);
        onSetBinCount(binCount);
    };
    const handleChangeMode = (mode) => {
        if (mode === clockface_dist["AutoInputMode"].Auto) {
            onSetBinCount(null);
        }
        else {
            onSetBinCount(30);
        }
    };
    return (react_default.a.createElement(clockface_dist["AutoInput"], { mode: typeof binCount === 'number' ? clockface_dist["AutoInputMode"].Custom : clockface_dist["AutoInputMode"].Auto, onChangeMode: handleChangeMode, inputComponent: react_default.a.createElement(clockface_dist["Input"], { name: "binCount", value: binCount, placeholder: "Enter a number", type: clockface_dist["InputType"].Number, min: 0, onChange: handleInputChange }) }));
};
/* harmony default export */ var view_options_BinCountInput = (BinCountInput);

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/HistogramOptions.tsx











const HistogramOptions = props => {
    const { xColumn, fillColumns, numericColumns, availableGroupColumns, position, binCount, colors, xDomain, xAxisLabel, onSetXColumn, onSetFillColumns, onSetPosition, onSetBinCount, onSetColors, onSetXDomain, onSetXAxisLabel, } = props;
    const groupDropdownStatus = availableGroupColumns.length
        ? clockface_dist["ComponentStatus"].Default
        : clockface_dist["ComponentStatus"].Disabled;
    const onSelectFillColumns = (option) => {
        const columnExists = fillColumns.find(col => col === option);
        let updatedColumns = fillColumns;
        if (columnExists) {
            updatedColumns = fillColumns.filter(fc => fc !== option);
        }
        else {
            updatedColumns = [...fillColumns, option];
        }
        onSetFillColumns(updatedColumns);
    };
    return (react_default.a.createElement(clockface_dist["Grid"].Column, null,
        react_default.a.createElement("h4", { className: "view-options--header" }, "Customize Histogram"),
        react_default.a.createElement("h5", { className: "view-options--header" }, "Data"),
        react_default.a.createElement(components_ColumnSelector, { selectedColumn: xColumn, onSelectColumn: onSetXColumn, availableColumns: numericColumns, axisName: "x" }),
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Group By" },
            react_default.a.createElement(clockface_dist["MultiSelectDropdown"], { options: availableGroupColumns, selectedOptions: fillColumns, onSelect: onSelectFillColumns, buttonStatus: groupDropdownStatus })),
        react_default.a.createElement("h5", { className: "view-options--header" }, "Options"),
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Color Scheme" },
            react_default.a.createElement(components_ColorSchemeDropdown, { value: colors, onChange: onSetColors })),
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Positioning" },
            react_default.a.createElement(clockface_dist["Dropdown"], { button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { active: active, onClick: onClick }, lodash_default.a.capitalize(position))), menu: onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse },
                    react_default.a.createElement(clockface_dist["Dropdown"].Item, { id: "overlaid", value: "overlaid", onClick: onSetPosition, selected: position === 'overlaid' }, "Overlaid"),
                    react_default.a.createElement(clockface_dist["Dropdown"].Item, { id: "stacked", value: "stacked", onClick: onSetPosition, selected: position === 'stacked' }, "Stacked"))) })),
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Bins" },
            react_default.a.createElement(view_options_BinCountInput, { binCount: binCount, onSetBinCount: onSetBinCount })),
        react_default.a.createElement("h5", { className: "view-options--header" }, "X Axis"),
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "X Axis Label" },
            react_default.a.createElement(clockface_dist["Input"], { value: xAxisLabel, onChange: e => onSetXAxisLabel(e.target.value) })),
        react_default.a.createElement(components_AutoDomainInput, { domain: xDomain, onSetDomain: onSetXDomain, label: "X Axis Domain" })));
};
const HistogramOptions_mstp = (state) => {
    const numericColumns = Object(timeMachine_selectors["j" /* getNumericColumns */])(state);
    const availableGroupColumns = Object(timeMachine_selectors["h" /* getGroupableColumns */])(state);
    const xColumn = Object(timeMachine_selectors["q" /* getXColumnSelection */])(state);
    const fillColumns = Object(timeMachine_selectors["g" /* getFillColumnsSelection */])(state);
    return { numericColumns, availableGroupColumns, xColumn, fillColumns };
};
const HistogramOptions_mdtp = {
    onSetXColumn: timeMachine_actions["M" /* setXColumn */],
    onSetFillColumns: timeMachine_actions["u" /* setFillColumns */],
    onSetBinCount: timeMachine_actions["o" /* setBinCount */],
    onSetPosition: timeMachine_actions["w" /* setHistogramPosition */],
    onSetColors: timeMachine_actions["r" /* setColors */],
    onSetXDomain: timeMachine_actions["N" /* setXDomain */],
    onSetXAxisLabel: timeMachine_actions["L" /* setXAxisLabel */],
};
/* harmony default export */ var view_options_HistogramOptions = (Object(es["b" /* connect */])(HistogramOptions_mstp, HistogramOptions_mdtp)(HistogramOptions));

// CONCATENATED MODULE: ./src/shared/components/HexColorSchemeDropdown.tsx



const HexColorSchemeDropdown = ({ colorSchemes, selectedColorScheme, onSelectColorScheme, }) => {
    const selected = colorSchemes.find(scheme => scheme.colors.length === selectedColorScheme.length &&
        scheme.colors.every((color, i) => color === selectedColorScheme[i]));
    let selectedName;
    let resolvedSchemes;
    if (selected) {
        selectedName = selected.name;
        resolvedSchemes = colorSchemes;
    }
    else {
        selectedName = 'Custom';
        resolvedSchemes = [
            ...colorSchemes,
            { name: 'Custom', colors: selectedColorScheme },
        ];
    }
    return (react_default.a.createElement(clockface_dist["Dropdown"], { className: "color-scheme-dropdown", button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { active: active, onClick: onClick },
            react_default.a.createElement(components_ColorSchemeDropdownItem, { name: selectedName, colors: selectedColorScheme }))), menu: onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse, theme: clockface_dist["DropdownMenuTheme"].Onyx }, resolvedSchemes.map(({ name, colors }) => (react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: name, id: name, value: colors, onClick: onSelectColorScheme, selected: selectedName === name },
            react_default.a.createElement(components_ColorSchemeDropdownItem, { name: name, colors: colors })))))) }));
};
/* harmony default export */ var components_HexColorSchemeDropdown = (HexColorSchemeDropdown);

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/HeatmapOptions.tsx











const HEATMAP_COLOR_SCHEMES = [
    { name: 'Magma', colors: giraffe_dist["MAGMA"] },
    { name: 'Inferno', colors: giraffe_dist["INFERNO"] },
    { name: 'Viridis', colors: giraffe_dist["VIRIDIS"] },
    { name: 'Plasma', colors: giraffe_dist["PLASMA"] },
];
const HeatmapOptions = props => {
    const [binInputStatus, setBinInputStatus] = Object(react["useState"])(clockface_dist["ComponentStatus"].Default);
    const [binInput, setBinInput] = Object(react["useState"])(props.binSize);
    const onSetBinSize = (e) => {
        const val = convertUserInputToNumOrNaN(e);
        setBinInput(val);
        if (isNaN(val) || val < 5) {
            setBinInputStatus(clockface_dist["ComponentStatus"].Error);
            return;
        }
        setBinInputStatus(clockface_dist["ComponentStatus"].Default);
        props.onSetBinSize(val);
    };
    return (react_default.a.createElement(clockface_dist["Grid"].Column, null,
        react_default.a.createElement("h4", { className: "view-options--header" }, "Customize Heatmap"),
        react_default.a.createElement("h5", { className: "view-options--header" }, "Data"),
        react_default.a.createElement(components_ColumnSelector, { selectedColumn: props.xColumn, onSelectColumn: props.onSetXColumn, availableColumns: props.numericColumns, axisName: "x" }),
        react_default.a.createElement(components_ColumnSelector, { selectedColumn: props.yColumn, onSelectColumn: props.onSetYColumn, availableColumns: props.numericColumns, axisName: "y" }),
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Time Format" },
            react_default.a.createElement(TimeFormat, { timeFormat: props.timeFormat, onTimeFormatChange: props.onSetTimeFormat })),
        react_default.a.createElement("h5", { className: "view-options--header" }, "Options"),
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Color Scheme" },
            react_default.a.createElement(components_HexColorSchemeDropdown, { colorSchemes: HEATMAP_COLOR_SCHEMES, selectedColorScheme: props.colors, onSelectColorScheme: props.onSetColors })),
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Bin Size" },
            react_default.a.createElement(clockface_dist["Input"], { status: binInputStatus, value: binInput, type: clockface_dist["InputType"].Number, onChange: onSetBinSize })),
        react_default.a.createElement("h5", { className: "view-options--header" }, "X Axis"),
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "X Axis Label" },
            react_default.a.createElement(clockface_dist["Input"], { value: props.xAxisLabel, onChange: e => props.onSetXAxisLabel(e.target.value) })),
        react_default.a.createElement(clockface_dist["Grid"].Row, null,
            react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Six },
                react_default.a.createElement(clockface_dist["Form"].Element, { label: "X Tick Prefix" },
                    react_default.a.createElement(clockface_dist["Input"], { value: props.xPrefix, onChange: e => props.onSetPrefix(e.target.value, 'x') }))),
            react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Six },
                react_default.a.createElement(clockface_dist["Form"].Element, { label: "X Tick Suffix" },
                    react_default.a.createElement(clockface_dist["Input"], { value: props.xSuffix, onChange: e => props.onSetSuffix(e.target.value, 'x') })))),
        react_default.a.createElement(components_AutoDomainInput, { domain: props.xDomain, onSetDomain: props.onSetXDomain, label: "X Axis Domain" }),
        react_default.a.createElement("h5", { className: "view-options--header" }, "Y Axis"),
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Y Axis Label" },
            react_default.a.createElement(clockface_dist["Input"], { value: props.yAxisLabel, onChange: e => props.onSetYAxisLabel(e.target.value) })),
        react_default.a.createElement(clockface_dist["Grid"].Row, null,
            react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Six },
                react_default.a.createElement(clockface_dist["Form"].Element, { label: "Y Tick Prefix" },
                    react_default.a.createElement(clockface_dist["Input"], { value: props.yPrefix, onChange: e => props.onSetPrefix(e.target.value, 'y') }))),
            react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Six },
                react_default.a.createElement(clockface_dist["Form"].Element, { label: "Y Tick Suffix" },
                    react_default.a.createElement(clockface_dist["Input"], { value: props.ySuffix, onChange: e => props.onSetSuffix(e.target.value, 'y') })))),
        react_default.a.createElement(components_AutoDomainInput, { domain: props.yDomain, onSetDomain: props.onSetYDomain, label: "Y Axis Domain" })));
};
const HeatmapOptions_mstp = (state) => {
    const xColumn = Object(timeMachine_selectors["q" /* getXColumnSelection */])(state);
    const yColumn = Object(timeMachine_selectors["r" /* getYColumnSelection */])(state);
    const numericColumns = Object(timeMachine_selectors["j" /* getNumericColumns */])(state);
    const view = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state).view;
    const { timeFormat } = view.properties;
    return { xColumn, yColumn, numericColumns, timeFormat };
};
const HeatmapOptions_mdtp = {
    onSetXColumn: timeMachine_actions["M" /* setXColumn */],
    onSetYColumn: timeMachine_actions["R" /* setYColumn */],
    onSetBinSize: timeMachine_actions["p" /* setBinSize */],
    onSetColors: timeMachine_actions["q" /* setColorHexes */],
    onSetXDomain: timeMachine_actions["N" /* setXDomain */],
    onSetYDomain: timeMachine_actions["S" /* setYDomain */],
    onSetXAxisLabel: timeMachine_actions["L" /* setXAxisLabel */],
    onSetYAxisLabel: timeMachine_actions["Q" /* setYAxisLabel */],
    onSetPrefix: timeMachine_actions["l" /* setAxisPrefix */],
    onSetSuffix: timeMachine_actions["m" /* setAxisSuffix */],
    onSetTimeFormat: timeMachine_actions["I" /* setTimeFormat */],
};
/* harmony default export */ var view_options_HeatmapOptions = (Object(es["b" /* connect */])(HeatmapOptions_mstp, HeatmapOptions_mdtp)(HeatmapOptions));

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/ScatterOptions.tsx












const ScatterOptions = props => {
    const { fillColumns, symbolColumns, availableGroupColumns, yAxisLabel, xAxisLabel, onSetFillColumns, onSetSymbolColumns, colors, onSetColors, onSetYAxisLabel, onSetXAxisLabel, yPrefix, ySuffix, onUpdateAxisSuffix, onUpdateAxisPrefix, yDomain, onSetYDomain, xColumn, yColumn, numericColumns, onSetXColumn, onSetYColumn, onSetTimeFormat, timeFormat, } = props;
    const groupDropdownStatus = availableGroupColumns.length
        ? clockface_dist["ComponentStatus"].Default
        : clockface_dist["ComponentStatus"].Disabled;
    const handleFillColumnSelect = (column) => {
        let updatedFillColumns;
        if (fillColumns.includes(column)) {
            updatedFillColumns = fillColumns.filter(col => col !== column);
        }
        else {
            updatedFillColumns = [...fillColumns, column];
        }
        onSetFillColumns(updatedFillColumns);
    };
    const handleSymbolColumnSelect = (column) => {
        let updatedSymbolColumns;
        if (symbolColumns.includes(column)) {
            updatedSymbolColumns = symbolColumns.filter(col => col !== column);
        }
        else {
            updatedSymbolColumns = [...symbolColumns, column];
        }
        onSetSymbolColumns(updatedSymbolColumns);
    };
    return (react_default.a.createElement(clockface_dist["Grid"].Column, null,
        react_default.a.createElement("h4", { className: "view-options--header" }, "Customize Scatter Plot"),
        react_default.a.createElement("h5", { className: "view-options--header" }, "Data"),
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Symbol Column" },
            react_default.a.createElement(clockface_dist["MultiSelectDropdown"], { options: availableGroupColumns, selectedOptions: symbolColumns, onSelect: handleSymbolColumnSelect, buttonStatus: groupDropdownStatus })),
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Fill Column" },
            react_default.a.createElement(clockface_dist["MultiSelectDropdown"], { options: availableGroupColumns, selectedOptions: fillColumns, onSelect: handleFillColumnSelect, buttonStatus: groupDropdownStatus })),
        react_default.a.createElement(components_ColumnSelector, { selectedColumn: xColumn, onSelectColumn: onSetXColumn, availableColumns: numericColumns, axisName: "x" }),
        react_default.a.createElement(components_ColumnSelector, { selectedColumn: yColumn, onSelectColumn: onSetYColumn, availableColumns: numericColumns, axisName: "y" }),
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Time Format" },
            react_default.a.createElement(TimeFormat, { timeFormat: timeFormat, onTimeFormatChange: onSetTimeFormat })),
        react_default.a.createElement("h5", { className: "view-options--header" }, "Options"),
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Color Scheme" },
            react_default.a.createElement(components_HexColorSchemeDropdown, { colorSchemes: constants["r" /* GIRAFFE_COLOR_SCHEMES */], selectedColorScheme: colors, onSelectColorScheme: onSetColors })),
        react_default.a.createElement("h5", { className: "view-options--header" }, "X Axis"),
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "X Axis Label" },
            react_default.a.createElement(clockface_dist["Input"], { value: xAxisLabel, onChange: e => onSetXAxisLabel(e.target.value) })),
        react_default.a.createElement("h5", { className: "view-options--header" }, "Y Axis"),
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Y Axis Label" },
            react_default.a.createElement(clockface_dist["Input"], { value: yAxisLabel, onChange: e => onSetYAxisLabel(e.target.value) })),
        react_default.a.createElement(clockface_dist["Grid"].Row, null,
            react_default.a.createElement(view_options_AxisAffixes, { prefix: yPrefix, suffix: ySuffix, axisName: "y", onUpdateAxisPrefix: prefix => onUpdateAxisPrefix(prefix, 'y'), onUpdateAxisSuffix: suffix => onUpdateAxisSuffix(suffix, 'y') })),
        react_default.a.createElement(components_AutoDomainInput, { domain: yDomain, onSetDomain: onSetYDomain, label: "Y Axis Domain" })));
};
const ScatterOptions_mstp = (state) => {
    const availableGroupColumns = Object(timeMachine_selectors["h" /* getGroupableColumns */])(state);
    const fillColumns = Object(timeMachine_selectors["g" /* getFillColumnsSelection */])(state);
    const symbolColumns = Object(timeMachine_selectors["m" /* getSymbolColumnsSelection */])(state);
    const xColumn = Object(timeMachine_selectors["q" /* getXColumnSelection */])(state);
    const yColumn = Object(timeMachine_selectors["r" /* getYColumnSelection */])(state);
    const numericColumns = Object(timeMachine_selectors["j" /* getNumericColumns */])(state);
    const view = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state).view;
    const { timeFormat } = view.properties;
    return {
        availableGroupColumns,
        fillColumns,
        symbolColumns,
        xColumn,
        yColumn,
        numericColumns,
        timeFormat,
    };
};
const ScatterOptions_mdtp = {
    onSetFillColumns: timeMachine_actions["u" /* setFillColumns */],
    onSetSymbolColumns: timeMachine_actions["D" /* setSymbolColumns */],
    onSetColors: timeMachine_actions["q" /* setColorHexes */],
    onSetYAxisLabel: timeMachine_actions["Q" /* setYAxisLabel */],
    onSetXAxisLabel: timeMachine_actions["L" /* setXAxisLabel */],
    onUpdateAxisPrefix: timeMachine_actions["l" /* setAxisPrefix */],
    onUpdateAxisSuffix: timeMachine_actions["m" /* setAxisSuffix */],
    onSetYDomain: timeMachine_actions["S" /* setYDomain */],
    onSetXColumn: timeMachine_actions["M" /* setXColumn */],
    onSetYColumn: timeMachine_actions["R" /* setYColumn */],
    onSetTimeFormat: timeMachine_actions["I" /* setTimeFormat */],
};
/* harmony default export */ var view_options_ScatterOptions = (Object(es["b" /* connect */])(ScatterOptions_mstp, ScatterOptions_mdtp)(ScatterOptions));

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/CheckOptions.tsx






const CheckOptions = ({ properties: { colors }, onSetColors }) => {
    return (react_default.a.createElement(clockface_dist["Grid"].Column, null,
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Color Scheme" },
            react_default.a.createElement(components_HexColorSchemeDropdown, { colorSchemes: constants["r" /* GIRAFFE_COLOR_SCHEMES */], selectedColorScheme: colors, onSelectColorScheme: onSetColors }))));
};
const CheckOptions_mdtp = {
    onSetColors: timeMachine_actions["q" /* setColorHexes */],
};
/* harmony default export */ var view_options_CheckOptions = (Object(es["b" /* connect */])(null, CheckOptions_mdtp)(CheckOptions));

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/OptionsSwitcher.tsx









class OptionsSwitcher_OptionsSwitcher extends react["PureComponent"] {
    render() {
        const { view } = this.props;
        switch (view.properties.type) {
            case 'line-plus-single-stat':
                return (react_default.a.createElement(react_default.a.Fragment, null,
                    react_default.a.createElement(view_options_LineOptions, Object.assign({}, view.properties)),
                    react_default.a.createElement(view_options_SingleStatOptions, null)));
            case 'xy':
                return react_default.a.createElement(view_options_LineOptions, Object.assign({}, view.properties));
            case 'gauge':
                return react_default.a.createElement(view_options_GaugeOptions, Object.assign({}, view.properties));
            case 'single-stat':
                return react_default.a.createElement(view_options_SingleStatOptions, null);
            case 'table':
                return react_default.a.createElement(view_options_TableOptions, null);
            case 'histogram':
                return react_default.a.createElement(view_options_HistogramOptions, Object.assign({}, view.properties));
            case 'heatmap':
                return react_default.a.createElement(view_options_HeatmapOptions, Object.assign({}, view.properties));
            case 'scatter':
                return react_default.a.createElement(view_options_ScatterOptions, Object.assign({}, view.properties));
            case 'check':
                return react_default.a.createElement(view_options_CheckOptions, { properties: view.properties });
            default:
                return react_default.a.createElement("div", null);
        }
    }
}
/* harmony default export */ var view_options_OptionsSwitcher = (OptionsSwitcher_OptionsSwitcher);

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/ViewOptions.tsx






class ViewOptions_ViewOptions extends react["PureComponent"] {
    render() {
        return (react_default.a.createElement("div", { className: "view-options" },
            react_default.a.createElement(clockface_dist["DapperScrollbars"], { autoHide: false, style: { width: '100%', height: '100%' } },
                react_default.a.createElement("div", { className: "view-options--container" },
                    react_default.a.createElement(clockface_dist["Grid"], null,
                        react_default.a.createElement(clockface_dist["Grid"].Row, null,
                            react_default.a.createElement(view_options_OptionsSwitcher, { view: this.props.view })))))));
    }
}
const ViewOptions_mstp = (state) => {
    const { view } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    return { view };
};
const ViewOptions_mdtp = {
    onUpdateType: timeMachine_actions["K" /* setType */],
};
/* harmony default export */ var view_options_ViewOptions = (Object(es["b" /* connect */])(ViewOptions_mstp, ViewOptions_mdtp)(ViewOptions_ViewOptions));

// CONCATENATED MODULE: ./src/timeMachine/components/SubmitCheckQueryButton.tsx






class SubmitCheckQueryButton_SubmitQueryButton extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = { didClick: false };
        this.handleClick = () => {
            this.props.onExecuteCheckQuery();
            this.setState({ didClick: true });
        };
    }
    componentDidUpdate(prevProps) {
        if (prevProps.queryStatus === types["RemoteDataState"].Loading &&
            this.props.queryStatus === types["RemoteDataState"].Done) {
            this.setState({ didClick: false });
        }
    }
    render() {
        return (react_default.a.createElement(clockface_dist["Button"], { text: "Execute check query and view statuses", size: clockface_dist["ComponentSize"].Small, status: this.buttonStatus, onClick: this.handleClick, color: clockface_dist["ComponentColor"].Primary, testID: "time-machine-check-query-run-button" }));
    }
    get buttonStatus() {
        const { queryStatus, submitButtonDisabled } = this.props;
        const { didClick } = this.state;
        if (submitButtonDisabled) {
            return clockface_dist["ComponentStatus"].Disabled;
        }
        if (queryStatus === types["RemoteDataState"].Loading && didClick) {
            return clockface_dist["ComponentStatus"].Loading;
        }
        return clockface_dist["ComponentStatus"].Default;
    }
}
const SubmitCheckQueryButton_mstp = (state) => {
    const submitButtonDisabled = Object(timeMachine_selectors["a" /* getActiveQuery */])(state).text === '';
    const queryStatus = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state).queryResults.status;
    return { submitButtonDisabled, queryStatus };
};
const SubmitCheckQueryButton_mdtp = {
    onExecuteCheckQuery: actions_queries["b" /* executeCheckQuery */],
};
/* harmony default export */ var SubmitCheckQueryButton = (Object(es["b" /* connect */])(SubmitCheckQueryButton_mstp, SubmitCheckQueryButton_mdtp)(SubmitCheckQueryButton_SubmitQueryButton));

// CONCATENATED MODULE: ./src/timeMachine/components/TimeMachineCheckQuery.tsx






const TimeMachineCheckQuery = () => {
    return (react_default.a.createElement("div", { className: "time-machine-queries" },
        react_default.a.createElement("div", { className: "time-machine-queries--controls" },
            react_default.a.createElement(components_QueryTabs, null),
            react_default.a.createElement("div", { className: "time-machine-queries--buttons" },
                react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, justifyContent: clockface_dist["JustifyContent"].FlexEnd, margin: clockface_dist["ComponentSize"].Small },
                    react_default.a.createElement(RawDataToggle, null),
                    react_default.a.createElement(SubmitCheckQueryButton, null)))),
        react_default.a.createElement("div", { className: "time-machine-queries--body" },
            react_default.a.createElement(components_TimeMachineFluxEditor, null))));
};
/* harmony default export */ var components_TimeMachineCheckQuery = (TimeMachineCheckQuery);

// CONCATENATED MODULE: ./src/timeMachine/components/TimeMachine.tsx










const INITIAL_RESIZER_HANDLE = 0.5;
const TimeMachine = ({ activeTab, isViewingVisOptions, }) => {
    const [dragPosition, setDragPosition] = Object(react["useState"])([INITIAL_RESIZER_HANDLE]);
    const containerClassName = classnames_default()('time-machine', {
        'time-machine--split': isViewingVisOptions,
    });
    let bottomContents = null;
    if (activeTab === 'alerting') {
        bottomContents = react_default.a.createElement(components_TimeMachineAlerting, null);
    }
    else if (activeTab === 'queries') {
        bottomContents = react_default.a.createElement(Queries, null);
    }
    else if (activeTab === 'customCheckQuery') {
        bottomContents = react_default.a.createElement(components_TimeMachineCheckQuery, null);
    }
    return (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement("div", { className: containerClassName },
            react_default.a.createElement(clockface_dist["DraggableResizer"], { handleOrientation: clockface_dist["Orientation"].Horizontal, handlePositions: dragPosition, onChangePositions: setDragPosition },
                react_default.a.createElement(clockface_dist["DraggableResizer"].Panel, null,
                    react_default.a.createElement("div", { className: "time-machine--top" },
                        react_default.a.createElement(Vis, null))),
                react_default.a.createElement(clockface_dist["DraggableResizer"].Panel, null,
                    react_default.a.createElement("div", { className: "time-machine--bottom", "data-testid": "time-machine--bottom" },
                        react_default.a.createElement("div", { className: "time-machine--bottom-contents" }, bottomContents))))),
        isViewingVisOptions && react_default.a.createElement(view_options_ViewOptions, null)));
};
const TimeMachine_mstp = (state) => {
    const { activeTab, isViewingVisOptions } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    return { activeTab, isViewingVisOptions };
};
/* harmony default export */ var components_TimeMachine = (Object(es["b" /* connect */])(TimeMachine_mstp)(TimeMachine));

// EXTERNAL MODULE: ./src/timeMachine/apis/QueryBuilderFetcher.ts
var QueryBuilderFetcher = __webpack_require__(742);

// CONCATENATED MODULE: ./src/dataExplorer/components/DataExplorer.tsx








class DataExplorer_DataExplorer extends react["PureComponent"] {
    constructor(props) {
        super(props);
        props.onSetActiveTimeMachine('de');
        QueryBuilderFetcher["a" /* queryBuilderFetcher */].clearCache();
    }
    render() {
        return (react_default.a.createElement(components_LimitChecker, null,
            react_default.a.createElement(components_RateLimitAlert, null),
            react_default.a.createElement("div", { className: "data-explorer" },
                react_default.a.createElement(hoverTime_HoverTimeProvider, null,
                    react_default.a.createElement(components_TimeMachine, null)))));
    }
}
const DataExplorer_mdtp = {
    onSetActiveTimeMachine: timeMachine_actions["j" /* setActiveTimeMachine */],
};
/* harmony default export */ var components_DataExplorer = (Object(es["b" /* connect */])(null, DataExplorer_mdtp)(DataExplorer_DataExplorer));

// CONCATENATED MODULE: ./src/dataExplorer/components/SaveAsButton.tsx



class SaveAsButton_SaveAsButton extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleShowOverlay = () => {
            const { location: { pathname }, } = this.props;
            this.props.router.push(`${pathname}/save`);
        };
    }
    render() {
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Button"], { icon: clockface_dist["IconFont"].Export, text: "Save As", onClick: this.handleShowOverlay, color: clockface_dist["ComponentColor"].Primary, titleText: "Save your query as a Dashboard Cell or a Task", testID: "save-query-as" })));
    }
}
/* harmony default export */ var components_SaveAsButton = (Object(react_router_es["g" /* withRouter */])(SaveAsButton_SaveAsButton));

// CONCATENATED MODULE: ./src/timeMachine/components/VisOptionsButton.tsx





const VisOptionsButton = ({ isViewingVisOptions, onToggleVisOptions, }) => {
    const color = isViewingVisOptions
        ? clockface_dist["ComponentColor"].Primary
        : clockface_dist["ComponentColor"].Default;
    return (react_default.a.createElement(clockface_dist["SquareButton"], { color: color, icon: clockface_dist["IconFont"].CogThick, onClick: onToggleVisOptions, testID: "cog-cell--button" }));
};
const VisOptionsButton_mstp = (state) => {
    const { isViewingVisOptions } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    return { isViewingVisOptions };
};
const VisOptionsButton_mdtp = {
    onToggleVisOptions: timeMachine_actions["U" /* toggleVisOptions */],
};
/* harmony default export */ var components_VisOptionsButton = (Object(es["b" /* connect */])(VisOptionsButton_mstp, VisOptionsButton_mdtp)(VisOptionsButton));

// CONCATENATED MODULE: ./src/timeMachine/constants/index.ts
const VIS_TYPES = [
    {
        type: 'xy',
        name: 'Graph',
    },
    {
        type: 'line-plus-single-stat',
        name: 'Graph + Single Stat',
    },
    {
        type: 'heatmap',
        name: 'Heatmap',
    },
    {
        type: 'histogram',
        name: 'Histogram',
    },
    {
        type: 'single-stat',
        name: 'Single Stat',
    },
    {
        type: 'gauge',
        name: 'Gauge',
    },
    {
        type: 'table',
        name: 'Table',
    },
    {
        type: 'scatter',
        name: 'Scatter',
    },
];

// CONCATENATED MODULE: ./src/timeMachine/constants/visGraphics.tsx


const GRAPHIC_SVGS = {
    heatmap: (react_default.a.createElement("div", { className: "vis-graphic", "data-testid": "vis-graphic--heatmap" },
        react_default.a.createElement("svg", { width: "100%", height: "100%", version: "1.1", id: "Histogram", x: "0px", y: "0px", viewBox: "0 0 150 150", preserveAspectRatio: "none meet" },
            react_default.a.createElement("g", { id: "r" },
                react_default.a.createElement("polygon", { className: "vis-graphic--fill vis-graphic--fill-b", points: "127.5,127.5 127.5,112.5 112.5,112.5 112.5,127.5 97.5,127.5 97.5,142.5 112.5,142.5 127.5,142.5 \n\t\t142.5,142.5 142.5,127.5 \t" }),
                react_default.a.createElement("polygon", { className: "vis-graphic--fill vis-graphic--fill-b", points: "67.5,127.5 52.5,127.5 52.5,112.5 37.5,112.5 37.5,97.5 22.5,97.5 22.5,112.5 22.5,127.5 7.5,127.5 \n\t\t7.5,142.5 22.5,142.5 37.5,142.5 52.5,142.5 67.5,142.5 82.5,142.5 82.5,127.5 82.5,112.5 67.5,112.5 \t" })),
            react_default.a.createElement("g", { id: "rl" },
                react_default.a.createElement("g", null,
                    react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-b", d: "M126,114v13.5v1.5h1.5H141v12h-13.5h-15H99v-12h13.5h1.5v-1.5V114H126 M127.5,112.5h-15v15h-15v15h15h15h15\n\t\t\tv-15h-15V112.5L127.5,112.5z" })),
                react_default.a.createElement("g", null,
                    react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-b", d: "M36,99v13.5v1.5h1.5H51v13.5v1.5h1.5h15H69v-1.5V114h12v13.5V141H67.5h-15h-15h-15H9v-12h13.5H24v-1.5v-15V99\n\t\t\tH36 M37.5,97.5h-15v15v15h-15v15h15h15h15h15h15v-15v-15h-15v15h-15v-15h-15V97.5L37.5,97.5z" }))),
            react_default.a.createElement("g", { id: "g" },
                react_default.a.createElement("polygon", { className: "vis-graphic--fill vis-graphic--fill-c", points: "97.5,97.5 97.5,82.5 82.5,82.5 82.5,97.5 67.5,97.5 52.5,97.5 37.5,97.5 37.5,112.5 52.5,112.5 \n\t\t52.5,127.5 67.5,127.5 67.5,112.5 82.5,112.5 82.5,127.5 82.5,142.5 97.5,142.5 97.5,127.5 112.5,127.5 112.5,112.5 97.5,112.5 \t\n\t\t" }),
                react_default.a.createElement("polygon", { className: "vis-graphic--fill vis-graphic--fill-c", points: "127.5,82.5 127.5,97.5 112.5,97.5 112.5,112.5 127.5,112.5 127.5,127.5 142.5,127.5 142.5,112.5 \n\t\t142.5,97.5 142.5,82.5 \t" }),
                react_default.a.createElement("polygon", { className: "vis-graphic--fill vis-graphic--fill-c", points: "37.5,67.5 22.5,67.5 22.5,82.5 7.5,82.5 7.5,97.5 7.5,112.5 7.5,127.5 22.5,127.5 22.5,112.5 \n\t\t22.5,97.5 37.5,97.5 37.5,82.5 \t" })),
            react_default.a.createElement("g", { id: "gl" },
                react_default.a.createElement("g", null,
                    react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-c", d: "M96,84v13.5v15v1.5h1.5H111v12H97.5H96v1.5V141H84v-13.5v-15V111h-1.5h-15H66v1.5V126H54v-13.5V111h-1.5H39\n\t\t\tV99h13.5h15h15H84v-1.5V84H96 M97.5,82.5h-15v15h-15h-15h-15v15h15v15h15v-15h15v15v15h15v-15h15v-15h-15v-15V82.5L97.5,82.5z" })),
                react_default.a.createElement("g", null,
                    react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-c", d: "M141,84v13.5v15V126h-12v-13.5V111h-1.5H114V99h13.5h1.5v-1.5V84H141 M142.5,82.5h-15v15h-15v15h15v15h15v-15\n\t\t\tv-15V82.5L142.5,82.5z" })),
                react_default.a.createElement("g", null,
                    react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-c", d: "M36,69v13.5V96H22.5H21v1.5v15V126H9v-13.5v-15V84h13.5H24v-1.5V69H36 M37.5,67.5h-15v15h-15v15v15v15h15v-15\n\t\t\tv-15h15v-15V67.5L37.5,67.5z" }))),
            react_default.a.createElement("g", { id: "b" },
                react_default.a.createElement("rect", { x: "67.5", y: "82.5", className: "vis-graphic--fill vis-graphic--fill-a", width: "15", height: "15" }),
                react_default.a.createElement("polygon", { className: "vis-graphic--fill vis-graphic--fill-a", points: "52.5,67.5 37.5,67.5 37.5,82.5 37.5,97.5 52.5,97.5 52.5,82.5 67.5,82.5 67.5,67.5 \t" }),
                react_default.a.createElement("rect", { x: "127.5", y: "67.5", className: "vis-graphic--fill vis-graphic--fill-a", width: "15", height: "15" }),
                react_default.a.createElement("polygon", { className: "vis-graphic--fill vis-graphic--fill-a", points: "22.5,52.5 7.5,52.5 7.5,67.5 22.5,67.5 37.5,67.5 37.5,52.5 \t" }),
                react_default.a.createElement("rect", { x: "67.5", y: "52.5", className: "vis-graphic--fill vis-graphic--fill-a", width: "15", height: "15" }),
                react_default.a.createElement("polygon", { className: "vis-graphic--fill vis-graphic--fill-a", points: "112.5,67.5 97.5,67.5 82.5,67.5 82.5,82.5 97.5,82.5 97.5,97.5 97.5,112.5 112.5,112.5 112.5,97.5 \n\t\t127.5,97.5 127.5,82.5 112.5,82.5 \t" }),
                react_default.a.createElement("rect", { x: "82.5", y: "37.5", className: "vis-graphic--fill vis-graphic--fill-a", width: "15", height: "15" }),
                react_default.a.createElement("rect", { x: "112.5", y: "52.5", className: "vis-graphic--fill vis-graphic--fill-a", width: "15", height: "15" }),
                react_default.a.createElement("rect", { x: "37.5", y: "37.5", className: "vis-graphic--fill vis-graphic--fill-a", width: "15", height: "15" }),
                react_default.a.createElement("rect", { x: "127.5", y: "37.5", className: "vis-graphic--fill vis-graphic--fill-a", width: "15", height: "15" }),
                react_default.a.createElement("rect", { x: "22.5", y: "22.5", className: "vis-graphic--fill vis-graphic--fill-a", width: "15", height: "15" }),
                react_default.a.createElement("rect", { x: "67.5", y: "7.5", className: "vis-graphic--fill vis-graphic--fill-a", width: "15", height: "15" })),
            react_default.a.createElement("g", { id: "bl" },
                react_default.a.createElement("g", null,
                    react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-a", d: "M81,84v12H69V84H81 M82.5,82.5h-15v15h15V82.5L82.5,82.5z" })),
                react_default.a.createElement("g", null,
                    react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-a", d: "M66,69v12H52.5H51v1.5V96H39V82.5V69h13.5H66 M67.5,67.5h-15h-15v15v15h15v-15h15V67.5L67.5,67.5z" })),
                react_default.a.createElement("g", null,
                    react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-a", d: "M141,69v12h-12V69H141 M142.5,67.5h-15v15h15V67.5L142.5,67.5z" })),
                react_default.a.createElement("g", null,
                    react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-a", d: "M36,54v12H22.5H9V54h13.5H36 M37.5,52.5h-15h-15v15h15h15V52.5L37.5,52.5z" })),
                react_default.a.createElement("g", null,
                    react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-a", d: "M81,54v12H69V54H81 M82.5,52.5h-15v15h15V52.5L82.5,52.5z" })),
                react_default.a.createElement("g", null,
                    react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-a", d: "M111,69v13.5V84h1.5H126v12h-13.5H111v1.5V111H99V97.5v-15V81h-1.5H84V69h13.5H111 M112.5,67.5h-15h-15v15h15\n\t\t\tv15v15h15v-15h15v-15h-15V67.5L112.5,67.5z" })),
                react_default.a.createElement("g", null,
                    react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-a", d: "M96,39v12H84V39H96 M97.5,37.5h-15v15h15V37.5L97.5,37.5z" })),
                react_default.a.createElement("g", null,
                    react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-a", d: "M126,54v12h-12V54H126 M127.5,52.5h-15v15h15V52.5L127.5,52.5z" })),
                react_default.a.createElement("g", null,
                    react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-a", d: "M51,39v12H39V39H51 M52.5,37.5h-15v15h15V37.5L52.5,37.5z" })),
                react_default.a.createElement("g", null,
                    react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-a", d: "M141,39v12h-12V39H141 M142.5,37.5h-15v15h15V37.5L142.5,37.5z" })),
                react_default.a.createElement("g", null,
                    react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-a", d: "M36,24v12H24V24H36 M37.5,22.5h-15v15h15V22.5L37.5,22.5z" })),
                react_default.a.createElement("g", null,
                    react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-a", d: "M81,9v12H69V9H81 M82.5,7.5h-15v15h15V7.5L82.5,7.5z" })))))),
    histogram: (react_default.a.createElement("div", { className: "vis-graphic", "data-testid": "vis-graphic--histogram" },
        react_default.a.createElement("svg", { width: "100%", height: "100%", version: "1.1", id: "Histogram", x: "0px", y: "0px", viewBox: "0 0 150 150", preserveAspectRatio: "none meet" },
            react_default.a.createElement("g", null,
                react_default.a.createElement("rect", { x: "122", y: "51", className: "vis-graphic--fill vis-graphic--fill-c", width: "26", height: "24" }),
                react_default.a.createElement("rect", { x: "122", y: "113", className: "vis-graphic--fill vis-graphic--fill-b", width: "26", height: "13" }),
                react_default.a.createElement("rect", { x: "122", y: "79", className: "vis-graphic--fill vis-graphic--fill-a", width: "26", height: "30" }),
                react_default.a.createElement("rect", { x: "92", y: "74", className: "vis-graphic--fill vis-graphic--fill-b", width: "26", height: "52" }),
                react_default.a.createElement("rect", { x: "92", y: "49", className: "vis-graphic--fill vis-graphic--fill-a", width: "26", height: "21" }),
                react_default.a.createElement("rect", { x: "62", y: "94", className: "vis-graphic--fill vis-graphic--fill-b", width: "26", height: "32" }),
                react_default.a.createElement("rect", { x: "62", y: "59", className: "vis-graphic--fill vis-graphic--fill-a", width: "26", height: "31" }),
                react_default.a.createElement("rect", { x: "62", y: "24", className: "vis-graphic--fill vis-graphic--fill-c", width: "26", height: "31" }),
                react_default.a.createElement("rect", { x: "32", y: "116", className: "vis-graphic--fill vis-graphic--fill-b", width: "26", height: "10" }),
                react_default.a.createElement("rect", { x: "32", y: "80", className: "vis-graphic--fill vis-graphic--fill-a", width: "26", height: "32" }),
                react_default.a.createElement("rect", { x: "2", y: "110", className: "vis-graphic--fill vis-graphic--fill-b", width: "26", height: "16" }),
                react_default.a.createElement("rect", { x: "2", y: "90", className: "vis-graphic--fill vis-graphic--fill-a", width: "26", height: "16" }),
                react_default.a.createElement("rect", { x: "32", y: "64", className: "vis-graphic--fill vis-graphic--fill-c", width: "26", height: "12" }),
                react_default.a.createElement("rect", { x: "92", y: "35", className: "vis-graphic--fill vis-graphic--fill-c", width: "26", height: "10" }),
                react_default.a.createElement("rect", { x: "2", y: "81", className: "vis-graphic--fill vis-graphic--fill-c", width: "26", height: "5" })),
            react_default.a.createElement("g", null,
                react_default.a.createElement("rect", { x: "122", y: "51", className: "vis-graphic--line vis-graphic--line-c", width: "26", height: "24" }),
                react_default.a.createElement("rect", { x: "122", y: "113", className: "vis-graphic--line vis-graphic--line-b", width: "26", height: "13" }),
                react_default.a.createElement("rect", { x: "122", y: "79", className: "vis-graphic--line vis-graphic--line-a", width: "26", height: "30" }),
                react_default.a.createElement("rect", { x: "92", y: "74", className: "vis-graphic--line vis-graphic--line-b", width: "26", height: "52" }),
                react_default.a.createElement("rect", { x: "92", y: "49", className: "vis-graphic--line vis-graphic--line-a", width: "26", height: "21" }),
                react_default.a.createElement("rect", { x: "62", y: "94", className: "vis-graphic--line vis-graphic--line-b", width: "26", height: "32" }),
                react_default.a.createElement("rect", { x: "62", y: "59", className: "vis-graphic--line vis-graphic--line-a", width: "26", height: "31" }),
                react_default.a.createElement("rect", { x: "62", y: "24", className: "vis-graphic--line vis-graphic--line-c", width: "26", height: "31" }),
                react_default.a.createElement("rect", { x: "32", y: "116", className: "vis-graphic--line vis-graphic--line-b", width: "26", height: "10" }),
                react_default.a.createElement("rect", { x: "32", y: "80", className: "vis-graphic--line vis-graphic--line-a", width: "26", height: "32" }),
                react_default.a.createElement("rect", { x: "2", y: "110", className: "vis-graphic--line vis-graphic--line-b", width: "26", height: "16" }),
                react_default.a.createElement("rect", { x: "2", y: "90", className: "vis-graphic--line vis-graphic--line-a", width: "26", height: "16" }),
                react_default.a.createElement("rect", { x: "32", y: "64", className: "vis-graphic--line vis-graphic--line-c", width: "26", height: "12" }),
                react_default.a.createElement("rect", { x: "92", y: "35", className: "vis-graphic--line vis-graphic--line-c", width: "26", height: "10" }),
                react_default.a.createElement("rect", { x: "2", y: "81", className: "vis-graphic--line vis-graphic--line-c", width: "26", height: "5" }))))),
    xy: (react_default.a.createElement("div", { className: "vis-graphic", "data-testid": "vis-graphic--xy" },
        react_default.a.createElement("svg", { width: "100%", height: "100%", version: "1.1", id: "Line", x: "0px", y: "0px", viewBox: "0 0 150 150", preserveAspectRatio: "none meet" },
            react_default.a.createElement("polygon", { className: "vis-graphic--fill vis-graphic--fill-a", points: "148,40 111.5,47.2 75,25 38.5,90.8 2,111.8 2,125 148,125 \t" }),
            react_default.a.createElement("polyline", { className: "vis-graphic--line vis-graphic--line-a", points: "2,111.8 38.5,90.8 75,25 111.5,47.2 148,40 \t" }),
            react_default.a.createElement("polygon", { className: "vis-graphic--fill vis-graphic--fill-b", points: "148,88.2 111.5,95.5 75,61.7 38.5,49.3 2,90.8 2,125 148,125 \t" }),
            react_default.a.createElement("polyline", { className: "vis-graphic--line vis-graphic--line-b", points: "2,90.8 38.5,49.3 75,61.7 111.5,95.5 148,88.2 \t" }),
            react_default.a.createElement("polygon", { className: "vis-graphic--fill vis-graphic--fill-c", points: "148,96 111.5,106.3 75,85.7 38.5,116.5 2,115 2,125 148,125 \t" }),
            react_default.a.createElement("polyline", { className: "vis-graphic--line vis-graphic--line-c", points: "2,115 38.5,116.5 75,85.7 111.5,106.3 148,96 \t" })))),
    'single-stat': (react_default.a.createElement("div", { className: "vis-graphic", "data-testid": "vis-graphic--single-stat" },
        react_default.a.createElement("svg", { width: "100%", height: "100%", version: "1.1", id: "SingleStat", x: "0px", y: "0px", viewBox: "0 0 150 150", preserveAspectRatio: "none meet" },
            react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-d", d: "M35.6,80.4h4.9v1.1h-4.9v7.8h-1.1v-7.8H20.7v-0.6l13.6-20.1h1.3V80.4z M22.4,80.4h12.1V62.1l-1.6,2.7 L22.4,80.4z" }),
            react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-d", d: "M58.6,75.1c-0.7,1.5-1.8,2.7-3.2,3.6c-1.5,0.9-3.1,1.4-4.9,1.4c-1.6,0-3-0.4-4.2-1.3s-2.2-2-2.9-3.5 c-0.7-1.5-1.1-3.1-1.1-4.8c0-1.9,0.4-3.6,1.1-5.1c0.7-1.6,1.7-2.8,3-3.7c1.3-0.9,2.7-1.3,4.3-1.3c2.9,0,5.2,1,6.7,2.9 c1.5,1.9,2.3,4.7,2.3,8.3v3.3c0,4.8-1.1,8.5-3.2,11c-2.1,2.5-5.3,3.8-9.4,3.9H46l0-1.1h0.8c3.8,0,6.7-1.2,8.7-3.5 C57.6,82.8,58.6,79.5,58.6,75.1z M50.4,79c1.9,0,3.6-0.6,5.1-1.7s2.5-2.6,3-4.5v-1.2c0-3.3-0.7-5.8-2-7.5c-1.4-1.7-3.3-2.6-5.8-2.6 c-1.4,0-2.7,0.4-3.8,1.2s-2,1.9-2.6,3.3c-0.6,1.4-0.9,2.9-0.9,4.5c0,1.5,0.3,3,0.9,4.3c0.6,1.3,1.5,2.4,2.5,3.1 C47.8,78.7,49.1,79,50.4,79z" }),
            react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-d", d: "M81.3,89.2h-17v-1.1L74,77c1.6-1.9,2.8-3.5,3.5-5c0.8-1.4,1.2-2.8,1.2-4c0-2.1-0.6-3.7-1.8-4.9 c-1.2-1.2-2.9-1.7-5.1-1.7c-1.3,0-2.5,0.3-3.6,1c-1.1,0.6-2,1.5-2.6,2.6c-0.6,1.1-0.9,2.4-0.9,3.8h-1.1c0-1.5,0.4-2.9,1.1-4.2 c0.7-1.3,1.7-2.3,2.9-3.1s2.6-1.1,4.2-1.1c2.5,0,4.5,0.7,5.9,2c1.4,1.3,2.1,3.2,2.1,5.6c0,2.2-1.2,4.9-3.7,7.9l-1.8,2.2l-8.6,10 h15.6V89.2z" }),
            react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-d", d: "M85.3,88.3c0-0.3,0.1-0.6,0.3-0.8c0.2-0.2,0.5-0.3,0.8-0.3c0.3,0,0.6,0.1,0.8,0.3s0.3,0.5,0.3,0.8 c0,0.3-0.1,0.6-0.3,0.8s-0.5,0.3-0.8,0.3c-0.3,0-0.6-0.1-0.8-0.3C85.4,88.8,85.3,88.6,85.3,88.3z" }),
            react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-d", d: "M92.7,74.3L94,60.8h13.9v1.1H95l-1.2,11.4c0.7-0.6,1.6-1,2.7-1.4s2.2-0.5,3.3-0.5c2.6,0,4.6,0.8,6.1,2.4 c1.5,1.6,2.3,3.8,2.3,6.4c0,3.1-0.7,5.4-2.1,7c-1.4,1.6-3.4,2.4-5.9,2.4c-2.4,0-4.4-0.7-5.9-2.1c-1.5-1.4-2.3-3.3-2.5-5.8h1.1 c0.2,2.2,0.9,3.9,2.2,5.1c1.2,1.2,3,1.7,5.2,1.7c2.3,0,4.1-0.7,5.2-2.1c1.1-1.4,1.7-3.5,1.7-6.2c0-2.4-0.7-4.3-2-5.7 c-1.3-1.4-3.1-2.1-5.3-2.1c-1.4,0-2.6,0.2-3.6,0.5c-1,0.4-1.9,0.9-2.7,1.7L92.7,74.3z" }),
            react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-d", d: "M113.8,74.3l1.3-13.6H129v1.1h-12.9l-1.2,11.4c0.7-0.6,1.6-1,2.7-1.4s2.2-0.5,3.3-0.5c2.6,0,4.6,0.8,6.1,2.4 c1.5,1.6,2.3,3.8,2.3,6.4c0,3.1-0.7,5.4-2.1,7c-1.4,1.6-3.4,2.4-5.9,2.4c-2.4,0-4.4-0.7-5.9-2.1c-1.5-1.4-2.3-3.3-2.5-5.8h1.1 c0.2,2.2,0.9,3.9,2.2,5.1c1.2,1.2,3,1.7,5.2,1.7c2.3,0,4.1-0.7,5.2-2.1c1.1-1.4,1.7-3.5,1.7-6.2c0-2.4-0.7-4.3-2-5.7 c-1.3-1.4-3.1-2.1-5.3-2.1c-1.4,0-2.6,0.2-3.6,0.5c-1,0.4-1.9,0.9-2.7,1.7L113.8,74.3z" })))),
    'line-plus-single-stat': (react_default.a.createElement("div", { className: "vis-graphic", "data-testid": "vis-graphic--line-plus-single-stat" },
        react_default.a.createElement("svg", { width: "100%", height: "100%", version: "1.1", id: "LineAndSingleStat", x: "0px", y: "0px", viewBox: "0 0 150 150", preserveAspectRatio: "none meet" },
            react_default.a.createElement("g", null,
                react_default.a.createElement("polygon", { className: "vis-graphic--fill vis-graphic--fill-c", points: "148,88.2 111.5,95.5 75,25 38.5,54.7 2,66.7 2,125 148,125" }),
                react_default.a.createElement("polyline", { className: "vis-graphic--line vis-graphic--line-c", points: "2,66.7 38.5,54.7 75,25 111.5,95.5 148,88.2" })),
            react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-d", d: "M35.6,80.4h4.9v1.1h-4.9v7.8h-1.1v-7.8H20.7v-0.6l13.6-20.1h1.3V80.4z M22.4,80.4h12.1V62.1l-1.6,2.7 L22.4,80.4z" }),
            react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-d", d: "M58.6,75.1c-0.7,1.5-1.8,2.7-3.2,3.6c-1.5,0.9-3.1,1.4-4.9,1.4c-1.6,0-3-0.4-4.2-1.3s-2.2-2-2.9-3.5 c-0.7-1.5-1.1-3.1-1.1-4.8c0-1.9,0.4-3.6,1.1-5.1c0.7-1.6,1.7-2.8,3-3.7c1.3-0.9,2.7-1.3,4.3-1.3c2.9,0,5.2,1,6.7,2.9 c1.5,1.9,2.3,4.7,2.3,8.3v3.3c0,4.8-1.1,8.5-3.2,11c-2.1,2.5-5.3,3.8-9.4,3.9H46l0-1.1h0.8c3.8,0,6.7-1.2,8.7-3.5 C57.6,82.8,58.6,79.5,58.6,75.1z M50.4,79c1.9,0,3.6-0.6,5.1-1.7s2.5-2.6,3-4.5v-1.2c0-3.3-0.7-5.8-2-7.5c-1.4-1.7-3.3-2.6-5.8-2.6 c-1.4,0-2.7,0.4-3.8,1.2s-2,1.9-2.6,3.3c-0.6,1.4-0.9,2.9-0.9,4.5c0,1.5,0.3,3,0.9,4.3c0.6,1.3,1.5,2.4,2.5,3.1 C47.8,78.7,49.1,79,50.4,79z" }),
            react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-d", d: "M81.3,89.2h-17v-1.1L74,77c1.6-1.9,2.8-3.5,3.5-5c0.8-1.4,1.2-2.8,1.2-4c0-2.1-0.6-3.7-1.8-4.9 c-1.2-1.2-2.9-1.7-5.1-1.7c-1.3,0-2.5,0.3-3.6,1c-1.1,0.6-2,1.5-2.6,2.6c-0.6,1.1-0.9,2.4-0.9,3.8h-1.1c0-1.5,0.4-2.9,1.1-4.2 c0.7-1.3,1.7-2.3,2.9-3.1s2.6-1.1,4.2-1.1c2.5,0,4.5,0.7,5.9,2c1.4,1.3,2.1,3.2,2.1,5.6c0,2.2-1.2,4.9-3.7,7.9l-1.8,2.2l-8.6,10 h15.6V89.2z" }),
            react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-d", d: "M85.3,88.3c0-0.3,0.1-0.6,0.3-0.8c0.2-0.2,0.5-0.3,0.8-0.3c0.3,0,0.6,0.1,0.8,0.3s0.3,0.5,0.3,0.8 c0,0.3-0.1,0.6-0.3,0.8s-0.5,0.3-0.8,0.3c-0.3,0-0.6-0.1-0.8-0.3C85.4,88.8,85.3,88.6,85.3,88.3z" }),
            react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-d", d: "M92.7,74.3L94,60.8h13.9v1.1H95l-1.2,11.4c0.7-0.6,1.6-1,2.7-1.4s2.2-0.5,3.3-0.5c2.6,0,4.6,0.8,6.1,2.4 c1.5,1.6,2.3,3.8,2.3,6.4c0,3.1-0.7,5.4-2.1,7c-1.4,1.6-3.4,2.4-5.9,2.4c-2.4,0-4.4-0.7-5.9-2.1c-1.5-1.4-2.3-3.3-2.5-5.8h1.1 c0.2,2.2,0.9,3.9,2.2,5.1c1.2,1.2,3,1.7,5.2,1.7c2.3,0,4.1-0.7,5.2-2.1c1.1-1.4,1.7-3.5,1.7-6.2c0-2.4-0.7-4.3-2-5.7 c-1.3-1.4-3.1-2.1-5.3-2.1c-1.4,0-2.6,0.2-3.6,0.5c-1,0.4-1.9,0.9-2.7,1.7L92.7,74.3z" }),
            react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-d", d: "M113.8,74.3l1.3-13.6H129v1.1h-12.9l-1.2,11.4c0.7-0.6,1.6-1,2.7-1.4s2.2-0.5,3.3-0.5c2.6,0,4.6,0.8,6.1,2.4 c1.5,1.6,2.3,3.8,2.3,6.4c0,3.1-0.7,5.4-2.1,7c-1.4,1.6-3.4,2.4-5.9,2.4c-2.4,0-4.4-0.7-5.9-2.1c-1.5-1.4-2.3-3.3-2.5-5.8h1.1 c0.2,2.2,0.9,3.9,2.2,5.1c1.2,1.2,3,1.7,5.2,1.7c2.3,0,4.1-0.7,5.2-2.1c1.1-1.4,1.7-3.5,1.7-6.2c0-2.4-0.7-4.3-2-5.7 c-1.3-1.4-3.1-2.1-5.3-2.1c-1.4,0-2.6,0.2-3.6,0.5c-1,0.4-1.9,0.9-2.7,1.7L113.8,74.3z" })))),
    gauge: (react_default.a.createElement("div", { className: "vis-graphic", "data-testid": "vis-graphic--gauge" },
        react_default.a.createElement("svg", { width: "100%", height: "100%", version: "1.1", id: "Bar", x: "0px", y: "0px", viewBox: "0 0 150 150", preserveAspectRatio: "none meet" },
            react_default.a.createElement("g", null,
                react_default.a.createElement("path", { className: "vis-graphic--line vis-graphic--line-d", d: "M110.9,110.9c19.9-19.9,19.9-52,0-71.9s-52-19.9-71.9,0s-19.9,52,0,71.9" }),
                react_default.a.createElement("line", { className: "vis-graphic--line vis-graphic--line-d", x1: "39.1", y1: "110.9", x2: "35", y2: "115" }),
                react_default.a.createElement("line", { className: "vis-graphic--line vis-graphic--line-d", x1: "110.9", y1: "110.9", x2: "115", y2: "115" }),
                react_default.a.createElement("line", { className: "vis-graphic--line vis-graphic--line-d", x1: "122", y1: "94.5", x2: "127.2", y2: "96.6" }),
                react_default.a.createElement("line", { className: "vis-graphic--line vis-graphic--line-d", x1: "125.8", y1: "75", x2: "131.5", y2: "75" }),
                react_default.a.createElement("line", { className: "vis-graphic--line vis-graphic--line-d", x1: "122", y1: "55.5", x2: "127.2", y2: "53.4" }),
                react_default.a.createElement("line", { className: "vis-graphic--line vis-graphic--line-d", x1: "110.9", y1: "39.1", x2: "115", y2: "35" }),
                react_default.a.createElement("line", { className: "vis-graphic--line vis-graphic--line-d", x1: "94.5", y1: "28", x2: "96.6", y2: "22.8" }),
                react_default.a.createElement("line", { className: "vis-graphic--line vis-graphic--line-d", x1: "75", y1: "24.2", x2: "75", y2: "18.5" }),
                react_default.a.createElement("line", { className: "vis-graphic--line vis-graphic--line-d", x1: "55.5", y1: "28", x2: "53.4", y2: "22.8" }),
                react_default.a.createElement("line", { className: "vis-graphic--line vis-graphic--line-d", x1: "39.1", y1: "39.1", x2: "35", y2: "35" }),
                react_default.a.createElement("line", { className: "vis-graphic--line vis-graphic--line-d", x1: "28", y1: "55.5", x2: "22.8", y2: "53.4" }),
                react_default.a.createElement("line", { className: "vis-graphic--line vis-graphic--line-d", x1: "24.2", y1: "75", x2: "18.5", y2: "75" }),
                react_default.a.createElement("line", { className: "vis-graphic--line vis-graphic--line-d", x1: "28", y1: "94.5", x2: "22.8", y2: "96.6" })),
            react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-d", d: "M78.6,73.4L75,56.3l-3.6,17.1c-0.2,0.5-0.3,1-0.3,1.6c0,2.2,1.8,3.9,3.9,3.9s3.9-1.8,3.9-3.9C78.9,74.4,78.8,73.9,78.6,73.4z" }),
            react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-a", d: "M58.9,58.9c8.9-8.9,23.4-8.9,32.3,0l17.1-17.1c-18.4-18.4-48.2-18.4-66.5,0C32.5,50.9,27.9,63,27.9,75h24.2C52.2,69.2,54.4,63.3,58.9,58.9z" }),
            react_default.a.createElement("path", { className: "vis-graphic--line vis-graphic--line-a", d: "M58.9,58.9c8.9-8.9,23.4-8.9,32.3,0l17.1-17.1c-18.4-18.4-48.2-18.4-66.5,0C32.5,50.9,27.9,63,27.9,75h24.2C52.2,69.2,54.4,63.3,58.9,58.9z" }),
            react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-b", d: "M58.9,91.1c-4.5-4.5-6.7-10.3-6.7-16.1H27.9c0,12,4.6,24.1,13.8,33.3L58.9,91.1z" }),
            react_default.a.createElement("path", { className: "vis-graphic--line vis-graphic--line-b", d: "M58.9,91.1c-4.5-4.5-6.7-10.3-6.7-16.1H27.9c0,12,4.6,24.1,13.8,33.3L58.9,91.1z" }),
            react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-c", d: "M91.1,91.1l17.1,17.1c18.4-18.4,18.4-48.2,0-66.6L91.1,58.9C100.1,67.8,100.1,82.2,91.1,91.1z" }),
            react_default.a.createElement("path", { className: "vis-graphic--line vis-graphic--line-c", d: "M91.1,91.1l17.1,17.1c18.4-18.4,18.4-48.2,0-66.6L91.1,58.9C100.1,67.8,100.1,82.2,91.1,91.1z" })))),
    table: (react_default.a.createElement("div", { className: "vis-graphic", "data-testid": "vis-graphic--table" },
        react_default.a.createElement("svg", { id: "Table", x: "0px", y: "0px", width: "100%", height: "100%", viewBox: "0 0 150 150" },
            react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-c", d: "M55.5,115H19.7c-1.7,0-3.1-1.4-3.1-3.1V61.7h38.9V115z" }),
            react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-b", d: "M133.4,61.7H55.5V35h74.8c1.7,0,3.1,1.4,3.1,3.1V61.7z" }),
            react_default.a.createElement("path", { className: "vis-graphic--fill vis-graphic--fill-a", d: "M55.5,61.7H16.6V38.1c0-1.7,1.4-3.1,3.1-3.1h35.9V61.7z" }),
            react_default.a.createElement("path", { className: "vis-graphic--line vis-graphic--line-c", d: "M16.6,88.3v23.6c0,1.7,1.4,3.1,3.1,3.1h35.9V88.3H16.6z" }),
            react_default.a.createElement("rect", { className: "vis-graphic--line vis-graphic--line-c", x: "16.6", y: "61.7", width: "38.9", height: "26.7" }),
            react_default.a.createElement("path", { className: "vis-graphic--line vis-graphic--line-b", d: "M94.5,35v26.7h38.9V38.1c0-1.7-1.4-3.1-3.1-3.1H94.5z" }),
            react_default.a.createElement("rect", { className: "vis-graphic--line vis-graphic--line-b", x: "55.5", y: "35", width: "38.9", height: "26.7" }),
            react_default.a.createElement("path", { className: "vis-graphic--line vis-graphic--line-d", d: "M94.5,115h35.9c1.7,0,3.1-1.4,3.1-3.1V88.3H94.5V115z" }),
            react_default.a.createElement("rect", { className: "vis-graphic--line vis-graphic--line-d", x: "55.5", y: "88.3", width: "38.9", height: "26.7" }),
            react_default.a.createElement("rect", { className: "vis-graphic--line vis-graphic--line-d", x: "94.5", y: "61.7", width: "38.9", height: "26.7" }),
            react_default.a.createElement("rect", { className: "vis-graphic--line vis-graphic--line-d", x: "55.5", y: "61.7", width: "38.9", height: "26.7" }),
            react_default.a.createElement("path", { className: "vis-graphic--line vis-graphic--line-a", d: "M55.5,35H19.7c-1.7,0-3.1,1.4-3.1,3.1v23.6h38.9V35z" })))),
    scatter: (react_default.a.createElement("div", { className: "vis-graphic", "data-testid": "vis-graphic--scatter" },
        react_default.a.createElement("svg", { width: "100%", height: "100%", version: "1.1", id: "Scatter", x: "0px", y: "0px", viewBox: "0 0 150 150", preserveAspectRatio: "none meet" },
            react_default.a.createElement("circle", { className: "vis-graphic--fill vis-graphic--fill-b", cx: "77.6", cy: "91.1", r: "7.5" }),
            react_default.a.createElement("circle", { className: "vis-graphic--fill vis-graphic--fill-b", cx: "47.5", cy: "110.9", r: "7.5" }),
            react_default.a.createElement("circle", { className: "vis-graphic--fill vis-graphic--fill-b", cx: "111.6", cy: "46.1", r: "7.5" }),
            react_default.a.createElement("circle", { className: "vis-graphic--fill vis-graphic--fill-b", cx: "17.5", cy: "118.5", r: "7.5" }),
            react_default.a.createElement("rect", { x: "77.6", y: "111", className: "vis-graphic--fill vis-graphic--fill-c", width: "15", height: "15" }),
            react_default.a.createElement("rect", { x: "108.3", y: "83.6", className: "vis-graphic--fill vis-graphic--fill-c", width: "15", height: "15" }),
            react_default.a.createElement("rect", { x: "125", y: "54", className: "vis-graphic--fill vis-graphic--fill-c", width: "15", height: "15" }),
            react_default.a.createElement("rect", { x: "123.2", y: "111", className: "vis-graphic--fill vis-graphic--fill-c", width: "15", height: "15" }),
            react_default.a.createElement("polygon", { className: "vis-graphic--fill vis-graphic--fill-a", points: "49.5,68.6 42,81.4 57,81.4 " }),
            react_default.a.createElement("polygon", { className: "vis-graphic--fill vis-graphic--fill-a", points: "61.1,25.7 53.6,38.6 68.6,38.6 " }),
            react_default.a.createElement("polygon", { className: "vis-graphic--fill vis-graphic--fill-a", points: "93.8,19.2 86.3,32.2 101.3,32.2 " }),
            react_default.a.createElement("polygon", { className: "vis-graphic--fill vis-graphic--fill-a", points: "78.8,47.5 71.3,60.5 86.3,60.5 " })))),
};
const VIS_GRAPHICS = VIS_TYPES.map(({ type, name }) => {
    return {
        type,
        name,
        graphic: GRAPHIC_SVGS[type],
    };
});

// CONCATENATED MODULE: ./src/timeMachine/components/view_options/ViewTypeDropdown.tsx







class ViewTypeDropdown_ViewTypeDropdown extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleChange = (viewType) => {
            const { onUpdateType } = this.props;
            onUpdateType(viewType);
        };
        this.getVewTypeGraphic = (viewType) => {
            const { graphic, name } = VIS_GRAPHICS.find(graphic => graphic.type === viewType);
            return (react_default.a.createElement(react_default.a.Fragment, null,
                react_default.a.createElement("div", { className: "view-type-dropdown--graphic" }, graphic),
                react_default.a.createElement("div", { className: "view-type-dropdown--name" }, name)));
        };
    }
    render() {
        return (react_default.a.createElement(clockface_dist["Dropdown"], { style: { width: '215px' }, className: "view-type-dropdown", testID: "view-type--dropdown", button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { active: active, onClick: onClick, status: this.dropdownStatus }, this.getVewTypeGraphic(this.selectedView))), menu: onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse, theme: clockface_dist["DropdownMenuTheme"].Onyx }, this.dropdownItems)) }));
    }
    get dropdownItems() {
        return VIS_GRAPHICS.map(g => (react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: `view-type--${g.type}`, id: `${g.type}`, testID: `view-type--${g.type}`, value: g.type, onClick: this.handleChange, selected: `${g.type}` === this.selectedView }, this.getVewTypeGraphic(g.type))));
    }
    get dropdownStatus() {
        const { view } = this.props;
        if (view.properties.type === 'check') {
            return clockface["e" /* ComponentStatus */].Disabled;
        }
        return clockface["e" /* ComponentStatus */].Valid;
    }
    get selectedView() {
        const { view } = this.props;
        if (view.properties.type === 'check') {
            return 'xy';
        }
        return view.properties.type;
    }
}
const ViewTypeDropdown_mstp = (state) => {
    const { view } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    return { view };
};
const ViewTypeDropdown_mdtp = {
    onUpdateType: timeMachine_actions["K" /* setType */],
};
/* harmony default export */ var view_options_ViewTypeDropdown = (Object(es["b" /* connect */])(ViewTypeDropdown_mstp, ViewTypeDropdown_mdtp)(ViewTypeDropdown_ViewTypeDropdown));

// CONCATENATED MODULE: ./src/dataExplorer/components/DeleteDataButton.tsx




const DeleteDataButton = ({ location: { pathname }, router, }) => {
    const onClick = () => router.push(`${pathname}/delete-data`);
    return (react_default.a.createElement(featureFlag["a" /* FeatureFlag */], { name: "deleteWithPredicate" },
        react_default.a.createElement(clockface_dist["Button"], { testID: "delete-data-predicate", text: "Delete Data", onClick: onClick, titleText: "Filter and mark data for deletion" })));
};
/* harmony default export */ var components_DeleteDataButton = (Object(react_router_es["g" /* withRouter */])(DeleteDataButton));

// CONCATENATED MODULE: ./src/dataExplorer/components/DataExplorerPage.tsx












const DataExplorerPage = ({ children }) => {
    return (react_default.a.createElement(clockface_dist["Page"], { titleTag: pageTitleSuffixer(['Data Explorer']) },
        children,
        react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Variables] },
            react_default.a.createElement(clockface_dist["Page"].Header, { fullWidth: true },
                react_default.a.createElement(clockface_dist["Page"].HeaderLeft, null,
                    react_default.a.createElement(components_PageTitleWithOrg, { title: "Data Explorer" })),
                react_default.a.createElement(clockface_dist["Page"].HeaderRight, null,
                    react_default.a.createElement(components_DeleteDataButton, null),
                    react_default.a.createElement(components_TimeZoneDropdown, null),
                    react_default.a.createElement(view_options_ViewTypeDropdown, null),
                    react_default.a.createElement(components_VisOptionsButton, null),
                    react_default.a.createElement(components_SaveAsButton, null))),
            react_default.a.createElement(clockface_dist["Page"].Contents, { fullWidth: true, scrollable: false },
                react_default.a.createElement(components_DataExplorer, null)))));
};
/* harmony default export */ var components_DataExplorerPage = (DataExplorerPage);

// CONCATENATED MODULE: ./src/dataExplorer/components/DashboardsDropdown.tsx





let DashboardsDropdown_DashboardsDropdown = class DashboardsDropdown extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleSelectDashboard = (dashboard) => {
            const { onSelect, selectedIDs } = this.props;
            let updatedSelection;
            if (selectedIDs.includes(dashboard.id)) {
                updatedSelection = selectedIDs.filter(id => id !== dashboard.id);
            }
            else {
                updatedSelection = [...selectedIDs, dashboard.id];
            }
            onSelect(updatedSelection, dashboard);
        };
    }
    render() {
        return (react_default.a.createElement(clockface_dist["Dropdown"], { button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { active: active, onClick: onClick, testID: "save-as-dashboard-cell--dropdown" }, this.dropdownLabel)), menu: () => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { testID: "save-as-dashboard-cell--dropdown-menu" }, this.dropdownItems)) }));
    }
    get dropdownLabel() {
        const { dashboards, selectedIDs, newDashboardName } = this.props;
        if (!selectedIDs.length) {
            return 'Choose at least 1 dashboard';
        }
        const dashboardsWithNew = [
            ...dashboards,
            Object.assign(Object.assign({}, dashboards_constants["j" /* DashboardTemplate */]), { name: newDashboardName }),
        ];
        return dashboardsWithNew
            .filter(d => selectedIDs.includes(d.id))
            .map(d => d.name)
            .join(', ');
    }
    get dropdownItems() {
        const { dashboards, selectedIDs } = this.props;
        const dashboardItems = dashboards.map(d => {
            return (react_default.a.createElement(clockface_dist["Dropdown"].Item, { id: d.id, key: d.id, value: d, type: clockface_dist["DropdownItemType"].Checkbox, onClick: this.handleSelectDashboard, selected: selectedIDs.includes(d.id) }, d.name));
        });
        return [this.newDashboardItem, this.dividerItem, ...dashboardItems];
    }
    get newDashboardItem() {
        const { selectedIDs } = this.props;
        return (react_default.a.createElement(clockface_dist["Dropdown"].Item, { id: dashboards_constants["j" /* DashboardTemplate */].id, key: dashboards_constants["j" /* DashboardTemplate */].id, value: dashboards_constants["j" /* DashboardTemplate */], type: clockface_dist["DropdownItemType"].Checkbox, onClick: this.handleSelectDashboard, selected: selectedIDs.includes(dashboards_constants["j" /* DashboardTemplate */].id), testID: "save-as-dashboard-cell--create-new-dash" }, dashboards_constants["j" /* DashboardTemplate */].name));
    }
    get dividerItem() {
        return react_default.a.createElement(clockface_dist["Dropdown"].Divider, { id: "divider", key: "existing-dashboards" });
    }
};
DashboardsDropdown_DashboardsDropdown = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], DashboardsDropdown_DashboardsDropdown);
/* harmony default export */ var components_DashboardsDropdown = (DashboardsDropdown_DashboardsDropdown);

// CONCATENATED MODULE: ./src/dataExplorer/components/SaveAsCellForm.tsx

















let SaveAsCellForm_SaveAsCellForm = class SaveAsCellForm extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            targetDashboardIDs: [],
            cellName: '',
            isNameDashVisible: false,
            newDashboardName: dashboards_constants["e" /* DEFAULT_DASHBOARD_NAME */],
        };
        this.handleSubmit = () => {
            const { onCreateCellWithView, onCreateDashboardWithView, dashboards, view, dismiss, notify, orgID, } = this.props;
            const { targetDashboardIDs } = this.state;
            const cellName = this.state.cellName || dashboards_constants["c" /* DEFAULT_CELL_NAME */];
            const newDashboardName = this.state.newDashboardName || dashboards_constants["e" /* DEFAULT_DASHBOARD_NAME */];
            const viewWithProps = Object.assign(Object.assign({}, view), { name: cellName });
            try {
                targetDashboardIDs.forEach(dashID => {
                    let targetDashboardName = '';
                    try {
                        if (dashID === dashboards_constants["j" /* DashboardTemplate */].id) {
                            targetDashboardName = newDashboardName || dashboards_constants["e" /* DEFAULT_DASHBOARD_NAME */];
                            onCreateDashboardWithView(orgID, newDashboardName, viewWithProps);
                        }
                        else {
                            const selectedDashboard = dashboards.find(d => d.id === dashID);
                            targetDashboardName = selectedDashboard.name;
                            onCreateCellWithView(selectedDashboard.id, viewWithProps);
                        }
                        notify(Object(copy_notifications["I" /* cellAdded */])(cellName, targetDashboardName));
                    }
                    catch (_a) {
                        notify(Object(copy_notifications["H" /* cellAddFailed */])(cellName, targetDashboardName));
                    }
                });
            }
            finally {
                this.resetForm();
                dismiss();
            }
        };
        this.handleSelectDashboardID = (selectedIDs, value) => {
            if (value.id === dashboards_constants["j" /* DashboardTemplate */].id) {
                this.setState({
                    isNameDashVisible: selectedIDs.includes(dashboards_constants["j" /* DashboardTemplate */].id),
                });
            }
            this.setState({ targetDashboardIDs: selectedIDs });
        };
        this.handleChangeDashboardName = (e) => {
            this.setState({ newDashboardName: e.target.value });
        };
        this.handleChangeCellName = (e) => {
            this.setState({ cellName: e.target.value });
        };
    }
    componentDidMount() {
        const { onGetDashboards } = this.props;
        onGetDashboards();
    }
    render() {
        const { dismiss, dashboards } = this.props;
        const { cellName, isNameDashVisible, targetDashboardIDs, newDashboardName, } = this.state;
        return (react_default.a.createElement(clockface_dist["Form"], { onSubmit: this.handleSubmit },
            react_default.a.createElement(clockface_dist["Grid"], null,
                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Target Dashboard(s)" },
                            react_default.a.createElement(components_DashboardsDropdown, { onSelect: this.handleSelectDashboardID, selectedIDs: targetDashboardIDs, dashboards: dashboards, newDashboardName: newDashboardName }))),
                    isNameDashVisible && this.nameDashboard,
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Cell Name" },
                            react_default.a.createElement(clockface_dist["Input"], { type: clockface_dist["InputType"].Text, placeholder: "Add optional cell name", name: "cellName", value: cellName, onChange: this.handleChangeCellName, testID: "save-as-dashboard-cell--cell-name" }))),
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
                        react_default.a.createElement(clockface_dist["Form"].Footer, null,
                            react_default.a.createElement(clockface_dist["Button"], { text: "Cancel", onClick: dismiss, titleText: "Cancel save", type: clockface_dist["ButtonType"].Button, testID: "save-as-dashboard-cell--cancel" }),
                            react_default.a.createElement(clockface_dist["Button"], { text: "Save as Dashboard Cell", testID: "save-as-dashboard-cell--submit", color: clockface_dist["ComponentColor"].Success, type: clockface_dist["ButtonType"].Submit, onClick: this.handleSubmit, status: this.isFormValid
                                    ? clockface_dist["ComponentStatus"].Default
                                    : clockface_dist["ComponentStatus"].Disabled })))))));
    }
    get nameDashboard() {
        const { newDashboardName } = this.state;
        return (react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
            react_default.a.createElement(clockface_dist["Form"].Element, { label: "New Dashboard Name" },
                react_default.a.createElement(clockface_dist["Input"], { type: clockface_dist["InputType"].Text, placeholder: "Add dashboard name", name: "dashboardName", value: newDashboardName, onChange: this.handleChangeDashboardName, testID: "save-as-dashboard-cell--dashboard-name" }))));
    }
    get isFormValid() {
        const { targetDashboardIDs } = this.state;
        return !Object(lodash["isEmpty"])(targetDashboardIDs);
    }
    resetForm() {
        this.setState({
            targetDashboardIDs: [],
            cellName: '',
            isNameDashVisible: false,
            newDashboardName: dashboards_constants["e" /* DEFAULT_DASHBOARD_NAME */],
        });
    }
};
SaveAsCellForm_SaveAsCellForm = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], SaveAsCellForm_SaveAsCellForm);
const SaveAsCellForm_mstp = (state) => {
    const view = Object(timeMachine_selectors["k" /* getSaveableView */])(state);
    const org = Object(selectors["a" /* getOrg */])(state);
    const dashboards = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Dashboards);
    return { dashboards, view, orgID: Object(lodash["get"])(org, 'id', '') };
};
const SaveAsCellForm_mdtp = {
    onGetDashboards: dashboards_actions_thunks["h" /* getDashboards */],
    onCreateCellWithView: thunks["a" /* createCellWithView */],
    onCreateDashboardWithView: thunks["b" /* createDashboardWithView */],
    notify: actions_notifications["c" /* notify */],
};
/* harmony default export */ var components_SaveAsCellForm = (Object(es["b" /* connect */])(SaveAsCellForm_mstp, SaveAsCellForm_mdtp)(SaveAsCellForm_SaveAsCellForm));

// EXTERNAL MODULE: ./src/variables/utils/formatVarsOption.ts
var formatVarsOption = __webpack_require__(738);

// CONCATENATED MODULE: ./src/dataExplorer/components/SaveAsTaskForm.tsx















class SaveAsTaskForm_SaveAsTaskForm extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleSubmit = () => {
            const { saveNewScript, newScript, taskOptions, timeRange } = this.props;
            const timeRangeVars = Object(getTimeRangeVars["a" /* getTimeRangeVars */])(timeRange);
            const windowPeriodVars = Object(getWindowVars["b" /* getWindowVars */])(newScript, timeRangeVars);
            const vars = [
                ...timeRangeVars,
                ...windowPeriodVars,
                ...this.props.userDefinedVars,
            ].filter(assignment => newScript.includes(assignment.id.name));
            const varOption = Object(formatVarsOption["a" /* formatVarsOption */])(vars);
            const taskOption = taskOptionsToFluxScript(taskOptions);
            const preamble = `${varOption}\n\n${taskOption}`;
            const script = addDestinationToFluxScript(newScript, taskOptions);
            saveNewScript(script, preamble);
        };
        this.handleChangeToBucketName = (bucketName) => {
            const { setTaskOption } = this.props;
            setTaskOption({ key: 'toBucketName', value: bucketName });
        };
        this.handleChangeScheduleType = (taskScheduleType) => {
            const { setTaskOption } = this.props;
            setTaskOption({ key: 'taskScheduleType', value: taskScheduleType });
        };
        this.handleChangeInput = (e) => {
            const { setTaskOption } = this.props;
            const key = e.target.name;
            const value = e.target.value;
            setTaskOption({ key, value });
        };
    }
    componentDidMount() {
        const { setTaskOption, setNewScript, refreshTimeMachineVariableValues, } = this.props;
        setTaskOption({
            key: 'taskScheduleType',
            value: types["TaskSchedule"].interval,
        });
        refreshTimeMachineVariableValues();
        setNewScript(this.activeScript);
    }
    componentWillUnmount() {
        const { clearTask } = this.props;
        clearTask();
    }
    render() {
        const { taskOptions, dismiss } = this.props;
        return (react_default.a.createElement(TaskForm_TaskForm, { taskOptions: taskOptions, onChangeScheduleType: this.handleChangeScheduleType, onChangeInput: this.handleChangeInput, onChangeToBucketName: this.handleChangeToBucketName, isInOverlay: true, onSubmit: this.handleSubmit, canSubmit: this.isFormValid, dismiss: dismiss }));
    }
    get isFormValid() {
        const { taskOptions: { name, cron, interval }, } = this.props;
        const hasSchedule = !!cron || !!interval;
        return hasSchedule && !!name && !!this.activeScript;
    }
    get activeScript() {
        const { activeQuery } = this.props;
        return activeQuery.text;
    }
}
const SaveAsTaskForm_mstp = (state) => {
    const { newScript, taskOptions } = state.resources.tasks;
    const { timeRange } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    const activeQuery = Object(timeMachine_selectors["a" /* getActiveQuery */])(state);
    const org = Object(selectors["a" /* getOrg */])(state);
    const userDefinedVars = Object(variables_selectors["q" /* getVariableAssignments */])(state, state.timeMachines.activeTimeMachineID);
    return {
        newScript,
        taskOptions: Object.assign(Object.assign({}, taskOptions), { toOrgName: org.name }),
        timeRange,
        activeQuery,
        userDefinedVars,
    };
};
const SaveAsTaskForm_mdtp = {
    saveNewScript: tasks_actions_thunks["l" /* saveNewScript */],
    setTaskOption: creators["C" /* setTaskOption */],
    clearTask: creators["r" /* clearTask */],
    setNewScript: creators["y" /* setNewScript */],
    refreshTimeMachineVariableValues: actions_queries["d" /* refreshTimeMachineVariableValues */],
};
/* harmony default export */ var components_SaveAsTaskForm = (Object(es["b" /* connect */])(SaveAsTaskForm_mstp, SaveAsTaskForm_mdtp)(Object(react_router_es["g" /* withRouter */])(SaveAsTaskForm_SaveAsTaskForm)));

// CONCATENATED MODULE: ./src/dataExplorer/components/SaveAsVariable.tsx





class SaveAsVariable_SaveAsVariable extends react["PureComponent"] {
    render() {
        const { initialScript, onHideOverlay } = this.props;
        return (react_default.a.createElement(components_VariableFormContext, { initialScript: initialScript, onHideOverlay: onHideOverlay }));
    }
}
const SaveAsVariable_mstp = (state) => {
    const activeQuery = Object(timeMachine_selectors["a" /* getActiveQuery */])(state);
    return {
        initialScript: activeQuery.text,
    };
};
/* harmony default export */ var components_SaveAsVariable = (Object(es["b" /* connect */])(SaveAsVariable_mstp, null)(Object(react_router_es["g" /* withRouter */])(SaveAsVariable_SaveAsVariable)));

// CONCATENATED MODULE: ./src/dataExplorer/components/SaveAsOverlay.tsx






var SaveAsOption;
(function (SaveAsOption) {
    SaveAsOption["Dashboard"] = "dashboard";
    SaveAsOption["Task"] = "task";
    SaveAsOption["Variable"] = "variable";
})(SaveAsOption || (SaveAsOption = {}));
class SaveAsOverlay_SaveAsOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            saveAsOption: SaveAsOption.Dashboard,
        };
        this.handleHideOverlay = () => {
            this.props.router.goBack();
        };
        this.handleSetSaveAsOption = (saveAsOption) => {
            this.setState({ saveAsOption });
        };
    }
    render() {
        const { saveAsOption } = this.state;
        return (react_default.a.createElement(clockface_dist["Overlay"], { visible: true },
            react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 600 },
                react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Save As", onDismiss: this.handleHideOverlay, testID: "save-as-overlay--header" }),
                react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                    react_default.a.createElement(clockface_dist["Tabs"].Container, { orientation: clockface_dist["Orientation"].Horizontal },
                        react_default.a.createElement(clockface_dist["Tabs"], { alignment: clockface_dist["Alignment"].Center },
                            react_default.a.createElement(clockface_dist["Tabs"].Tab, { id: SaveAsOption.Dashboard, text: "Dashboard Cell", testID: "cell-radio-button", onClick: this.handleSetSaveAsOption, active: saveAsOption === SaveAsOption.Dashboard, backgroundColor: clockface_dist["InfluxColors"].Castle }),
                            react_default.a.createElement(clockface_dist["Tabs"].Tab, { id: SaveAsOption.Task, text: "Task", testID: "task--radio-button", onClick: this.handleSetSaveAsOption, active: saveAsOption === SaveAsOption.Task, backgroundColor: clockface_dist["InfluxColors"].Castle }),
                            react_default.a.createElement(clockface_dist["Tabs"].Tab, { id: SaveAsOption.Variable, text: "Variable", testID: "variable-radio-button", onClick: this.handleSetSaveAsOption, active: saveAsOption === SaveAsOption.Variable, backgroundColor: clockface_dist["InfluxColors"].Castle })),
                        react_default.a.createElement(clockface_dist["Tabs"].TabContents, { padding: clockface_dist["ComponentSize"].Medium, backgroundColor: clockface_dist["InfluxColors"].Castle }, this.saveAsForm))))));
    }
    get saveAsForm() {
        const { saveAsOption } = this.state;
        if (saveAsOption === SaveAsOption.Dashboard) {
            return react_default.a.createElement(components_SaveAsCellForm, { dismiss: this.handleHideOverlay });
        }
        else if (saveAsOption === SaveAsOption.Task) {
            return react_default.a.createElement(components_SaveAsTaskForm, { dismiss: this.handleHideOverlay });
        }
        else if (saveAsOption === SaveAsOption.Variable) {
            return react_default.a.createElement(components_SaveAsVariable, { onHideOverlay: this.handleHideOverlay });
        }
    }
}
/* harmony default export */ var components_SaveAsOverlay = (Object(react_router_es["g" /* withRouter */])(SaveAsOverlay_SaveAsOverlay));

// CONCATENATED MODULE: ./src/me/components/Support.tsx

const supportLinks = [
    { link: 'https://v2.docs.influxdata.com/v2.0/', title: '📜 Documentation' },
    { link: 'https://community.influxdata.com', title: '💭 Community Forum' },
    {
        link: 'https://github.com/influxdata/influxdb/issues/new?template=feature_request.md',
        title: '✨ Feature Requests',
    },
    {
        link: 'https://github.com/influxdata/influxdb/issues/new?template=bug_report.md',
        title: '🐛 Report a bug',
    },
];
class Support_SupportLinks extends react["PureComponent"] {
    render() {
        return (react_default.a.createElement("ul", { className: "link-list" }, supportLinks.map(({ link, title }) => (react_default.a.createElement("li", { key: title },
            react_default.a.createElement("a", { href: link, target: "_blank" }, title))))));
    }
}

// CONCATENATED MODULE: ./src/me/components/LogoutButton.tsx






const LogoutButton = () => (react_default.a.createElement(react_default.a.Fragment, null,
    react_default.a.createElement(CloudExclude, null,
        react_default.a.createElement(react_router_es["b" /* Link */], { to: "/logout" },
            react_default.a.createElement(clockface_dist["Button"], { text: "Logout", size: clockface_dist["ComponentSize"].ExtraSmall }))),
    react_default.a.createElement(CloudOnly, null,
        react_default.a.createElement("a", { href: `${constants["k" /* CLOUD_URL */]}${constants["i" /* CLOUD_LOGOUT_PATH */]}` },
            react_default.a.createElement(clockface_dist["Button"], { text: "Logout", size: clockface_dist["ComponentSize"].ExtraSmall })))));
/* harmony default export */ var components_LogoutButton = (LogoutButton);

// CONCATENATED MODULE: ./src/me/constants/index.ts

const randomGreetings = [
    {
        text: 'Greetings',
        language: 'English',
    },
    {
        text: 'Ahoy',
        language: 'Pirate',
    },
    {
        text: 'Howdy',
        language: 'Texas',
    },
    {
        text: 'Bonjour',
        language: 'French',
    },
    {
        text: 'Hola',
        language: 'Spanish',
    },
    {
        text: 'Ciao',
        language: 'Italian',
    },
    {
        text: 'Hallo',
        language: 'German',
    },
    {
        text: 'Guten Tag',
        language: 'German',
    },
    {
        text: 'Olà',
        language: 'Portuguese',
    },
    {
        text: 'Namaste',
        language: 'Hindi',
    },
    {
        text: 'Salaam',
        language: 'Farsi',
    },
    {
        text: 'Ohayo',
        language: 'Japanese',
    },
    {
        text: 'こんにちは',
        language: 'Japanese',
    },
    {
        text: 'Merhaba',
        language: 'Turkish',
    },
    {
        text: 'Szia',
        language: 'Hungarian',
    },
    {
        text: 'Jambo',
        language: 'Swahili',
    },
    {
        text: '你好',
        language: 'Chinese (Simplified)',
    },
    {
        text: 'مرحبا',
        language: 'Arabic',
    },
    {
        text: 'Բարեւ',
        language: 'Armenian',
    },
    {
        text: 'Zdravo',
        language: 'Croatian',
    },
    {
        text: 'Привет',
        language: 'Russian',
    },
    {
        text: 'Xin chào',
        language: 'Vietnamese',
    },
    {
        text: 'สวัสดี',
        language: 'Thai',
    },
    {
        text: 'สวัสดี',
        language: 'Thai',
    },
    {
        text: 'Dzień dobry',
        language: 'Polish',
    },
    {
        text: 'Hei',
        language: 'Finnish',
    },
    {
        text: 'γεια σας',
        language: 'Greek',
    },
    {
        text: '인사말',
        language: 'Korean',
    },
    {
        text: 'Salve',
        language: 'Latin',
    },
    {
        text: 'Cyfarchion',
        language: 'Welsh',
    },
    {
        text: 'Ukubingelela',
        language: 'Zulu',
    },
    {
        text: 'Beannachtaí',
        language: 'Irish',
    },
    {
        text: '01001000 01100101 01101100 01101100 01101111',
        language: 'Binary',
    },
    {
        text: '.... . .-.. .-.. ---',
        language: 'Morse Code',
    },
    {
        text: 'nuqneH',
        language: 'Klingon',
    },
    {
        text: 'Saluton',
        language: 'Esperanto',
    },
    {
        text: 'გამარჯობა',
        language: 'Georgian',
    },
];
const generateRandomGreeting = () => {
    return lodash_default.a.sample(randomGreetings);
};
const sortFunc = (a, b) => {
    const firstDashboard = `${a.name || ''}`.toLowerCase();
    const secondDashboard = `${b.name || ''}`.toLowerCase();
    return firstDashboard.localeCompare(secondDashboard);
};
const getSortedDashboardNames = (dashboards) => {
    return dashboards.sort(sortFunc);
};

// CONCATENATED MODULE: ./src/me/components/DashboardsList.tsx









class DashboardsList_DashboardList extends react["PureComponent"] {
    render() {
        const { dashboards, org } = this.props;
        if (this.isEmpty) {
            return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].ExtraSmall },
                react_default.a.createElement(clockface_dist["EmptyState"].Text, null, "You don't have any Dashboards")));
        }
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement("ul", { className: "link-list" }, dashboards.map(({ id, name }) => (react_default.a.createElement("li", { key: id },
                react_default.a.createElement(react_router_es["b" /* Link */], { to: `/orgs/${org.id}/dashboards/${id}` }, name)))))));
    }
    get isEmpty() {
        return !this.props.dashboards.length;
    }
}
const DashboardsList_mstp = (state) => {
    const dashboards = getSortedDashboardNames(Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Dashboards));
    return {
        dashboards: dashboards,
        org: Object(selectors["a" /* getOrg */])(state),
    };
};
/* harmony default export */ var DashboardsList = (Object(es["b" /* connect */])(DashboardsList_mstp, null)(DashboardsList_DashboardList));

// CONCATENATED MODULE: ./src/me/components/Resources.tsx








class Resources_ResourceLists extends react["PureComponent"] {
    render() {
        return (react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Column, alignItems: clockface_dist["AlignItems"].Stretch, stretchToFitWidth: true, margin: clockface_dist["ComponentSize"].Small },
            react_default.a.createElement(clockface_dist["Panel"], null,
                react_default.a.createElement(clockface_dist["Panel"].Header, null,
                    react_default.a.createElement("h4", null, "Account"),
                    react_default.a.createElement(components_LogoutButton, null))),
            react_default.a.createElement(clockface_dist["Panel"], null,
                react_default.a.createElement(clockface_dist["Panel"].Header, null,
                    react_default.a.createElement("h4", null, "Dashboards")),
                react_default.a.createElement(clockface_dist["Panel"].Body, null,
                    react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Dashboards] },
                        react_default.a.createElement(DashboardsList, null)))),
            react_default.a.createElement(clockface_dist["Panel"], null,
                react_default.a.createElement(clockface_dist["Panel"].Header, null,
                    react_default.a.createElement("h4", null, "Useful Links")),
                react_default.a.createElement(clockface_dist["Panel"].Body, null,
                    react_default.a.createElement(Support_SupportLinks, null)),
                react_default.a.createElement(clockface_dist["Panel"].Footer, null,
                    react_default.a.createElement(components_VersionInfo, null)))));
    }
}
/* harmony default export */ var Resources = (Resources_ResourceLists);

// CONCATENATED MODULE: ./src/me/components/UserPageHeader.tsx




class UserPageHeader_UserPageHeader extends react["PureComponent"] {
    render() {
        return (react_default.a.createElement(clockface_dist["Page"].Header, { fullWidth: false },
            react_default.a.createElement(clockface_dist["Page"].HeaderLeft, null,
                react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Column, alignItems: clockface_dist["AlignItems"].FlexStart, margin: clockface_dist["ComponentSize"].Small }, this.title)),
            react_default.a.createElement(clockface_dist["Page"].HeaderRight, null)));
    }
    get title() {
        const { userName, orgName } = this.props;
        const { text, language } = generateRandomGreeting();
        let title = '';
        if (constants["e" /* CLOUD */]) {
            title = `${text}, ${userName}! Welcome to InfluxDB Cloud!`;
        }
        else {
            title = `${text}, ${userName}! Welcome to ${orgName}!`;
        }
        const altText = `That's how you say hello in ${language}`;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Page"].Title, { title: title }),
            react_default.a.createElement(clockface_dist["Page"].SubTitle, { title: altText })));
    }
}

// CONCATENATED MODULE: ./src/me/components/Docs.tsx


const Docs_supportLinks = [
    {
        link: 'https://v2.docs.influxdata.com/v2.0/query-data/get-started/',
        title: 'Get Started with Flux',
    },
    {
        link: 'https://v2.docs.influxdata.com/v2.0/visualize-data/explore-metrics/',
        title: 'Explore Metrics',
    },
    {
        link: 'https://v2.docs.influxdata.com/v2.0/visualize-data/dashboards/',
        title: 'Build a Dashboard',
    },
    {
        link: 'https://v2.docs.influxdata.com/v2.0/process-data/write-a-task/',
        title: 'Write a Task',
    },
];
class Docs_SupportLinks extends react["PureComponent"] {
    render() {
        return (react_default.a.createElement(clockface_dist["Panel"], null,
            react_default.a.createElement(clockface_dist["Panel"].Header, null,
                react_default.a.createElement("h4", null, "Some Handy Guides and Tutorials")),
            react_default.a.createElement(clockface_dist["Panel"].Body, null,
                react_default.a.createElement("ul", { className: "link-list tutorials" }, Docs_supportLinks.map(({ link, title }) => (react_default.a.createElement("li", { key: title },
                    react_default.a.createElement("a", { href: link, target: "_blank" }, title))))))));
    }
}

// CONCATENATED MODULE: ./src/me/graphics/CollectorGraphic.tsx


const CollectorGraphic = ({ animate }) => {
    const className = classnames_default()('getting-started--image collector-graphic', {
        'getting-started--image__animating': animate,
    });
    return (react_default.a.createElement("div", { className: className },
        react_default.a.createElement("svg", { version: "1.1", x: "0px", y: "0px", width: "322px", height: "225px", viewBox: "0 0 322 225" },
            react_default.a.createElement("g", { id: "Bucket" },
                react_default.a.createElement("path", { id: "BG", className: "collector-graphic--bg", d: "M161,199c-14.1,0-29.2-3.8-29.8-14.4l-6.9-51.3v-0.5c0-13.1,23-15.1,36.7-15.1s36.7,2,36.7,15.1v0.5\n    l-6.9,51.3C190.2,195.2,175.1,199,161,199z" }),
                react_default.a.createElement("path", { id: "BucketExterior", className: "collector-graphic--bucket", d: "M132.3,132.8c0-3.9,12.8-7.1,28.7-7.1s28.7,3.2,28.7,7.1l-6.9,51.1\n    c0,3.9-9.7,7.1-21.8,7.1c-12.1,0-21.8-3.1-21.8-7.1L132.3,132.8z" }),
                react_default.a.createElement("ellipse", { id: "BucketHole", className: "collector-graphic--bucket-hole", cx: "160.8", cy: "132.8", rx: "25.1", ry: "4.7" })),
            react_default.a.createElement("g", { id: "Blocks" },
                react_default.a.createElement("path", { className: "collector-graphic--bg", d: "M178.2,66.5c0,1.1-0.9,2-2,2h-30.5c-1.1,0-2-0.9-2-2V36c0-1.1,0.9-2,2-2h30.5c1.1,0,2,0.9,2,2V66.5z" }),
                react_default.a.createElement("path", { className: "collector-graphic--bg", d: "M121.4,66.5c0,1.1-0.9,2-2,2H88.9c-1.1,0-2-0.9-2-2V36c0-1.1,0.9-2,2-2h30.5c1.1,0,2,0.9,2,2V66.5z" }),
                react_default.a.createElement("path", { className: "collector-graphic--bg", d: "M64.5,66.5c0,1.1-0.9,2-2,2H32c-1.1,0-2-0.9-2-2V36c0-1.1,0.9-2,2-2h30.5c1.1,0,2,0.9,2,2V66.5z" }),
                react_default.a.createElement("path", { className: "collector-graphic--bg", d: "M235.1,66.5c0,1.1-0.9,2-2,2h-30.5c-1.1,0-2-0.9-2-2V36c0-1.1,0.9-2,2-2h30.5c1.1,0,2,0.9,2,2V66.5z" }),
                react_default.a.createElement("path", { className: "collector-graphic--bg", d: "M292,66.5c0,1.1-0.9,2-2,2h-30.5c-1.1,0-2-0.9-2-2V36c0-1.1,0.9-2,2-2H290c1.1,0,2,0.9,2,2V66.5z" })),
            react_default.a.createElement("g", { id: "Lines" },
                react_default.a.createElement("path", { id: "LineE", className: "collector-graphic--data data-e", d: "M274.8,58.3c0,63-105.5,35.5-105.5,81.3" }),
                react_default.a.createElement("path", { id: "LineD", className: "collector-graphic--data data-d", d: "M217.9,58.3c0,10.2-9.4,25.8-23.6,34.5s-29.5,24.4-29.5,46.7" }),
                react_default.a.createElement("line", { id: "LineC", className: "collector-graphic--data data-c", x1: "161", y1: "58.3", x2: "161", y2: "139.5" }),
                react_default.a.createElement("path", { id: "LineB", className: "collector-graphic--data data-b", d: "M104.1,58.3c0,10.2,9.4,25.8,23.6,34.5s29.5,24.4,29.5,46.7" }),
                react_default.a.createElement("path", { id: "LineA", className: "collector-graphic--data data-a", d: "M47.2,58.3c0,63,105.5,35.5,105.5,81.3" })),
            react_default.a.createElement("g", { id: "Dots" },
                react_default.a.createElement("circle", { id: "DotE", className: "collector-graphic--dot dot-e", cx: "274.8", cy: "51.3", r: "7" }),
                react_default.a.createElement("circle", { id: "DotD", className: "collector-graphic--dot dot-d", cx: "217.9", cy: "51.3", r: "7" }),
                react_default.a.createElement("circle", { id: "DotC", className: "collector-graphic--dot dot-c", cx: "161", cy: "51.3", r: "7" }),
                react_default.a.createElement("circle", { id: "DotB", className: "collector-graphic--dot dot-b", cx: "104.1", cy: "51.3", r: "7" }),
                react_default.a.createElement("circle", { id: "DotA", className: "collector-graphic--dot dot-a", cx: "47.2", cy: "51.3", r: "7" })),
            react_default.a.createElement("path", { id: "BucketMask", className: "collector-graphic--bucket", d: "M176.2,126.8v2.3c5.9,0.9,9.7,2.2,9.7,3.7c0,2.6-11.2,4.7-25.1,4.7s-25.1-2.1-25.1-4.7\n  c0-1.5,3.6-2.8,9.2-3.6V127c-7.7,1.3-12.7,3.4-12.7,5.9l6.9,51.1c0,3.9,9.7,7.1,21.8,7.1s21.8-3.1,21.8-7.1l6.9-51.1\n  C189.7,130.3,184.3,128.1,176.2,126.8z" }),
            react_default.a.createElement("g", { id: "Cubo", className: "collector-graphic--cubo" },
                react_default.a.createElement("polygon", { className: "collector-graphic--cubo-line", points: "166.5,150.9 155.1,150.9 149.4,160.8 155.1,170.7 166.5,170.7 172.2,160.8 \t\t" }),
                react_default.a.createElement("polygon", { className: "collector-graphic--cubo-line", points: "155.1,164.1 160.8,154.2 166.5,164.1 \t\t" }),
                react_default.a.createElement("polyline", { className: "collector-graphic--cubo-line", points: "155.1,150.9 160.8,154.2 166.5,150.9 \t\t" }),
                react_default.a.createElement("polyline", { className: "collector-graphic--cubo-line", points: "172.2,160.8 166.5,164.1 166.5,170.7 \t\t" }),
                react_default.a.createElement("polyline", { className: "collector-graphic--cubo-line", points: "155.1,170.7 155.1,164.1 149.4,160.8 \t\t" })))));
};
/* harmony default export */ var graphics_CollectorGraphic = (CollectorGraphic);

// CONCATENATED MODULE: ./src/me/graphics/DashboardingGraphic.tsx


const DashboardingGraphic = ({ animate }) => {
    const className = classnames_default()('getting-started--image dashboarding-graphic', {
        'getting-started--image__animating': animate,
    });
    return (react_default.a.createElement("div", { className: className },
        react_default.a.createElement("svg", { version: "1.1", x: "0px", y: "0px", width: "322px", height: "225px", viewBox: "0 0 322 225" },
            react_default.a.createElement("g", null,
                react_default.a.createElement("path", { id: "Background", className: "dashboarding-graphic--bg", d: "M291,30.5H31c-2.2,0-4,1.8-4,4v156c0,2.2,1.8,4,4,4h260c2.2,0,4-1.8,4-4v-156\n  C295,32.3,293.2,30.5,291,30.5z" }),
                react_default.a.createElement("g", { id: "Cells" },
                    react_default.a.createElement("path", { className: "dashboarding-graphic--cell", d: "M162,41.5c0-1.7,1.3-3,3-3h55.5c1.7,0,3,1.3,3,3v23c0,1.7-1.3,3-3,3H165c-1.7,0-3-1.3-3-3V41.5z" }),
                    react_default.a.createElement("path", { className: "dashboarding-graphic--cell", d: "M98.5,41.4c0.1-1.6,1.4-2.9,3-2.9H157c1.7,0,3,1.3,3,3v23c0,1.7-1.3,3-3,3h-55.5c-1.6,0-2.9-1.3-3-2.9\n    c0,0,0-0.1,0-0.1v-23C98.5,41.5,98.5,41.4,98.5,41.4z" }),
                    react_default.a.createElement("path", { className: "dashboarding-graphic--cell", d: "M35,41.5c0-1.7,1.3-3,3-3h55.5c1.6,0,2.9,1.3,3,2.9c0,0,0,0.1,0,0.1v23c0,0,0,0.1,0,0.1\n    c-0.1,1.6-1.4,2.9-3,2.9H38c-1.7,0-3-1.3-3-3V41.5z" }),
                    react_default.a.createElement("path", { className: "dashboarding-graphic--cell", d: "M35,72.5c0-1.7,1.3-3,3-3h55.5h8H157c1.7,0,3,1.3,3,3V132c0,1.7-1.3,3-3,3h-33h-8H38c-1.7,0-3-1.3-3-3V72.5z" }),
                    react_default.a.createElement("path", { className: "dashboarding-graphic--cell", d: "M119,183.6c-0.1,1.6-1.4,2.9-3,2.9H38c-1.7,0-3-1.3-3-3V140c0-1.7,1.3-3,3-3h78c1.6,0,2.9,1.3,3,2.9\n    c0,0,0,0.1,0,0.1v43.5C119,183.5,119,183.6,119,183.6z" }),
                    react_default.a.createElement("path", { className: "dashboarding-graphic--cell", d: "M201,183.6c-0.1,1.6-1.4,2.9-3,2.9h-74c-1.6,0-2.9-1.3-3-2.9c0,0,0-0.1,0-0.1V140c0,0,0-0.1,0-0.1\n    c0.1-1.6,1.4-2.9,3-2.9h33h8h33c1.6,0,2.9,1.3,3,2.9c0,0,0,0.1,0,0.1v43.5C201,183.5,201,183.6,201,183.6z" }),
                    react_default.a.createElement("path", { className: "dashboarding-graphic--cell", d: "M287,183.5c0,1.7-1.3,3-3,3h-78c-1.6,0-2.9-1.3-3-2.9c0,0,0-0.1,0-0.1V140c0,0,0-0.1,0-0.1\n    c0.1-1.6,1.4-2.9,3-2.9h78c1.7,0,3,1.3,3,3V183.5z" }),
                    react_default.a.createElement("path", { className: "dashboarding-graphic--cell", d: "M287,64.5c0,1.7-1.3,3-3,3h-55.5c-1.7,0-3-1.3-3-3v-23c0-1.7,1.3-3,3-3H284c1.7,0,3,1.3,3,3V64.5z" }),
                    react_default.a.createElement("path", { id: "Cell", className: "dashboarding-graphic--cell", d: "M287,132c0,1.7-1.3,3-3,3h-78h-8h-33c-1.7,0-3-1.3-3-3V72.5c0-1.7,1.3-3,3-3h0h55.5h8H284\n    c1.7,0,3,1.3,3,3V132z" })),
                react_default.a.createElement("g", { id: "Single_Stat_4392" },
                    react_default.a.createElement("path", { className: "dashboarding-graphic--single-stat single-stat-a", d: "M57.8,54.1H59V55h-1.2v2h-1.1v-2h-3.9v-0.6l3.8-5.9h1.2V54.1z M54.1,54.1h2.7V50l-0.1,0.2L54.1,54.1z" }),
                    react_default.a.createElement("path", { className: "dashboarding-graphic--single-stat single-stat-a", d: "M61.5,52.2h0.8c0.5,0,0.9-0.1,1.2-0.4s0.4-0.6,0.4-1.1c0-1-0.5-1.5-1.5-1.5c-0.5,0-0.8,0.1-1.1,0.4\n    S61,50.3,61,50.7h-1.1c0-0.7,0.2-1.2,0.7-1.7s1.1-0.7,1.9-0.7c0.8,0,1.4,0.2,1.9,0.6s0.7,1,0.7,1.8c0,0.4-0.1,0.7-0.4,1.1\n    s-0.6,0.6-1,0.8c0.5,0.1,0.8,0.4,1.1,0.7s0.4,0.8,0.4,1.3c0,0.8-0.2,1.4-0.8,1.8s-1.2,0.7-2,0.7s-1.5-0.2-2-0.7s-0.8-1-0.8-1.7\n    h1.1c0,0.4,0.1,0.8,0.4,1.1s0.7,0.4,1.2,0.4c0.5,0,0.9-0.1,1.2-0.4s0.4-0.7,0.4-1.2c0-0.5-0.2-0.9-0.5-1.1s-0.7-0.4-1.3-0.4h-0.8\n    V52.2z" }),
                    react_default.a.createElement("path", { className: "dashboarding-graphic--single-stat single-stat-a", d: "M70.9,53.2c-0.2,0.3-0.5,0.5-0.8,0.7s-0.7,0.2-1,0.2c-0.5,0-0.9-0.1-1.3-0.4s-0.6-0.6-0.8-1s-0.3-0.9-0.3-1.5\n    c0-0.6,0.1-1.1,0.3-1.5s0.5-0.8,0.9-1s0.9-0.4,1.4-0.4c0.8,0,1.5,0.3,2,0.9s0.7,1.5,0.7,2.6v0.3c0,1.7-0.3,2.9-1,3.6\n    S69.3,57,68,57h-0.2v-0.9H68c0.9,0,1.6-0.2,2.1-0.7S70.8,54.2,70.9,53.2z M69.2,53.2c0.4,0,0.7-0.1,1-0.3s0.5-0.5,0.7-0.8v-0.4\n    c0-0.7-0.2-1.3-0.5-1.7s-0.7-0.7-1.2-0.7c-0.5,0-0.9,0.2-1.1,0.5s-0.4,0.8-0.4,1.4c0,0.6,0.1,1.1,0.4,1.4S68.7,53.2,69.2,53.2z" }),
                    react_default.a.createElement("path", { className: "dashboarding-graphic--single-stat single-stat-a", d: "M79,57h-5.6v-0.8l3-3.3c0.4-0.5,0.7-0.9,0.9-1.2s0.2-0.6,0.2-1c0-0.4-0.1-0.8-0.4-1.1s-0.6-0.4-1.1-0.4\n    c-0.5,0-1,0.2-1.3,0.5s-0.4,0.7-0.4,1.3h-1.1c0-0.8,0.3-1.4,0.8-1.9s1.2-0.7,2-0.7c0.8,0,1.4,0.2,1.9,0.6s0.7,1,0.7,1.7\n    c0,0.8-0.5,1.8-1.6,3l-2.3,2.5H79V57z" })),
                react_default.a.createElement("g", { id: "Line_Graph_A" },
                    react_default.a.createElement("polyline", { className: "dashboarding-graphic--line line-a", points: "40,121.8 54.4,121.8 68.8,115.5 83.1,118.6 97.5,109.8 111.9,114.2 126.2,109.8 140.6,109.8 \n    155,117.2 \t\t" }),
                    react_default.a.createElement("polyline", { className: "dashboarding-graphic--line line-b", points: "40,118.2 54.4,118.2 68.8,104.8 83.1,74.5 97.5,99.5 111.9,92 126.2,103.8 140.6,105.5 155,109.8 \t\t\n    " }),
                    react_default.a.createElement("polyline", { className: "dashboarding-graphic--axes", points: "40,74.5 40,130 155,130 \t\t" })),
                react_default.a.createElement("g", { id: "Single_Stat_99.5" },
                    react_default.a.createElement("path", { className: "dashboarding-graphic--single-stat single-stat-b", d: "M245.1,53.2c-0.2,0.3-0.5,0.5-0.8,0.7s-0.7,0.2-1,0.2c-0.5,0-0.9-0.1-1.3-0.4s-0.6-0.6-0.8-1\n    s-0.3-0.9-0.3-1.5c0-0.6,0.1-1.1,0.3-1.5s0.5-0.8,0.9-1s0.9-0.4,1.4-0.4c0.8,0,1.5,0.3,2,0.9s0.7,1.5,0.7,2.6v0.3\n    c0,1.7-0.3,2.9-1,3.6s-1.6,1.2-3,1.2H242v-0.9h0.2c0.9,0,1.6-0.2,2.1-0.7S245,54.2,245.1,53.2z M243.4,53.2c0.4,0,0.7-0.1,1-0.3\n    s0.5-0.5,0.7-0.8v-0.4c0-0.7-0.2-1.3-0.5-1.7s-0.7-0.7-1.2-0.7c-0.5,0-0.9,0.2-1.1,0.5s-0.4,0.8-0.4,1.4c0,0.6,0.1,1.1,0.4,1.4\n    S242.9,53.2,243.4,53.2z" }),
                    react_default.a.createElement("path", { className: "dashboarding-graphic--single-stat single-stat-b", d: "M251.8,53.2c-0.2,0.3-0.5,0.5-0.8,0.7s-0.7,0.2-1,0.2c-0.5,0-0.9-0.1-1.3-0.4s-0.6-0.6-0.8-1\n    s-0.3-0.9-0.3-1.5c0-0.6,0.1-1.1,0.3-1.5s0.5-0.8,0.9-1s0.9-0.4,1.4-0.4c0.8,0,1.5,0.3,2,0.9s0.7,1.5,0.7,2.6v0.3\n    c0,1.7-0.3,2.9-1,3.6s-1.6,1.2-3,1.2h-0.2v-0.9h0.2c0.9,0,1.6-0.2,2.1-0.7S251.7,54.2,251.8,53.2z M250.1,53.2\n    c0.4,0,0.7-0.1,1-0.3s0.5-0.5,0.7-0.8v-0.4c0-0.7-0.2-1.3-0.5-1.7s-0.7-0.7-1.2-0.7c-0.5,0-0.9,0.2-1.1,0.5s-0.4,0.8-0.4,1.4\n    c0,0.6,0.1,1.1,0.4,1.4S249.7,53.2,250.1,53.2z" }),
                    react_default.a.createElement("path", { className: "dashboarding-graphic--single-stat single-stat-b", d: "M254.5,56.4c0-0.2,0.1-0.3,0.2-0.5s0.3-0.2,0.5-0.2s0.4,0.1,0.5,0.2s0.2,0.3,0.2,0.5c0,0.2-0.1,0.3-0.2,0.5\n    s-0.3,0.2-0.5,0.2s-0.4-0.1-0.5-0.2S254.5,56.6,254.5,56.4z" }),
                    react_default.a.createElement("path", { className: "dashboarding-graphic--single-stat single-stat-b", d: "M258,52.7l0.4-4.3h4.4v1h-3.5l-0.3,2.3c0.4-0.2,0.9-0.4,1.4-0.4c0.8,0,1.4,0.3,1.9,0.8s0.7,1.2,0.7,2.1\n    c0,0.9-0.2,1.6-0.7,2.1s-1.1,0.8-2,0.8c-0.8,0-1.4-0.2-1.8-0.6s-0.7-1-0.8-1.7h1c0.1,0.5,0.2,0.9,0.5,1.1s0.7,0.4,1.1,0.4\n    c0.5,0,0.9-0.2,1.2-0.5s0.4-0.8,0.4-1.4c0-0.6-0.2-1-0.5-1.4s-0.7-0.5-1.2-0.5c-0.5,0-0.8,0.1-1.1,0.3l-0.3,0.2L258,52.7z" }),
                    react_default.a.createElement("path", { className: "dashboarding-graphic--single-stat single-stat-b", d: "M264.2,50.1c0-0.5,0.2-0.9,0.5-1.3s0.7-0.5,1.3-0.5c0.5,0,0.9,0.2,1.3,0.5s0.5,0.8,0.5,1.3v0.4\n    c0,0.5-0.2,0.9-0.5,1.3s-0.7,0.5-1.2,0.5c-0.5,0-0.9-0.2-1.3-0.5s-0.5-0.8-0.5-1.3V50.1z M265,50.6c0,0.3,0.1,0.6,0.3,0.8\n    s0.4,0.3,0.7,0.3c0.3,0,0.5-0.1,0.7-0.3s0.3-0.5,0.3-0.8v-0.4c0-0.3-0.1-0.6-0.3-0.8c-0.2-0.2-0.4-0.3-0.7-0.3s-0.5,0.1-0.7,0.3\n    c-0.2,0.2-0.3,0.5-0.3,0.8V50.6z M266.2,56.4l-0.6-0.4l4.2-6.7l0.6,0.4L266.2,56.4z M268.3,54.9c0-0.5,0.2-0.9,0.5-1.3\n    s0.7-0.5,1.3-0.5s0.9,0.2,1.3,0.5s0.5,0.8,0.5,1.3v0.4c0,0.5-0.2,0.9-0.5,1.3s-0.7,0.5-1.3,0.5s-0.9-0.2-1.3-0.5s-0.5-0.8-0.5-1.3\n    V54.9z M269.1,55.4c0,0.3,0.1,0.6,0.3,0.8s0.4,0.3,0.7,0.3c0.3,0,0.5-0.1,0.7-0.3s0.3-0.5,0.3-0.8v-0.4c0-0.3-0.1-0.6-0.3-0.8\n    c-0.2-0.2-0.4-0.3-0.7-0.3c-0.3,0-0.5,0.1-0.7,0.3c-0.2,0.2-0.3,0.5-0.3,0.8V55.4z" })),
                react_default.a.createElement("g", { id: "Table" },
                    react_default.a.createElement("rect", { x: "167", y: "74.5", className: "dashboarding-graphic--axes", width: "115", height: "55.5" }),
                    react_default.a.createElement("rect", { x: "167", y: "74.5", className: "dashboarding-graphic--axes", width: "23", height: "55.5" }),
                    react_default.a.createElement("rect", { x: "190", y: "74.5", className: "dashboarding-graphic--axes", width: "23", height: "55.5" }),
                    react_default.a.createElement("rect", { x: "213", y: "74.5", className: "dashboarding-graphic--axes", width: "23", height: "55.5" }),
                    react_default.a.createElement("rect", { x: "236", y: "74.5", className: "dashboarding-graphic--axes", width: "23", height: "55.5" }),
                    react_default.a.createElement("rect", { x: "259", y: "74.5", className: "dashboarding-graphic--axes", width: "23", height: "55.5" }),
                    react_default.a.createElement("rect", { x: "167", y: "74.5", className: "dashboarding-graphic--axes", width: "115", height: "7.9" }),
                    react_default.a.createElement("rect", { x: "167", y: "82.4", className: "dashboarding-graphic--axes", width: "115", height: "7.9" }),
                    react_default.a.createElement("rect", { x: "167", y: "90.4", className: "dashboarding-graphic--axes", width: "115", height: "7.9" }),
                    react_default.a.createElement("rect", { x: "167", y: "98.3", className: "dashboarding-graphic--axes", width: "115", height: "7.9" }),
                    react_default.a.createElement("rect", { x: "167", y: "106.2", className: "dashboarding-graphic--axes", width: "115", height: "7.9" }),
                    react_default.a.createElement("rect", { x: "167", y: "114.1", className: "dashboarding-graphic--axes", width: "115", height: "7.9" }),
                    react_default.a.createElement("rect", { x: "167", y: "122.1", className: "dashboarding-graphic--axes", width: "115", height: "7.9" }),
                    react_default.a.createElement("rect", { id: "Highlight_Blue", x: "190", y: "82.4", className: "dashboarding-graphic--axes table-a", width: "23", height: "7.9" }),
                    react_default.a.createElement("rect", { id: "Highlight_Purple", x: "236", y: "106.2", className: "dashboarding-graphic--axes table-b", width: "23", height: "7.9" })),
                react_default.a.createElement("g", { id: "Line_Graph_B" },
                    react_default.a.createElement("polyline", { className: "dashboarding-graphic--line line-c", points: "39.5,167.8 48.8,167.8 58.1,157 67.4,162.4 76.8,147 86.1,154.8 95.4,147 104.7,147 114,160 \t\t" }),
                    react_default.a.createElement("polyline", { className: "dashboarding-graphic--axes", points: "39.5,142 39.5,181.5 114,181.5 \t\t" })),
                react_default.a.createElement("g", { id: "Bar_Chart_1_" },
                    react_default.a.createElement("polyline", { className: "dashboarding-graphic--axes", points: "126,142 126,181.5 196,181.5 \t\t" }),
                    react_default.a.createElement("g", { id: "Bar_Chart" },
                        react_default.a.createElement("rect", { x: "130", y: "166.3", className: "dashboarding-graphic--bar bar-a", width: "6.3", height: "15.2", transform: "scale(1,-1) translate(0,-347.2)" }),
                        react_default.a.createElement("rect", { x: "139.1", y: "149.3", className: "dashboarding-graphic--bar bar-b", width: "6.3", height: "32.2", transform: "scale(1,-1) translate(0,-330)" }),
                        react_default.a.createElement("rect", { x: "148.3", y: "155.7", className: "dashboarding-graphic--bar bar-c", width: "6.3", height: "25.8", transform: "scale(1,-1) translate(0,-336.5)" }),
                        react_default.a.createElement("rect", { x: "157.4", y: "177.5", className: "dashboarding-graphic--bar bar-d", width: "6.3", height: "4", transform: "scale(1,-1) translate(0,-358.5)" }),
                        react_default.a.createElement("rect", { x: "166.5", y: "179.5", className: "dashboarding-graphic--bar bar-e", width: "6.3", height: "2", transform: "scale(1,-1) translate(0,-360.5)" }),
                        react_default.a.createElement("rect", { x: "175.6", y: "173.9", className: "dashboarding-graphic--bar bar-f", width: "6.3", height: "7.6", transform: "scale(1,-1) translate(0,-355)" }),
                        react_default.a.createElement("rect", { x: "184.7", y: "177.5", className: "dashboarding-graphic--bar bar-g", width: "6.3", height: "4", transform: "scale(1,-1) translate(0,-358.5)" }))),
                react_default.a.createElement("g", { id: "Line_Graph_C" },
                    react_default.a.createElement("polyline", { className: "dashboarding-graphic--line line-d", points: "207.7,161 217.1,173.9 226.4,176.2 235.7,163.7 245,167.8 254.3,152.9 264.1,145 272.9,148 \n282.3,148 " }),
                    react_default.a.createElement("polyline", { className: "dashboarding-graphic--axes", points: "207.7,142 207.7,181.5 282.3,181.5 \t\t" })),
                react_default.a.createElement("g", { id: "Single_Stat_4" },
                    react_default.a.createElement("path", { className: "dashboarding-graphic--single-stat single-stat-c", d: "M194.7,53.9h1.2v0.9h-1.2v2h-1.1v-2h-3.9v-0.6l3.8-5.9h1.2V53.9z M190.9,53.9h2.7v-4.2l-0.1,0.2L190.9,53.9z\n    " })),
                react_default.a.createElement("g", { id: "Single_Stat_ABC" },
                    react_default.a.createElement("path", { className: "dashboarding-graphic--single-stat single-stat-d", d: "M123.4,54.8h-3.6L119,57h-1.2l3.3-8.5h1l3.3,8.5h-1.2L123.4,54.8z M120.2,53.8h2.9l-1.5-4L120.2,53.8z" }),
                    react_default.a.createElement("path", { className: "dashboarding-graphic--single-stat single-stat-d", d: "M126.5,57v-8.5h2.8c0.9,0,1.6,0.2,2.1,0.6s0.7,0.9,0.7,1.7c0,0.4-0.1,0.8-0.3,1.1s-0.5,0.5-0.9,0.7\n    c0.5,0.1,0.8,0.4,1.1,0.7s0.4,0.8,0.4,1.3c0,0.8-0.2,1.4-0.7,1.8s-1.2,0.7-2.1,0.7H126.5z M127.6,52.1h1.7c0.5,0,0.9-0.1,1.2-0.4\n    c0.3-0.2,0.4-0.6,0.4-1c0-0.5-0.1-0.8-0.4-1c-0.3-0.2-0.7-0.3-1.2-0.3h-1.7V52.1z M127.6,53v3.1h1.9c0.5,0,0.9-0.1,1.2-0.4\n    s0.5-0.6,0.5-1.1c0-1-0.6-1.5-1.7-1.5H127.6z" }),
                    react_default.a.createElement("path", { className: "dashboarding-graphic--single-stat single-stat-d", d: "M140.3,54.3c-0.1,0.9-0.4,1.6-1,2.1s-1.3,0.7-2.2,0.7c-1,0-1.8-0.4-2.4-1.1s-0.9-1.7-0.9-2.9v-0.8\n    c0-0.8,0.1-1.5,0.4-2.1s0.7-1.1,1.2-1.4s1.1-0.5,1.8-0.5c0.9,0,1.6,0.3,2.2,0.8s0.9,1.2,1,2.1h-1.1c-0.1-0.7-0.3-1.2-0.6-1.5\n    s-0.8-0.5-1.4-0.5c-0.7,0-1.3,0.3-1.7,0.8c-0.4,0.5-0.6,1.3-0.6,2.3v0.8c0,0.9,0.2,1.7,0.6,2.2s0.9,0.8,1.6,0.8\n    c0.6,0,1.1-0.1,1.4-0.4s0.6-0.8,0.7-1.5H140.3z" }))))));
};
/* harmony default export */ var graphics_DashboardingGraphic = (DashboardingGraphic);

// CONCATENATED MODULE: ./src/me/graphics/ExploreGraphic.tsx


const ExploreGraphic = ({ animate }) => {
    const className = classnames_default()('getting-started--image explore-graphic', {
        'getting-started--image__animating': animate,
    });
    return (react_default.a.createElement("div", { className: className },
        react_default.a.createElement("svg", { version: "1.1", x: "0px", y: "0px", width: "322px", height: "225px", viewBox: "0 0 322 225" },
            react_default.a.createElement("g", null,
                react_default.a.createElement("path", { id: "Background_2_", className: "explore-graphic--bg", d: "M302,34.3l-8.8-15.2c-2-3.4-6-5.7-9.9-5.7h-17.6c-4,0-7.9,2.3-9.9,5.7l-7.5,13h-12.4\n\t\tl-7.5-13c-2-3.4-6-5.7-9.9-5.7h-17.6c-4,0-7.9,2.3-9.9,5.7l-7.5,13h-15c-4,0-7.9,2.3-9.9,5.7l-7.5,13h-12.4l-7.5-13\n\t\tc-2-3.4-6-5.7-9.9-5.7h-15l-7.5-13c-2-3.4-6-5.7-9.9-5.7H71.2c-4,0-7.9,2.3-9.9,5.7l-7.5,13h-15c-4,0-7.9,2.3-9.9,5.7L20,53\n\t\tc-2,3.4-2,8,0,11.5l7.5,13l-7.5,13c-2,3.4-2,8,0,11.5l7.5,13l-7.5,13c-2,3.4-2,8,0,11.5l8.8,15.2c2,3.4,6,5.7,9.9,5.7h15l7.5,13\n\t\tc2,3.4,6,5.7,9.9,5.7h17.6c4,0,7.9-2.3,9.9-5.7l7.5-13h12.4l6.2,10.7l-7.5,13c-2,3.4-2,8,0,11.5l8.8,15.2c2,3.4,6,5.7,9.9,5.7h17.6\n\t\tc4,0,7.9-2.3,9.9-5.7l7.5-13h12.4l7.5,13c2,3.4,6,5.7,9.9,5.7h17.6c4,0,7.9-2.3,9.9-5.7l8.8-15.2c2-3.4,2-8,0-11.5l-7.5-13\n\t\tl6.2-10.7h15c4,0,7.9-2.3,9.9-5.7l8.8-15.2c2-3.4,2-8,0-11.5l-7.5-13l7.5-13c2-3.4,2-8,0-11.5l-7.5-13l6.2-10.7h15\n\t\tc4,0,7.9-2.3,9.9-5.7l8.8-15.2C303.9,42.4,303.9,37.7,302,34.3z" }),
                react_default.a.createElement("g", { id: "Hexes" },
                    react_default.a.createElement("path", { className: "explore-graphic--hex", d: "M200.8,59.3h17.6c0.9,0,2.1,0.7,2.6,1.5l8.8,15.2c0.5,0.8,0.5,2.2,0,3L221,94.2c-0.5,0.8-1.6,1.5-2.6,1.5\n\t\t\th-17.6c-0.9,0-2.1-0.7-2.6-1.5L189.4,79c-0.5-0.8-0.5-2.2,0-3l8.8-15.2C198.7,59.9,199.9,59.3,200.8,59.3z" }),
                    react_default.a.createElement("path", { className: "explore-graphic--hex", d: "M157,57.3l8.8-15.2c0.5-0.8,1.6-1.5,2.6-1.5H186c0.9,0,2.1,0.7,2.6,1.5l8.8,15.2c0.5,0.8,0.5,2.2,0,3\n\t\t\tl-8.8,15.2c-0.5,0.8-1.6,1.5-2.6,1.5h-17.6c-0.9,0-2.1-0.7-2.6-1.5L157,60.2C156.6,59.4,156.6,58.1,157,57.3z" }),
                    react_default.a.createElement("path", { className: "explore-graphic--hex", d: "M103.6,40.5h17.6c0.9,0,2.1,0.7,2.6,1.5v0l8.8,15.2c0.5,0.8,0.5,2.2,0,3l-8.8,15.2c-0.5,0.8-1.6,1.5-2.6,1.5\n\t\t\th-17.6c-0.9,0-2.1-0.7-2.6-1.5l-8.8-15.2c-0.5-0.8-0.5-2.2,0-3L101,42C101.5,41.2,102.7,40.5,103.6,40.5z" }),
                    react_default.a.createElement("path", { className: "explore-graphic--hex", d: "M68.6,56.8l-8.8-15.2c-0.5-0.8-0.5-2.2,0-3l8.8-15.2c0.5-0.8,1.6-1.5,2.6-1.5h17.6c0.9,0,2.1,0.7,2.6,1.5\n\t\t\tl8.8,15.2c0.5,0.8,0.5,2.2,0,3l-8.8,15.2c-0.5,0.8-1.6,1.5-2.6,1.5H71.2C70.3,58.3,69.1,57.6,68.6,56.8z" }),
                    react_default.a.createElement("path", { className: "explore-graphic--hex", d: "M67.7,97.7l-8.8,15.2c-0.5,0.8-1.6,1.5-2.6,1.5H38.8c-0.9,0-2.1-0.7-2.6-1.5l-8.8-15.2c-0.5-0.8-0.5-2.2,0-3\n\t\t\tl8.8-15.2c0.5-0.8,1.6-1.5,2.6-1.5h17.6c0.9,0,2.1,0.7,2.6,1.5l8.8,15.2C68.2,95.5,68.2,96.9,67.7,97.7z" }),
                    react_default.a.createElement("path", { className: "explore-graphic--hex", d: "M88.8,95.7H71.2c-0.9,0-2.1-0.7-2.6-1.5L59.8,79c-0.5-0.8-0.5-2.2,0-3l8.8-15.2c0.5-0.8,1.6-1.5,2.6-1.5h17.6\n\t\t\tc0.9,0,2.1,0.7,2.6,1.5l8.8,15.2c0.5,0.8,0.5,2.2,0,3l-8.8,15.2C90.9,95,89.7,95.7,88.8,95.7z" }),
                    react_default.a.createElement("path", { className: "explore-graphic--hex", d: "M132.6,97.7l-8.8,15.2c-0.5,0.8-1.6,1.5-2.6,1.5h-17.6c-0.9,0-2.1-0.7-2.6-1.5l-8.8-15.2\n\t\t\tc-0.5-0.8-0.5-2.2,0-3l8.8-15.2c0.5-0.8,1.6-1.5,2.6-1.5h17.6c0.9,0,2.1,0.7,2.6,1.5v0l8.8,15.2C133,95.5,133,96.9,132.6,97.7z" }),
                    react_default.a.createElement("path", { className: "explore-graphic--hex", d: "M153.6,95.7H136c-0.9,0-2.1-0.7-2.6-1.5L124.6,79c-0.5-0.8-0.5-2.2,0-3l8.8-15.2c0.5-0.8,1.6-1.5,2.6-1.5\n\t\t\th17.6c0.9,0,2.1,0.7,2.6,1.5L165,76c0.5,0.8,0.5,2.2,0,3l-8.8,15.2C155.7,95,154.5,95.7,153.6,95.7z" }),
                    react_default.a.createElement("path", { className: "explore-graphic--hex", d: "M133.4,169l-8.8-15.2c-0.5-0.8-0.5-2.2,0-3l8.8-15.2c0.5-0.8,1.6-1.5,2.6-1.5h17.6c0.9,0,2.1,0.7,2.6,1.5\n\t\t\tl8.8,15.2c0.5,0.8,0.5,2.2,0,3l-8.8,15.2c-0.5,0.8-1.6,1.5-2.6,1.5H136C135.1,170.5,133.9,169.8,133.4,169z" }),
                    react_default.a.createElement("path", { className: "explore-graphic--hex", d: "M165,191.2l-8.8,15.2c-0.5,0.8-1.6,1.5-2.6,1.5H136c-0.9,0-2.1-0.7-2.6-1.5l-8.8-15.2c-0.5-0.8-0.5-2.2,0-3\n\t\t\tl8.8-15.2c0.5-0.8,1.6-1.5,2.6-1.5h17.6c0.9,0,2.1,0.7,2.6,1.5l8.8,15.2C165.4,189.1,165.4,190.4,165,191.2z" }),
                    react_default.a.createElement("path", { className: "explore-graphic--hex", d: "M200.8,171.5h17.6c0.9,0,2.1,0.7,2.6,1.5l8.8,15.2c0.5,0.8,0.5,2.2,0,3l-8.8,15.2c-0.5,0.8-1.6,1.5-2.6,1.5\n\t\t\th-17.6c-0.9,0-2.1-0.7-2.6-1.5l-8.8-15.2c-0.5-0.8-0.5-2.2,0-3l8.8-15.2C198.7,172.2,199.9,171.5,200.8,171.5z" }),
                    react_default.a.createElement("path", { className: "explore-graphic--hex", d: "M188.6,154.3l8.8,15.2c0.5,0.8,0.5,2.2,0,3l-8.8,15.2c-0.5,0.8-1.6,1.5-2.6,1.5h-17.6c-0.9,0-2.1-0.7-2.6-1.5\n\t\t\tl-8.8-15.2c-0.5-0.8-0.5-2.2,0-3l8.8-15.2c0.5-0.8,1.6-1.5,2.6-1.5H186C186.9,152.8,188.1,153.5,188.6,154.3z" }),
                    react_default.a.createElement("path", { className: "explore-graphic--hex", d: "M197.4,135.1l-8.8,15.2c-0.5,0.8-1.6,1.5-2.6,1.5h-17.6c-0.9,0-2.1-0.7-2.6-1.5l-8.8-15.2\n\t\t\tc-0.5-0.8-0.5-2.2,0-3l8.8-15.2c0.5-0.8,1.6-1.5,2.6-1.5H186c0.9,0,2.1,0.7,2.6,1.5l8.8,15.2C197.8,132.9,197.8,134.3,197.4,135.1\n\t\t\tz" }),
                    react_default.a.createElement("path", { className: "explore-graphic--hex", d: "M229.8,116.4l-8.8,15.2c-0.5,0.8-1.6,1.5-2.6,1.5h-17.6c-0.9,0-2.1-0.7-2.6-1.5l-8.8-15.2\n\t\t\tc-0.5-0.8-0.5-2.2,0-3l8.8-15.2c0.5-0.8,1.6-1.5,2.6-1.5h17.6c0.9,0,2.1,0.7,2.6,1.5l8.8,15.2\n\t\t\tC230.2,114.2,230.2,115.6,229.8,116.4z" }),
                    react_default.a.createElement("path", { className: "explore-graphic--hex", d: "M253.4,79.5l8.8,15.2c0.5,0.8,0.5,2.2,0,3l-8.8,15.2c-0.5,0.8-1.6,1.5-2.6,1.5h-17.6c-0.9,0-2.1-0.7-2.6-1.5\n\t\t\tl-8.8-15.2c-0.5-0.8-0.5-2.2,0-3l8.8-15.2c0.5-0.8,1.6-1.5,2.6-1.5h17.6C251.7,78,252.9,78.6,253.4,79.5z" }),
                    react_default.a.createElement("path", { className: "explore-graphic--hex", d: "M262.2,60.2l-8.8,15.2c-0.5,0.8-1.6,1.5-2.6,1.5h-17.6c-0.9,0-2.1-0.7-2.6-1.5l-8.8-15.2\n\t\t\tc-0.5-0.8-0.5-2.2,0-3l8.8-15.2c0.5-0.8,1.6-1.5,2.6-1.5h17.6c0.9,0,2.1,0.7,2.6,1.5l8.8,15.2C262.7,58.1,262.7,59.4,262.2,60.2z" }),
                    react_default.a.createElement("path", { className: "explore-graphic--hex", d: "M294.6,41.5l-8.8,15.2c-0.5,0.8-1.6,1.5-2.6,1.5h-17.6c-0.9,0-2.1-0.7-2.6-1.5l-8.8-15.2\n\t\t\tc-0.5-0.8-0.5-2.2,0-3l8.8-15.2c0.5-0.8,1.6-1.5,2.6-1.5h17.6c0.9,0,2.1,0.7,2.6,1.5l8.8,15.2C295.1,39.4,295.1,40.7,294.6,41.5z" })),
                react_default.a.createElement("path", { id: "DiagnosticB", className: "explore-graphic--diagnostic diagnostic-b", d: "M178.4,10.4c0-1-0.8-1.9-1.9-1.9s-1.9,0.8-1.9,1.9c0,0.9,0.6,1.6,1.4,1.8v73.6\n\t\tc0,0.3,0.2,0.5,0.5,0.5s0.5-0.2,0.5-0.5V12.2C177.8,12,178.4,11.3,178.4,10.4z" }),
                react_default.a.createElement("path", { id: "DiagnosticA", className: "explore-graphic--diagnostic diagnostic-a", d: "M48.1,206.3v-59.9c0-0.3-0.2-0.5-0.5-0.5s-0.5,0.2-0.5,0.5v59.9c-0.8,0.2-1.4,0.9-1.4,1.8\n\t\tc0,1,0.8,1.9,1.9,1.9s1.9-0.8,1.9-1.9C49.5,207.2,48.9,206.5,48.1,206.3z" }),
                react_default.a.createElement("g", { className: "explore-graphic--flows" },
                    react_default.a.createElement("path", { id: "FlowB", className: "explore-graphic--flow flow-b", d: "M47.6,134.9l30,16.5c1,0.5,2.2,0.5,3.2,0l30-16.9c1-0.6,2.2-0.6,3.2,0l29.1,16.8\n\t\tc1,0.6,2.3,0.6,3.3,0l29.1-16.8c1-0.6,1.6-1.7,1.6-2.8V95.2" }),
                    react_default.a.createElement("path", { id: "FlowA", className: "explore-graphic--flow flow-a", d: "M47.6,134.9l30.1-19c0.9-0.6,1.5-1.6,1.5-2.8V79.4c0-1.2,0.6-2.3,1.7-2.9l29.9-16.9\n\t\tc1-0.6,2.2-0.6,3.2,0l30.9,17.8l32.3,17.8" })),
                react_default.a.createElement("g", { id: "Text" },
                    react_default.a.createElement("line", { className: "explore-graphic--text", x1: "52.6", y1: "203.1", x2: "75.2", y2: "203.1" }),
                    react_default.a.createElement("line", { className: "explore-graphic--text", x1: "52.6", y1: "199.1", x2: "79.2", y2: "199.1" }),
                    react_default.a.createElement("line", { className: "explore-graphic--text", x1: "52.6", y1: "195.1", x2: "83.5", y2: "195.1" }),
                    react_default.a.createElement("line", { className: "explore-graphic--text", x1: "52.6", y1: "191.1", x2: "69.4", y2: "191.1" }),
                    react_default.a.createElement("line", { className: "explore-graphic--text", x1: "171.5", y1: "15.4", x2: "148.9", y2: "15.4" }),
                    react_default.a.createElement("line", { className: "explore-graphic--text", x1: "171.5", y1: "19.4", x2: "155.3", y2: "19.4" }),
                    react_default.a.createElement("line", { className: "explore-graphic--text", x1: "171.5", y1: "23.4", x2: "146.3", y2: "23.4" }),
                    react_default.a.createElement("line", { className: "explore-graphic--text", x1: "171.5", y1: "27.4", x2: "159.3", y2: "27.4" }),
                    react_default.a.createElement("line", { className: "explore-graphic--text", x1: "155.3", y1: "27.4", x2: "149.2", y2: "27.4" })),
                react_default.a.createElement("path", { id: "HighlightA", className: "explore-graphic--hex hex-a", d: "M58.9,116.9l8.8,15.2c0.5,0.8,0.5,2.2,0,3l-8.8,15.2c-0.5,0.8-1.6,1.5-2.6,1.5H38.8\n\t\tc-0.9,0-2.1-0.7-2.6-1.5l-8.8-15.2c-0.5-0.8-0.5-2.2,0-3l8.8-15.2c0.5-0.8,1.6-1.5,2.6-1.5h17.6C57.3,115.4,58.5,116.1,58.9,116.9z\n\t\t" }),
                react_default.a.createElement("path", { id: "HighlightB", className: "explore-graphic--hex hex-b", d: "M165.8,112.9L157,97.7c-0.5-0.8-0.5-2.2,0-3l8.8-15.2c0.5-0.8,1.6-1.5,2.6-1.5H186\n\t\tc0.9,0,2.1,0.7,2.6,1.5l8.8,15.2c0.5,0.8,0.5,2.2,0,3l-8.8,15.2c-0.5,0.8-1.6,1.5-2.6,1.5h-17.6\n\t\tC167.5,114.4,166.3,113.7,165.8,112.9z" })))));
};
/* harmony default export */ var graphics_ExploreGraphic = (ExploreGraphic);

// CONCATENATED MODULE: ./src/me/components/GettingStarted.tsx








const GettingStarted = ({ orgID, router }) => {
    const [loadDataAnimating, setLoadDataAnimation] = Object(react["useState"])(false);
    const handleLoadDataClick = () => {
        router.push(`/orgs/${orgID}/load-data/telegrafs`);
    };
    const handleLoadDataMouseOver = () => {
        setLoadDataAnimation(true);
    };
    const handleLoadDataMouseOut = () => {
        setLoadDataAnimation(false);
    };
    const [dashboardingAnimating, setDashboardingAnimation] = Object(react["useState"])(false);
    const handleDashboardsClick = () => {
        router.push(`/orgs/${orgID}/dashboards`);
    };
    const handleDashboardsMouseOver = () => {
        setDashboardingAnimation(true);
    };
    const handleDashboardsMouseOut = () => {
        setDashboardingAnimation(false);
    };
    const [alertsAnimating, setAlertsAnimation] = Object(react["useState"])(false);
    const handleAlertsClick = () => {
        router.push(`/orgs/${orgID}/alerting`);
    };
    const handleAlertsMouseOver = () => {
        setAlertsAnimation(true);
    };
    const handleAlertsMouseOut = () => {
        setAlertsAnimation(false);
    };
    return (react_default.a.createElement("div", { className: "getting-started" },
        react_default.a.createElement(clockface_dist["Panel"], { className: "getting-started--card highlighted", gradient: clockface_dist["Gradients"].PolarExpress },
            react_default.a.createElement("div", { className: "getting-started--card-digit" }, "1"),
            react_default.a.createElement(clockface_dist["Panel"].Body, null,
                react_default.a.createElement(graphics_CollectorGraphic, { animate: loadDataAnimating })),
            react_default.a.createElement(clockface_dist["Panel"].Footer, null,
                react_default.a.createElement(clockface_dist["Button"], { text: "Load your data", color: clockface_dist["ComponentColor"].Primary, size: clockface_dist["ComponentSize"].Large, onClick: handleLoadDataClick, onMouseOver: handleLoadDataMouseOver, onMouseOut: handleLoadDataMouseOut }))),
        react_default.a.createElement(clockface_dist["Panel"], { className: "getting-started--card", backgroundColor: clockface_dist["InfluxColors"].Onyx },
            react_default.a.createElement("div", { className: "getting-started--card-digit" }, "2"),
            react_default.a.createElement(clockface_dist["Panel"].Body, null,
                react_default.a.createElement(graphics_DashboardingGraphic, { animate: dashboardingAnimating })),
            react_default.a.createElement(clockface_dist["Panel"].Footer, null,
                react_default.a.createElement(clockface_dist["Button"], { text: "Build a dashboard", color: clockface_dist["ComponentColor"].Primary, size: clockface_dist["ComponentSize"].Large, onClick: handleDashboardsClick, onMouseOver: handleDashboardsMouseOver, onMouseOut: handleDashboardsMouseOut }))),
        react_default.a.createElement(clockface_dist["Panel"], { className: "getting-started--card", backgroundColor: clockface_dist["InfluxColors"].Onyx },
            react_default.a.createElement("div", { className: "getting-started--card-digit" }, "3"),
            react_default.a.createElement(clockface_dist["Panel"].Body, null,
                react_default.a.createElement(graphics_ExploreGraphic, { animate: alertsAnimating })),
            react_default.a.createElement(clockface_dist["Panel"].Footer, null,
                react_default.a.createElement(clockface_dist["Button"], { text: "Set up alerting", color: clockface_dist["ComponentColor"].Primary, size: clockface_dist["ComponentSize"].Large, onClick: handleAlertsClick, onMouseOver: handleAlertsMouseOver, onMouseOut: handleAlertsMouseOut })))));
};
const GettingStarted_mstp = (state) => {
    const { id } = Object(selectors["a" /* getOrg */])(state);
    return {
        orgID: id,
    };
};
/* harmony default export */ var components_GettingStarted = (Object(react_router_es["g" /* withRouter */])(Object(es["b" /* connect */])(GettingStarted_mstp, null)(GettingStarted)));

// CONCATENATED MODULE: ./src/me/containers/MePage.tsx












let MePage_MePage = class MePage extends react["PureComponent"] {
    render() {
        const { me, orgName } = this.props;
        return (react_default.a.createElement(clockface_dist["Page"], { titleTag: pageTitleSuffixer(['Home']) },
            react_default.a.createElement(UserPageHeader_UserPageHeader, { userName: me.name, orgName: orgName }),
            react_default.a.createElement(clockface_dist["Page"].Contents, { fullWidth: false, scrollable: true },
                react_default.a.createElement(clockface_dist["Grid"], null,
                    react_default.a.createElement(clockface_dist["Grid"].Row, null,
                        react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Eight, widthMD: clockface_dist["Columns"].Nine },
                            react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Column, margin: clockface_dist["ComponentSize"].Small, alignItems: clockface_dist["AlignItems"].Stretch, stretchToFitWidth: true, testID: "getting-started" },
                                react_default.a.createElement(clockface_dist["Panel"], null,
                                    react_default.a.createElement(clockface_dist["Panel"].Header, null,
                                        react_default.a.createElement("h4", null, "Getting started with InfluxDB 2.0")),
                                    react_default.a.createElement(clockface_dist["Panel"].Body, null,
                                        react_default.a.createElement(components_GettingStarted, null))),
                                react_default.a.createElement(Docs_SupportLinks, null))),
                        react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Four, widthMD: clockface_dist["Columns"].Three },
                            react_default.a.createElement(Resources, { me: me })))))));
    }
};
MePage_MePage = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], MePage_MePage);

const MePage_mstp = (state) => {
    const org = Object(selectors["a" /* getOrg */])(state);
    const { me } = state;
    return { me, orgName: Object(lodash["get"])(org, 'name', '') };
};
/* harmony default export */ var containers_MePage = (Object(es["b" /* connect */])(MePage_mstp, null)(MePage_MePage));

// CONCATENATED MODULE: ./src/me/index.ts



// CONCATENATED MODULE: ./src/shared/components/NotFound.tsx

const NotFound = () => (react_default.a.createElement("div", { className: "container-fluid" },
    react_default.a.createElement("div", { className: "panel" },
        react_default.a.createElement("div", { className: "panel-heading text-center" },
            react_default.a.createElement("h1", { className: "deluxe" }, "404"),
            react_default.a.createElement("h4", null, "Bummer! We couldn't find the page you were looking for")))));
/* harmony default export */ var components_NotFound = (NotFound);

// CONCATENATED MODULE: ./src/shared/containers/GetLinks.tsx







let GetLinks_GetLinks = class GetLinks extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.state = {
            loading: types["RemoteDataState"].NotStarted,
        };
    }
    componentDidMount() {
        this.props.getLinks();
        this.setState({ loading: types["RemoteDataState"].Done });
    }
    render() {
        const { loading } = this.state;
        return (react_default.a.createElement(clockface_dist["SpinnerContainer"], { loading: loading, spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null) }, this.props.children && react_default.a.cloneElement(this.props.children)));
    }
};
GetLinks_GetLinks = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], GetLinks_GetLinks);
const GetLinks_mdtp = {
    getLinks: links_getLinks,
};
/* harmony default export */ var containers_GetLinks = (Object(es["b" /* connect */])(null, GetLinks_mdtp)(GetLinks_GetLinks));

// CONCATENATED MODULE: ./src/shared/containers/GetMe.tsx







let GetMe_GetMe = class GetMe extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.state = {
            loading: types["RemoteDataState"].NotStarted,
        };
    }
    render() {
        const { loading } = this.state;
        return (react_default.a.createElement(clockface_dist["SpinnerContainer"], { loading: loading, spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null) }, this.props.children && react_default.a.cloneElement(this.props.children)));
    }
    componentDidMount() {
        this.props.getMe();
        this.setState({ loading: types["RemoteDataState"].Done });
    }
};
GetMe_GetMe = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], GetMe_GetMe);
const GetMe_mdtp = {
    getMe: getMe,
};
/* harmony default export */ var containers_GetMe = (Object(es["b" /* connect */])(null, GetMe_mdtp)(GetMe_GetMe));

// CONCATENATED MODULE: ./src/shared/containers/UnauthenticatedApp.tsx



const UnauthenticatedApp_App = ({ children }) => (react_default.a.createElement(clockface_dist["AppWrapper"], null,
    react_default.a.createElement(notifications_Notifications, null),
    children));
/* harmony default export */ var UnauthenticatedApp = (UnauthenticatedApp_App);

// CONCATENATED MODULE: ./src/tasks/components/TaskExportOverlay.tsx






class TaskExportOverlay_TaskExportOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.onDismiss = () => {
            const { router, clearExportTemplate } = this.props;
            router.goBack();
            clearExportTemplate();
        };
    }
    componentDidMount() {
        const { params: { id }, convertToTemplate, } = this.props;
        convertToTemplate(id);
    }
    render() {
        const { taskTemplate, status } = this.props;
        return (react_default.a.createElement(components_ExportOverlay, { resourceName: "Task", resource: taskTemplate, onDismissOverlay: this.onDismiss, status: status }));
    }
}
const TaskExportOverlay_mstp = (state) => ({
    taskTemplate: state.resources.templates.exportTemplate.item,
    status: state.resources.templates.exportTemplate.status,
});
const TaskExportOverlay_mdtp = {
    convertToTemplate: tasks_actions_thunks["d" /* convertToTemplate */],
    clearExportTemplate: templates_actions_thunks["b" /* clearExportTemplate */],
};
/* harmony default export */ var components_TaskExportOverlay = (Object(es["b" /* connect */])(TaskExportOverlay_mstp, TaskExportOverlay_mdtp)(Object(react_router_es["g" /* withRouter */])(TaskExportOverlay_TaskExportOverlay)));

// CONCATENATED MODULE: ./src/tasks/components/TaskImportOverlay.tsx









class TaskImportOverlay_TaskImportOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            status: clockface_dist["ComponentStatus"].Default,
        };
        this.onDismiss = () => {
            const { router } = this.props;
            router.goBack();
        };
        this.updateOverlayStatus = (status) => this.setState(() => ({ status }));
        this.handleImportTask = (importString) => {
            const { createTaskFromTemplate, notify } = this.props;
            let template;
            this.updateOverlayStatus(clockface_dist["ComponentStatus"].Default);
            try {
                template = jsonlint_default.a.parse(importString);
            }
            catch (error) {
                this.updateOverlayStatus(clockface_dist["ComponentStatus"].Error);
                notify(Object(copy_notifications["Eb" /* invalidJSON */])(error.message));
                return;
            }
            createTaskFromTemplate(template);
            this.onDismiss();
        };
    }
    render() {
        return (react_default.a.createElement(components_ImportOverlay, { onDismissOverlay: this.onDismiss, resourceName: "Task", onSubmit: this.handleImportTask, status: this.state.status, updateStatus: this.updateOverlayStatus }));
    }
}
const TaskImportOverlay_mdtp = {
    createTaskFromTemplate: tasks_actions_thunks["e" /* createTaskFromTemplate */],
    notify: actions_notifications["c" /* notify */],
};
/* harmony default export */ var components_TaskImportOverlay = (Object(es["b" /* connect */])(null, TaskImportOverlay_mdtp)(Object(react_router_es["g" /* withRouter */])(TaskImportOverlay_TaskImportOverlay)));

// CONCATENATED MODULE: ./src/dashboards/components/VEOHeader.tsx






const saveButtonClass = 'veo-header--save-cell-button';
class VEOHeader_VEOHeader extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleClickOutsideTitle = (e) => {
            const { onSave } = this.props;
            const target = e.target;
            if (!target.className.includes(saveButtonClass)) {
                return;
            }
            onSave();
        };
    }
    render() {
        const { name, onSetName, onCancel, onSave } = this.props;
        return (react_default.a.createElement(clockface_dist["Page"].Header, { fullWidth: true },
            react_default.a.createElement(clockface_dist["Page"].HeaderLeft, null,
                react_default.a.createElement(components_RenamablePageTitle, { name: name, onRename: onSetName, placeholder: dashboards_constants["c" /* DEFAULT_CELL_NAME */], maxLength: dashboards_constants["a" /* CELL_NAME_MAX_LENGTH */], onClickOutside: this.handleClickOutsideTitle })),
            react_default.a.createElement(clockface_dist["Page"].HeaderRight, null,
                react_default.a.createElement(view_options_ViewTypeDropdown, null),
                react_default.a.createElement(components_VisOptionsButton, null),
                react_default.a.createElement(clockface_dist["SquareButton"], { icon: clockface_dist["IconFont"].Remove, onClick: onCancel, size: clockface_dist["ComponentSize"].Small, testID: "cancel-cell-edit--button" }),
                react_default.a.createElement(clockface_dist["SquareButton"], { className: saveButtonClass, icon: clockface_dist["IconFont"].Checkmark, color: clockface_dist["ComponentColor"].Success, size: clockface_dist["ComponentSize"].Small, onClick: onSave, testID: "save-cell--button" }))));
    }
}
/* harmony default export */ var components_VEOHeader = (VEOHeader_VEOHeader);

// CONCATENATED MODULE: ./src/dashboards/components/EditVEO.tsx












const EditViewVEO = ({ getViewForTimeMachine, activeTimeMachineID, onSaveView, onSetName, params: { orgID, cellID, dashboardID }, router, view, }) => {
    Object(react["useEffect"])(() => {
        getViewForTimeMachine(dashboardID, cellID, 'veo');
    }, []);
    const handleClose = () => {
        router.push(`/orgs/${orgID}/dashboards/${dashboardID}`);
    };
    const handleSave = () => {
        try {
            onSaveView(dashboardID);
            handleClose();
        }
        catch (e) { }
    };
    const viewMatchesRoute = Object(lodash["get"])(view, 'id', null) === cellID;
    let loadingState = types["RemoteDataState"].Loading;
    if (activeTimeMachineID === 'veo' && viewMatchesRoute) {
        loadingState = types["RemoteDataState"].Done;
    }
    return (react_default.a.createElement(clockface_dist["Overlay"], { visible: true, className: "veo-overlay" },
        react_default.a.createElement("div", { className: "veo" },
            react_default.a.createElement(clockface_dist["SpinnerContainer"], { spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null), loading: loadingState },
                react_default.a.createElement(components_VEOHeader, { key: view && view.name, name: view && view.name, onSetName: onSetName, onCancel: handleClose, onSave: handleSave }),
                react_default.a.createElement("div", { className: "veo-contents" },
                    react_default.a.createElement(components_TimeMachine, null))))));
};
const EditVEO_mstp = (state) => {
    const { activeTimeMachineID } = state.timeMachines;
    const { view } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    return { view, activeTimeMachineID };
};
const EditVEO_mdtp = {
    onSetName: timeMachine_actions["z" /* setName */],
    onSaveView: dashboards_actions_thunks["k" /* saveVEOView */],
    getViewForTimeMachine: actions_thunks["a" /* getViewForTimeMachine */],
};
/* harmony default export */ var EditVEO = (Object(es["b" /* connect */])(EditVEO_mstp, EditVEO_mdtp)(Object(react_router_es["g" /* withRouter */])(EditViewVEO)));

// CONCATENATED MODULE: ./src/dashboards/components/NewVEO.tsx












const NewViewVEO = ({ activeTimeMachineID, onLoadNewVEO, onSaveView, onSetName, params: { orgID, dashboardID }, router, view, }) => {
    Object(react["useEffect"])(() => {
        onLoadNewVEO(dashboardID);
    }, [dashboardID]);
    const handleClose = () => {
        router.push(`/orgs/${orgID}/dashboards/${dashboardID}`);
    };
    const handleSave = () => {
        try {
            onSaveView(dashboardID);
            handleClose();
        }
        catch (e) { }
    };
    let loadingState = types["RemoteDataState"].Loading;
    const viewIsNew = !Object(lodash["get"])(view, 'id', null);
    if (activeTimeMachineID === 'veo' && viewIsNew) {
        loadingState = types["RemoteDataState"].Done;
    }
    return (react_default.a.createElement(clockface_dist["Overlay"], { visible: true, className: "veo-overlay" },
        react_default.a.createElement("div", { className: "veo" },
            react_default.a.createElement(clockface_dist["SpinnerContainer"], { spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null), loading: loadingState },
                react_default.a.createElement(components_VEOHeader, { key: view && view.name, name: view && view.name, onSetName: onSetName, onCancel: handleClose, onSave: handleSave }),
                react_default.a.createElement("div", { className: "veo-contents" },
                    react_default.a.createElement(components_TimeMachine, null))))));
};
const NewVEO_mstp = (state) => {
    const { activeTimeMachineID } = state.timeMachines;
    const { view } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    return { view, activeTimeMachineID };
};
const NewVEO_mdtp = {
    onSetName: timeMachine_actions["z" /* setName */],
    onSaveView: dashboards_actions_thunks["k" /* saveVEOView */],
    onLoadNewVEO: timeMachine_actions["e" /* loadNewVEO */],
};
/* harmony default export */ var NewVEO = (Object(es["b" /* connect */])(NewVEO_mstp, NewVEO_mdtp)(Object(react_router_es["g" /* withRouter */])(NewViewVEO)));

// CONCATENATED MODULE: ./src/onboarding/components/InitStep.tsx





let InitStep_InitStep = class InitStep extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleNext = () => {
            const { onSetStepStatus, currentStepIndex, onIncrementCurrentStepIndex, } = this.props;
            onSetStepStatus(currentStepIndex, wizard["b" /* StepStatus */].Complete);
            onIncrementCurrentStepIndex();
        };
    }
    render() {
        return (react_default.a.createElement("div", { className: "wizard--bookend-step" },
            react_default.a.createElement("div", { className: "splash-logo primary" }),
            react_default.a.createElement("h3", { className: "wizard-step--title", "data-testid": "init-step--head-main" }, "Welcome to InfluxDB 2.0"),
            react_default.a.createElement("h5", { className: "wizard-step--sub-title", "data-testid": "init-step--head-sub" }, "Get started in just a few easy steps"),
            react_default.a.createElement(clockface_dist["Button"], { color: clockface_dist["ComponentColor"].Primary, text: "Get Started", size: clockface_dist["ComponentSize"].Large, onClick: this.handleNext, testID: "onboarding-get-started" })));
    }
};
InitStep_InitStep = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], InitStep_InitStep);
/* harmony default export */ var components_InitStep = (InitStep_InitStep);

// EXTERNAL MODULE: ./src/onboarding/components/OnboardingButtons.tsx
var OnboardingButtons = __webpack_require__(202);

// CONCATENATED MODULE: ./src/onboarding/components/AdminStep.tsx








let AdminStep_AdminStep = class AdminStep extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleUsername = (e) => {
            const username = e.target.value;
            this.setState({ username });
        };
        this.handlePassword = (e) => {
            const { confirmPassword } = this.state;
            const password = e.target.value;
            const isPassMismatched = confirmPassword && password !== confirmPassword;
            this.setState({ password, isPassMismatched });
        };
        this.handleConfirmPassword = (e) => {
            const { password } = this.state;
            const confirmPassword = e.target.value;
            const isPassMismatched = confirmPassword && password !== confirmPassword;
            this.setState({ confirmPassword, isPassMismatched });
        };
        this.handleOrg = (e) => {
            const org = e.target.value;
            this.setState({ org });
        };
        this.handleBucket = (e) => {
            const bucket = e.target.value;
            this.setState({ bucket });
        };
        this.orgTip = () => {
            return (react_default.a.createElement(clockface_dist["QuestionMarkTooltip"], { diameter: 16, style: { marginLeft: '8px' }, color: clockface_dist["ComponentColor"].Primary, testID: "admin_org_tooltip", tooltipStyle: { width: '300px' }, tooltipContents: "An organization is a workspace for a group of users requiring access to time series data, dashboards, and other resources.\n        You can create organizations for different functional groups, teams, or projects." }));
        };
        this.bucketTip = () => {
            return (react_default.a.createElement(clockface_dist["QuestionMarkTooltip"], { diameter: 16, style: { marginLeft: '8px' }, color: clockface_dist["ComponentColor"].Primary, testID: "admin_bucket_tooltip", tooltipStyle: { width: '300px' }, tooltipContents: "A bucket is where your time series data is stored with a retention policy." }));
        };
        this.handleNext = async () => {
            const { onIncrementCurrentStepIndex, onSetupAdmin: onSetupAdmin, onSetStepStatus, currentStepIndex, } = this.props;
            const { username, password, org, bucket } = this.state;
            if (this.isAdminSet) {
                onSetStepStatus(currentStepIndex, wizard["b" /* StepStatus */].Complete);
                onIncrementCurrentStepIndex();
                return;
            }
            const setupParams = {
                username,
                password,
                org,
                bucket,
            };
            const isAdminSet = await onSetupAdmin(setupParams);
            if (isAdminSet) {
                onIncrementCurrentStepIndex();
            }
        };
        const { setupParams } = props;
        const username = getDeep(setupParams, 'username', '');
        const password = getDeep(setupParams, 'password', '');
        const confirmPassword = getDeep(setupParams, 'password', '');
        const org = getDeep(setupParams, 'org', '');
        const bucket = getDeep(setupParams, 'bucket', '');
        this.state = {
            username,
            password,
            confirmPassword,
            org,
            bucket,
            isPassMismatched: false,
        };
    }
    render() {
        const { username, password, confirmPassword, org, bucket, isPassMismatched, } = this.state;
        const icon = this.InputIcon;
        const status = this.InputStatus;
        return (react_default.a.createElement("div", { className: "onboarding-step" },
            react_default.a.createElement(clockface_dist["Form"], { onSubmit: this.handleNext },
                react_default.a.createElement("div", { className: "wizard-step--scroll-area" },
                    react_default.a.createElement("div", { className: "wizard-step--scroll-content" },
                        react_default.a.createElement("h3", { className: "wizard-step--title", "data-testid": "admin-step--head-main" }, "Setup Initial User"),
                        react_default.a.createElement("h5", { className: "wizard-step--sub-title", "data-testid": "admin-step--head-sub" }, "You will be able to create additional Users, Buckets and Organizations later"),
                        react_default.a.createElement(clockface_dist["Grid"], null,
                            react_default.a.createElement(clockface_dist["Grid"].Row, null,
                                react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve, widthMD: clockface_dist["Columns"].Ten, offsetMD: clockface_dist["Columns"].One },
                                    react_default.a.createElement(clockface_dist["Form"].Element, { label: "Username" },
                                        react_default.a.createElement(clockface_dist["Input"], { value: username, onChange: this.handleUsername, titleText: "Username", size: clockface_dist["ComponentSize"].Medium, icon: icon, status: status, disabledTitleText: "Username has been set", autoFocus: true, testID: "input-field--username" }))),
                                react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Six, widthMD: clockface_dist["Columns"].Five, offsetMD: clockface_dist["Columns"].One },
                                    react_default.a.createElement(clockface_dist["Form"].Element, { label: "Password" },
                                        react_default.a.createElement(clockface_dist["Input"], { type: clockface_dist["InputType"].Password, value: password, onChange: this.handlePassword, titleText: "Password", size: clockface_dist["ComponentSize"].Medium, icon: icon, status: status, disabledTitleText: "Password has been set", testID: "input-field--password" }))),
                                react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Six, widthMD: clockface_dist["Columns"].Five },
                                    react_default.a.createElement(clockface_dist["Form"].Element, { label: "Confirm Password", errorMessage: isPassMismatched && 'Passwords do not match' },
                                        react_default.a.createElement(clockface_dist["Input"], { type: clockface_dist["InputType"].Password, value: confirmPassword, onChange: this.handleConfirmPassword, titleText: "Confirm Password", size: clockface_dist["ComponentSize"].Medium, icon: icon, status: this.passwordStatus, disabledTitleText: "password has been set", testID: "input-field--password-chk" }))),
                                react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve, widthMD: clockface_dist["Columns"].Ten, offsetMD: clockface_dist["Columns"].One },
                                    react_default.a.createElement(clockface_dist["Form"].Element, { label: "Initial Organization Name", labelAddOn: this.orgTip, testID: "form-elem--orgname" },
                                        react_default.a.createElement(clockface_dist["Input"], { value: org, onChange: this.handleOrg, titleText: "Initial Organization Name", size: clockface_dist["ComponentSize"].Medium, icon: icon, status: clockface_dist["ComponentStatus"].Default, placeholder: "An organization is a workspace for a group of users.", disabledTitleText: "Initial organization name has been set", testID: "input-field--orgname" }))),
                                react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve, widthMD: clockface_dist["Columns"].Ten, offsetMD: clockface_dist["Columns"].One },
                                    react_default.a.createElement(clockface_dist["Form"].Element, { label: "Initial Bucket Name", labelAddOn: this.bucketTip, testID: "form-elem--bucketname" },
                                        react_default.a.createElement(clockface_dist["Input"], { value: bucket, onChange: this.handleBucket, titleText: "Initial Bucket Name", size: clockface_dist["ComponentSize"].Medium, icon: icon, status: status, placeholder: "A bucket is where your time series data is stored with a retention policy.", disabledTitleText: "Initial bucket name has been set", testID: "input-field--bucketname" }))))))),
                react_default.a.createElement(OnboardingButtons["a" /* default */], { nextButtonStatus: this.nextButtonStatus, autoFocusNext: false }))));
    }
    get isAdminSet() {
        const { stepStatuses, currentStepIndex } = this.props;
        if (stepStatuses[currentStepIndex] === wizard["b" /* StepStatus */].Complete) {
            return true;
        }
        return false;
    }
    get nextButtonStatus() {
        if (this.areInputsValid) {
            return clockface_dist["ComponentStatus"].Default;
        }
        return clockface_dist["ComponentStatus"].Disabled;
    }
    get areInputsValid() {
        const { username, password, org, bucket, confirmPassword, isPassMismatched, } = this.state;
        return (username &&
            password &&
            confirmPassword &&
            org &&
            bucket &&
            !isPassMismatched);
    }
    get passwordStatus() {
        const { isPassMismatched } = this.state;
        if (this.isAdminSet) {
            return clockface_dist["ComponentStatus"].Disabled;
        }
        if (isPassMismatched) {
            return clockface_dist["ComponentStatus"].Error;
        }
        return clockface_dist["ComponentStatus"].Default;
    }
    get InputStatus() {
        if (this.isAdminSet) {
            return clockface_dist["ComponentStatus"].Disabled;
        }
        return clockface_dist["ComponentStatus"].Default;
    }
    get InputIcon() {
        if (this.isAdminSet) {
            return clockface_dist["IconFont"].Checkmark;
        }
        return null;
    }
};
AdminStep_AdminStep = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], AdminStep_AdminStep);
/* harmony default export */ var components_AdminStep = (AdminStep_AdminStep);

// CONCATENATED MODULE: ./src/shared/components/resource_fetcher/ResourceFetcher.tsx


class ResourceFetcher_ResourceFetcher extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.state = {
            resources: null,
            loading: types["RemoteDataState"].NotStarted,
        };
    }
    async componentDidMount() {
        const { fetcher } = this.props;
        let resources;
        try {
            resources = await fetcher();
        }
        catch (error) {
            console.error(error);
        }
        this.setState({ resources, loading: types["RemoteDataState"].Done });
    }
    render() {
        const { resources, loading } = this.state;
        return this.props.children(resources, loading);
    }
}

// CONCATENATED MODULE: ./src/shared/components/resource_fetcher/index.ts

/* harmony default export */ var resource_fetcher = (ResourceFetcher_ResourceFetcher);

// CONCATENATED MODULE: ./src/onboarding/components/CompletionAdvancedButton.tsx






let CompletionAdvancedButton_CompletionAdvancedButton = class CompletionAdvancedButton extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleAdvanced = () => {
            const { router, orgs, onExit } = this.props;
            const id = lodash_default.a.get(orgs, '0.id', null);
            if (id) {
                router.push(`/orgs/${id}/load-data/buckets`);
            }
            else {
                onExit();
            }
        };
    }
    render() {
        return (react_default.a.createElement(clockface_dist["Button"], { text: "Advanced", color: clockface_dist["ComponentColor"].Success, size: clockface_dist["ComponentSize"].Large, onClick: this.handleAdvanced, testID: "button--advanced" }));
    }
};
CompletionAdvancedButton_CompletionAdvancedButton = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], CompletionAdvancedButton_CompletionAdvancedButton);
/* harmony default export */ var components_CompletionAdvancedButton = (Object(react_router_es["g" /* withRouter */])(CompletionAdvancedButton_CompletionAdvancedButton));

// CONCATENATED MODULE: ./src/onboarding/components/CompletionQuickStartButton.tsx






let CompletionQuickStartButton_CompletionQuickStartButton = class CompletionQuickStartButton extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleAdvanced = () => {
            const { router, dashboards, onExit } = this.props;
            const id = lodash_default.a.get(dashboards, '[0].id', null);
            if (id) {
                router.push(`/dashboards/${id}`);
            }
            else {
                onExit();
            }
        };
    }
    render() {
        return (react_default.a.createElement(clockface_dist["Button"], { text: "Quick Start", color: clockface_dist["ComponentColor"].Success, size: clockface_dist["ComponentSize"].Large, onClick: this.handleAdvanced, testID: "button--quick-start" }));
    }
};
CompletionQuickStartButton_CompletionQuickStartButton = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], CompletionQuickStartButton_CompletionQuickStartButton);
/* harmony default export */ var components_CompletionQuickStartButton = (Object(react_router_es["g" /* withRouter */])(CompletionQuickStartButton_CompletionQuickStartButton));

// EXTERNAL MODULE: ./src/schemas/dashboards.ts
var schemas_dashboards = __webpack_require__(136);

// CONCATENATED MODULE: ./src/organizations/apis/index.ts


const getDashboards = async (org) => {
    try {
        let result;
        if (org) {
            result = await Object(client["A" /* getDashboards */])({ query: { orgID: org.id } });
        }
        else {
            result = await Object(client["A" /* getDashboards */])({});
        }
        if (result.status !== 200) {
            throw new Error(result.data.message);
        }
        const dashboards = result.data.dashboards.map(d => Object(schemas_dashboards["a" /* addDashboardDefaults */])(d));
        return dashboards;
    }
    catch (error) {
        console.error('Could not get buckets for org', error);
        throw error;
    }
};

// EXTERNAL MODULE: ./src/templates/api/index.ts + 1 modules
var templates_api = __webpack_require__(278);

// CONCATENATED MODULE: ./src/onboarding/components/CompletionStep.tsx
















const CompletionStep_getOrganizations = async () => {
    const resp = await client["G" /* getOrgs */]({});
    if (resp.status !== 200) {
        throw new Error(resp.data.message);
    }
    return resp.data.orgs;
};
let CompletionStep_CompletionStep = class CompletionStep extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleQuickStart = async () => {
            try {
                await api["a" /* client */].scrapers.create({
                    name: 'new target',
                    type: dist["d" /* ScraperTargetRequest */].TypeEnum.Prometheus,
                    url: constants_pluginConfigs["c" /* QUICKSTART_SCRAPER_TARGET_URL */],
                    bucketID: this.props.bucketID,
                    orgID: this.props.orgID,
                });
                this.props.notify(copy_notifications["d" /* QuickstartScraperCreationSuccess */]);
            }
            catch (err) {
                this.props.notify(copy_notifications["c" /* QuickstartScraperCreationError */]);
            }
            try {
                await Object(templates_api["a" /* createDashboardFromTemplate */])(Object(defaultTemplates["b" /* ossMetricsTemplate */])(), this.props.orgID);
                this.props.notify(copy_notifications["b" /* QuickstartDashboardCreationSuccess */]);
            }
            catch (err) {
                this.props.notify(copy_notifications["a" /* QuickstartDashboardCreationError */]);
            }
            this.props.onExit();
        };
        this.handleKeydown = (e) => {
            if (e.key === 'Enter') {
                this.props.onExit();
            }
        };
    }
    componentDidMount() {
        window.addEventListener('keydown', this.handleKeydown);
    }
    componentWillUnmount() {
        window.removeEventListener('keydown', this.handleKeydown);
    }
    render() {
        const { onExit } = this.props;
        return (react_default.a.createElement("div", { className: "onboarding-step" },
            react_default.a.createElement("div", { className: "wizard-step--scroll-area" },
                react_default.a.createElement(FancyScrollbar["a" /* default */], { autoHide: false },
                    react_default.a.createElement("div", { className: "wizard-step--scroll-content" },
                        react_default.a.createElement("h3", { className: "wizard-step--title" }, "You are ready to go!"),
                        react_default.a.createElement("h5", { className: "wizard-step--sub-title" }, "Your InfluxDB 2.0 has 1 organization, 1 user, and 1 bucket."),
                        react_default.a.createElement("div", { className: "splash-logo secondary" }),
                        react_default.a.createElement("h3", { className: "wizard-step--title" }, "Let\u2019s start collecting data!"),
                        react_default.a.createElement("dl", { className: "wizard-completion--options" },
                            react_default.a.createElement(clockface_dist["Grid"], null,
                                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve, widthSM: clockface_dist["Columns"].Four },
                                        react_default.a.createElement("div", { className: "wizard-completion--option" },
                                            react_default.a.createElement(resource_fetcher, { fetcher: getDashboards }, dashboards => (react_default.a.createElement(components_CompletionQuickStartButton, { onExit: this.handleQuickStart, dashboards: dashboards }))),
                                            react_default.a.createElement("dt", null, "Timing is everything!"),
                                            react_default.a.createElement("dd", null, "This will set up local metric collection and allow you to explore the features of InfluxDB 2.0 quickly."))),
                                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve, widthSM: clockface_dist["Columns"].Four },
                                        react_default.a.createElement("div", { className: "wizard-completion--option" },
                                            react_default.a.createElement(resource_fetcher, { fetcher: CompletionStep_getOrganizations }, orgs => (react_default.a.createElement(components_CompletionAdvancedButton, { onExit: onExit, orgs: orgs }))),
                                            react_default.a.createElement("dt", null, "Whoa looks like you\u2019re an expert!"),
                                            react_default.a.createElement("dd", null, "This allows you to set up Telegraf, scrapers, and much more."))),
                                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve, widthSM: clockface_dist["Columns"].Four },
                                        react_default.a.createElement("div", { className: "wizard-completion--option" },
                                            react_default.a.createElement(clockface_dist["Button"], { text: "Configure Later", color: clockface_dist["ComponentColor"].Success, size: clockface_dist["ComponentSize"].Large, onClick: onExit, testID: "button--conf-later" }),
                                            react_default.a.createElement("dt", null, "I've got this..."),
                                            react_default.a.createElement("dd", null, "Jump into InfluxDB 2.0 and set up data collection when you\u2019re ready.")))))),
                        react_default.a.createElement("h5", { className: "wizard-step--sub-title" }))))));
    }
};
CompletionStep_CompletionStep = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], CompletionStep_CompletionStep);
/* harmony default export */ var components_CompletionStep = (CompletionStep_CompletionStep);

// CONCATENATED MODULE: ./src/onboarding/components/OnboardingStepSwitcher.tsx






let OnboardingStepSwitcher_OnboardingStepSwitcher = class OnboardingStepSwitcher extends react["PureComponent"] {
    render() {
        const { currentStepIndex, orgID, bucketID, onboardingStepProps, onSetupAdmin, } = this.props;
        switch (currentStepIndex) {
            case 0:
                return react_default.a.createElement(components_InitStep, Object.assign({}, onboardingStepProps));
            case 1:
                return (react_default.a.createElement(components_AdminStep, Object.assign({}, onboardingStepProps, { onSetupAdmin: onSetupAdmin })));
            case 2:
                return (react_default.a.createElement(components_CompletionStep, Object.assign({}, onboardingStepProps, { orgID: orgID, bucketID: bucketID })));
            default:
                return react_default.a.createElement("div", null);
        }
    }
};
OnboardingStepSwitcher_OnboardingStepSwitcher = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], OnboardingStepSwitcher_OnboardingStepSwitcher);
/* harmony default export */ var components_OnboardingStepSwitcher = (OnboardingStepSwitcher_OnboardingStepSwitcher);

// CONCATENATED MODULE: ./src/onboarding/actions/index.ts






const setSetupParams = (setupParams) => ({
    type: 'SET_SETUP_PARAMS',
    payload: { setupParams },
});
const setStepStatus = (index, status) => ({
    type: 'SET_STEP_STATUS',
    payload: {
        index,
        status,
    },
});
const setOrganizationID = (orgID) => ({
    type: 'SET_ORG_ID',
    payload: { orgID },
});
const setBucketID = (bucketID) => ({
    type: 'SET_ONBOARDING_BUCKET_ID',
    payload: { bucketID },
});
const setupAdmin = (params) => async (dispatch) => {
    try {
        dispatch(setSetupParams(params));
        const response = await api["a" /* client */].setup.create(params);
        const { id: orgID } = response.org;
        const { id: bucketID } = response.bucket;
        dispatch(setOrganizationID(orgID));
        dispatch(setBucketID(bucketID));
        const { username, password } = params;
        const resp = await client["rb" /* postSignin */]({ auth: { username, password } });
        if (resp.status !== 204) {
            throw new Error(resp.data.message);
        }
        dispatch(Object(actions_notifications["c" /* notify */])(copy_notifications["f" /* SetupSuccess */]));
        dispatch(setStepStatus(1, wizard["b" /* StepStatus */].Complete));
        return true;
    }
    catch (err) {
        console.error(err);
        const message = lodash_default.a.get(err, 'response.data.message', '');
        dispatch(Object(actions_notifications["c" /* notify */])(Object(copy_notifications["e" /* SetupError */])(message)));
        dispatch(setStepStatus(1, wizard["b" /* StepStatus */].Error));
    }
};

// CONCATENATED MODULE: ./src/onboarding/containers/OnboardingWizard.tsx









let OnboardingWizard_OnboardingWizard = class OnboardingWizard extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.stepTitles = ['Welcome', 'Initial User Setup', 'Complete'];
        this.stepTestIds = [
            'nav-step--welcome',
            'nav-step--setup',
            'nav-step--complete',
        ];
        this.stepSkippable = [true, false, false];
        this.handleExit = () => {
            const { router, onCompleteSetup } = this.props;
            onCompleteSetup();
            router.push(`/`);
        };
    }
    render() {
        const { currentStepIndex, orgID, bucketID, setupParams, onSetupAdmin, } = this.props;
        return (react_default.a.createElement(clockface["l" /* WizardFullScreen */], null,
            this.progressHeader,
            react_default.a.createElement("div", { className: "wizard-contents" },
                react_default.a.createElement("div", { className: "wizard-step--container" },
                    react_default.a.createElement(components_OnboardingStepSwitcher, { currentStepIndex: currentStepIndex, onboardingStepProps: this.onboardingStepProps, setupParams: setupParams, onSetupAdmin: onSetupAdmin, orgID: orgID, bucketID: bucketID })))));
    }
    get progressHeader() {
        const { stepStatuses, currentStepIndex, onSetCurrentStepIndex } = this.props;
        if (currentStepIndex === 0) {
            return react_default.a.createElement("div", { className: "wizard--progress-header hidden" });
        }
        return (react_default.a.createElement(clockface["m" /* WizardProgressHeader */], null,
            react_default.a.createElement(clockface["j" /* ProgressBar */], { currentStepIndex: currentStepIndex, handleSetCurrentStep: onSetCurrentStepIndex, stepStatuses: stepStatuses, stepTitles: this.stepTitles, stepTestIds: this.stepTestIds, stepSkippable: this.stepSkippable })));
    }
    get onboardingStepProps() {
        const { stepStatuses, links, notify, onCompleteSetup, setupParams, currentStepIndex, onSetStepStatus, onSetSetupParams, onSetCurrentStepIndex, onSetSubstepIndex, onDecrementCurrentStepIndex, onIncrementCurrentStepIndex, } = this.props;
        return {
            stepStatuses,
            stepTitles: this.stepTitles,
            stepTestIds: this.stepTestIds,
            currentStepIndex,
            onSetCurrentStepIndex,
            onSetSubstepIndex,
            onIncrementCurrentStepIndex,
            onDecrementCurrentStepIndex,
            onSetStepStatus,
            links,
            setupParams,
            handleSetSetupParams: onSetSetupParams,
            notify,
            onCompleteSetup,
            onExit: this.handleExit,
        };
    }
};
OnboardingWizard_OnboardingWizard = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], OnboardingWizard_OnboardingWizard);
const OnboardingWizard_mstp = ({ links, onboarding: { stepStatuses, setupParams, orgID, bucketID }, }) => ({
    links,
    stepStatuses,
    setupParams,
    orgID,
    bucketID,
});
const OnboardingWizard_mdtp = {
    notify: actions_notifications["c" /* notify */],
    onSetSetupParams: setSetupParams,
    onSetStepStatus: setStepStatus,
    onSetupAdmin: setupAdmin,
};
/* harmony default export */ var containers_OnboardingWizard = (Object(es["b" /* connect */])(OnboardingWizard_mstp, OnboardingWizard_mdtp)(Object(react_router_es["g" /* withRouter */])(OnboardingWizard_OnboardingWizard)));

// CONCATENATED MODULE: ./src/onboarding/containers/OnboardingWizardPage.tsx












let OnboardingWizardPage_OnboardingWizardPage = class OnboardingWizardPage extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleCompleteSetup = () => {
            this.setState({ isSetupComplete: true });
        };
        this.redirectToHome = () => {
            this.props.router.push('/');
        };
        this.handleDecrementStepIndex = () => {
            const { params: { stepID }, } = this.props;
            this.setStepIndex(+stepID - 1);
        };
        this.handleIncrementStepIndex = () => {
            const { params: { stepID }, } = this.props;
            this.setStepIndex(+stepID + 1);
        };
        this.setStepIndex = (index) => {
            const { router } = this.props;
            router.push(`/onboarding/${index}`);
        };
        this.setSubstepIndex = (index, subStep) => {
            const { router } = this.props;
            router.push(`/onboarding/${index}/${subStep}`);
        };
        this.state = {
            loading: types["RemoteDataState"].NotStarted,
            isSetupComplete: false,
        };
    }
    async componentDidMount() {
        this.setState({ loading: types["RemoteDataState"].Loading });
        try {
            const { allowed } = await api["a" /* client */].setup.status();
            if (!allowed) {
                this.setState({ isSetupComplete: true });
            }
            this.setState({ loading: types["RemoteDataState"].Done });
        }
        catch (error) {
            console.error(error);
            this.setState({ loading: types["RemoteDataState"].Error });
        }
    }
    render() {
        const { params } = this.props;
        const { isSetupComplete } = this.state;
        if (isSetupComplete) {
            return (react_default.a.createElement(clockface_dist["SpinnerContainer"], { loading: this.state.loading, spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null) },
                react_default.a.createElement(clockface["l" /* WizardFullScreen */], null,
                    react_default.a.createElement("div", { className: "wizard-contents" },
                        react_default.a.createElement("div", { className: "wizard-step--container" },
                            react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Large },
                                react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                                    react_default.a.createElement("b", null, "Initial User"),
                                    " is already set up, nothing to see here folks!"),
                                react_default.a.createElement(clockface_dist["Button"], { text: "Return to Home Page", onClick: this.redirectToHome, color: clockface_dist["ComponentColor"].Primary })))))));
        }
        return (react_default.a.createElement(clockface_dist["AppWrapper"], null,
            react_default.a.createElement(clockface_dist["SpinnerContainer"], { loading: this.state.loading, spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null) },
                react_default.a.createElement(notifications_Notifications, { inPresentationMode: true }),
                react_default.a.createElement(containers_OnboardingWizard, { onDecrementCurrentStepIndex: this.handleDecrementStepIndex, onIncrementCurrentStepIndex: this.handleIncrementStepIndex, onSetCurrentStepIndex: this.setStepIndex, onSetSubstepIndex: this.setSubstepIndex, currentStepIndex: +params.stepID, onCompleteSetup: this.handleCompleteSetup }))));
    }
};
OnboardingWizardPage_OnboardingWizardPage = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], OnboardingWizardPage_OnboardingWizardPage);

const OnboardingWizardPage_mstp = ({ links }) => ({ links });
/* harmony default export */ var containers_OnboardingWizardPage = (Object(es["b" /* connect */])(OnboardingWizardPage_mstp, null)(Object(react_router_es["g" /* withRouter */])(OnboardingWizardPage_OnboardingWizardPage)));

// CONCATENATED MODULE: ./src/settings/components/LoadDataNavigation.tsx








let LoadDataNavigation_LoadDataNavigation = class LoadDataNavigation extends react["PureComponent"] {
    render() {
        const { activeTab, orgID, router } = this.props;
        const handleTabClick = (id) => {
            router.push(`/orgs/${orgID}/load-data/${id}`);
        };
        const tabs = [
            {
                text: 'Buckets',
                id: 'buckets',
                cloudExclude: false,
                featureFlag: null,
            },
            {
                text: 'Telegraf',
                id: 'telegrafs',
                cloudExclude: false,
                featureFlag: null,
            },
            {
                text: 'Scrapers',
                id: 'scrapers',
                cloudExclude: true,
                featureFlag: null,
            },
            {
                text: 'Tokens',
                id: 'tokens',
                cloudExclude: false,
                featureFlag: null,
            },
            {
                text: 'Client Libraries',
                id: 'client-libraries',
                cloudExclude: false,
                featureFlag: null,
            },
        ];
        return (react_default.a.createElement(clockface_dist["Tabs"], { orientation: clockface_dist["Orientation"].Horizontal, padding: clockface_dist["ComponentSize"].Large, backgroundColor: `${chroma_default()(`${clockface_dist["InfluxColors"].Castle}`).alpha(0.1)}` }, tabs.map(t => {
            let tabElement = (react_default.a.createElement(clockface_dist["Tabs"].Tab, { key: t.id, text: t.text, id: t.id, onClick: handleTabClick, active: t.id === activeTab, size: clockface_dist["ComponentSize"].Large, backgroundColor: clockface_dist["InfluxColors"].Castle }));
            if (t.cloudExclude) {
                tabElement = react_default.a.createElement(CloudExclude, { key: t.id }, tabElement);
            }
            if (t.featureFlag) {
                tabElement = (react_default.a.createElement(featureFlag["a" /* FeatureFlag */], { key: t.id, name: t.featureFlag }, tabElement));
            }
            return tabElement;
        })));
    }
};
LoadDataNavigation_LoadDataNavigation = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], LoadDataNavigation_LoadDataNavigation);
/* harmony default export */ var components_LoadDataNavigation = (Object(react_router_es["g" /* withRouter */])(LoadDataNavigation_LoadDataNavigation));

// CONCATENATED MODULE: ./src/settings/components/LoadDataTabbedPage.tsx





let LoadDataTabbedPage_LoadDataTabbedPage = class LoadDataTabbedPage extends react["PureComponent"] {
    render() {
        const { activeTab, orgID, children } = this.props;
        return (react_default.a.createElement(clockface_dist["Page"].Contents, { fullWidth: false, scrollable: true },
            react_default.a.createElement(clockface_dist["Tabs"].Container, { orientation: clockface_dist["Orientation"].Horizontal, className: "tabs tabbed-page" },
                react_default.a.createElement(components_LoadDataNavigation, { activeTab: activeTab, orgID: orgID }),
                react_default.a.createElement(clockface_dist["Tabs"].TabContents, { padding: clockface_dist["ComponentSize"].Large, backgroundColor: clockface_dist["InfluxColors"].Castle }, children))));
    }
};
LoadDataTabbedPage_LoadDataTabbedPage = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], LoadDataTabbedPage_LoadDataTabbedPage);
/* harmony default export */ var components_LoadDataTabbedPage = (LoadDataTabbedPage_LoadDataTabbedPage);

// CONCATENATED MODULE: ./src/settings/components/LoadDataHeader.tsx



class LoadDataHeader_LoadDataHeader extends react["Component"] {
    render() {
        return (react_default.a.createElement(clockface_dist["Page"].Header, { fullWidth: false },
            react_default.a.createElement(clockface_dist["Page"].HeaderLeft, null,
                react_default.a.createElement(components_PageTitleWithOrg, { title: "Load Data" })),
            react_default.a.createElement(clockface_dist["Page"].HeaderRight, null)));
    }
}
/* harmony default export */ var components_LoadDataHeader = (LoadDataHeader_LoadDataHeader);

// CONCATENATED MODULE: ./src/settings/components/SettingsTabbedPageHeader.tsx


const SettingsTabbedPageHeader = ({ children, className }) => (react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, justifyContent: clockface_dist["JustifyContent"].SpaceBetween, style: { marginBottom: '32px' }, className: className }, children));
/* harmony default export */ var components_SettingsTabbedPageHeader = (SettingsTabbedPageHeader);

// CONCATENATED MODULE: ./src/buckets/components/BucketContextMenu.tsx



class BucketContextMenu_BucketContextMenu extends react["PureComponent"] {
    render() {
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface["f" /* Context */], { align: clockface["a" /* Alignment */].Center },
                react_default.a.createElement(clockface_dist["FlexBox"], { alignItems: clockface_dist["AlignItems"].Center, direction: clockface_dist["FlexDirection"].Row, margin: clockface["d" /* ComponentSize */].Small }, this.deleteButton))));
    }
    get deleteButton() {
        const { bucket, onDeleteBucket } = this.props;
        if (bucket.type === 'user') {
            return (react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface_dist["IconFont"].Trash, color: clockface_dist["ComponentColor"].Danger, shape: clockface_dist["ButtonShape"].Default, text: "Delete Bucket", testID: `context-delete-menu ${bucket.name}` },
                react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Confirm", action: onDeleteBucket, value: bucket, testID: `context-delete-bucket ${bucket.name}` })));
        }
        else {
            return null;
        }
    }
}

// CONCATENATED MODULE: ./src/buckets/components/BucketAddDataButton.tsx



class BucketAddDataButton_BucketAddDataButton extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.triggerRef = Object(react["createRef"])();
    }
    render() {
        const { onAddCollector, onAddLineProtocol, onAddScraper } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Popover"], { color: clockface_dist["ComponentColor"].Secondary, appearance: clockface_dist["Appearance"].Outline, position: clockface_dist["PopoverPosition"].ToTheRight, triggerRef: this.triggerRef, distanceFromTrigger: 8, contents: onHide => (react_default.a.createElement("div", { className: "bucket-add-data", onClick: onHide },
                    react_default.a.createElement("div", { className: "bucket-add-data--option", onClick: onAddCollector },
                        react_default.a.createElement("div", { className: "bucket-add-data--option-header" }, "Configure Telegraf Agent"),
                        react_default.a.createElement("div", { className: "bucket-add-data--option-desc" }, "Configure a Telegraf agent to push data into your bucket.")),
                    react_default.a.createElement("div", { className: "bucket-add-data--option", onClick: onAddLineProtocol },
                        react_default.a.createElement("div", { className: "bucket-add-data--option-header", "data-testid": "bucket-add-line-protocol" }, "Line Protocol"),
                        react_default.a.createElement("div", { className: "bucket-add-data--option-desc" }, "Quickly load an existing line protocol file.")),
                    react_default.a.createElement(CloudExclude, null,
                        react_default.a.createElement("div", { className: "bucket-add-data--option", onClick: onAddScraper },
                            react_default.a.createElement("div", { className: "bucket-add-data--option-header" }, "Scrape Metrics"),
                            react_default.a.createElement("div", { className: "bucket-add-data--option-desc" }, "Add a scrape target to pull data into your bucket."))))) }),
            react_default.a.createElement(clockface_dist["Button"], { ref: this.triggerRef, text: "Add Data", testID: "add-data--button", icon: clockface_dist["IconFont"].Plus, size: clockface_dist["ComponentSize"].ExtraSmall, color: clockface_dist["ComponentColor"].Secondary })));
    }
}

// EXTERNAL MODULE: ./src/buckets/actions/thunks.ts
var buckets_actions_thunks = __webpack_require__(252);

// CONCATENATED MODULE: ./src/buckets/components/BucketCard.tsx











class BucketCard_BucketRow extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleAddLabel = (label) => {
            const { bucket, onAddBucketLabel } = this.props;
            onAddBucketLabel(bucket.id, label);
        };
        this.handleRemoveLabel = (label) => {
            const { bucket, onDeleteBucketLabel } = this.props;
            onDeleteBucketLabel(bucket.id, label);
        };
        this.handleDeleteData = () => {
            const { onDeleteData, bucket } = this.props;
            onDeleteData(bucket);
        };
        this.handleRenameBucket = () => {
            const { params: { orgID }, bucket: { id }, router, } = this.props;
            router.push(`/orgs/${orgID}/load-data/buckets/${id}/rename`);
        };
        this.handleNameClick = () => {
            const { params: { orgID }, bucket: { id }, router, } = this.props;
            router.push(`/orgs/${orgID}/load-data/buckets/${id}/edit`);
        };
        this.handleAddCollector = () => {
            const { params: { orgID }, bucket: { id }, } = this.props;
            const link = `/orgs/${orgID}/load-data/buckets/${id}/telegrafs/new`;
            this.props.onAddData(this.props.bucket, dataLoaders["e" /* DataLoaderType */].Streaming, link);
        };
        this.handleAddLineProtocol = () => {
            const { params: { orgID }, bucket: { id }, } = this.props;
            const link = `/orgs/${orgID}/load-data/buckets/${id}/line-protocols/new`;
            this.props.onAddData(this.props.bucket, dataLoaders["e" /* DataLoaderType */].LineProtocol, link);
        };
        this.handleAddScraper = () => {
            const { params: { orgID }, bucket: { id }, } = this.props;
            const link = `/orgs/${orgID}/load-data/buckets/${id}/scrapers/new`;
            this.props.onAddData(this.props.bucket, dataLoaders["e" /* DataLoaderType */].Scraping, link);
        };
    }
    render() {
        const { bucket, onDeleteBucket } = this.props;
        return (react_default.a.createElement(clockface_dist["ResourceCard"], { testID: `bucket-card ${bucket.name}`, contextMenu: !Object(buckets_constants["b" /* isSystemBucket */])(bucket.name) && (react_default.a.createElement(BucketContextMenu_BucketContextMenu, { bucket: bucket, onDeleteBucket: onDeleteBucket })), name: this.cardName, metaData: this.cardMetaItems }, this.actionButtons));
    }
    get cardName() {
        const { bucket } = this.props;
        if (bucket.type === 'user') {
            return (react_default.a.createElement(clockface_dist["ResourceCard"].Name, { testID: `bucket--card--name ${bucket.name}`, onClick: this.handleNameClick, name: bucket.name }));
        }
        return (react_default.a.createElement(clockface_dist["ResourceCard"].Name, { testID: `bucket--card--name ${bucket.name}`, name: bucket.name }));
    }
    get cardMetaItems() {
        const { bucket } = this.props;
        if (bucket.type === 'system') {
            return [
                react_default.a.createElement("span", { className: "system-bucket", key: `system-bucket-indicator-${bucket.id}` }, "System Bucket"),
                react_default.a.createElement(react_default.a.Fragment, null,
                    "Retention: ",
                    bucket.ruleString),
            ];
        }
        return [react_default.a.createElement(react_default.a.Fragment, null,
                "Retention: ",
                bucket.ruleString)];
    }
    get actionButtons() {
        const { bucket, onFilterChange } = this.props;
        if (bucket.type === 'user') {
            return (react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, margin: clockface_dist["ComponentSize"].Small, style: { marginTop: '4px' } },
                react_default.a.createElement(inlineLabels_InlineLabels, { selectedLabelIDs: bucket.labels, onFilterChange: onFilterChange, onAddLabel: this.handleAddLabel, onRemoveLabel: this.handleRemoveLabel }),
                react_default.a.createElement(BucketAddDataButton_BucketAddDataButton, { onAddCollector: this.handleAddCollector, onAddLineProtocol: this.handleAddLineProtocol, onAddScraper: this.handleAddScraper }),
                react_default.a.createElement(clockface_dist["Button"], { text: "Rename", testID: "bucket-rename", size: clockface_dist["ComponentSize"].ExtraSmall, onClick: this.handleRenameBucket }),
                react_default.a.createElement(featureFlag["a" /* FeatureFlag */], { name: "deleteWithPredicate" },
                    react_default.a.createElement(clockface_dist["Button"], { text: "Delete Data By Filter", testID: "bucket-delete-bucket", size: clockface_dist["ComponentSize"].ExtraSmall, onClick: this.handleDeleteData }))));
        }
    }
}
const BucketCard_mdtp = {
    onAddBucketLabel: buckets_actions_thunks["a" /* addBucketLabel */],
    onDeleteBucketLabel: buckets_actions_thunks["d" /* deleteBucketLabel */],
};
/* harmony default export */ var BucketCard = (Object(es["b" /* connect */])(null, BucketCard_mdtp)(Object(react_router_es["g" /* withRouter */])(BucketCard_BucketRow)));

// EXTERNAL MODULE: ./src/dataLoaders/actions/steps.ts
var actions_steps = __webpack_require__(275);

// EXTERNAL MODULE: ./src/dataLoaders/actions/dataLoaders.ts
var actions_dataLoaders = __webpack_require__(144);

// CONCATENATED MODULE: ./src/utils/formatting.ts
const secondsToDuration = (seconds) => {
    let minutes = Math.floor(seconds / 60);
    seconds = seconds % 60;
    let hours = Math.floor(minutes / 60);
    minutes = minutes % 60;
    const days = Math.floor(hours / 24);
    hours = hours % 24;
    return {
        days,
        hours,
        minutes,
        seconds,
    };
};
const ruleToString = (seconds) => {
    const duration = secondsToDuration(seconds);
    const rpString = Object.entries(duration).reduce((acc, [k, v]) => {
        if (!v) {
            return acc;
        }
        return `${acc} ${v} ${k}`;
    }, '');
    if (!rpString) {
        return 'forever';
    }
    return rpString;
};

// CONCATENATED MODULE: ./src/shared/utils/prettyBucket.ts

const prettyBuckets = (buckets) => {
    return buckets.map(b => {
        const expire = b.retentionRules.find(rule => rule.type === 'expire');
        if (!expire) {
            return Object.assign(Object.assign({}, b), { ruleString: 'forever' });
        }
        return Object.assign(Object.assign({}, b), { ruleString: ruleToString(expire.everySeconds) });
    });
};

// CONCATENATED MODULE: ./src/buckets/components/BucketList.tsx














class BucketList_BucketList extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.memGetSortedResources = Object(memoize_one_esm["a" /* default */])(getSortedResources);
        this.handleStartEdit = (bucket) => {
            const { orgID } = this.props.params;
            this.props.router.push(`/orgs/${orgID}/load-data/buckets/${bucket.id}/edit`);
        };
        this.handleStartDeleteData = (bucket) => {
            const { orgID } = this.props.params;
            this.props.router.push(`/orgs/${orgID}/load-data/buckets/${bucket.id}/delete-data`);
        };
        this.handleStartAddData = (bucket, dataLoaderType, link) => {
            const { onSetBucketInfo, onSetDataLoadersType, router } = this.props;
            onSetBucketInfo(bucket.orgID, bucket.name, bucket.id);
            this.setState({
                bucketID: bucket.id,
            });
            onSetDataLoadersType(dataLoaderType);
            router.push(link);
        };
        this.handleUpdateBucket = (updatedBucket) => {
            this.props.onUpdateBucket(updatedBucket);
            this.setState({ bucketOverlayState: types["OverlayState"].Closed });
        };
        const bucketID = Object(lodash["get"])(this, 'props.buckets.0.id', null);
        this.state = {
            bucketID,
            bucketOverlayState: types["OverlayState"].Closed,
        };
    }
    render() {
        const { emptyState, sortKey, sortDirection, onClickColumn } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["ResourceList"], null,
                react_default.a.createElement(clockface_dist["ResourceList"].Header, null,
                    react_default.a.createElement(clockface_dist["ResourceList"].Sorter, { name: "Name", sortKey: this.headerKeys[0], sort: sortKey === this.headerKeys[0] ? sortDirection : clockface_dist["Sort"].None, onClick: onClickColumn(SortTypes.String), testID: "name-sorter" }),
                    react_default.a.createElement(clockface_dist["ResourceList"].Sorter, { name: "Retention", sortKey: this.headerKeys[1], sort: sortKey === this.headerKeys[1] ? sortDirection : clockface_dist["Sort"].None, onClick: onClickColumn(SortTypes.Float), testID: "retention-sorter" })),
                react_default.a.createElement(clockface_dist["ResourceList"].Body, { emptyState: emptyState }, this.listBuckets))));
    }
    get headerKeys() {
        return ['name', 'retentionRules[0].everySeconds'];
    }
    get listBuckets() {
        const { buckets, sortKey, sortDirection, sortType, onDeleteBucket, onFilterChange, } = this.props;
        const sortedBuckets = this.memGetSortedResources(prettyBuckets(buckets), sortKey, sortDirection, sortType);
        return sortedBuckets.map(bucket => {
            return (react_default.a.createElement(BucketCard, { key: bucket.id, bucket: bucket, onEditBucket: this.handleStartEdit, onDeleteBucket: onDeleteBucket, onDeleteData: this.handleStartDeleteData, onAddData: this.handleStartAddData, onUpdateBucket: this.handleUpdateBucket, onFilterChange: onFilterChange }));
        });
    }
}
const BucketList_mstp = (state) => {
    return {
        dataLoaderType: state.dataLoading.dataLoaders.type,
    };
};
const BucketList_mdtp = {
    onSetBucketInfo: actions_steps["d" /* setBucketInfo */],
    onSetDataLoadersType: actions_dataLoaders["j" /* setDataLoadersType */],
};
/* harmony default export */ var components_BucketList = (Object(es["b" /* connect */])(BucketList_mstp, BucketList_mdtp)(Object(react_router_es["g" /* withRouter */])(BucketList_BucketList)));

// CONCATENATED MODULE: ./src/shared/components/DurationSelector.tsx



const DurationSelector = ({ selectedDuration, onSelectDuration, durations, disabled = false, }) => {
    let resolvedDurations = durations;
    let selected = durations.find(d => selectedDuration === d.duration ||
        Object(utils_duration["a" /* areDurationsEqual */])(selectedDuration, d.duration));
    if (!selected) {
        selected = { duration: selectedDuration, displayText: selectedDuration };
        resolvedDurations = [selected, ...resolvedDurations];
    }
    return (react_default.a.createElement(clockface_dist["Dropdown"], { testID: "duration-selector", button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { testID: "duration-selector--button", active: active, onClick: onClick, status: DurationSelector_getStatus(disabled) }, selected.displayText)), menu: onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse, testID: "duration-selector--menu" }, resolvedDurations.map(({ duration, displayText }) => (react_default.a.createElement(clockface_dist["Dropdown"].Item, { id: duration, key: duration, value: duration, testID: `duration-selector--${duration}`, selected: duration === selectedDuration, onClick: onSelectDuration }, displayText))))) }));
};
const DurationSelector_getStatus = (disabled) => {
    if (disabled) {
        return clockface_dist["ComponentStatus"].Disabled;
    }
    return clockface_dist["ComponentStatus"].Default;
};
/* harmony default export */ var components_DurationSelector = (DurationSelector);

// CONCATENATED MODULE: ./src/buckets/components/Retention.tsx






const DEFAULT_SECONDS = 30 * 24 * 60 * 60;
const DURATION_OPTIONS = [
    { duration: '1h', displayText: '1 hour' },
    { duration: '6h', displayText: '6 hours' },
    { duration: '12h', displayText: '12 hours' },
    { duration: '24h', displayText: '24 hours' },
    { duration: '48h', displayText: '48 hours' },
    { duration: '72h', displayText: '72 hours' },
    { duration: '7d', displayText: '7 days' },
    { duration: '14d', displayText: '14 days' },
    { duration: '30d', displayText: '30 days' },
    { duration: '90d', displayText: '90 days' },
    { duration: '1y', displayText: '1 year' },
];
class Retention_Retention extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleRadioClick = (type) => {
            this.props.onChangeRuleType(type);
        };
        this.handleSelectDuration = (durationStr) => {
            const durationSeconds = Object(utils_duration["c" /* durationToMilliseconds */])(Object(utils_duration["h" /* parseDuration */])(durationStr)) / 1000;
            this.props.onChangeRetentionRule(durationSeconds);
        };
    }
    render() {
        const { retentionSeconds, maxRetentionSeconds, type } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["SelectGroup"], { shape: clockface_dist["ButtonShape"].StretchToFit, className: "retention--radio" },
                react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "bucket-retention", id: "never", testID: "retention-never--button", active: type === null, onClick: this.handleRadioClick, value: null, titleText: "Never delete data", disabled: !!maxRetentionSeconds }, "Never"),
                react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "bucket-retention", id: "intervals", active: type === 'expire', onClick: this.handleRadioClick, value: "expire", testID: "retention-intervals--button", titleText: "Delete data older than a duration" }, "Older Than")),
            type === 'expire' && (react_default.a.createElement(components_DurationSelector, { selectedDuration: `${retentionSeconds}s`, onSelectDuration: this.handleSelectDuration, durations: this.durations }))));
    }
    get durations() {
        const { maxRetentionSeconds } = this.props;
        if (!maxRetentionSeconds) {
            return DURATION_OPTIONS;
        }
        return DURATION_OPTIONS.filter(({ duration }) => Object(utils_duration["c" /* durationToMilliseconds */])(Object(utils_duration["h" /* parseDuration */])(duration)) <=
            maxRetentionSeconds * 1000);
    }
}
const Retention_mstp = (state) => ({
    maxRetentionSeconds: Object(utils_limits["d" /* extractBucketMaxRetentionSeconds */])(state.cloud.limits),
});
/* harmony default export */ var components_Retention = (Object(es["b" /* connect */])(Retention_mstp)(Retention_Retention));

// CONCATENATED MODULE: ./src/buckets/components/BucketOverlayForm.tsx







class BucketOverlayForm_BucketOverlayForm extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleNameValidation = (name) => {
            if (Object(buckets_constants["b" /* isSystemBucket */])(name)) {
                return 'Only system bucket names can begin with _';
            }
            if (!name) {
                return 'This bucket needs a name';
            }
            return null;
        };
    }
    render() {
        const { name, onSubmit, ruleType, buttonText, retentionSeconds, disableRenaming, onCloseModal, onChangeInput, onChangeRuleType, onChangeRetentionRule, } = this.props;
        const nameInputStatus = disableRenaming && clockface_dist["ComponentStatus"].Disabled;
        return (react_default.a.createElement(clockface_dist["Form"], { onSubmit: onSubmit },
            react_default.a.createElement(clockface_dist["Grid"], null,
                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                    react_default.a.createElement(clockface_dist["Grid"].Column, null,
                        react_default.a.createElement(clockface_dist["Form"].ValidationElement, { value: name, label: "Name", helpText: this.nameHelpText, validationFunc: this.handleNameValidation, required: true }, status => (react_default.a.createElement(clockface_dist["Input"], { status: nameInputStatus || status, placeholder: "Give your bucket a name", name: "name", autoFocus: true, value: name, onChange: onChangeInput }))),
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Delete Data", errorMessage: this.ruleErrorMessage },
                            react_default.a.createElement(components_Retention, { type: ruleType, retentionSeconds: retentionSeconds, onChangeRuleType: onChangeRuleType, onChangeRetentionRule: onChangeRetentionRule })))),
                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                    react_default.a.createElement(clockface_dist["Grid"].Column, null,
                        react_default.a.createElement(clockface_dist["Form"].Footer, null,
                            react_default.a.createElement(clockface_dist["Button"], { text: "Cancel", onClick: onCloseModal, type: clockface_dist["ButtonType"].Button }),
                            react_default.a.createElement(clockface_dist["Button"], { text: buttonText, color: this.submitButtonColor, status: this.submitButtonStatus, type: clockface_dist["ButtonType"].Submit })))))));
    }
    get nameHelpText() {
        if (this.props.disableRenaming) {
            return 'To rename the bucket use the RENAME button. Bucket renaming is not allowed here.';
        }
        return '';
    }
    get submitButtonColor() {
        const { buttonText } = this.props;
        if (buttonText === 'Save Changes') {
            return clockface_dist["ComponentColor"].Success;
        }
        return clockface_dist["ComponentColor"].Primary;
    }
    get submitButtonStatus() {
        const { name } = this.props;
        const nameHasErrors = this.handleNameValidation(name);
        if (nameHasErrors || this.retentionIsTooShort) {
            return clockface_dist["ComponentStatus"].Disabled;
        }
        return clockface_dist["ComponentStatus"].Default;
    }
    get retentionIsTooShort() {
        const { retentionSeconds, ruleType } = this.props;
        return ruleType === 'expire' && retentionSeconds < buckets_constants["a" /* MIN_RETENTION_SECONDS */];
    }
    get ruleErrorMessage() {
        if (this.retentionIsTooShort) {
            const humanDuration = moment_default.a
                .duration(buckets_constants["a" /* MIN_RETENTION_SECONDS */], 'seconds')
                .humanize();
            return `Retention period must be at least ${humanDuration}`;
        }
        return '';
    }
}

// CONCATENATED MODULE: ./src/buckets/components/CreateBucketOverlay.tsx






const DEFAULT_RULES = [
    { type: 'expire', everySeconds: DEFAULT_SECONDS },
];
class CreateBucketOverlay_CreateBucketOverlay extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleChangeRetentionRule = (everySeconds) => {
            const bucket = Object.assign(Object.assign({}, this.state.bucket), { retentionRules: [{ type: 'expire', everySeconds }] });
            this.setState({ bucket });
        };
        this.handleChangeRuleType = (ruleType) => {
            if (ruleType === 'expire') {
                this.setState({
                    ruleType,
                    bucket: Object.assign(Object.assign({}, this.state.bucket), { retentionRules: DEFAULT_RULES }),
                });
            }
            else {
                this.setState({
                    ruleType,
                    bucket: Object.assign(Object.assign({}, this.state.bucket), { retentionRules: [] }),
                });
            }
        };
        this.handleSubmit = (e) => {
            e.preventDefault();
            this.handleCreateBucket();
        };
        this.handleCreateBucket = () => {
            const { onCreateBucket, org } = this.props;
            const orgID = org.id;
            const organization = org.name;
            const bucket = Object.assign(Object.assign({}, this.state.bucket), { orgID,
                organization });
            onCreateBucket(bucket);
        };
        this.handleChangeInput = (e) => {
            const value = e.target.value;
            const key = e.target.name;
            const bucket = Object.assign(Object.assign({}, this.state.bucket), { [key]: value });
            this.setState({ bucket });
        };
        this.state = {
            bucket: {
                name: '',
                retentionRules: props.isRetentionLimitEnforced ? DEFAULT_RULES : [],
            },
            ruleType: props.isRetentionLimitEnforced ? 'expire' : null,
        };
    }
    render() {
        const { onCloseModal } = this.props;
        const { bucket, ruleType } = this.state;
        return (react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 400 },
            react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Create Bucket", onDismiss: this.props.onCloseModal }),
            react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                react_default.a.createElement(BucketOverlayForm_BucketOverlayForm, { name: bucket.name, buttonText: "Create", disableRenaming: false, ruleType: ruleType, onCloseModal: onCloseModal, onSubmit: this.handleSubmit, onChangeInput: this.handleChangeInput, retentionSeconds: this.retentionSeconds, onChangeRuleType: this.handleChangeRuleType, onChangeRetentionRule: this.handleChangeRetentionRule }))));
    }
    get retentionSeconds() {
        const rule = this.state.bucket.retentionRules.find(r => r.type === 'expire');
        if (!rule) {
            return 3600;
        }
        return rule.everySeconds;
    }
}
const CreateBucketOverlay_mstp = (state) => ({
    isRetentionLimitEnforced: !!Object(utils_limits["d" /* extractBucketMaxRetentionSeconds */])(state.cloud.limits),
});
/* harmony default export */ var components_CreateBucketOverlay = (Object(es["b" /* connect */])(CreateBucketOverlay_mstp)(CreateBucketOverlay_CreateBucketOverlay));

// CONCATENATED MODULE: ./src/buckets/components/BucketExplainer.tsx


const BucketExplainer = () => (react_default.a.createElement(clockface_dist["Panel"], { backgroundColor: clockface_dist["InfluxColors"].Smoke, style: { marginTop: '32px' } },
    react_default.a.createElement(clockface_dist["Panel"].Header, null,
        react_default.a.createElement("h5", null, "What is a Bucket?")),
    react_default.a.createElement(clockface_dist["Panel"].Body, null,
        react_default.a.createElement("p", null,
            "A bucket is a named location where time series data is stored. All buckets have a ",
            react_default.a.createElement("b", null, "Retention Policy"),
            ", a duration of time that each data point persists.",
            react_default.a.createElement("br", null),
            react_default.a.createElement("br", null),
            "Here's",
            ' ',
            react_default.a.createElement("a", { href: "https://v2.docs.influxdata.com/v2.0/write-data/", target: "_blank" }, "how to write data"),
            ' ',
            "into your bucket."))));
/* harmony default export */ var components_BucketExplainer = (BucketExplainer);

// CONCATENATED MODULE: ./src/buckets/components/BucketsTab.tsx





















const BucketsTab_FilterBuckets = FilterListContainer();
let BucketsTab_BucketsTab = class BucketsTab extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleClickColumn = (sortType) => (nextSort, sortKey) => {
            this.setState({ sortKey, sortDirection: nextSort, sortType });
        };
        this.handleUpdateBucket = (updatedBucket) => {
            this.props.updateBucket(updatedBucket);
        };
        this.handleDeleteBucket = ({ id, name }) => {
            this.props.deleteBucket(id, name);
        };
        this.handleCreateBucket = (bucket) => {
            this.props.createBucket(bucket);
            this.handleCloseModal();
        };
        this.handleOpenModal = () => {
            this.setState({ overlayState: types["OverlayState"].Open });
        };
        this.handleCloseModal = () => {
            this.setState({ overlayState: types["OverlayState"].Closed });
        };
        this.handleFilterChange = (searchTerm) => {
            this.handleFilterUpdate(searchTerm);
        };
        this.handleFilterUpdate = (searchTerm) => {
            this.setState({ searchTerm });
        };
        this.state = {
            searchTerm: '',
            overlayState: types["OverlayState"].Closed,
            sortKey: 'name',
            sortDirection: clockface_dist["Sort"].Ascending,
            sortType: SortTypes.String,
        };
    }
    componentDidMount() {
        this.props.checkBucketLimits();
    }
    render() {
        const { org, buckets, limitStatus } = this.props;
        const { searchTerm, overlayState, sortKey, sortDirection, sortType, } = this.state;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(AssetLimitAlert_AssetLimitAlert, { resourceName: "buckets", limitStatus: limitStatus, className: "load-data--asset-alert" }),
            react_default.a.createElement(components_SettingsTabbedPageHeader, null,
                react_default.a.createElement(search_widget_SearchWidget, { placeholderText: "Filter buckets...", searchTerm: searchTerm, onSearch: this.handleFilterChange }),
                react_default.a.createElement(clockface_dist["Button"], { text: "Create Bucket", icon: clockface_dist["IconFont"].Plus, color: clockface_dist["ComponentColor"].Primary, onClick: this.handleOpenModal, testID: "Create Bucket", status: this.createButtonStatus, titleText: this.createButtonTitleText })),
            react_default.a.createElement(clockface_dist["Grid"], null,
                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve, widthSM: clockface_dist["Columns"].Eight, widthMD: clockface_dist["Columns"].Ten },
                        react_default.a.createElement(BucketsTab_FilterBuckets, { searchTerm: searchTerm, searchKeys: ['name', 'ruleString', 'labels[].name'], list: prettyBuckets(buckets) }, bs => (react_default.a.createElement(components_BucketList, { buckets: bs, emptyState: this.emptyState, onUpdateBucket: this.handleUpdateBucket, onDeleteBucket: this.handleDeleteBucket, onFilterChange: this.handleFilterUpdate, sortKey: sortKey, sortDirection: sortDirection, sortType: sortType, onClickColumn: this.handleClickColumn })))),
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve, widthSM: clockface_dist["Columns"].Four, widthMD: clockface_dist["Columns"].Two },
                        react_default.a.createElement(components_BucketExplainer, null)))),
            react_default.a.createElement(clockface_dist["Overlay"], { visible: overlayState === types["OverlayState"].Open },
                react_default.a.createElement(components_CreateBucketOverlay, { org: org, onCloseModal: this.handleCloseModal, onCreateBucket: this.handleCreateBucket }))));
    }
    get createButtonStatus() {
        if (this.props.limitStatus === actions_limits["b" /* LimitStatus */].EXCEEDED) {
            return clockface_dist["ComponentStatus"].Disabled;
        }
        return clockface_dist["ComponentStatus"].Default;
    }
    get createButtonTitleText() {
        if (this.props.limitStatus === actions_limits["b" /* LimitStatus */].EXCEEDED) {
            return 'This account has the maximum number of buckets allowed';
        }
        return 'Create a bucket';
    }
    get emptyState() {
        const { searchTerm } = this.state;
        if (Object(lodash["isEmpty"])(searchTerm)) {
            return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Large },
                react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                    "Looks like there aren't any ",
                    react_default.a.createElement("b", null, "Buckets"),
                    ", why not create one?"),
                react_default.a.createElement(clockface_dist["Button"], { text: "Create Bucket", icon: clockface_dist["IconFont"].Plus, color: clockface_dist["ComponentColor"].Primary, onClick: this.handleOpenModal })));
        }
        return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Large },
            react_default.a.createElement(clockface_dist["EmptyState"].Text, null, "No Buckets match your query")));
    }
};
BucketsTab_BucketsTab = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], BucketsTab_BucketsTab);
const BucketsTab_mstp = (state) => ({
    org: Object(selectors["a" /* getOrg */])(state),
    buckets: Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Buckets),
    limitStatus: Object(utils_limits["b" /* extractBucketLimits */])(state.cloud.limits),
});
const BucketsTab_mdtp = {
    createBucket: buckets_actions_thunks["b" /* createBucket */],
    updateBucket: buckets_actions_thunks["g" /* updateBucket */],
    deleteBucket: buckets_actions_thunks["c" /* deleteBucket */],
    checkBucketLimits: actions_limits["c" /* checkBucketLimits */],
};
/* harmony default export */ var components_BucketsTab = (Object(es["b" /* connect */])(BucketsTab_mstp, BucketsTab_mdtp)(BucketsTab_BucketsTab));

// CONCATENATED MODULE: ./src/buckets/containers/BucketsIndex.tsx
















let BucketsIndex_BucketsIndex = class BucketsIndex extends react["Component"] {
    render() {
        const { org, children } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Page"], { titleTag: pageTitleSuffixer(['Buckets', 'Load Data']) },
                react_default.a.createElement(components_LimitChecker, null,
                    react_default.a.createElement(components_LoadDataHeader, null),
                    react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, justifyContent: clockface_dist["JustifyContent"].Center }, this.isCardinalityExceeded && (react_default.a.createElement(components_RateLimitAlert, { className: "load-data--rate-alert" }))),
                    react_default.a.createElement(components_LoadDataTabbedPage, { activeTab: "buckets", orgID: org.id },
                        react_default.a.createElement(GetResources["a" /* default */], { resources: [
                                types["ResourceType"].Buckets,
                                types["ResourceType"].Labels,
                                types["ResourceType"].Telegrafs,
                            ] },
                            react_default.a.createElement(components_GetAssetLimits, null,
                                react_default.a.createElement(components_BucketsTab, null)))))),
            children));
    }
    get isCardinalityExceeded() {
        const { limitedResources } = this.props;
        return limitedResources.includes('cardinality');
    }
};
BucketsIndex_BucketsIndex = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], BucketsIndex_BucketsIndex);
const BucketsIndex_mstp = (state) => {
    const { cloud: { limits }, } = state;
    const org = Object(selectors["a" /* getOrg */])(state);
    const limitedResources = Object(utils_limits["k" /* extractRateLimitResources */])(limits);
    return { org, limitedResources };
};
/* harmony default export */ var containers_BucketsIndex = (Object(es["b" /* connect */])(BucketsIndex_mstp, null)(BucketsIndex_BucketsIndex));

// CONCATENATED MODULE: ./src/settings/components/SettingsNavigation.tsx







let SettingsNavigation_SettingsNavigation = class SettingsNavigation extends react["PureComponent"] {
    render() {
        const { activeTab, orgID, router } = this.props;
        const handleTabClick = (id) => {
            router.push(`/orgs/${orgID}/settings/${id}`);
        };
        const tabs = [
            {
                text: 'Members',
                id: 'members',
                cloudExclude: true,
            },
            {
                text: 'Variables',
                id: 'variables',
                cloudExclude: false,
            },
            {
                text: 'Templates',
                id: 'templates',
                cloudExclude: false,
            },
            {
                text: 'Labels',
                id: 'labels',
                cloudExclude: false,
            },
            {
                text: 'Org Profile',
                id: 'profile',
                cloudExclude: false,
            },
        ];
        return (react_default.a.createElement(clockface_dist["Tabs"], { orientation: clockface_dist["Orientation"].Horizontal, padding: clockface_dist["ComponentSize"].Large, backgroundColor: `${chroma_default()(`${clockface_dist["InfluxColors"].Castle}`).alpha(0.1)}` }, tabs.map(t => {
            if (t.cloudExclude) {
                return (react_default.a.createElement(CloudExclude, { key: t.id },
                    react_default.a.createElement(clockface_dist["Tabs"].Tab, { text: t.text, id: t.id, onClick: handleTabClick, active: t.id === activeTab, size: clockface_dist["ComponentSize"].Large, backgroundColor: clockface_dist["InfluxColors"].Castle })));
            }
            return (react_default.a.createElement(clockface_dist["Tabs"].Tab, { key: t.id, text: t.text, id: t.id, onClick: handleTabClick, active: t.id === activeTab, size: clockface_dist["ComponentSize"].Large, backgroundColor: clockface_dist["InfluxColors"].Castle }));
        })));
    }
};
SettingsNavigation_SettingsNavigation = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], SettingsNavigation_SettingsNavigation);
/* harmony default export */ var components_SettingsNavigation = (Object(react_router_es["g" /* withRouter */])(SettingsNavigation_SettingsNavigation));

// CONCATENATED MODULE: ./src/settings/components/SettingsTabbedPage.tsx





let SettingsTabbedPage_SettingsTabbedPage = class SettingsTabbedPage extends react["PureComponent"] {
    render() {
        const { activeTab, orgID, children } = this.props;
        return (react_default.a.createElement(clockface_dist["Page"].Contents, { fullWidth: false, scrollable: true },
            react_default.a.createElement(clockface_dist["Tabs"].Container, { orientation: clockface_dist["Orientation"].Horizontal, className: "tabs tabbed-page" },
                react_default.a.createElement(components_SettingsNavigation, { activeTab: activeTab, orgID: orgID }),
                react_default.a.createElement(clockface_dist["Tabs"].TabContents, { padding: clockface_dist["ComponentSize"].Large, backgroundColor: clockface_dist["InfluxColors"].Castle }, children))));
    }
};
SettingsTabbedPage_SettingsTabbedPage = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], SettingsTabbedPage_SettingsTabbedPage);
/* harmony default export */ var components_SettingsTabbedPage = (SettingsTabbedPage_SettingsTabbedPage);

// CONCATENATED MODULE: ./src/settings/components/SettingsHeader.tsx



class SettingsHeader_SettingsHeader extends react["Component"] {
    render() {
        return (react_default.a.createElement(clockface_dist["Page"].Header, { fullWidth: false },
            react_default.a.createElement(clockface_dist["Page"].HeaderLeft, null,
                react_default.a.createElement(components_PageTitleWithOrg, { title: "Settings" })),
            react_default.a.createElement(clockface_dist["Page"].HeaderRight, null)));
    }
}
/* harmony default export */ var components_SettingsHeader = (SettingsHeader_SettingsHeader);

// CONCATENATED MODULE: ./src/templates/components/EmptyTemplatesList.tsx



const EmptyTemplatesList = ({ searchTerm, onImport, }) => {
    if (searchTerm === '') {
        return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Large },
            react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                "Looks like you don't have any ",
                react_default.a.createElement("b", null, "Templates"),
                ", why not create one?"),
            react_default.a.createElement(clockface_dist["Button"], { text: "Import Template", icon: clockface_dist["IconFont"].Plus, color: clockface_dist["ComponentColor"].Primary, onClick: onImport })));
    }
    return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Large },
        react_default.a.createElement(clockface_dist["EmptyState"].Text, null, "No Templates match your search term")));
};
/* harmony default export */ var components_EmptyTemplatesList = (EmptyTemplatesList);

// CONCATENATED MODULE: ./src/templates/constants/index.ts

const DEFAULT_TEMPLATE_NAME = 'Untitled Template';


// CONCATENATED MODULE: ./src/templates/components/TemplateCard.tsx












class TemplateCard_TemplateCard extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleUpdateTemplateName = (name) => {
            const { template } = this.props;
            this.props.onUpdate(template.id, Object.assign(Object.assign({}, template), { meta: Object.assign(Object.assign({}, template.meta), { name }) }));
        };
        this.handleUpdateTemplateDescription = (description) => {
            const { template } = this.props;
            this.props.onUpdate(template.id, Object.assign(Object.assign({}, template), { meta: Object.assign(Object.assign({}, template.meta), { description }) }));
        };
        this.handleCreate = () => {
            const { onCreateFromTemplate, template } = this.props;
            onCreateFromTemplate(template.id);
        };
        this.handleClone = () => {
            const { template: { id }, onClone, } = this.props;
            onClone(id);
        };
        this.handleNameClick = (e) => {
            e.preventDefault();
            this.handleViewTemplate();
        };
        this.handleViewTemplate = () => {
            const { router, template, org } = this.props;
            router.push(`/orgs/${org.id}/settings/templates/${template.id}/view`);
        };
        this.handleAddLabel = (label) => {
            const { template, onAddTemplateLabels } = this.props;
            onAddTemplateLabels(template.id, [label]);
        };
        this.handleRemoveLabel = (label) => {
            const { template, onRemoveTemplateLabels } = this.props;
            onRemoveTemplateLabels(template.id, [label]);
        };
    }
    render() {
        const { template, onFilterChange } = this.props;
        return (react_default.a.createElement(clockface_dist["ResourceCard"], { testID: "template-card", contextMenu: this.contextMenu, name: react_default.a.createElement(clockface_dist["ResourceCard"].EditableName, { onClick: this.handleNameClick, onUpdate: this.handleUpdateTemplateName, name: template.meta.name, noNameString: DEFAULT_TEMPLATE_NAME, testID: "template-card--name", buttonTestID: "template-card--name-button", inputTestID: "template-card--input" }), description: this.description, labels: react_default.a.createElement(inlineLabels_InlineLabels, { selectedLabelIDs: template.labels, onFilterChange: onFilterChange, onAddLabel: this.handleAddLabel, onRemoveLabel: this.handleRemoveLabel }), metaData: [this.templateType] }));
    }
    get description() {
        const { template } = this.props;
        const description = Object(lodash["get"])(template, 'meta.description', '');
        const name = Object(lodash["get"])(template, 'meta.name', '');
        return (react_default.a.createElement(clockface_dist["ResourceCard"].EditableDescription, { onUpdate: this.handleUpdateTemplateDescription, description: description, placeholder: `Describe ${name} Template` }));
    }
    get templateType() {
        const { template } = this.props;
        return (react_default.a.createElement("div", { className: "resource-list--meta-item" }, Object(lodash["get"])(template, 'meta.type', '')));
    }
    get contextMenu() {
        const { template: { id }, onDelete, } = this.props;
        return (react_default.a.createElement(clockface_dist["FlexBox"], { margin: clockface_dist["ComponentSize"].Medium, direction: clockface_dist["FlexDirection"].Row, justifyContent: clockface_dist["JustifyContent"].FlexEnd },
            react_default.a.createElement(clockface_dist["Button"], { text: "Create", color: clockface_dist["ComponentColor"].Primary, size: clockface_dist["ComponentSize"].ExtraSmall, onClick: this.handleCreate }),
            react_default.a.createElement(clockface["f" /* Context */], null,
                react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface_dist["IconFont"].Duplicate, color: clockface_dist["ComponentColor"].Secondary },
                    react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Clone", action: this.handleClone, value: id })),
                react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface_dist["IconFont"].Trash, color: clockface_dist["ComponentColor"].Danger, testID: "context-delete-menu" },
                    react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Delete", action: onDelete, value: id, testID: "context-delete-task" })))));
    }
}
const TemplateCard_mstp = (state) => {
    return {
        org: Object(selectors["a" /* getOrg */])(state),
    };
};
const TemplateCard_mdtp = {
    onDelete: templates_actions_thunks["i" /* deleteTemplate */],
    onClone: templates_actions_thunks["c" /* cloneTemplate */],
    onUpdate: templates_actions_thunks["m" /* updateTemplate */],
    onCreateFromTemplate: templates_actions_thunks["f" /* createResourceFromTemplate */],
    onAddTemplateLabels: templates_actions_thunks["a" /* addTemplateLabelsAsync */],
    onRemoveTemplateLabels: templates_actions_thunks["l" /* removeTemplateLabelsAsync */],
};
/* harmony default export */ var components_TemplateCard = (Object(es["b" /* connect */])(TemplateCard_mstp, TemplateCard_mdtp)(Object(react_router_es["g" /* withRouter */])(TemplateCard_TemplateCard)));

// CONCATENATED MODULE: ./src/templates/components/TemplatesList.tsx







class TemplatesList_TemplatesList extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.memGetSortedResources = Object(memoize_one_esm["a" /* default */])(getSortedResources);
    }
    render() {
        const { searchTerm, onImport, sortKey, sortDirection, onClickColumn, } = this.props;
        const headerKeys = ['meta.name'];
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["ResourceList"], null,
                react_default.a.createElement(clockface_dist["ResourceList"].Header, null,
                    react_default.a.createElement(clockface_dist["ResourceList"].Sorter, { name: "Name", sortKey: headerKeys[0], sort: sortKey === headerKeys[0] ? sortDirection : clockface["k" /* Sort */].None, onClick: onClickColumn })),
                react_default.a.createElement(clockface_dist["ResourceList"].Body, { emptyState: react_default.a.createElement(components_EmptyTemplatesList, { searchTerm: searchTerm, onImport: onImport }) }, this.rows))));
    }
    get rows() {
        const { templates, sortKey, sortDirection, sortType, onFilterChange, } = this.props;
        const sortedTemplates = this.memGetSortedResources(templates, sortKey, sortDirection, sortType);
        return sortedTemplates.map(t => (react_default.a.createElement(components_TemplateCard, { key: `template-id--${t.id}`, template: t, onFilterChange: onFilterChange })));
    }
}

// CONCATENATED MODULE: ./src/templates/components/StaticTemplateCard.tsx









class StaticTemplateCard_StaticTemplateCard extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleCreate = () => {
            const { onCreateFromTemplate, name } = this.props;
            onCreateFromTemplate(name);
        };
        this.handleNameClick = (e) => {
            e.preventDefault();
            this.handleViewTemplate();
        };
        this.handleViewTemplate = () => {
            const { router, org, name } = this.props;
            router.push(`/orgs/${org.id}/settings/templates/${name}/static/view`);
        };
    }
    render() {
        const { template } = this.props;
        return (react_default.a.createElement(clockface_dist["ResourceCard"], { testID: "template-card", contextMenu: this.contextMenu, description: this.description, name: react_default.a.createElement(clockface_dist["ResourceCard"].Name, { onClick: this.handleNameClick, name: template.meta.name, testID: "template-card--name" }), metaData: [this.templateType] }));
    }
    get contextMenu() {
        return (react_default.a.createElement(clockface_dist["FlexBox"], { margin: clockface_dist["ComponentSize"].Medium, direction: clockface_dist["FlexDirection"].Row, justifyContent: clockface_dist["JustifyContent"].FlexEnd },
            react_default.a.createElement(clockface_dist["Button"], { text: "Create", color: clockface_dist["ComponentColor"].Primary, size: clockface_dist["ComponentSize"].ExtraSmall, onClick: this.handleCreate })));
    }
    get description() {
        const { template } = this.props;
        const description = Object(lodash["get"])(template, 'content.data.attributes.description');
        return (react_default.a.createElement(clockface_dist["ResourceCard"].Description, { description: description || 'No description' }));
    }
    get templateType() {
        const { template } = this.props;
        return (react_default.a.createElement("div", { className: "resource-list--meta-item" }, Object(lodash["get"])(template, 'content.data.type')));
    }
}
const StaticTemplateCard_mstp = (state) => {
    return {
        org: Object(selectors["a" /* getOrg */])(state),
    };
};
const StaticTemplateCard_mdtp = {
    onCreateFromTemplate: templates_actions_thunks["e" /* createResourceFromStaticTemplate */],
};
/* harmony default export */ var components_StaticTemplateCard = (Object(es["b" /* connect */])(StaticTemplateCard_mstp, StaticTemplateCard_mdtp)(Object(react_router_es["g" /* withRouter */])(StaticTemplateCard_StaticTemplateCard)));

// CONCATENATED MODULE: ./src/templates/components/StaticTemplatesList.tsx








class StaticTemplatesList_StaticTemplatesList extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.memGetSortedResources = Object(memoize_one_esm["a" /* default */])(getSortedResources);
    }
    render() {
        const { searchTerm, onImport, sortKey, sortDirection, onClickColumn, } = this.props;
        const headerKeys = ['meta.name'];
        return (react_default.a.createElement(clockface_dist["ResourceList"], null,
            react_default.a.createElement(clockface_dist["ResourceList"].Header, null,
                react_default.a.createElement(clockface_dist["ResourceList"].Sorter, { name: "Name", sortKey: headerKeys[0], sort: sortKey === headerKeys[0] ? sortDirection : clockface["k" /* Sort */].None, onClick: onClickColumn })),
            react_default.a.createElement(clockface_dist["ResourceList"].Body, { emptyState: react_default.a.createElement(components_EmptyTemplatesList, { searchTerm: searchTerm, onImport: onImport }) }, this.rows)));
    }
    get rows() {
        const { templates, sortKey, sortDirection, sortType, onFilterChange, } = this.props;
        const sortedTemplates = this.memGetSortedResources(templates, `template.${sortKey}`, sortDirection, sortType);
        return sortedTemplates.map(t => (react_default.a.createElement(components_StaticTemplateCard, { key: `template-id--static-${t.name}`, name: t.name, template: Object.assign(Object.assign({}, t.template), { status: types["RemoteDataState"].Done }), onFilterChange: onFilterChange })));
    }
}

// CONCATENATED MODULE: ./src/templates/components/TemplatesPage.tsx
















const staticTemplates = lodash_default.a.map(defaultTemplates["c" /* staticTemplates */], (template, name) => ({
    name,
    template: template,
}));
const FilterStaticTemplates = FilterListContainer();
const FilterTemplateSummaries = FilterListContainer();
let TemplatesPage_TemplatesPage = class TemplatesPage extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleClickTab = val => {
            this.setState({ activeTab: val });
        };
        this.handleClickColumn = (nextSort, sortKey) => {
            const sortType = SortTypes.String;
            this.setState({ sortKey, sortDirection: nextSort, sortType });
        };
        this.setSearchTerm = (searchTerm) => {
            this.setState({ searchTerm });
        };
        this.state = {
            searchTerm: '',
            sortKey: 'meta.name',
            sortDirection: clockface_dist["Sort"].Ascending,
            sortType: SortTypes.String,
            activeTab: 'static-templates',
        };
    }
    render() {
        const { onImport } = this.props;
        const { activeTab } = this.state;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(components_SettingsTabbedPageHeader, null,
                react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, margin: clockface_dist["ComponentSize"].Small },
                    this.filterComponent,
                    react_default.a.createElement(clockface_dist["SelectGroup"], null,
                        react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "template-type", id: "static-templates", active: activeTab === 'static-templates', value: "static-templates", onClick: this.handleClickTab, titleText: "Static Templates" }, "Static Templates"),
                        react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "template-type", id: "user-templates", active: activeTab === 'user-templates', value: "user-templates", onClick: this.handleClickTab, titleText: "User Templates" }, "User Templates"))),
                react_default.a.createElement(clockface_dist["Button"], { text: "Import Template", icon: clockface_dist["IconFont"].Plus, color: clockface_dist["ComponentColor"].Primary, onClick: onImport })),
            this.templatesList));
    }
    get templatesList() {
        const { templates, onImport } = this.props;
        const { searchTerm, sortKey, sortDirection, sortType, activeTab } = this.state;
        if (activeTab === 'static-templates') {
            return (react_default.a.createElement(FilterStaticTemplates, { searchTerm: searchTerm, searchKeys: ['template.meta.name', 'labels[].name'], list: staticTemplates }, ts => {
                return (react_default.a.createElement(StaticTemplatesList_StaticTemplatesList, { searchTerm: searchTerm, templates: ts, onFilterChange: this.setSearchTerm, onImport: onImport, sortKey: sortKey, sortDirection: sortDirection, sortType: sortType, onClickColumn: this.handleClickColumn }));
            }));
        }
        if (activeTab === 'user-templates') {
            return (react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Labels] },
                react_default.a.createElement(FilterTemplateSummaries, { searchTerm: searchTerm, searchKeys: ['meta.name', 'labels[].name'], list: templates }, ts => {
                    return (react_default.a.createElement(TemplatesList_TemplatesList, { searchTerm: searchTerm, templates: ts, onFilterChange: this.setSearchTerm, onImport: onImport, sortKey: sortKey, sortDirection: sortDirection, sortType: sortType, onClickColumn: this.handleClickColumn }));
                })));
        }
    }
    get filterComponent() {
        const { searchTerm } = this.state;
        return (react_default.a.createElement(search_widget_SearchWidget, { placeholderText: "Filter templates...", onSearch: this.setSearchTerm, searchTerm: searchTerm }));
    }
};
TemplatesPage_TemplatesPage = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], TemplatesPage_TemplatesPage);
const TemplatesPage_mstp = (state) => ({
    templates: getAll(state, types["ResourceType"].Templates),
});
/* harmony default export */ var components_TemplatesPage = (Object(es["b" /* connect */])(TemplatesPage_mstp, null)(TemplatesPage_TemplatesPage));

// CONCATENATED MODULE: ./src/templates/containers/TemplatesIndex.tsx













let TemplatesIndex_TemplatesIndex = class TemplatesIndex extends react["Component"] {
    constructor() {
        super(...arguments);
        this.handleImport = () => {
            const { router, org } = this.props;
            router.push(`/orgs/${org.id}/settings/templates/import`);
        };
    }
    render() {
        const { org, children } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Page"], { titleTag: pageTitleSuffixer(['Templates', 'Settings']) },
                react_default.a.createElement(components_SettingsHeader, null),
                react_default.a.createElement(components_SettingsTabbedPage, { activeTab: "templates", orgID: org.id },
                    react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Templates] },
                        react_default.a.createElement(components_TemplatesPage, { onImport: this.handleImport })))),
            children));
    }
};
TemplatesIndex_TemplatesIndex = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], TemplatesIndex_TemplatesIndex);
const TemplatesIndex_mstp = (state) => {
    return {
        org: Object(selectors["a" /* getOrg */])(state),
    };
};
/* harmony default export */ var containers_TemplatesIndex = (Object(es["b" /* connect */])(TemplatesIndex_mstp, null)(Object(react_router_es["g" /* withRouter */])(TemplatesIndex_TemplatesIndex)));

// CONCATENATED MODULE: ./src/telegrafs/components/CollectorCard.tsx










class CollectorCard_CollectorRow extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleUpdateName = (name) => {
            const { onUpdate, collector } = this.props;
            onUpdate(Object.assign(Object.assign({}, collector), { name }));
        };
        this.handleUpdateDescription = (description) => {
            const { onUpdate, collector } = this.props;
            onUpdate(Object.assign(Object.assign({}, collector), { description }));
        };
        this.handleAddLabel = async (label) => {
            const { collector, onAddLabels } = this.props;
            await onAddLabels(collector.id, [label]);
        };
        this.handleRemoveLabel = async (label) => {
            const { collector, onRemoveLabels } = this.props;
            await onRemoveLabels(collector.id, [label]);
        };
        this.handleNameClick = (e) => {
            e.preventDefault();
            this.handleOpenConfig();
        };
        this.handleOpenConfig = () => {
            const { collector, router, org } = this.props;
            router.push(`/orgs/${org.id}/load-data/telegrafs/${collector.id}/view`);
        };
        this.handleDeleteConfig = () => {
            this.props.onDelete(this.props.collector);
        };
    }
    render() {
        const { collector, org } = this.props;
        return (react_default.a.createElement(clockface_dist["ResourceCard"], { key: `telegraf-id--${collector.id}`, testID: "resource-card", name: react_default.a.createElement(clockface_dist["ResourceCard"].EditableName, { onUpdate: this.handleUpdateName, onClick: this.handleNameClick, name: collector.name, noNameString: dashboards_constants["d" /* DEFAULT_COLLECTOR_NAME */], testID: "collector-card--name", buttonTestID: "collector-card--name-button", inputTestID: "collector-card--input" }), description: react_default.a.createElement(clockface_dist["ResourceCard"].EditableDescription, { onUpdate: this.handleUpdateDescription, description: collector.description, placeholder: `Describe ${collector.name}` }), labels: this.labels, metaData: [
                react_default.a.createElement("span", { key: `bucket-key--${collector.id}`, "data-testid": "bucket-name" },
                    "Bucket: ",
                    collector.metadata.buckets.join(', ')),
                react_default.a.createElement(react_default.a.Fragment, null,
                    react_default.a.createElement(react_router_es["b" /* Link */], { to: `/orgs/${org.id}/load-data/telegrafs/${collector.id}/instructions`, "data-testid": "setup-instructions-link" }, "Setup Instructions")),
            ], contextMenu: this.contextMenu }));
    }
    get contextMenu() {
        return (react_default.a.createElement(clockface["f" /* Context */], null,
            react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface_dist["IconFont"].Trash, color: clockface_dist["ComponentColor"].Danger },
                react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Delete", action: this.handleDeleteConfig }))));
    }
    get labels() {
        const { collector, onFilterChange } = this.props;
        return (react_default.a.createElement(inlineLabels_InlineLabels, { selectedLabelIDs: collector.labels, onFilterChange: onFilterChange, onAddLabel: this.handleAddLabel, onRemoveLabel: this.handleRemoveLabel }));
    }
}
const CollectorCard_mstp = (state) => {
    const org = Object(selectors["a" /* getOrg */])(state);
    return { org };
};
const CollectorCard_mdtp = {
    onAddLabels: telegrafs_actions_thunks["a" /* addTelegrafLabelsAsync */],
    onRemoveLabels: telegrafs_actions_thunks["e" /* removeTelegrafLabelsAsync */],
};
/* harmony default export */ var CollectorCard = (Object(es["b" /* connect */])(CollectorCard_mstp, CollectorCard_mdtp)(Object(react_router_es["g" /* withRouter */])(CollectorCard_CollectorRow)));

// CONCATENATED MODULE: ./src/telegrafs/components/CollectorList.tsx











class CollectorList_CollectorList extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.memGetSortedResources = Object(memoize_one_esm["a" /* default */])(getSortedResources);
    }
    render() {
        const { emptyState, sortKey, sortDirection, onClickColumn } = this.props;
        return (react_default.a.createElement(clockface_dist["ResourceList"], null,
            react_default.a.createElement(clockface_dist["ResourceList"].Header, null,
                react_default.a.createElement(clockface_dist["ResourceList"].Sorter, { sortKey: "name", sort: sortKey === 'name' ? sortDirection : clockface_dist["Sort"].None, name: "Name", onClick: onClickColumn, testID: "name-sorter" })),
            react_default.a.createElement(clockface_dist["ResourceList"].Body, { emptyState: emptyState }, this.collectorsList)));
    }
    get collectorsList() {
        const { collectors, sortKey, sortDirection, sortType, onDeleteTelegraf, onUpdateTelegraf, onFilterChange, } = this.props;
        const sortedCollectors = this.memGetSortedResources(collectors, sortKey, sortDirection, sortType);
        if (collectors !== undefined) {
            return sortedCollectors.map(collector => (react_default.a.createElement(CollectorCard, { key: collector.id, collector: collector, onDelete: (telegraf) => onDeleteTelegraf(telegraf.id, telegraf.name), onUpdate: onUpdateTelegraf, onFilterChange: onFilterChange })));
        }
    }
}
const CollectorList_mstp = (state) => ({
    collectors: Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Telegrafs),
});
const CollectorList_mdtp = {
    onUpdateTelegraf: telegrafs_actions_thunks["f" /* updateTelegraf */],
    onDeleteTelegraf: telegrafs_actions_thunks["b" /* deleteTelegraf */],
};
Object(es["b" /* connect */])(CollectorList_mstp, CollectorList_mdtp)(CollectorList_CollectorList);
const FilterTelegrafs = FilterListContainer();
class CollectorList_FilteredCollectorList extends react["PureComponent"] {
    render() {
        const { searchTerm, collectors, emptyState, onFilterChange, sortKey, sortDirection, sortType, onClickColumn, onUpdateTelegraf, onDeleteTelegraf, } = this.props;
        return (react_default.a.createElement(FilterTelegrafs, { searchTerm: searchTerm, searchKeys: ['metadata.buckets[]', 'name', 'labels[].name'], list: collectors }, cs => (react_default.a.createElement(CollectorList_CollectorList, { collectors: cs, emptyState: emptyState, onFilterChange: onFilterChange, sortKey: sortKey, sortDirection: sortDirection, sortType: sortType, onClickColumn: onClickColumn, onUpdateTelegraf: onUpdateTelegraf, onDeleteTelegraf: onDeleteTelegraf }))));
    }
}
const FilteredList = Object(es["b" /* connect */])(CollectorList_mstp, CollectorList_mdtp)(CollectorList_FilteredCollectorList);


// CONCATENATED MODULE: ./src/telegrafs/components/TelegrafExplainer.tsx


const TelegrafExplainer = ({ hasNoTelegrafs = false, textAlign = 'inherit', bodySize, }) => (react_default.a.createElement(clockface_dist["Panel"], { backgroundColor: clockface_dist["InfluxColors"].Smoke, style: { textAlign, marginTop: 32 } },
    hasNoTelegrafs && (react_default.a.createElement(clockface_dist["EmptyState"].Text, { style: { color: clockface_dist["InfluxColors"].Platinum, marginTop: 16 } }, "What is Telegraf?")),
    !hasNoTelegrafs && (react_default.a.createElement(clockface_dist["Panel"].Header, null,
        react_default.a.createElement("h5", null, "What is Telegraf?"))),
    react_default.a.createElement(clockface_dist["Panel"].Body, { size: bodySize },
        "Telegraf is an agent written in Go for collecting metrics and writing them into ",
        react_default.a.createElement("strong", null, "InfluxDB"),
        " or other possible outputs.",
        react_default.a.createElement("br", null),
        react_default.a.createElement("br", null),
        "Here's a handy guide for",
        ' ',
        react_default.a.createElement("a", { href: "https://v2.docs.influxdata.com/v2.0/write-data/use-telegraf/", target: "_blank" }, "Getting Started with Telegraf"))));
/* harmony default export */ var components_TelegrafExplainer = (TelegrafExplainer);

// CONCATENATED MODULE: ./src/buckets/components/NoBucketsWarning.tsx


const NoBucketsWarning = ({ visible, resourceName }) => {
    return (visible && (react_default.a.createElement(clockface_dist["Alert"], { color: clockface_dist["ComponentColor"].Primary, icon: clockface_dist["IconFont"].AlertTriangle, className: "no-buckets-warning" },
        "You don't currently have any buckets. Any",
        ' ',
        react_default.a.createElement("strong", null, resourceName),
        " you have will not be able to write data until a bucket is created and they are directed to that bucket.")));
};
/* harmony default export */ var components_NoBucketsWarning = (NoBucketsWarning);

// CONCATENATED MODULE: ./src/telegrafs/components/Collectors.tsx



















let Collectors_Collectors = class Collectors extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleClickColumn = (nextSort, sortKey) => {
            const sortType = SortTypes.String;
            this.setState({ sortKey, sortDirection: nextSort, sortType });
        };
        this.handleAddCollector = () => {
            const { router, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/load-data/telegrafs/new`);
        };
        this.handleJustTheOutput = () => {
            const { router, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/load-data/telegrafs/output`);
        };
        this.handleFilterChange = (searchTerm) => {
            this.handleFilterUpdate(searchTerm);
        };
        this.handleFilterUpdate = (searchTerm) => {
            this.setState({ searchTerm });
        };
        this.state = {
            dataLoaderOverlay: types["OverlayState"].Closed,
            searchTerm: '',
            instructionsOverlay: types["OverlayState"].Closed,
            collectorID: null,
            sortKey: 'name',
            sortDirection: clockface_dist["Sort"].Ascending,
            sortType: SortTypes.String,
        };
    }
    render() {
        const { hasTelegrafs } = this.props;
        const { searchTerm, sortKey, sortDirection, sortType } = this.state;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(components_NoBucketsWarning, { visible: this.hasNoBuckets, resourceName: "Telegraf Configurations" }),
            react_default.a.createElement(components_SettingsTabbedPageHeader, { className: "telegraf-collectors--header" },
                react_default.a.createElement(search_widget_SearchWidget, { placeholderText: "Filter telegraf configurations...", searchTerm: searchTerm, onSearch: this.handleFilterChange }),
                react_default.a.createElement("div", { className: "telegraf-collectors-button-wrap" },
                    react_default.a.createElement(clockface_dist["Button"], { text: "InfluxDB Output Plugin", icon: clockface_dist["IconFont"].Eye, color: clockface_dist["ComponentColor"].Secondary, style: { marginRight: '8px' }, onClick: this.handleJustTheOutput, titleText: "Output section of telegraf.conf for V2", testID: "button--output-only" }),
                    this.createButton)),
            react_default.a.createElement(clockface_dist["Grid"], null,
                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve, widthSM: hasTelegrafs ? clockface_dist["Columns"].Eight : clockface_dist["Columns"].Twelve, widthMD: hasTelegrafs ? clockface_dist["Columns"].Ten : clockface_dist["Columns"].Twelve },
                        react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Labels] },
                            react_default.a.createElement(FilteredList, { searchTerm: searchTerm, emptyState: this.emptyState, onFilterChange: this.handleFilterUpdate, sortKey: sortKey, sortDirection: sortDirection, sortType: sortType, onClickColumn: this.handleClickColumn }))),
                    hasTelegrafs && (react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve, widthSM: clockface_dist["Columns"].Four, widthMD: clockface_dist["Columns"].Two },
                        react_default.a.createElement(components_TelegrafExplainer, null)))))));
    }
    get hasNoBuckets() {
        const { buckets } = this.props;
        if (!buckets || !buckets.length) {
            return true;
        }
        return false;
    }
    get createButton() {
        let status = clockface_dist["ComponentStatus"].Default;
        let titleText = 'Create a new Telegraf Configuration';
        if (this.hasNoBuckets) {
            status = clockface_dist["ComponentStatus"].Disabled;
            titleText =
                'You need at least 1 bucket in order to create a Telegraf Configuration';
        }
        return (react_default.a.createElement(clockface_dist["Button"], { text: "Create Configuration", icon: clockface_dist["IconFont"].Plus, color: clockface_dist["ComponentColor"].Primary, onClick: this.handleAddCollector, status: status, titleText: titleText }));
    }
    get emptyState() {
        const { orgName } = this.props;
        const { searchTerm } = this.state;
        if (lodash_default.a.isEmpty(searchTerm)) {
            return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Medium },
                react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                    `${orgName}`,
                    " does not own any ",
                    react_default.a.createElement("b", null, "Telegraf Configurations"),
                    ", why not create one?"),
                this.createButton,
                react_default.a.createElement("br", null),
                react_default.a.createElement("br", null),
                react_default.a.createElement(components_TelegrafExplainer, { hasNoTelegrafs: true, textAlign: "center", bodySize: clockface_dist["ComponentSize"].Medium })));
        }
        return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Medium },
            react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                "No ",
                react_default.a.createElement("b", null, "Telegraf Configurations"),
                " match your query")));
    }
};
Collectors_Collectors = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], Collectors_Collectors);
const Collectors_mstp = (state) => {
    const { telegrafs } = state.resources;
    const orgName = Object(selectors["a" /* getOrg */])(state).name;
    const buckets = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Buckets);
    const hasTelegrafs = !!telegrafs.allIDs.length;
    return {
        hasTelegrafs,
        orgName,
        buckets,
    };
};
const Collectors_mdtp = {
    onSetTelegrafConfigID: actions_dataLoaders["p" /* setTelegrafConfigID */],
    onSetTelegrafConfigName: actions_dataLoaders["q" /* setTelegrafConfigName */],
    onClearDataLoaders: actions_dataLoaders["c" /* clearDataLoaders */],
    onUpdateTelegraf: telegrafs_actions_thunks["f" /* updateTelegraf */],
    onDeleteTelegraf: telegrafs_actions_thunks["b" /* deleteTelegraf */],
};
/* harmony default export */ var components_Collectors = (Object(es["b" /* connect */])(Collectors_mstp, Collectors_mdtp)(Object(react_router_es["g" /* withRouter */])(Collectors_Collectors)));

// CONCATENATED MODULE: ./src/telegrafs/containers/TelegrafsPage.tsx















let TelegrafsPage_TelegrafsPage = class TelegrafsPage extends react["PureComponent"] {
    render() {
        const { org, children } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Page"], { titleTag: pageTitleSuffixer(['Telegraf', 'Load Data']) },
                react_default.a.createElement(components_LimitChecker, null,
                    react_default.a.createElement(components_LoadDataHeader, null),
                    react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, justifyContent: clockface_dist["JustifyContent"].Center }, this.isCardinalityExceeded && (react_default.a.createElement(components_RateLimitAlert, { className: "load-data--rate-alert" }))),
                    react_default.a.createElement(components_LoadDataTabbedPage, { activeTab: "telegrafs", orgID: org.id },
                        react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Buckets, types["ResourceType"].Telegrafs] },
                            react_default.a.createElement(components_Collectors, null))))),
            children));
    }
    get isCardinalityExceeded() {
        const { limitedResources } = this.props;
        return limitedResources.includes('cardinality');
    }
};
TelegrafsPage_TelegrafsPage = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], TelegrafsPage_TelegrafsPage);
const TelegrafsPage_mstp = (state) => {
    const org = Object(selectors["a" /* getOrg */])(state);
    const { cloud: { limits }, } = state;
    const limitedResources = Object(utils_limits["k" /* extractRateLimitResources */])(limits);
    return { org, limitedResources };
};
/* harmony default export */ var containers_TelegrafsPage = (Object(es["b" /* connect */])(TelegrafsPage_mstp)(TelegrafsPage_TelegrafsPage));

// CONCATENATED MODULE: ./src/clientLibraries/graphics/CSharpLogo.tsx

const CSharpLogo = () => {
    return (react_default.a.createElement("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 300 300" },
        react_default.a.createElement("style", null, `
          .csharp0{fill:none;}
		  .csharp1{fill:#9A4993;}
		  .csharp2{fill:#6A1577;}
		  .csharp3{fill:#813084;}
		  .csharp4{fill:#FFFFFF;}
        `),
        react_default.a.createElement("rect", { className: "csharp0", width: "300", height: "300" }),
        react_default.a.createElement("g", null,
            react_default.a.createElement("path", { id: "XMLID_7_", className: "csharp1", d: "M230,113c0-3-0.6-5.7-2-8c-1.3-2.3-3.2-4.1-5.8-5.6c-21.3-12.3-42.6-24.5-63.9-36.8\n\t\tc-5.7-3.3-11.3-3.2-17,0.2c-8.5,5-50.9,29.3-63.6,36.6c-5.2,3-7.7,7.6-7.7,13.6c0,24.7,0,49.4,0,74.1c0,3,0.6,5.6,1.9,7.8\n\t\tc1.3,2.3,3.2,4.3,5.9,5.8c12.6,7.3,55.1,31.6,63.6,36.6c5.7,3.4,11.3,3.5,17,0.2c21.3-12.3,42.6-24.5,63.9-36.8\n\t\tc2.6-1.5,4.6-3.5,5.9-5.8c1.2-2.3,1.9-4.9,1.9-7.8C230,187,230,137.7,230,113" }),
            react_default.a.createElement("path", { id: "XMLID_4_", className: "csharp2", d: "M150.2,149.8l-78.4,45.1c1.3,2.3,3.2,4.3,5.9,5.8c12.6,7.3,55.1,31.6,63.6,36.6\n\t\tc5.7,3.4,11.3,3.5,17,0.2c21.3-12.3,42.6-24.5,63.9-36.8c2.6-1.5,4.6-3.5,5.9-5.8L150.2,149.8" }),
            react_default.a.createElement("path", { id: "XMLID_5_", className: "csharp2", d: "M127,163.1c4.6,8,13.1,13.3,23,13.3c9.9,0,18.5-5.4,23.1-13.5l-22.8-13.2L127,163.1" }),
            react_default.a.createElement("path", { id: "XMLID_6_", className: "csharp3", d: "M230,113c0-3-0.6-5.7-2-8l-77.8,44.8l77.9,45.1c1.2-2.3,1.9-4.9,1.9-7.8\n\t\tC230,187,230,137.7,230,113" }),
            react_default.a.createElement("path", { id: "XMLID_9_", className: "csharp4", d: "M173.1,163c-4.5,8-13.2,13.5-23.1,13.5c-9.8,0-18.4-5.4-23-13.3c-2.2-3.9-3.5-8.3-3.5-13.1\n\t\tc0-14.6,11.8-26.5,26.5-26.5c9.8,0,18.3,5.3,22.9,13.2l23.1-13.3c-9.2-15.9-26.4-26.5-46-26.5c-29.3,0-53.1,23.8-53.1,53.1\n\t\tc0,9.6,2.6,18.7,7,26.4c9.2,16,26.4,26.7,46.1,26.7c19.8,0,37-10.8,46.1-26.8L173.1,163" }),
            react_default.a.createElement("g", { id: "XMLID_32_" },
                react_default.a.createElement("rect", { id: "XMLID_1_", x: "197", y: "137.4", className: "csharp4", width: "5.3", height: "25.5" }),
                react_default.a.createElement("rect", { id: "XMLID_30_", x: "208.7", y: "137.4", className: "csharp4", width: "5.3", height: "25.5" }),
                react_default.a.createElement("rect", { id: "XMLID_31_", x: "202.9", y: "131.6", transform: "matrix(-1.836970e-16 1 -1 -1.836970e-16 349.8133 -61.1451)", className: "csharp4", width: "5.3", height: "25.5" }),
                react_default.a.createElement("rect", { id: "XMLID_23_", x: "202.9", y: "143.3", transform: "matrix(-1.836970e-16 1 -1 -1.836970e-16 361.4733 -49.4852)", className: "csharp4", width: "5.3", height: "25.5" })))));
};
/* harmony default export */ var graphics_CSharpLogo = (CSharpLogo);

// CONCATENATED MODULE: ./src/clientLibraries/graphics/GoLogo.tsx

const GoLogo = () => {
    return (react_default.a.createElement("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 300 300" },
        react_default.a.createElement("style", null, `
          .go0{fill:none;}
          .go1{fill:#2DBCAF;}
        `),
        react_default.a.createElement("rect", { className: "go0", width: 300, height: 300 }),
        react_default.a.createElement("g", null,
            react_default.a.createElement("g", null,
                react_default.a.createElement("g", null,
                    react_default.a.createElement("g", null,
                        react_default.a.createElement("path", { className: "go1", d: "M32.1,130.4c-0.5,0-0.6-0.3-0.4-0.6l2.7-3.5c0.3-0.4,0.9-0.6,1.4-0.6h46.2c0.5,0,0.6,0.4,0.4,0.8l-2.2,3.4\n              \t\t\t\t\tc-0.3,0.4-0.9,0.8-1.3,0.8L32.1,130.4z" })))),
            react_default.a.createElement("g", null,
                react_default.a.createElement("g", null,
                    react_default.a.createElement("g", null,
                        react_default.a.createElement("path", { className: "go1", d: "M12.5,142.3c-0.5,0-0.6-0.3-0.4-0.6l2.7-3.5c0.3-0.4,0.9-0.6,1.4-0.6h59.1c0.5,0,0.8,0.4,0.6,0.8l-1,3.1\n              \t\t\t\t\tc-0.1,0.5-0.6,0.8-1.2,0.8L12.5,142.3z" })))),
            react_default.a.createElement("g", null,
                react_default.a.createElement("g", null,
                    react_default.a.createElement("g", null,
                        react_default.a.createElement("path", { className: "go1", d: "M43.9,154.2c-0.5,0-0.6-0.4-0.4-0.8l1.8-3.2c0.3-0.4,0.8-0.8,1.3-0.8h25.9c0.5,0,0.8,0.4,0.8,0.9l-0.3,3.1\n              \t\t\t\t\tc0,0.5-0.5,0.9-0.9,0.9L43.9,154.2z" })))),
            react_default.a.createElement("g", null,
                react_default.a.createElement("g", { id: "CXHf1q_1_" },
                    react_default.a.createElement("g", null,
                        react_default.a.createElement("g", null,
                            react_default.a.createElement("path", { className: "go1", d: "M178.3,128.1c-8.2,2.1-13.7,3.6-21.8,5.7c-1.9,0.5-2.1,0.6-3.8-1.3c-1.9-2.2-3.4-3.6-6.1-4.9\n                \t\t\t\t\t\tc-8.2-4-16.1-2.8-23.4,1.9c-8.8,5.7-13.3,14.1-13.2,24.6c0.1,10.4,7.3,18.9,17.5,20.3c8.8,1.2,16.2-1.9,22-8.5\n                \t\t\t\t\t\tc1.2-1.4,2.2-3,3.5-4.8c-4.7,0-10.5,0-25,0c-2.7,0-3.4-1.7-2.5-3.9c1.7-4,4.8-10.7,6.6-14.1c0.4-0.8,1.3-2.1,3.2-2.1\n                \t\t\t\t\t\tc6.6,0,31,0,47.1,0c-0.3,3.5-0.3,7-0.8,10.5c-1.4,9.3-4.9,17.9-10.6,25.4c-9.3,12.3-21.5,19.9-36.9,22\n                \t\t\t\t\t\tc-12.7,1.7-24.5-0.8-34.8-8.5c-9.6-7.3-15-16.8-16.4-28.8c-1.7-14.1,2.5-26.8,11-37.9c9.2-12,21.4-19.7,36.3-22.4\n                \t\t\t\t\t\tc12.2-2.2,23.8-0.8,34.3,6.3c6.9,4.5,11.8,10.7,15,18.3C180.4,127,179.8,127.7,178.3,128.1z" })),
                        react_default.a.createElement("g", null,
                            react_default.a.createElement("path", { className: "go1", d: "M221.2,199.7c-11.8-0.3-22.5-3.6-31.6-11.4c-7.6-6.6-12.4-15-14-25c-2.3-14.6,1.7-27.6,10.5-39.1\n                \t\t\t\t\t\tc9.5-12.4,20.9-18.9,36.3-21.6c13.2-2.3,25.6-1,36.9,6.6c10.2,7,16.6,16.4,18.3,28.9c2.2,17.5-2.8,31.7-14.9,43.9\n                \t\t\t\t\t\tc-8.5,8.7-19,14.1-31.1,16.6C228,199.2,224.5,199.3,221.2,199.7z M252,147.4c-0.1-1.7-0.1-3-0.4-4.3\n                \t\t\t\t\t\tc-2.3-12.8-14.1-20.1-26.4-17.2c-12,2.7-19.8,10.4-22.7,22.5c-2.3,10.1,2.6,20.3,11.9,24.5c7.1,3.1,14.2,2.7,21.1-0.8\n                \t\t\t\t\t\tC245.8,166.8,251.3,158.5,252,147.4z" }))))))));
};
/* harmony default export */ var graphics_GoLogo = (GoLogo);

// CONCATENATED MODULE: ./src/clientLibraries/graphics/JavaLogo.tsx

const JavaLogo = () => {
    return (react_default.a.createElement("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 300 300" },
        react_default.a.createElement("style", null, `
          .java0{fill:none;}
          .java1{fill:#0074BD;}
          .java2{fill:#EA2D2E;}
        `),
        react_default.a.createElement("rect", { className: "java0", width: "300", height: "300" }),
        react_default.a.createElement("g", null,
            react_default.a.createElement("path", { id: "XMLID_25_", className: "java1", d: "M128.3,151.2c0,0-6.2,3.6,4.4,4.9c12.9,1.5,19.6,1.3,33.8-1.4c0,0,3.8,2.3,9,4.4\n\t\tC143.6,172.8,103.2,158.3,128.3,151.2L128.3,151.2z" }),
            react_default.a.createElement("path", { id: "XMLID_24_", className: "java1", d: "M124.4,133.4c0,0-7,5.2,3.7,6.3c13.8,1.4,24.7,1.5,43.6-2.1c0,0,2.6,2.6,6.7,4.1\n\t\tC139.8,153,96.8,142.5,124.4,133.4L124.4,133.4z" }),
            react_default.a.createElement("path", { id: "XMLID_22_", className: "java2", d: "M157.3,103c7.9,9.1-2.1,17.2-2.1,17.2s20-10.3,10.8-23.3c-8.6-12.1-15.2-18,20.5-38.7\n\t\tC186.5,58.3,130.6,72.3,157.3,103L157.3,103z" }),
            react_default.a.createElement("path", { id: "XMLID_21_", className: "java1", d: "M199.6,164.5c0,0,4.6,3.8-5.1,6.7c-18.4,5.6-76.8,7.3-93,0.2c-5.8-2.5,5.1-6.1,8.5-6.8\n\t\tc3.6-0.8,5.6-0.6,5.6-0.6c-6.5-4.6-41.9,9-18,12.8C162.9,187.4,216.5,172.1,199.6,164.5L199.6,164.5z" }),
            react_default.a.createElement("path", { id: "XMLID_20_", className: "java1", d: "M131.3,114.8c0,0-29.7,7.1-10.5,9.6c8.1,1.1,24.2,0.8,39.3-0.4c12.3-1,24.6-3.2,24.6-3.2\n\t\ts-4.3,1.9-7.5,4c-30.1,7.9-88.4,4.2-71.6-3.9C119.8,114.1,131.3,114.8,131.3,114.8L131.3,114.8z" }),
            react_default.a.createElement("path", { id: "XMLID_19_", className: "java1", d: "M184.6,144.6c30.6-15.9,16.5-31.2,6.6-29.2c-2.4,0.5-3.5,0.9-3.5,0.9s0.9-1.4,2.6-2\n\t\tc19.6-6.9,34.6,20.3-6.3,31C183.9,145.4,184.4,145,184.6,144.6L184.6,144.6z" }),
            react_default.a.createElement("path", { id: "XMLID_18_", className: "java2", d: "M166.1,25c0,0,17,17-16.1,43.1c-26.5,20.9-6,32.9,0,46.5c-15.5-14-26.8-26.3-19.2-37.7\n\t\tC142,60.1,172.9,51.9,166.1,25L166.1,25z" }),
            react_default.a.createElement("path", { id: "XMLID_17_", className: "java1", d: "M134.3,187.7c29.4,1.9,74.6-1,75.6-15c0,0-2.1,5.3-24.3,9.5c-25.1,4.7-56.1,4.2-74.4,1.1\n\t\tC111.2,183.4,115,186.5,134.3,187.7L134.3,187.7z" }),
            react_default.a.createElement("path", { className: "java2", d: "M208.6,212.7h-0.9v-0.5h2.4v0.5h-0.9v2.5h-0.6L208.6,212.7L208.6,212.7L208.6,212.7z M213.4,212.8L213.4,212.8\n\t\tl-0.9,2.4h-0.4l-0.9-2.4h0v2.4h-0.6v-3h0.9l0.8,2.1l0.8-2.1h0.9v3h-0.6L213.4,212.8L213.4,212.8z" }),
            react_default.a.createElement("path", { className: "java2", d: "M129.5,240.9c-2.8,2.4-5.7,3.8-8.3,3.8c-3.7,0-5.8-2.3-5.8-5.9c0-3.9,2.2-6.8,10.9-6.8h3.2V240.9L129.5,240.9\n\t\tL129.5,240.9z M137.2,249.5v-26.7c0-6.8-3.9-11.3-13.3-11.3c-5.5,0-10.3,1.4-14.2,3.1l1.1,4.7c3.1-1.1,7.1-2.2,11-2.2\n\t\tc5.4,0,7.7,2.2,7.7,6.7v3.4h-2.7c-13.1,0-19.1,5.1-19.1,12.8c0,6.6,3.9,10.4,11.3,10.4c4.7,0,8.3-2,11.6-4.8l0.6,4.1H137.2\n\t\tL137.2,249.5z" }),
            react_default.a.createElement("path", { id: "XMLID_12_", className: "java2", d: "M162.7,249.5h-9.5l-11.5-37.4h8.3l7.1,23l1.6,6.9c3.6-10,6.2-20.1,7.4-29.9h8.1\n\t\tC172.1,224.5,168.2,238,162.7,249.5L162.7,249.5z" }),
            react_default.a.createElement("path", { className: "java2", d: "M199.3,240.9c-2.8,2.4-5.7,3.8-8.3,3.8c-3.8,0-5.8-2.3-5.8-5.9c0-3.9,2.2-6.8,10.9-6.8h3.2L199.3,240.9\n\t\tL199.3,240.9L199.3,240.9z M207,249.5v-26.7c0-6.8-3.9-11.3-13.3-11.3c-5.5,0-10.3,1.4-14.2,3.1l1.1,4.7c3.1-1.1,7.1-2.2,11-2.2\n\t\tc5.4,0,7.7,2.2,7.7,6.7v3.4h-2.7c-13.1,0-19.1,5.1-19.1,12.8c0,6.6,3.9,10.4,11.3,10.4c4.7,0,8.3-2,11.6-4.8l0.6,4.1H207L207,249.5\n\t\tz" }),
            react_default.a.createElement("path", { id: "XMLID_8_", className: "java2", d: "M99.3,255.9c-2.2,3.2-5.7,5.7-9.6,7.1l-3.8-4.5c2.9-1.5,5.5-3.9,6.6-6.2c1-2,1.4-4.6,1.4-10.8\n\t\tv-42.7h8.1V241C102.2,249.3,101.5,252.6,99.3,255.9L99.3,255.9z" }))));
};
/* harmony default export */ var graphics_JavaLogo = (JavaLogo);

// CONCATENATED MODULE: ./src/clientLibraries/graphics/JSLogo.tsx

const JSLogo = () => {
    return (react_default.a.createElement("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 300 300" },
        react_default.a.createElement("style", null, `
           .js0{fill:none;}
           .js1{fill:#699F63;}
           .js2{fill-rule:evenodd;clip-rule:evenodd;fill:#FFFFFF;}
           .js3{fill-rule:evenodd;clip-rule:evenodd;fill:#699F63;}
           .js4{clip-path:url(#XMLID_5_);}
           .js5{fill:url(#SVGID_1_);}
           .js6{fill:url(#SVGID_2_);}
           .js7{fill:url(#SVGID_3_);}
           .js8{fill:url(#SVGID_4_);}
           .js9{fill:url(#SVGID_5_);}
           .js10{fill:url(#SVGID_6_);}
        `),
        react_default.a.createElement("rect", { className: "js0", width: 300, height: 300 }),
        react_default.a.createElement("g", null,
            react_default.a.createElement("g", null,
                react_default.a.createElement("path", { className: "js1", d: "M148.5,235.7c-0.9,0-1.8-0.2-2.6-0.7l-8.1-4.8c-1.2-0.7-0.6-0.9-0.2-1.1c1.6-0.6,1.9-0.7,3.7-1.7\n          \t\t\tc0.2-0.1,0.4-0.1,0.6,0l6.3,3.7c0.2,0.1,0.5,0.1,0.8,0l24.4-14.1c0.2-0.1,0.4-0.4,0.4-0.7v-28.1c0-0.3-0.1-0.5-0.4-0.7l-24.4-14.1\n          \t\t\tc-0.2-0.1-0.5-0.1-0.8,0l-24.4,14.1c-0.2,0.1-0.4,0.4-0.4,0.7v28.1c0,0.3,0.1,0.5,0.4,0.7l6.7,3.9c3.6,1.8,5.8-0.3,5.8-2.5v-27.8\n          \t\t\tc0-0.4,0.3-0.7,0.7-0.7h3.1c0.4,0,0.7,0.3,0.7,0.7v27.8c0,4.8-2.6,7.6-7.2,7.6c-1.4,0-2.5,0-5.6-1.5l-6.4-3.7\n          \t\t\tc-1.6-0.9-2.6-2.6-2.6-4.4v-28.1c0-1.8,1-3.5,2.6-4.4l24.4-14.1c1.5-0.9,3.6-0.9,5.1,0l24.4,14.1c1.6,0.9,2.6,2.6,2.6,4.4v28.1\n          \t\t\tc0,1.8-1,3.5-2.6,4.4L151,235C150.2,235.4,149.4,235.7,148.5,235.7z" }),
                react_default.a.createElement("path", { className: "js1", d: "M156,216.3c-10.7,0-12.9-4.9-12.9-9c0-0.4,0.3-0.7,0.7-0.7h3.2c0.4,0,0.6,0.3,0.7,0.6\n          \t\t\tc0.5,3.2,1.9,4.8,8.3,4.8c5.1,0,7.3-1.2,7.3-3.9c0-1.6-0.6-2.7-8.6-3.5c-6.7-0.7-10.8-2.1-10.8-7.5c0-4.9,4.1-7.9,11.1-7.9\n          \t\t\tc7.8,0,11.7,2.7,12.2,8.5c0,0.2-0.1,0.4-0.2,0.5c-0.1,0.1-0.3,0.2-0.5,0.2h-3.2c-0.3,0-0.6-0.2-0.7-0.6c-0.8-3.4-2.6-4.5-7.6-4.5\n          \t\t\tc-5.6,0-6.3,2-6.3,3.4c0,1.8,0.8,2.3,8.3,3.3c7.5,1,11.1,2.4,11.1,7.7C168.1,213.3,163.7,216.3,156,216.3z" })),
            react_default.a.createElement("g", null,
                react_default.a.createElement("path", { className: "js1", d: "M191.1,186.8c0,2.6-2.1,4.7-4.7,4.7c-2.6,0-4.7-2.1-4.7-4.7c0-2.7,2.2-4.7,4.7-4.7\n          \t\t\tC189,182.1,191.1,184.1,191.1,186.8z M182.5,186.8c0,2.2,1.8,4,3.9,4c2.2,0,4-1.8,4-4c0-2.2-1.8-3.9-4-3.9\n          \t\t\tC184.3,182.8,182.5,184.6,182.5,186.8z M184.7,184.1h1.8c0.6,0,1.8,0,1.8,1.4c0,1-0.6,1.2-1,1.3c0.7,0,0.8,0.5,0.9,1.2\n          \t\t\tc0.1,0.4,0.1,1.1,0.3,1.4h-1.1c0-0.2-0.2-1.6-0.2-1.7c-0.1-0.3-0.2-0.4-0.5-0.4h-0.9v2.1h-1V184.1z M185.7,186.5h0.8\n          \t\t\tc0.7,0,0.8-0.5,0.8-0.7c0-0.7-0.5-0.7-0.8-0.7h-0.8V186.5z" })),
            react_default.a.createElement("path", { className: "js2", d: "M72.9,125.6c0-1.1-0.6-2.2-1.6-2.7L45.5,108c-0.4-0.3-0.9-0.4-1.4-0.4c0,0-0.2,0-0.3,0c-0.5,0-1,0.2-1.4,0.4\n        \t\tl-25.9,14.9c-1,0.6-1.6,1.6-1.6,2.7l0.1,40.1c0,0.6,0.3,1.1,0.8,1.3c0.5,0.3,1.1,0.3,1.6,0l15.4-8.8c1-0.6,1.6-1.6,1.6-2.7v-18.7\n        \t\tc0-1.1,0.6-2.1,1.6-2.7l6.5-3.8c0.5-0.3,1-0.4,1.6-0.4c0.5,0,1.1,0.1,1.6,0.4l6.5,3.8c1,0.6,1.6,1.6,1.6,2.7v18.7\n        \t\tc0,1.1,0.6,2.1,1.6,2.7l15.4,8.8c0.5,0.3,1.1,0.3,1.6,0c0.5-0.3,0.8-0.8,0.8-1.3L72.9,125.6z" }),
            react_default.a.createElement("path", { className: "js2", d: "M197.3,70.5c-0.5-0.3-1.1-0.3-1.6,0c-0.5,0.3-0.8,0.8-0.8,1.3v39.7c0,0.4-0.2,0.8-0.5,0.9\n        \t\tc-0.3,0.2-0.8,0.2-1.1,0l-6.5-3.7c-1-0.6-2.2-0.6-3.1,0l-25.9,14.9c-1,0.6-1.6,1.6-1.6,2.7v29.9c0,1.1,0.6,2.1,1.6,2.7l25.9,14.9\n        \t\tc1,0.6,2.2,0.6,3.1,0l25.9-14.9c1-0.6,1.6-1.6,1.6-2.7V81.8c0-1.1-0.6-2.2-1.6-2.7L197.3,70.5z M194.9,146.4c0,0.3-0.1,0.5-0.4,0.7\n        \t\tl-8.9,5.1c-0.2,0.1-0.5,0.1-0.8,0l-8.9-5.1c-0.2-0.1-0.4-0.4-0.4-0.7v-10.3c0-0.3,0.1-0.5,0.4-0.7l8.9-5.1c0.2-0.1,0.5-0.1,0.8,0\n        \t\tl8.9,5.1c0.2,0.1,0.4,0.4,0.4,0.7V146.4z" }),
            react_default.a.createElement("g", null,
                react_default.a.createElement("path", { className: "js2", d: "M283.4,135.9c1-0.6,1.6-1.6,1.6-2.7V126c0-1.1-0.6-2.1-1.6-2.7l-25.7-14.9c-1-0.6-2.2-0.6-3.1,0l-25.9,14.9\n          \t\t\tc-1,0.6-1.6,1.6-1.6,2.7v29.8c0,1.1,0.6,2.2,1.6,2.7l25.7,14.6c0.9,0.5,2.1,0.5,3.1,0l15.5-8.6c0.5-0.3,0.8-0.8,0.8-1.4\n          \t\t\tc0-0.6-0.3-1.1-0.8-1.4l-26-14.9c-0.5-0.3-0.8-0.8-0.8-1.4v-9.4c0-0.6,0.3-1.1,0.8-1.4l8.1-4.7c0.5-0.3,1.1-0.3,1.6,0l8.1,4.7\n          \t\t\tc0.5,0.3,0.8,0.8,0.8,1.4v7.4c0,0.6,0.3,1.1,0.8,1.4c0.5,0.3,1.1,0.3,1.6,0L283.4,135.9z" }),
                react_default.a.createElement("path", { className: "js3", d: "M255.8,134.5c0.2-0.1,0.4-0.1,0.6,0l5,2.9c0.2,0.1,0.3,0.3,0.3,0.5v5.7c0,0.2-0.1,0.4-0.3,0.5l-5,2.9\n          \t\t\tc-0.2,0.1-0.4,0.1-0.6,0l-5-2.9c-0.2-0.1-0.3-0.3-0.3-0.5v-5.7c0-0.2,0.1-0.4,0.3-0.5L255.8,134.5z" })),
            react_default.a.createElement("g", null,
                react_default.a.createElement("defs", null,
                    react_default.a.createElement("path", { id: "XMLID_143_", d: "M116.2,108.5c-1-0.6-2.1-0.6-3.1,0l-25.7,14.8c-1,0.6-1.6,1.6-1.6,2.7v29.7c0,1.1,0.6,2.1,1.6,2.7\n            \t\t\t\tl25.7,14.9c1,0.6,2.1,0.6,3.1,0l25.7-14.9c1-0.6,1.6-1.6,1.6-2.7v-29.7c0-1.1-0.6-2.1-1.6-2.7L116.2,108.5z" })),
                react_default.a.createElement("linearGradient", { id: "XMLID_4_", gradientUnits: "userSpaceOnUse", x1: "125.1041", y1: "119.5736", x2: "101.8713", y2: "166.9685" },
                    react_default.a.createElement("stop", { offset: 0, style: { stopColor: '#41873F' } }),
                    react_default.a.createElement("stop", { offset: "0.3288", style: { stopColor: '#418B3D' } }),
                    react_default.a.createElement("stop", { offset: "0.6352", style: { stopColor: '#419637' } }),
                    react_default.a.createElement("stop", { offset: "0.9319", style: { stopColor: '#3FA92D' } }),
                    react_default.a.createElement("stop", { offset: 1, style: { stopColor: '#3FAE2A' } })),
                react_default.a.createElement("use", { xlinkHref: "#XMLID_143_", style: {
                        overflow: 'visible',
                        fillRule: 'evenodd',
                        clipRule: 'evenodd',
                        fill: 'url(#XMLID_4_)',
                    } }),
                react_default.a.createElement("clipPath", { id: "XMLID_5_" },
                    react_default.a.createElement("use", { xlinkHref: "#XMLID_143_", style: { overflow: 'visible' } })),
                react_default.a.createElement("g", { className: "js4" },
                    react_default.a.createElement("path", { className: "js0", d: "M113,108.5l-25.8,14.8c-1,0.6-1.7,1.6-1.7,2.7v29.7c0,0.7,0.3,1.4,0.8,2l29-49.5\n            \t\t\t\tC114.6,108,113.8,108.1,113,108.5z" }),
                    react_default.a.createElement("path", { className: "js0", d: "M115.5,173.6c0.3-0.1,0.5-0.2,0.7-0.3l25.7-14.9c1-0.6,1.6-1.6,1.6-2.7v-29.7c0-0.8-0.4-1.6-0.9-2.2\n            \t\t\t\tL115.5,173.6z" }),
                    react_default.a.createElement("linearGradient", { id: "SVGID_1_", gradientUnits: "userSpaceOnUse", x1: "110.7341", y1: "144.3775", x2: "175.9236", y2: "96.212" },
                        react_default.a.createElement("stop", { offset: "0.1376", style: { stopColor: '#41873F' } }),
                        react_default.a.createElement("stop", { offset: "0.4032", style: { stopColor: '#54A044' } }),
                        react_default.a.createElement("stop", { offset: "0.7136", style: { stopColor: '#66B848' } }),
                        react_default.a.createElement("stop", { offset: "0.9081", style: { stopColor: '#6CC04A' } })),
                    react_default.a.createElement("path", { className: "js5", d: "M142,123.4l-25.8-14.8c-0.3-0.1-0.5-0.3-0.8-0.3l-29,49.5c0.2,0.3,0.5,0.5,0.9,0.7l25.8,14.9\n            \t\t\t\tc0.7,0.4,1.6,0.5,2.4,0.3l27.1-49.7C142.5,123.7,142.2,123.5,142,123.4z" })),
                react_default.a.createElement("g", { className: "js4" },
                    react_default.a.createElement("path", { className: "js0", d: "M143.6,155.8v-29.7c0-1.1-0.7-2.1-1.6-2.7l-25.8-14.8c-0.3-0.2-0.6-0.3-0.9-0.3l28.3,48.3\n            \t\t\t\tC143.6,156.2,143.6,156,143.6,155.8z" }),
                    react_default.a.createElement("path", { className: "js0", d: "M87.3,123.4c-1,0.6-1.7,1.6-1.7,2.7v29.7c0,1.1,0.7,2.1,1.7,2.7l25.8,14.9c0.6,0.4,1.3,0.5,2,0.4l-27.7-50.4\n            \t\t\t\tL87.3,123.4z" }),
                    react_default.a.createElement("linearGradient", { id: "SVGID_2_", gradientUnits: "userSpaceOnUse", x1: "84.9192", y1: "103.1674", x2: "144.3774", y2: "103.1674" },
                        react_default.a.createElement("stop", { offset: "9.191646e-02", style: { stopColor: '#6CC04A' } }),
                        react_default.a.createElement("stop", { offset: "0.2864", style: { stopColor: '#66B848' } }),
                        react_default.a.createElement("stop", { offset: "0.5968", style: { stopColor: '#54A044' } }),
                        react_default.a.createElement("stop", { offset: "0.8624", style: { stopColor: '#41873F' } })),
                    react_default.a.createElement("polygon", { className: "js6", points: "112.2,103.1 111.9,103.3 112.4,103.3 \t\t\t" }),
                    react_default.a.createElement("linearGradient", { id: "SVGID_3_", gradientUnits: "userSpaceOnUse", x1: "84.9192", y1: "140.8973", x2: "144.3774", y2: "140.8973" },
                        react_default.a.createElement("stop", { offset: "9.191646e-02", style: { stopColor: '#6CC04A' } }),
                        react_default.a.createElement("stop", { offset: "0.2864", style: { stopColor: '#66B848' } }),
                        react_default.a.createElement("stop", { offset: "0.5968", style: { stopColor: '#54A044' } }),
                        react_default.a.createElement("stop", { offset: "0.8624", style: { stopColor: '#41873F' } })),
                    react_default.a.createElement("path", { className: "js7", d: "M142,158.4c0.7-0.4,1.3-1.2,1.5-2l-28.3-48.3c-0.7-0.1-1.5,0-2.2,0.3l-25.6,14.8l27.7,50.4\n            \t\t\t\tc0.4-0.1,0.8-0.2,1.1-0.4L142,158.4z" }),
                    react_default.a.createElement("linearGradient", { id: "SVGID_4_", gradientUnits: "userSpaceOnUse", x1: "84.9192", y1: "157.8714", x2: "144.3774", y2: "157.8714" },
                        react_default.a.createElement("stop", { offset: "9.191646e-02", style: { stopColor: '#6CC04A' } }),
                        react_default.a.createElement("stop", { offset: "0.2864", style: { stopColor: '#66B848' } }),
                        react_default.a.createElement("stop", { offset: "0.5968", style: { stopColor: '#54A044' } }),
                        react_default.a.createElement("stop", { offset: "0.8624", style: { stopColor: '#41873F' } })),
                    react_default.a.createElement("polygon", { className: "js8", points: "144.4,158 144.2,157.7 144.2,158.1 \t\t\t" }),
                    react_default.a.createElement("linearGradient", { id: "SVGID_5_", gradientUnits: "userSpaceOnUse", x1: "84.9192", y1: "165.5433", x2: "144.3774", y2: "165.5433" },
                        react_default.a.createElement("stop", { offset: "9.191646e-02", style: { stopColor: '#6CC04A' } }),
                        react_default.a.createElement("stop", { offset: "0.2864", style: { stopColor: '#66B848' } }),
                        react_default.a.createElement("stop", { offset: "0.5968", style: { stopColor: '#54A044' } }),
                        react_default.a.createElement("stop", { offset: "0.8624", style: { stopColor: '#41873F' } })),
                    react_default.a.createElement("path", { className: "js9", d: "M142,158.4l-25.7,14.9c-0.4,0.2-0.7,0.3-1.1,0.4l0.5,0.9l28.6-16.6v-0.4l-0.7-1.2\n            \t\t\t\tC143.3,157.3,142.7,158,142,158.4z" }),
                    react_default.a.createElement("linearGradient", { id: "SVGID_6_", gradientUnits: "userSpaceOnUse", x1: "153.0397", y1: "118.1685", x2: "116.3697", y2: "192.9754" },
                        react_default.a.createElement("stop", { offset: 0, style: { stopColor: '#41873F' } }),
                        react_default.a.createElement("stop", { offset: "0.3288", style: { stopColor: '#418B3D' } }),
                        react_default.a.createElement("stop", { offset: "0.6352", style: { stopColor: '#419637' } }),
                        react_default.a.createElement("stop", { offset: "0.9319", style: { stopColor: '#3FA92D' } }),
                        react_default.a.createElement("stop", { offset: 1, style: { stopColor: '#3FAE2A' } })),
                    react_default.a.createElement("path", { className: "js10", d: "M142,158.4l-25.7,14.9c-0.4,0.2-0.7,0.3-1.1,0.4l0.5,0.9l28.6-16.6v-0.4l-0.7-1.2\n            \t\t\t\tC143.3,157.3,142.7,158,142,158.4z" }))))));
};
/* harmony default export */ var graphics_JSLogo = (JSLogo);

// CONCATENATED MODULE: ./src/clientLibraries/graphics/PythonLogo.tsx

const PythonLogo = () => {
    return (react_default.a.createElement("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 300 300" },
        react_default.a.createElement("style", null, `
          .python0{fill:none;}
          .python1{fill:url(#path1948_1_);}
          .python2{fill:url(#path1950_1_);}
        `),
        react_default.a.createElement("rect", { className: "python0", width: 300, height: 300 }),
        react_default.a.createElement("g", null,
            react_default.a.createElement("linearGradient", { id: "path1948_1_", gradientUnits: "userSpaceOnUse", x1: "125.7967", y1: "170.4548", x2: "290.6952", y2: "28.5818", gradientTransform: "matrix(0.5625 0 0 -0.568 -8.9623 166.6543)" },
                react_default.a.createElement("stop", { offset: 0, style: { stopColor: '#5A9FD4' } }),
                react_default.a.createElement("stop", { offset: 1, style: { stopColor: '#306998' } })),
            react_default.a.createElement("path", { id: "path1948", className: "python1", d: "M149,65c-6.9,0-13.6,0.6-19.4,1.7c-17.2,3-20.3,9.4-20.3,21.1v15.5h40.6v5.2h-40.6H94.1\n        \t\tc-11.8,0-22.1,7.1-25.3,20.6c-3.7,15.4-3.9,25.1,0,41.2c2.9,12,9.8,20.6,21.6,20.6h13.9v-18.5c0-13.4,11.6-25.2,25.3-25.2h40.5\n        \t\tc11.3,0,20.3-9.3,20.3-20.6V87.7c0-11-9.3-19.2-20.3-21.1C163.2,65.5,155.9,65,149,65z M127.1,77.4c4.2,0,7.6,3.5,7.6,7.8\n        \t\tc0,4.3-3.4,7.7-7.6,7.7c-4.2,0-7.6-3.4-7.6-7.7C119.5,80.9,122.9,77.4,127.1,77.4z" }),
            react_default.a.createElement("linearGradient", { id: "path1950_1_", gradientUnits: "userSpaceOnUse", x1: "354.446", y1: "-57.2856", x2: "295.5609", y2: "26.0267", gradientTransform: "matrix(0.5625 0 0 -0.568 -8.9623 166.6543)" },
                react_default.a.createElement("stop", { offset: 0, style: { stopColor: '#FFD43B' } }),
                react_default.a.createElement("stop", { offset: 1, style: { stopColor: '#FFE873' } })),
            react_default.a.createElement("path", { id: "path1950", className: "python2", d: "M195.5,108.3v18c0,14-11.8,25.7-25.3,25.7h-40.5c-11.1,0-20.3,9.5-20.3,20.6v38.6\n        \t\tc0,11,9.6,17.5,20.3,20.6c12.8,3.8,25.1,4.5,40.5,0c10.2-3,20.3-8.9,20.3-20.6v-15.5h-40.5v-5.2h40.5h20.3\n        \t\tc11.8,0,16.2-8.2,20.3-20.6c4.2-12.7,4.1-24.9,0-41.2c-2.9-11.7-8.5-20.6-20.3-20.6H195.5z M172.7,206.1c4.2,0,7.6,3.4,7.6,7.7\n        \t\tc0,4.3-3.4,7.8-7.6,7.8c-4.2,0-7.6-3.5-7.6-7.8C165.1,209.6,168.5,206.1,172.7,206.1z" }))));
};
/* harmony default export */ var graphics_PythonLogo = (PythonLogo);

// CONCATENATED MODULE: ./src/clientLibraries/graphics/RubyLogo.tsx

const RubyLogo = () => {
    return (react_default.a.createElement("svg", { width: "50%", height: "50%", id: "ruby_logo", viewBox: "0 0 100 100", xmlSpace: "preserve" },
        react_default.a.createElement("style", null, `
          .ruby_st0{fill-rule:evenodd;clip-rule:evenodd;fill:url(#RUBY_SVGID_1_);}
          .ruby_st1{fill-rule:evenodd;clip-rule:evenodd;fill:url(#RUBY_SVGID_2_);}
          .ruby_st2{fill-rule:evenodd;clip-rule:evenodd;fill:url(#RUBY_SVGID_3_);}
          .ruby_st3{fill-rule:evenodd;clip-rule:evenodd;fill:url(#RUBY_SVGID_4_);}
          .ruby_st4{fill-rule:evenodd;clip-rule:evenodd;fill:url(#RUBY_SVGID_5_);}
          .ruby_st5{fill-rule:evenodd;clip-rule:evenodd;fill:url(#RUBY_SVGID_6_);}
          .ruby_st6{fill-rule:evenodd;clip-rule:evenodd;fill:url(#RUBY_SVGID_7_);}
          .ruby_st7{fill-rule:evenodd;clip-rule:evenodd;fill:url(#RUBY_SVGID_8_);}
          .ruby_st8{fill-rule:evenodd;clip-rule:evenodd;fill:#FFFFFF;}
          .ruby_st9{fill-rule:evenodd;clip-rule:evenodd;fill:url(#RUBY_SVGID_9_);}
          .ruby_st10{fill-rule:evenodd;clip-rule:evenodd;fill:url(#RUBY_SVGID_10_);}
          .ruby_st11{fill-rule:evenodd;clip-rule:evenodd;fill:url(#RUBY_SVGID_11_);}
          .ruby_st12{fill-rule:evenodd;clip-rule:evenodd;fill:url(#RUBY_SVGID_12_);}
          .ruby_st13{fill-rule:evenodd;clip-rule:evenodd;fill:#AA3E35;}
          .ruby_st14{fill-rule:evenodd;clip-rule:evenodd;fill:url(#RUBY_SVGID_13_);}
          .ruby_st15{fill-rule:evenodd;clip-rule:evenodd;fill:url(#RUBY_SVGID_14_);}
          .ruby_st16{fill-rule:evenodd;clip-rule:evenodd;fill:url(#RUBY_SVGID_15_);}
          .ruby_st17{fill-rule:evenodd;clip-rule:evenodd;fill:url(#RUBY_SVGID_16_);}
        `),
        react_default.a.createElement("linearGradient", { id: "RUBY_SVGID_1_", gradientUnits: "userSpaceOnUse", x1: "87.8568", y1: "108.9284", x2: "66.7595", y2: "71.6801" },
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#F68F71' } }),
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#F68F71' } }),
            react_default.a.createElement("stop", { offset: "0.41", style: { stopColor: '#DC5242' } }),
            react_default.a.createElement("stop", { offset: "0.99", style: { stopColor: '#A72C32' } }),
            react_default.a.createElement("stop", { offset: "1", style: { stopColor: '#A72C32' } })),
        react_default.a.createElement("polygon", { className: "ruby_st0", points: "20.4,99.9 94.3,94.8 100,20.3 77.5,66 " }),
        react_default.a.createElement("linearGradient", { id: "RUBY_SVGID_2_", gradientUnits: "userSpaceOnUse", x1: "98.3669", y1: "77.6417", x2: "71.1783", y2: "59.3965" },
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#9B3F34' } }),
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#9B3F34' } }),
            react_default.a.createElement("stop", { offset: "0.99", style: { stopColor: '#A23E36' } }),
            react_default.a.createElement("stop", { offset: "1", style: { stopColor: '#A23E36' } })),
        react_default.a.createElement("polygon", { className: "ruby_st1", points: "70.8,73.8 94.4,94.8 88.1,50.9 " }),
        react_default.a.createElement("linearGradient", { id: "RUBY_SVGID_3_", gradientUnits: "userSpaceOnUse", x1: "76.6134", y1: "110.0583", x2: "49.4248", y2: "91.8131" },
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#9B3F34' } }),
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#9B3F34' } }),
            react_default.a.createElement("stop", { offset: "0.99", style: { stopColor: '#A23E36' } }),
            react_default.a.createElement("stop", { offset: "1", style: { stopColor: '#A23E36' } })),
        react_default.a.createElement("polygon", { className: "ruby_st2", points: "20.6,99.8 94.5,94.8 48,91.1 " }),
        react_default.a.createElement("linearGradient", { id: "RUBY_SVGID_4_", gradientUnits: "userSpaceOnUse", x1: "19.5308", y1: "64.4356", x2: "23.7457", y2: "91.8282" },
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#FFFFFF' } }),
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#FFFFFF' } }),
            react_default.a.createElement("stop", { offset: "0.23", style: { stopColor: '#E28B6F' } }),
            react_default.a.createElement("stop", { offset: "0.46", style: { stopColor: '#DA6144' } }),
            react_default.a.createElement("stop", { offset: "0.99", style: { stopColor: '#A60003' } }),
            react_default.a.createElement("stop", { offset: "1", style: { stopColor: '#A60003' } })),
        react_default.a.createElement("polygon", { className: "ruby_st3", points: "6.7,67.2 20.7,99.8 32.3,61.7 " }),
        react_default.a.createElement("linearGradient", { id: "RUBY_SVGID_5_", gradientUnits: "userSpaceOnUse", x1: "48.52", y1: "38.856", x2: "50.0731", y2: "66.8124" },
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#FFFFFF' } }),
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#FFFFFF' } }),
            react_default.a.createElement("stop", { offset: "0.23", style: { stopColor: '#E08A6D' } }),
            react_default.a.createElement("stop", { offset: "0.56", style: { stopColor: '#C14435' } }),
            react_default.a.createElement("stop", { offset: "0.99", style: { stopColor: '#B13430' } }),
            react_default.a.createElement("stop", { offset: "1", style: { stopColor: '#B13430' } })),
        react_default.a.createElement("polygon", { className: "ruby_st4", points: "29.4,60.7 70.8,73.9 60.1,32 " }),
        react_default.a.createElement("linearGradient", { id: "RUBY_SVGID_6_", gradientUnits: "userSpaceOnUse", x1: "74.2463", y1: "13.0212", x2: "78.8952", y2: "33.056" },
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#FFFFFF' } }),
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#FFFFFF' } }),
            react_default.a.createElement("stop", { offset: "0.18", style: { stopColor: '#DF8063' } }),
            react_default.a.createElement("stop", { offset: "0.4", style: { stopColor: '#C94D37' } }),
            react_default.a.createElement("stop", { offset: "0.99", style: { stopColor: '#B13430' } }),
            react_default.a.createElement("stop", { offset: "1", style: { stopColor: '#B13430' } })),
        react_default.a.createElement("polygon", { className: "ruby_st5", points: "60.6,35 97.6,32.6 68.6,9 " }),
        react_default.a.createElement("linearGradient", { id: "RUBY_SVGID_7_", gradientUnits: "userSpaceOnUse", x1: "60.0495", y1: "5.9643", x2: "80.0838", y2: "-4.0529" },
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#FFFFFF' } }),
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#FFFFFF' } }),
            react_default.a.createElement("stop", { offset: "0.54", style: { stopColor: '#C94838' } }),
            react_default.a.createElement("stop", { offset: "0.99", style: { stopColor: '#C12D2F' } }),
            react_default.a.createElement("stop", { offset: "1", style: { stopColor: '#C12D2F' } })),
        react_default.a.createElement("polygon", { className: "ruby_st6", points: "56.3,0.4 84,0.5 67,9.9 " }),
        react_default.a.createElement("linearGradient", { id: "RUBY_SVGID_8_", gradientUnits: "userSpaceOnUse", x1: "1.9704", y1: "57.4524", x2: "3.6193", y2: "73.9617" },
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#FFFFFF' } }),
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#FFFFFF' } }),
            react_default.a.createElement("stop", { offset: "0.31", style: { stopColor: '#DA6548' } }),
            react_default.a.createElement("stop", { offset: "0.99", style: { stopColor: '#C14433' } }),
            react_default.a.createElement("stop", { offset: "1", style: { stopColor: '#C14433' } })),
        react_default.a.createElement("polygon", { className: "ruby_st7", points: "1.4,51.4 0,79.9 7.1,66.9 " }),
        react_default.a.createElement("path", { className: "ruby_st8", d: "M1,50.9l5.8,16.5L32,61.7L60.8,35l8.1-25.8l-12.8-9L34.4,8.3c-6.9,6.4-20.2,19-20.6,19.2\n\tC13.3,27.7,5,43.4,1,50.9z" }),
        react_default.a.createElement("linearGradient", { id: "RUBY_SVGID_9_", gradientUnits: "userSpaceOnUse", x1: "-9.368", y1: "78.4252", x2: "68.1438", y2: "-1.2786" },
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#BD0012' } }),
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#BD0012' } }),
            react_default.a.createElement("stop", { offset: "7.000000e-02", style: { stopColor: '#FFFFFF' } }),
            react_default.a.createElement("stop", { offset: "0.17", style: { stopColor: '#FFFFFF' } }),
            react_default.a.createElement("stop", { offset: "0.27", style: { stopColor: '#C95841' } }),
            react_default.a.createElement("stop", { offset: "0.33", style: { stopColor: '#983734' } }),
            react_default.a.createElement("stop", { offset: "0.46", style: { stopColor: '#AE4231' } }),
            react_default.a.createElement("stop", { offset: "0.72", style: { stopColor: '#B93E2F' } }),
            react_default.a.createElement("stop", { offset: "0.99", style: { stopColor: '#DE4E2B' } }),
            react_default.a.createElement("stop", { offset: "1", style: { stopColor: '#DE4E2B' } })),
        react_default.a.createElement("path", { className: "ruby_st9", d: "M21.4,21.4c14.9-14.7,34-23.4,41.4-16c7.3,7.4-0.4,25.4-15.3,40.2S13.6,69.4,6.3,62C-1,54.6,6.5,36.1,21.4,21.4\n\tz" }),
        react_default.a.createElement("linearGradient", { id: "RUBY_SVGID_10_", gradientUnits: "userSpaceOnUse", x1: "50.0059", y1: "86.4623", x2: "26.6606", y2: "80.7005" },
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#9F3633' } }),
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#9F3633' } }),
            react_default.a.createElement("stop", { offset: "0.54", style: { stopColor: '#A73532' } }),
            react_default.a.createElement("stop", { offset: "0.99", style: { stopColor: '#B13439' } }),
            react_default.a.createElement("stop", { offset: "1", style: { stopColor: '#B13439' } })),
        react_default.a.createElement("path", { className: "ruby_st10", d: "M20.7,99.8l11.5-38.2l38.3,12.3C56.7,86.8,41.3,97.8,20.7,99.8z" }),
        react_default.a.createElement("linearGradient", { id: "RUBY_SVGID_11_", gradientUnits: "userSpaceOnUse", x1: "90.1051", y1: "58.4408", x2: "69.3643", y2: "39.8514" },
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#923C36' } }),
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#923C36' } }),
            react_default.a.createElement("stop", { offset: "0.99", style: { stopColor: '#AA3531' } }),
            react_default.a.createElement("stop", { offset: "1", style: { stopColor: '#AA3531' } })),
        react_default.a.createElement("path", { className: "ruby_st11", d: "M60.8,34.9l9.8,39c11.6-12.2,22-25.3,27-41.4L60.8,34.9z" }),
        react_default.a.createElement("linearGradient", { id: "RUBY_SVGID_12_", gradientUnits: "userSpaceOnUse", x1: "97.7252", y1: "24.3333", x2: "87.3936", y2: "13.2881" },
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#8D3E36' } }),
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#8D3E36' } }),
            react_default.a.createElement("stop", { offset: "0.99", style: { stopColor: '#AA3E37' } }),
            react_default.a.createElement("stop", { offset: "1", style: { stopColor: '#AA3E37' } })),
        react_default.a.createElement("path", { className: "ruby_st12", d: "M97.6,32.6c3.9-11.9,4.8-28.9-13.7-32.1L68.7,9L97.6,32.6z" }),
        react_default.a.createElement("path", { className: "ruby_st13", d: "M0,79.8c0.5,19.6,14.7,19.9,20.7,20.1L6.8,67.3L0,79.8z" }),
        react_default.a.createElement("radialGradient", { id: "RUBY_SVGID_13_", cx: "72.5938", cy: "40.2085", r: "25.4177", gradientUnits: "userSpaceOnUse" },
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#B13430' } }),
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#B13430' } }),
            react_default.a.createElement("stop", { offset: "0.99", style: { stopColor: '#923834' } }),
            react_default.a.createElement("stop", { offset: "1", style: { stopColor: '#923834' } })),
        react_default.a.createElement("path", { className: "ruby_st14", d: "M60.9,35c8.9,5.5,26.8,16.4,27.2,16.6c0.6,0.3,7.7-12.1,9.4-19.1L60.9,35z" }),
        react_default.a.createElement("radialGradient", { id: "RUBY_SVGID_14_", cx: "37.3946", cy: "73.7016", r: "33.7894", gradientUnits: "userSpaceOnUse" },
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#AE3531' } }),
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#AE3531' } }),
            react_default.a.createElement("stop", { offset: "0.99", style: { stopColor: '#953A36' } }),
            react_default.a.createElement("stop", { offset: "1", style: { stopColor: '#953A36' } })),
        react_default.a.createElement("path", { className: "ruby_st15", d: "M32.2,61.5l15.4,29.8c9.1-4.9,16.3-11,22.8-17.4L32.2,61.5z" }),
        react_default.a.createElement("linearGradient", { id: "RUBY_SVGID_15_", gradientUnits: "userSpaceOnUse", x1: "13.4615", y1: "99.7397", x2: "5.0417", y2: "71.1741" },
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#994939' } }),
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#994939' } }),
            react_default.a.createElement("stop", { offset: "0.43", style: { stopColor: '#AA3A36' } }),
            react_default.a.createElement("stop", { offset: "0.99", style: { stopColor: '#B83936' } }),
            react_default.a.createElement("stop", { offset: "1", style: { stopColor: '#B83936' } })),
        react_default.a.createElement("path", { className: "ruby_st16", d: "M6.7,67.4l-2.2,26c4.1,5.6,9.8,6.1,15.7,5.7C16,88.4,7.4,66.9,6.7,67.4z" }),
        react_default.a.createElement("linearGradient", { id: "RUBY_SVGID_16_", gradientUnits: "userSpaceOnUse", x1: "78.0512", y1: "5.0843", x2: "96.9277", y2: "13.4167" },
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#B9392F' } }),
            react_default.a.createElement("stop", { offset: "0", style: { stopColor: '#B9392F' } }),
            react_default.a.createElement("stop", { offset: "0.44", style: { stopColor: '#A23A36' } }),
            react_default.a.createElement("stop", { offset: "0.99", style: { stopColor: '#8D463A' } }),
            react_default.a.createElement("stop", { offset: "1", style: { stopColor: '#8D463A' } })),
        react_default.a.createElement("path", { className: "ruby_st17", d: "M68.6,9l30.6,4.3C97.6,6.4,92.6,1.9,84,0.5L68.6,9z" })));
};
/* harmony default export */ var graphics_RubyLogo = (RubyLogo);

// CONCATENATED MODULE: ./src/clientLibraries/constants/index.ts






const clientCSharpLibrary = {
    id: 'csharp',
    name: 'C#',
    url: 'https://github.com/influxdata/influxdb-client-csharp',
    image: graphics_CSharpLogo,
    installingPackageManagerCodeSnippet: `Install-Package InfluxDB.Client`,
    installingPackageDotNetCLICodeSnippet: `dotnet add package InfluxDB.Client`,
    packageReferenceCodeSnippet: `<PackageReference Include="InfluxDB.Client" />`,
    initializeClientCodeSnippet: `using InfluxDB.Client;
namespace Examples
{
  public class Examples
  {
    public static void Main(string[] args)
    {
      // You can generate a Token from the "Tokens Tab" in the UI
      var client = InfluxDBClientFactory.Create("<%= server %>", "<%= token %>".ToCharArray());
    }
  }
}`,
    executeQueryCodeSnippet: `const string query = "from(bucket: \\"<%= bucket %>\\") |> range(start: -1h)";
var tables = await client.GetQueryApi().QueryAsync(query, "<%= org %>");`,
    writingDataLineProtocolCodeSnippet: `const string data = "mem,host=host1 used_percent=23.43234543 1556896326";
using (var writeApi = client.GetWriteApi())
{
  writeApi.WriteRecord("<%= bucket %>", "<%= org %>", WritePrecision.Ns, data);
}`,
    writingDataPointCodeSnippet: `var point = PointData
  .Measurement("mem")
  .Tag("host", "host1")
  .Field("used_percent", 23.43234543)
  .Timestamp(1556896326L, WritePrecision.Ns);

using (var writeApi = client.GetWriteApi())
{
  writeApi.WritePoint("<%= bucket %>", "<%= org %>", point);
}`,
    writingDataPocoCodeSnippet: `var mem = new Mem { Host = "host1", UsedPercent = 23.43234543, Time = DateTime.UtcNow };

using (var writeApi = client.GetWriteApi())
{
  writeApi.WriteMeasurement("<%= bucket %>", "<%= org %>", WritePrecision.Ns, mem);
}`,
    pocoClassCodeSnippet: `// Public class
[Measurement("mem")]
private class Mem
{
  [Column("host", IsTag = true)] public string Host { get; set; }
  [Column("used_percent")] public double? UsedPercent { get; set; }
  [Column(IsTimestamp = true)] public DateTime Time { get; set; }
}`,
};
const clientGoLibrary = {
    id: 'go',
    name: 'GO',
    url: 'https://github.com/influxdata/influxdb-client-go',
    image: graphics_GoLogo,
    initializeClientCodeSnippet: `// You can generate a Token from the "Tokens Tab" in the UI
influx, err := influxdb.New(<%= server %>, <%= token %>, influxdb.WithHTTPClient(myHTTPClient))
if err != nil {
  panic(err) // error handling here; normally we wouldn't use fmt but it works for the example
}
// Add your app code here
influx.Close() // closes the client.  After this the client is useless.`,
    writeDataCodeSnippet: `// we use client.NewRowMetric for the example because it's easy, but if you need extra performance
// it is fine to manually build the []client.Metric{}.
myMetrics := []influxdb.Metric{
  influxdb.NewRowMetric(
    map[string]interface{}{"memory": 1000, "cpu": 0.93},
    "system-metrics",
    map[string]string{"hostname": "hal9000"},
    time.Date(2018, 3, 4, 5, 6, 7, 8, time.UTC)),
  influxdb.NewRowMetric(
    map[string]interface{}{"memory": 1000, "cpu": 0.93},
    "system-metrics",
    map[string]string{"hostname": "hal9000"},
    time.Date(2018, 3, 4, 5, 6, 7, 9, time.UTC)),
}

// The actual write..., this method can be called concurrently.
if _, err := influx.Write(context.Background(), "<%= bucket %>", "<%= org %>", myMetrics...)
if err != nil {
  log.Fatal(err) // as above use your own error handling here.
}`,
};
const clientJavaLibrary = {
    id: 'java',
    name: 'Java',
    url: 'https://github.com/influxdata/influxdb-client-java',
    image: graphics_JavaLogo,
    buildWithMavenCodeSnippet: `<dependency>
  <groupId>com.influxdb</groupId>
  <artifactId>influxdb-client-java</artifactId>
  <version>1.5.0</version>
</dependency>`,
    buildWithGradleCodeSnippet: `dependencies {
  compile "com.influxdb:influxdb-client-java:1.5.0"
}`,
    initializeClientCodeSnippet: `package example;

import com.influxdb.client.InfluxDBClient;
import com.influxdb.client.InfluxDBClientFactory;

public class InfluxDB2Example {
  public static void main(final String[] args) {
    // You can generate a Token from the "Tokens Tab" in the UI
    InfluxDBClient client = InfluxDBClientFactory.create("<%= server %>", "<%= token %>".toCharArray());
  }
}`,
    executeQueryCodeSnippet: `String query = "from(bucket: \\"<%= bucket %>\\") |> range(start: -1h)";
List<FluxTable> tables = client.getQueryApi().query(query, "<%= org %>");`,
    writingDataLineProtocolCodeSnippet: `String data = "mem,host=host1 used_percent=23.43234543 1556896326";
try (WriteApi writeApi = client.getWriteApi()) {
  writeApi.writeRecord("<%= bucket %>", "<%= org %>", WritePrecision.NS, data);
}`,
    writingDataPointCodeSnippet: `Point point = Point
  .measurement("mem")
  .addTag("host", "host1")
  .addField("used_percent", 23.43234543)
  .time(1556896326L, WritePrecision.NS);

try (WriteApi writeApi = client.getWriteApi()) {
  writeApi.writePoint("<%= bucket %>", "<%= org %>", point);
}`,
    writingDataPojoCodeSnippet: `Mem mem = new Mem();
mem.host = "host1";
mem.used_percent = 23.43234543;
mem.time = Instant.now();

try (WriteApi writeApi = client.getWriteApi()) {
  writeApi.writeMeasurement("<%= bucket %>", "<%= org %>", WritePrecision.NS, mem);
}`,
    pojoClassCodeSnippet: `@Measurement(name = "mem")
public class Mem {
  @Column(tag = true)
  String host;
  @Column
  Double used_percent;
  @Column(timestamp = true)
  Instant time;
}`,
};
const clientJSLibrary = {
    id: 'javascript-node',
    name: 'JavaScript/Node.js',
    url: 'https://github.com/influxdata/influxdb-client-js',
    image: graphics_JSLogo,
    initializeClientCodeSnippet: `import Client from '@influxdata/influx'
// You can generate a Token from the "Tokens Tab" in the UI
const client = new Client('<%= server %>', '<%= token %>')`,
    executeQueryCodeSnippet: `const query = 'from(bucket: "my_bucket") |> range(start: -1h)'
const {promise} = client.queries.execute('<%= org %>', query)
const csv = await promise`,
    writingDataLineProtocolCodeSnippet: `const data = 'mem,host=host1 used_percent=23.43234543 1556896326' // Line protocol string
const response = await client.write.create('<%= org %>', '<%= bucket %>', data)`,
};
const clientPythonLibrary = {
    id: 'python',
    name: 'Python',
    url: 'https://github.com/influxdata/influxdb-client-python',
    image: graphics_PythonLogo,
    initializePackageCodeSnippet: `pip install influxdb-client`,
    initializeClientCodeSnippet: `import influxdb_client
from influxdb_client import InfluxDBClient

## You can generate a Token from the "Tokens Tab" in the UI
client = InfluxDBClient(url="<%= server %>", token="<%= token %>")`,
    executeQueryCodeSnippet: `query = 'from(bucket: "<%= bucket %>") |> range(start: -1h)'
tables = client.query_api().query(query, org="<%= org %>")`,
    writingDataLineProtocolCodeSnippet: `data = "mem,host=host1 used_percent=23.43234543 1556896326"
write_client.write("<%= bucket %>", "<%= org %>", data)`,
    writingDataPointCodeSnippet: `point = Point("mem")
  .tag("host", "host1")
  .field("used_percent", 23.43234543)
  .time(1556896326, WritePrecision.NS)

write_client.write("<%= bucket %>", "<%= org %>", point)`,
    writingDataBatchCodeSnippet: `sequence = ["mem,host=host1 used_percent=23.43234543 1556896326",
            "mem,host=host1 available_percent=15.856523 1556896326"]
write_client.write("<%= bucket %>", "<%= org %>", sequence)`,
};
const clientRubyLibrary = {
    id: 'ruby',
    name: 'Ruby',
    url: 'https://github.com/influxdata/influxdb-client-ruby',
    image: graphics_RubyLogo,
    initializeGemCodeSnippet: `gem install influxdb-client -v 1.0.0.beta`,
    initializeClientCodeSnippet: `## You can generate a Token from the "Tokens Tab" in the UI
client = InfluxDB2::Client.new('<%= server %>', '<%= token %>')`,
    executeQueryCodeSnippet: `query = 'from(bucket: "<%= bucket %>") |> range(start: -1h)'
tables = client.create_query_api.query(query: query, org: '<%= org %>')`,
    writingDataLineProtocolCodeSnippet: `data = 'mem,host=host1 used_percent=23.43234543 1556896326'
write_client.write(data: data, bucket: '<%= bucket %>', org: '<%= org %>')`,
    writingDataPointCodeSnippet: `point = InfluxDB2::Point.new(name: 'mem')
  .add_tag('host', 'host1')
  .add_field('used_percent', 23.43234543)
  .time(1_556_896_326, WritePrecision.NS)

write_client.write(data: point, bucket: '<%= bucket %>', org: '<%= org %>')`,
    writingDataHashCodeSnippet: `hash = { name: 'h2o',
  tags: { host: 'aws', region: 'us' },
  fields: { level: 5, saturation: '99%' },
  time: 123 }

write_client.write(data: hash, bucket: '<%= bucket %>', org: '<%= org %>')`,
    writingDataBatchCodeSnippet: `point = InfluxDB2::Point.new(name: 'mem')
  .add_tag('host', 'host1')
  .add_field('used_percent', 23.43234543)
  .time(1_556_896_326, WritePrecision.NS)
 
hash = { name: 'h2o',
  tags: { host: 'aws', region: 'us' },
  fields: { level: 5, saturation: '99%' },
  time: 123 }
  
data = 'mem,host=host1 used_percent=23.43234543 1556896326'   
            
write_client.write(data: [point, hash, data], bucket: '<%= bucket %>', org: '<%= org %>')`,
};
const clientLibraries = [
    clientCSharpLibrary,
    clientGoLibrary,
    clientJavaLibrary,
    clientJSLibrary,
    clientPythonLibrary,
    clientRubyLibrary,
];

// CONCATENATED MODULE: ./src/clientLibraries/components/ClientLibraries.tsx





const ClientLibraries = ({ orgID, router }) => {
    return (react_default.a.createElement(clockface_dist["Grid"], null,
        react_default.a.createElement(clockface_dist["Grid"].Row, null,
            react_default.a.createElement(clockface_dist["Grid"].Column, null,
                react_default.a.createElement("p", null,
                    "Use the following URL when initializing each Client Library. The Token can be generated on the",
                    react_default.a.createElement(react_router_es["b" /* Link */], { to: `/orgs/${orgID}/load-data/tokens` }, "\u00A0Tokens tab"),
                    "."),
                react_default.a.createElement(CodeSnippet["a" /* default */], { copyText: window.location.origin, label: "Client URL" }))),
        react_default.a.createElement(clockface_dist["Grid"].Row, null,
            react_default.a.createElement(clockface_dist["Grid"].Column, null,
                react_default.a.createElement(clockface_dist["SquareGrid"], { cardSize: "200px", gutter: clockface_dist["ComponentSize"].Small }, clientLibraries.map(cl => {
                    const handleClick = () => {
                        router.push(`/orgs/${orgID}/load-data/client-libraries/${cl.id}`);
                    };
                    return (react_default.a.createElement(clockface_dist["SquareGrid"].Card, { key: cl.id },
                        react_default.a.createElement(clockface_dist["SelectableCard"], { id: cl.id, formName: "client-libraries-cards", label: cl.name, testID: `client-libraries-cards--${cl.id}`, selected: false, onClick: handleClick }, Object(react["createElement"])(cl.image))));
                }))))));
};
/* harmony default export */ var components_ClientLibraries = (Object(react_router_es["g" /* withRouter */])(ClientLibraries));

// CONCATENATED MODULE: ./src/clientLibraries/containers/ClientLibrariesPage.tsx










let ClientLibrariesPage_ClientLibrariesPage = class ClientLibrariesPage extends react["PureComponent"] {
    render() {
        const { org, children } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Page"], { titleTag: pageTitleSuffixer(['Client Libraries', 'Load Data']) },
                react_default.a.createElement(components_LoadDataHeader, null),
                react_default.a.createElement(components_LoadDataTabbedPage, { activeTab: "client-libraries", orgID: org.id },
                    react_default.a.createElement(components_ClientLibraries, { orgID: org.id }))),
            children));
    }
};
ClientLibrariesPage_ClientLibrariesPage = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], ClientLibrariesPage_ClientLibrariesPage);
const ClientLibrariesPage_mstp = (state) => ({
    org: Object(selectors["a" /* getOrg */])(state),
});
/* harmony default export */ var containers_ClientLibrariesPage = (Object(es["b" /* connect */])(ClientLibrariesPage_mstp)(ClientLibrariesPage_ClientLibrariesPage));

// CONCATENATED MODULE: ./src/clientLibraries/components/ClientLibraryOverlay.tsx





const ClientLibraryOverlay = ({ title, children, router, org, }) => {
    const onDismiss = () => {
        router.push(`/orgs/${org.id}/load-data/client-libraries`);
    };
    return (react_default.a.createElement(clockface_dist["Overlay"], { visible: true },
        react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 980 },
            react_default.a.createElement(clockface_dist["Overlay"].Header, { title: title, onDismiss: onDismiss }),
            react_default.a.createElement(clockface_dist["Overlay"].Body, { className: "client-library-overlay" }, children))));
};
const ClientLibraryOverlay_mstp = (state) => ({
    org: Object(selectors["a" /* getOrg */])(state),
});
/* harmony default export */ var components_ClientLibraryOverlay = (Object(es["b" /* connect */])(ClientLibraryOverlay_mstp)(Object(react_router_es["g" /* withRouter */])(ClientLibraryOverlay)));

// CONCATENATED MODULE: ./src/clientLibraries/components/ClientCSharpOverlay.tsx






const ClientCSharpOverlay = props => {
    const { name, url, installingPackageManagerCodeSnippet, installingPackageDotNetCLICodeSnippet, packageReferenceCodeSnippet, initializeClientCodeSnippet, executeQueryCodeSnippet, writingDataPointCodeSnippet: writingDataDataPointCodeSnippet, writingDataLineProtocolCodeSnippet, writingDataPocoCodeSnippet, pocoClassCodeSnippet, } = clientCSharpLibrary;
    const { org } = props;
    const server = window.location.origin;
    return (react_default.a.createElement(components_ClientLibraryOverlay, { title: `${name} Client Library` },
        react_default.a.createElement("p", null,
            "For more detailed and up to date information check out the",
            ' ',
            react_default.a.createElement("a", { href: url, target: "_blank" }, "GitHub Repository")),
        react_default.a.createElement("h5", null, "Install Package"),
        react_default.a.createElement("p", null, "Package Manager"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: installingPackageManagerCodeSnippet, label: "Code" }),
        react_default.a.createElement("p", null, ".NET CLI"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: installingPackageDotNetCLICodeSnippet, label: "Code" }),
        react_default.a.createElement("p", null, "Package Reference"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: packageReferenceCodeSnippet, label: "Code" }),
        react_default.a.createElement("h5", null, "Initialize the Client"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: initializeClientCodeSnippet, label: "C# Code", defaults: {
                server: 'basepath',
                token: 'token',
            }, values: {
                server,
            } }),
        react_default.a.createElement("h5", null, "Write Data"),
        react_default.a.createElement("p", null, "Option 1: Use InfluxDB Line Protocol to write data"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: writingDataLineProtocolCodeSnippet, label: "C# Code", defaults: {
                org: 'orgID',
                bucket: 'bucketID',
            }, values: {
                org,
            } }),
        react_default.a.createElement("p", null, "Option 2: Use a Data Point to write data"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: writingDataDataPointCodeSnippet, label: "C# Code", defaults: {
                org: 'orgID',
                bucket: 'bucketID',
            }, values: {
                org,
            } }),
        react_default.a.createElement("p", null, "Option 3: Use POCO and corresponding Class to write data"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: writingDataPocoCodeSnippet, label: "C# Code", defaults: {
                org: 'orgID',
                bucket: 'bucketID',
            }, values: {
                org,
            } }),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: pocoClassCodeSnippet, label: "C# Code" }),
        react_default.a.createElement("h5", null, "Execute a Flux query"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: executeQueryCodeSnippet, label: "C# Code", defaults: {
                org: 'orgID',
                bucket: 'bucketID',
            }, values: {
                org,
            } })));
};
const ClientCSharpOverlay_mstp = (state) => {
    return {
        org: Object(selectors["a" /* getOrg */])(state).id,
    };
};

/* harmony default export */ var components_ClientCSharpOverlay = (Object(es["b" /* connect */])(ClientCSharpOverlay_mstp, null)(ClientCSharpOverlay));

// CONCATENATED MODULE: ./src/clientLibraries/components/ClientGoOverlay.tsx






const ClientGoOverlay = props => {
    const { name, url, initializeClientCodeSnippet, writeDataCodeSnippet, } = clientGoLibrary;
    const { org } = props;
    const server = window.location.origin;
    return (react_default.a.createElement(components_ClientLibraryOverlay, { title: `${name} Client Library` },
        react_default.a.createElement("p", null,
            "For more detailed and up to date information check out the",
            ' ',
            react_default.a.createElement("a", { href: url, target: "_blank" }, "GitHub Repository")),
        react_default.a.createElement("h5", null, "Initialize the Client"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: initializeClientCodeSnippet, label: "Go Code", defaults: {
                token: 'myToken',
                server: 'myHTTPInfluxAddress',
            }, values: {
                server,
            } }),
        react_default.a.createElement("h5", null, "Write Data"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: writeDataCodeSnippet, label: "Go Code", defaults: {
                bucket: 'my-awesome-bucket',
                org: 'my-very-awesome-org',
            }, values: {
                org,
            } })));
};
const ClientGoOverlay_mstp = (state) => {
    return {
        org: Object(selectors["a" /* getOrg */])(state).id,
    };
};

/* harmony default export */ var components_ClientGoOverlay = (Object(es["b" /* connect */])(ClientGoOverlay_mstp, null)(ClientGoOverlay));

// CONCATENATED MODULE: ./src/clientLibraries/components/ClientJavaOverlay.tsx






const ClientJavaOverlay = props => {
    const { name, url, buildWithMavenCodeSnippet, buildWithGradleCodeSnippet, initializeClientCodeSnippet, executeQueryCodeSnippet, writingDataLineProtocolCodeSnippet, writingDataPointCodeSnippet, writingDataPojoCodeSnippet, pojoClassCodeSnippet, } = clientJavaLibrary;
    const { org } = props;
    const server = window.location.origin;
    return (react_default.a.createElement(components_ClientLibraryOverlay, { title: `${name} Client Library` },
        react_default.a.createElement("p", null,
            "For more detailed and up to date information check out the",
            ' ',
            react_default.a.createElement("a", { href: url, target: "_blank" }, "GitHub Repository")),
        react_default.a.createElement("h5", null, "Add Dependency"),
        react_default.a.createElement("p", null, "Build with Maven"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: buildWithMavenCodeSnippet, label: "Code" }),
        react_default.a.createElement("p", null, "Build with Gradle"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: buildWithGradleCodeSnippet, label: "Code" }),
        react_default.a.createElement("h5", null, "Initialize the Client"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: initializeClientCodeSnippet, label: "Java Code", defaults: {
                server: 'serverUrl',
                token: 'token',
            }, values: {
                server,
            } }),
        react_default.a.createElement("h5", null, "Write Data"),
        react_default.a.createElement("p", null, "Option 1: Use InfluxDB Line Protocol to write data"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: writingDataLineProtocolCodeSnippet, label: "Java Code", defaults: {
                bucket: 'bucketID',
                org: 'orgID',
            }, values: {
                org,
            } }),
        react_default.a.createElement("p", null, "Option 2: Use a Data Point to write data"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: writingDataPointCodeSnippet, label: "Java Code", defaults: {
                bucket: 'bucketID',
                org: 'orgID',
            }, values: {
                org,
            } }),
        react_default.a.createElement("p", null, "Option 3: Use POJO and corresponding class to write data"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: writingDataPojoCodeSnippet, label: "Java Code", defaults: {
                bucket: 'bucketID',
                org: 'orgID',
            }, values: {
                org,
            } }),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: pojoClassCodeSnippet, label: "Java Code" }),
        react_default.a.createElement("h5", null, "Execute a Flux query"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: executeQueryCodeSnippet, label: "Java Code", defaults: {
                bucket: 'my_bucket',
                org: 'myorgid',
            }, values: {
                org,
            } })));
};
const ClientJavaOverlay_mstp = (state) => {
    return {
        org: Object(selectors["a" /* getOrg */])(state).id,
    };
};

/* harmony default export */ var components_ClientJavaOverlay = (Object(es["b" /* connect */])(ClientJavaOverlay_mstp, null)(ClientJavaOverlay));

// CONCATENATED MODULE: ./src/clientLibraries/components/ClientJSOverlay.tsx






const ClientJSOverlay = props => {
    const { name, url, initializeClientCodeSnippet, executeQueryCodeSnippet, writingDataLineProtocolCodeSnippet, } = clientJSLibrary;
    const { org } = props;
    const server = window.location.origin;
    return (react_default.a.createElement(components_ClientLibraryOverlay, { title: `${name} Client Library` },
        react_default.a.createElement("p", null,
            "For more detailed and up to date information check out the",
            ' ',
            react_default.a.createElement("a", { href: url, target: "_blank" }, "GitHub Repository")),
        react_default.a.createElement("br", null),
        react_default.a.createElement("h5", null, "Initialize the Client"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: initializeClientCodeSnippet, label: "JavaScript Code", defaults: {
                server: 'server',
                token: 'token',
            }, values: {
                server,
            } }),
        react_default.a.createElement("h5", null, "Write Data"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: writingDataLineProtocolCodeSnippet, label: "JavaScript Code", defaults: {
                org: 'orgID',
                bucket: 'bucketID',
            }, values: {
                org,
            } }),
        react_default.a.createElement("h5", null, "Execute a Flux query"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: executeQueryCodeSnippet, label: "JavaScript Code", defaults: {
                org: 'orgID',
            }, values: {
                org,
            } })));
};
const ClientJSOverlay_mstp = (state) => {
    const { id } = Object(selectors["a" /* getOrg */])(state);
    return {
        org: id,
    };
};

/* harmony default export */ var components_ClientJSOverlay = (Object(es["b" /* connect */])(ClientJSOverlay_mstp, null)(ClientJSOverlay));

// CONCATENATED MODULE: ./src/clientLibraries/components/ClientPythonOverlay.tsx






const ClientPythonOverlay = props => {
    const { name, url, initializePackageCodeSnippet, initializeClientCodeSnippet, executeQueryCodeSnippet, writingDataLineProtocolCodeSnippet, writingDataPointCodeSnippet, writingDataBatchCodeSnippet, } = clientPythonLibrary;
    const { org } = props;
    const server = window.location.origin;
    return (react_default.a.createElement(components_ClientLibraryOverlay, { title: `${name} Client Library` },
        react_default.a.createElement("p", null,
            "For more detailed and up to date information check out the",
            ' ',
            react_default.a.createElement("a", { href: url, target: "_blank" }, "GitHub Repository")),
        react_default.a.createElement("h5", null, "Install Package"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: initializePackageCodeSnippet, label: "Code" }),
        react_default.a.createElement("h5", null, "Initialize the Client"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: initializeClientCodeSnippet, label: "Python Code", defaults: {
                server: 'serverUrl',
                token: 'token',
            }, values: {
                server,
            } }),
        react_default.a.createElement("h5", null, "Write Data"),
        react_default.a.createElement("p", null, "Option 1: Use InfluxDB Line Protocol to write data"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: writingDataLineProtocolCodeSnippet, label: "Python Code", defaults: {
                bucket: 'bucketID',
                org: 'orgID',
            }, values: {
                org,
            } }),
        react_default.a.createElement("p", null, "Option 2: Use a Data Point to write data"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: writingDataPointCodeSnippet, label: "Python Code", defaults: {
                bucket: 'bucketID',
                org: 'orgID',
            }, values: {
                org,
            } }),
        react_default.a.createElement("p", null, "Option 3: Use a Batch Sequence to write data"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: writingDataBatchCodeSnippet, label: "Python Code", defaults: {
                bucket: 'bucketID',
                org: 'orgID',
            }, values: {
                org,
            } }),
        react_default.a.createElement("h5", null, "Execute a Flux query"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: executeQueryCodeSnippet, label: "Python Code", defaults: {
                bucket: 'my_bucket',
                org: 'orgID',
            }, values: {
                org,
            } })));
};
const ClientPythonOverlay_mstp = (state) => {
    const { id } = Object(selectors["a" /* getOrg */])(state);
    return {
        org: id,
    };
};

/* harmony default export */ var components_ClientPythonOverlay = (Object(es["b" /* connect */])(ClientPythonOverlay_mstp, null)(ClientPythonOverlay));

// CONCATENATED MODULE: ./src/clientLibraries/components/ClientRubyOverlay.tsx






const ClientRubyOverlay = props => {
    const { name, url, initializeGemCodeSnippet, initializeClientCodeSnippet, executeQueryCodeSnippet, writingDataLineProtocolCodeSnippet, writingDataPointCodeSnippet, writingDataHashCodeSnippet, writingDataBatchCodeSnippet, } = clientRubyLibrary;
    const { org } = props;
    const server = window.location.origin;
    return (react_default.a.createElement(components_ClientLibraryOverlay, { title: `${name} Client Library` },
        react_default.a.createElement("p", null,
            "For more detailed and up to date information check out the",
            ' ',
            react_default.a.createElement("a", { href: url, target: "_blank" }, "GitHub Repository")),
        react_default.a.createElement("h5", null, "Install the Gem"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: initializeGemCodeSnippet, label: "Code" }),
        react_default.a.createElement("h5", null, "Initialize the Client"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: initializeClientCodeSnippet, label: "Ruby Code", defaults: {
                server: 'serverUrl',
                token: 'token',
            }, values: {
                server,
            } }),
        react_default.a.createElement("h5", null, "Write Data"),
        react_default.a.createElement("p", null, "Option 1: Use InfluxDB Line Protocol to write data"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: writingDataLineProtocolCodeSnippet, label: "Ruby Code", defaults: {
                bucket: 'bucketID',
                org: 'orgID',
            }, values: {
                org,
            } }),
        react_default.a.createElement("p", null, "Option 2: Use a Data Point to write data"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: writingDataPointCodeSnippet, label: "Ruby Code", defaults: {
                bucket: 'bucketID',
                org: 'orgID',
            }, values: {
                org,
            } }),
        react_default.a.createElement("p", null, "Option 3: Use a Hash to write data"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: writingDataHashCodeSnippet, label: "Ruby Code", defaults: {
                bucket: 'bucketID',
                org: 'orgID',
            }, values: {
                org,
            } }),
        react_default.a.createElement("p", null, "Option 4: Use a Batch Sequence to write data"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: writingDataBatchCodeSnippet, label: "Ruby Code", defaults: {
                bucket: 'bucketID',
                org: 'orgID',
            }, values: {
                org,
            } }),
        react_default.a.createElement("h5", null, "Execute a Flux query"),
        react_default.a.createElement(components_TemplatedCodeSnippet, { template: executeQueryCodeSnippet, label: "Ruby Code", defaults: {
                bucket: 'my_bucket',
                org: 'orgID',
            }, values: {
                org,
            } })));
};
const ClientRubyOverlay_mstp = (state) => {
    const { id } = Object(selectors["a" /* getOrg */])(state);
    return {
        org: id,
    };
};

/* harmony default export */ var components_ClientRubyOverlay = (Object(es["b" /* connect */])(ClientRubyOverlay_mstp, null)(ClientRubyOverlay));

// CONCATENATED MODULE: ./src/templates/components/TemplateImportOverlay.tsx











class TemplateImportOverlay_TemplateImportOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            status: clockface_dist["ComponentStatus"].Default,
        };
        this.onDismiss = () => {
            const { router } = this.props;
            router.goBack();
        };
        this.updateOverlayStatus = (status) => this.setState(() => ({ status }));
        this.handleImportTemplate = (importString) => {
            const { createTemplate, notify } = this.props;
            let template;
            this.updateOverlayStatus(clockface_dist["ComponentStatus"].Default);
            try {
                template = jsonlint_default.a.parse(importString);
            }
            catch (error) {
                this.updateOverlayStatus(clockface_dist["ComponentStatus"].Error);
                notify(Object(copy_notifications["Eb" /* invalidJSON */])(error.message));
                return;
            }
            createTemplate(template);
            this.onDismiss();
        };
    }
    render() {
        return (react_default.a.createElement(components_ImportOverlay, { onDismissOverlay: this.onDismiss, resourceName: "Template", onSubmit: this.handleImportTemplate, status: this.state.status, updateStatus: this.updateOverlayStatus }));
    }
}
const TemplateImportOverlay_mstp = (state, props) => {
    const org = Object(resources_selectors["b" /* getByID */])(state, types["ResourceType"].Orgs, props.params.orgID);
    return { org };
};
const TemplateImportOverlay_mdtp = {
    notify: actions_notifications["c" /* notify */],
    createTemplate: templates_actions_thunks["g" /* createTemplate */],
};
/* harmony default export */ var components_TemplateImportOverlay = (Object(es["b" /* connect */])(TemplateImportOverlay_mstp, TemplateImportOverlay_mdtp)(Object(react_router_es["g" /* withRouter */])(TemplateImportOverlay_TemplateImportOverlay)));

// CONCATENATED MODULE: ./src/templates/components/TemplateExportOverlay.tsx





class TemplateExportOverlay_TemplateExportOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.onDismiss = () => {
            const { router, clearExportTemplate } = this.props;
            router.goBack();
            clearExportTemplate();
        };
    }
    componentDidMount() {
        const { params: { id }, convertToTemplate, } = this.props;
        convertToTemplate(id);
    }
    render() {
        const { exportTemplate, status } = this.props;
        return (react_default.a.createElement(components_ExportOverlay, { resourceName: "Template", resource: exportTemplate, onDismissOverlay: this.onDismiss, status: status }));
    }
}
const TemplateExportOverlay_mstp = (state) => ({
    exportTemplate: state.resources.templates.exportTemplate.item,
    status: state.resources.templates.exportTemplate.status,
});
const TemplateExportOverlay_mdtp = {
    convertToTemplate: templates_actions_thunks["d" /* convertToTemplate */],
    clearExportTemplate: templates_actions_thunks["b" /* clearExportTemplate */],
};
/* harmony default export */ var components_TemplateExportOverlay = (Object(es["b" /* connect */])(TemplateExportOverlay_mstp, TemplateExportOverlay_mdtp)(Object(react_router_es["g" /* withRouter */])(TemplateExportOverlay_TemplateExportOverlay)));

// CONCATENATED MODULE: ./src/shared/components/tabbed_page/TabbedPageHeader.tsx

const TabbedPageHeader = ({ children }) => (react_default.a.createElement("div", { className: "tabbed-page-section--header" }, children));
/* harmony default export */ var tabbed_page_TabbedPageHeader = (TabbedPageHeader);

// CONCATENATED MODULE: ./src/variables/components/VariableContextMenu.tsx



class VariableContextMenu_VariableContextMenu extends react["PureComponent"] {
    render() {
        const { variable, onExport, onRename, onDelete } = this.props;
        return (react_default.a.createElement(clockface["f" /* Context */], null,
            react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface_dist["IconFont"].CogThick },
                react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Export", action: onExport }),
                react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Rename", action: onRename, testID: "context-rename-variable" })),
            react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface_dist["IconFont"].Trash, color: clockface_dist["ComponentColor"].Danger, testID: "context-delete-menu" },
                react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Delete", action: onDelete, value: variable, testID: "context-delete-variable" }))));
    }
}

// CONCATENATED MODULE: ./src/variables/components/VariableCard.tsx







class VariableCard_VariableCard extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleNameClick = () => {
            const { variable, params: { orgID }, router, } = this.props;
            router.push(`/orgs/${orgID}/settings/variables/${variable.id}/edit`);
        };
        this.handleAddLabel = (label) => {
            const { variable, onAddVariableLabel } = this.props;
            onAddVariableLabel(variable.id, label);
        };
        this.handleRemoveLabel = (label) => {
            const { variable, onRemoveVariableLabel } = this.props;
            onRemoveVariableLabel(variable.id, label);
        };
        this.handleExport = () => {
            const { router, variable, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/settings/variables/${variable.id}/export`);
        };
        this.handleRenameVariable = () => {
            const { router, variable, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/settings/variables/${variable.id}/rename`);
        };
    }
    render() {
        const { variable, onDeleteVariable } = this.props;
        return (react_default.a.createElement(clockface_dist["ResourceCard"], { testID: "resource-card", labels: this.labels, contextMenu: react_default.a.createElement(VariableContextMenu_VariableContextMenu, { variable: variable, onExport: this.handleExport, onRename: this.handleRenameVariable, onDelete: onDeleteVariable }), name: react_default.a.createElement(clockface_dist["ResourceCard"].Name, { onClick: this.handleNameClick, name: variable.name }), metaData: [react_default.a.createElement(react_default.a.Fragment, null,
                    "Type: ",
                    variable.arguments.type)] }));
    }
    get labels() {
        const { variable, onFilterChange } = this.props;
        return (react_default.a.createElement(inlineLabels_InlineLabels, { selectedLabelIDs: variable.labels, onFilterChange: onFilterChange, onAddLabel: this.handleAddLabel, onRemoveLabel: this.handleRemoveLabel }));
    }
}
const VariableCard_mdtp = {
    onAddVariableLabel: variables_actions_thunks["a" /* addVariableLabelAsync */],
    onRemoveVariableLabel: variables_actions_thunks["h" /* removeVariableLabelAsync */],
};
/* harmony default export */ var components_VariableCard = (Object(es["b" /* connect */])(null, VariableCard_mdtp)(Object(react_router_es["g" /* withRouter */])(VariableCard_VariableCard)));

// CONCATENATED MODULE: ./src/variables/components/VariableList.tsx







class VariableList_VariableList extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.memGetSortedResources = Object(memoize_one_esm["a" /* default */])(getSortedResources);
        this.handleStartEdit = (variable) => {
            this.setState({
                variableID: variable.id,
                variableOverlayState: types["OverlayState"].Open,
            });
        };
        this.state = {
            variableID: null,
            variableOverlayState: types["OverlayState"].Closed,
            sortedVariables: this.props.variables,
        };
    }
    render() {
        const { emptyState, sortKey, sortDirection, onClickColumn } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["ResourceList"], null,
                react_default.a.createElement(clockface_dist["ResourceList"].Header, null,
                    react_default.a.createElement(clockface_dist["ResourceList"].Sorter, { name: "Name", sortKey: this.headerKeys[0], sort: sortKey === this.headerKeys[0] ? sortDirection : clockface_dist["Sort"].None, onClick: onClickColumn }),
                    react_default.a.createElement(clockface_dist["ResourceList"].Sorter, { name: "Type", sortKey: this.headerKeys[1], sort: sortKey === this.headerKeys[1] ? sortDirection : clockface_dist["Sort"].None, onClick: onClickColumn })),
                react_default.a.createElement(clockface_dist["ResourceList"].Body, { emptyState: emptyState }, this.rows))));
    }
    get headerKeys() {
        return ['name', 'arguments.type'];
    }
    get rows() {
        const { variables, sortKey, sortDirection, sortType, onDeleteVariable, onFilterChange, } = this.props;
        const sortedVariables = this.memGetSortedResources(variables, sortKey, sortDirection, sortType);
        return sortedVariables.map((variable, index) => (react_default.a.createElement(components_VariableCard, { key: variable.id || `variable-${index}`, variable: variable, onDeleteVariable: onDeleteVariable, onEditVariable: this.handleStartEdit, onFilterChange: onFilterChange })));
    }
}

// CONCATENATED MODULE: ./src/variables/components/VariablesTab.tsx
















const VariablesTab_FilterList = FilterListContainer();
class VariablesTab_VariablesTab extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            searchTerm: '',
            importOverlayState: types["OverlayState"].Closed,
            sortKey: 'name',
            sortDirection: clockface_dist["Sort"].Ascending,
            sortType: SortTypes.String,
        };
        this.handleClickColumn = (nextSort, sortKey) => {
            const sortType = SortTypes.String;
            this.setState({ sortKey, sortDirection: nextSort, sortType });
        };
        this.handleFilterChange = (searchTerm) => {
            this.handleFilterUpdate(searchTerm);
        };
        this.handleFilterUpdate = (searchTerm) => {
            this.setState({ searchTerm });
        };
        this.handleOpenImportOverlay = () => {
            const { router, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/settings/variables/import`);
        };
        this.handleOpenCreateOverlay = () => {
            const { router, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/settings/variables/new`);
        };
        this.handleDeleteVariable = (variable) => {
            const { onDeleteVariable } = this.props;
            onDeleteVariable(variable.id);
        };
    }
    render() {
        const { variables } = this.props;
        const { searchTerm, sortKey, sortDirection, sortType } = this.state;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(tabbed_page_TabbedPageHeader, null,
                react_default.a.createElement(search_widget_SearchWidget, { placeholderText: "Filter variables...", searchTerm: searchTerm, onSearch: this.handleFilterChange }),
                react_default.a.createElement(AddResourceDropdown_AddResourceDropdown, { resourceName: "Variable", onSelectImport: this.handleOpenImportOverlay, onSelectNew: this.handleOpenCreateOverlay })),
            react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Labels] },
                react_default.a.createElement(VariablesTab_FilterList, { searchTerm: searchTerm, searchKeys: ['name', 'labels[].name'], list: variables }, variables => (react_default.a.createElement(VariableList_VariableList, { variables: variables, emptyState: this.emptyState, onDeleteVariable: this.handleDeleteVariable, onFilterChange: this.handleFilterUpdate, sortKey: sortKey, sortDirection: sortDirection, sortType: sortType, onClickColumn: this.handleClickColumn }))))));
    }
    get emptyState() {
        const { searchTerm } = this.state;
        if (!searchTerm) {
            return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Large },
                react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                    "Looks like there aren't any ",
                    react_default.a.createElement("b", null, "Variables"),
                    ", why not create one?"),
                react_default.a.createElement(AddResourceDropdown_AddResourceDropdown, { resourceName: "Variable", onSelectImport: this.handleOpenImportOverlay, onSelectNew: this.handleOpenCreateOverlay })));
        }
        return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Large },
            react_default.a.createElement(clockface_dist["EmptyState"].Text, null, "No Variables match your query")));
    }
}
const VariablesTab_mstp = (state) => {
    const variables = Object(variables_selectors["f" /* extractVariablesList */])(state);
    return { variables };
};
const VariablesTab_mdtp = {
    onDeleteVariable: variables_actions_thunks["e" /* deleteVariable */],
};
/* harmony default export */ var components_VariablesTab = (Object(es["b" /* connect */])(VariablesTab_mstp, VariablesTab_mdtp)(Object(react_router_es["g" /* withRouter */])(VariablesTab_VariablesTab)));

// CONCATENATED MODULE: ./src/variables/containers/VariablesIndex.tsx











let VariablesIndex_VariablesIndex = class VariablesIndex extends react["Component"] {
    render() {
        const { org, children } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Page"], { titleTag: pageTitleSuffixer(['Variables', 'Settings']) },
                react_default.a.createElement(components_SettingsHeader, null),
                react_default.a.createElement(components_SettingsTabbedPage, { activeTab: "variables", orgID: org.id },
                    react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Variables] },
                        react_default.a.createElement(components_VariablesTab, null)))),
            children));
    }
};
VariablesIndex_VariablesIndex = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], VariablesIndex_VariablesIndex);
const VariablesIndex_mstp = (state) => {
    return { org: state.resources.orgs.org };
};
/* harmony default export */ var containers_VariablesIndex = (Object(es["b" /* connect */])(VariablesIndex_mstp, null)(VariablesIndex_VariablesIndex));

// CONCATENATED MODULE: ./src/scrapers/components/ScraperRow.tsx





class ScraperRow_ScraperRow extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleDeleteScraper = () => {
            const { onDeleteScraper, scraper } = this.props;
            onDeleteScraper(scraper);
        };
        this.handleUpdateScraperName = (name) => {
            const { onUpdateScraper, scraper } = this.props;
            onUpdateScraper(Object.assign(Object.assign({}, scraper), { name }));
        };
    }
    render() {
        const { scraper } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["ResourceCard"], { name: react_default.a.createElement(clockface_dist["ResourceCard"].EditableName, { onUpdate: this.handleUpdateScraperName, name: scraper.name, noNameString: dashboards_constants["f" /* DEFAULT_SCRAPER_NAME */], buttonTestID: "editable-name", inputTestID: "input-field" }), metaData: [react_default.a.createElement(react_default.a.Fragment, null,
                        "Bucket: ",
                        scraper.bucket), react_default.a.createElement(react_default.a.Fragment, null,
                        "URL: ",
                        scraper.url)], contextMenu: this.contextMenu })));
    }
    get contextMenu() {
        return (react_default.a.createElement(clockface["f" /* Context */], null,
            react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface_dist["IconFont"].Trash, color: clockface_dist["ComponentColor"].Danger },
                react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Delete", action: this.handleDeleteScraper, testID: "confirmation-button" }))));
    }
}

// CONCATENATED MODULE: ./src/scrapers/components/ScraperList.tsx






class ScraperList_ScraperList extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.memGetSortedResources = Object(memoize_one_esm["a" /* default */])(getSortedResources);
    }
    render() {
        const { emptyState, sortKey, sortDirection, onClickColumn } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["ResourceList"], null,
                react_default.a.createElement(clockface_dist["ResourceList"].Header, null,
                    react_default.a.createElement(clockface_dist["ResourceList"].Sorter, { name: this.headerKeys[0], sortKey: this.headerKeys[0], sort: sortKey === this.headerKeys[0] ? sortDirection : clockface_dist["Sort"].None, onClick: onClickColumn }),
                    react_default.a.createElement(clockface_dist["ResourceList"].Sorter, { name: this.headerKeys[1], sortKey: this.headerKeys[1], sort: sortKey === this.headerKeys[1] ? sortDirection : clockface_dist["Sort"].None, onClick: onClickColumn }),
                    react_default.a.createElement(clockface_dist["ResourceList"].Sorter, { name: this.headerKeys[2], sortKey: this.headerKeys[2], sort: sortKey === this.headerKeys[2] ? sortDirection : clockface_dist["Sort"].None, onClick: onClickColumn })),
                react_default.a.createElement(clockface_dist["ResourceList"].Body, { emptyState: emptyState }, this.scrapersList))));
    }
    get headerKeys() {
        return ['name', 'url', 'bucket'];
    }
    get scrapersList() {
        const { scrapers, sortKey, sortDirection, sortType, onDeleteScraper, onUpdateScraper, } = this.props;
        const sortedScrapers = this.memGetSortedResources(scrapers, sortKey, sortDirection, sortType);
        if (scrapers !== undefined) {
            return sortedScrapers.map(scraper => (react_default.a.createElement(ScraperRow_ScraperRow, { key: scraper.id, scraper: scraper, onDeleteScraper: onDeleteScraper, onUpdateScraper: onUpdateScraper })));
        }
        return;
    }
}

// EXTERNAL MODULE: ./src/scrapers/actions/thunks.ts
var scrapers_actions_thunks = __webpack_require__(421);

// CONCATENATED MODULE: ./src/scrapers/components/Scrapers.tsx


















const FilterScrapers = FilterListContainer();
let Scrapers_Scrapers = class Scrapers extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleClickColumn = (nextSort, sortKey) => {
            const sortType = SortTypes.String;
            this.setState({ sortKey, sortDirection: nextSort, sortType });
        };
        this.createScraperButton = (testID) => {
            let status = clockface_dist["ComponentStatus"].Default;
            let titleText = 'Create a new Scraper';
            if (this.hasNoBuckets) {
                status = clockface_dist["ComponentStatus"].Disabled;
                titleText = 'You need at least 1 bucket in order to create a scraper';
            }
            return (react_default.a.createElement(clockface_dist["Button"], { text: "Create Scraper", icon: clockface_dist["IconFont"].Plus, color: clockface_dist["ComponentColor"].Primary, onClick: this.handleShowOverlay, status: status, titleText: titleText, testID: testID }));
        };
        this.handleUpdateScraper = (scraper) => {
            const { onUpdateScraper } = this.props;
            onUpdateScraper(scraper);
        };
        this.handleDeleteScraper = (scraper) => {
            const { onDeleteScraper } = this.props;
            onDeleteScraper(scraper);
        };
        this.handleShowOverlay = () => {
            const { router, org } = this.props;
            if (this.hasNoBuckets) {
                return;
            }
            router.push(`/orgs/${org.id}/load-data/scrapers/new`);
        };
        this.handleFilterChange = (searchTerm) => {
            this.setState({ searchTerm });
        };
        this.state = {
            searchTerm: '',
            sortKey: 'name',
            sortDirection: clockface_dist["Sort"].Ascending,
            sortType: SortTypes.String,
        };
    }
    render() {
        const { searchTerm, sortKey, sortDirection, sortType } = this.state;
        const { scrapers } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(components_SettingsTabbedPageHeader, null,
                react_default.a.createElement(search_widget_SearchWidget, { placeholderText: "Filter scrapers...", searchTerm: searchTerm, onSearch: this.handleFilterChange }),
                this.createScraperButton('create-scraper-button-header')),
            react_default.a.createElement(components_NoBucketsWarning, { visible: this.hasNoBuckets, resourceName: "Scrapers" }),
            react_default.a.createElement(FilterScrapers, { searchTerm: searchTerm, searchKeys: ['name', 'url'], list: scrapers }, sl => (react_default.a.createElement(ScraperList_ScraperList, { scrapers: sl, emptyState: this.emptyState, onDeleteScraper: this.handleDeleteScraper, onUpdateScraper: this.handleUpdateScraper, sortKey: sortKey, sortDirection: sortDirection, sortType: sortType, onClickColumn: this.handleClickColumn })))));
    }
    get hasNoBuckets() {
        const { buckets } = this.props;
        if (!buckets || !buckets.length) {
            return true;
        }
        return false;
    }
    get emptyState() {
        const { org } = this.props;
        const { searchTerm } = this.state;
        if (Object(lodash["isEmpty"])(searchTerm)) {
            return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Large },
                react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                    `${org.name}`,
                    " does not own any ",
                    react_default.a.createElement("b", null, "Scrapers"),
                    ", why not create one?"),
                this.createScraperButton('create-scraper-button-empty')));
        }
        return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Large },
            react_default.a.createElement(clockface_dist["EmptyState"].Text, null, "No Scrapers match your query")));
    }
};
Scrapers_Scrapers = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], Scrapers_Scrapers);
const Scrapers_mstp = (state) => ({
    scrapers: Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Scrapers),
    buckets: Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Buckets),
    org: Object(selectors["a" /* getOrg */])(state),
});
const Scrapers_mdtp = {
    onDeleteScraper: scrapers_actions_thunks["b" /* deleteScraper */],
    onUpdateScraper: scrapers_actions_thunks["d" /* updateScraper */],
};
/* harmony default export */ var components_Scrapers = (Object(es["b" /* connect */])(Scrapers_mstp, Scrapers_mdtp)(Object(react_router_es["g" /* withRouter */])(Scrapers_Scrapers)));

// CONCATENATED MODULE: ./src/scrapers/containers/ScrapersIndex.tsx












let ScrapersIndex_ScrapersIndex = class ScrapersIndex extends react["Component"] {
    render() {
        const { org, children } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Page"], { titleTag: pageTitleSuffixer(['Scrapers', 'Load Data']) },
                react_default.a.createElement(components_LoadDataHeader, null),
                react_default.a.createElement(components_LoadDataTabbedPage, { activeTab: "scrapers", orgID: org.id },
                    react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Scrapers, types["ResourceType"].Buckets] },
                        react_default.a.createElement(components_Scrapers, null)))),
            children));
    }
};
ScrapersIndex_ScrapersIndex = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], ScrapersIndex_ScrapersIndex);
const ScrapersIndex_mstp = (state) => ({ org: Object(selectors["a" /* getOrg */])(state) });
/* harmony default export */ var containers_ScrapersIndex = (Object(es["b" /* connect */])(ScrapersIndex_mstp, null)(ScrapersIndex_ScrapersIndex));

// CONCATENATED MODULE: ./src/variables/components/VariableImportOverlay.tsx









class VariableImportOverlay_VariableImportOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            status: clockface_dist["ComponentStatus"].Default,
        };
        this.onDismiss = () => {
            const { router } = this.props;
            router.goBack();
        };
        this.updateOverlayStatus = (status) => this.setState(() => ({ status }));
        this.handleImportVariable = (uploadContent) => {
            const { createVariableFromTemplate, getVariables, notify } = this.props;
            let template;
            this.updateOverlayStatus(clockface_dist["ComponentStatus"].Default);
            try {
                template = jsonlint_default.a.parse(uploadContent);
            }
            catch (error) {
                this.updateOverlayStatus(clockface_dist["ComponentStatus"].Error);
                notify(Object(copy_notifications["Eb" /* invalidJSON */])(error.message));
                return;
            }
            createVariableFromTemplate(template);
            getVariables();
            this.onDismiss();
        };
    }
    render() {
        return (react_default.a.createElement(components_ImportOverlay, { onDismissOverlay: this.onDismiss, resourceName: "Variable", onSubmit: this.handleImportVariable, status: this.state.status, updateStatus: this.updateOverlayStatus }));
    }
}
const VariableImportOverlay_mdtp = {
    createVariableFromTemplate: variables_actions_thunks["d" /* createVariableFromTemplate */],
    getVariables: variables_actions_thunks["f" /* getVariables */],
    notify: actions_notifications["c" /* notify */],
};
/* harmony default export */ var components_VariableImportOverlay = (Object(es["b" /* connect */])(null, VariableImportOverlay_mdtp)(Object(react_router_es["g" /* withRouter */])(VariableImportOverlay_VariableImportOverlay)));

// CONCATENATED MODULE: ./src/variables/components/VariableExportOverlay.tsx






class VariableExportOverlay_VariableExportOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.onDismiss = () => {
            const { router, clearExportTemplate } = this.props;
            router.goBack();
            clearExportTemplate();
        };
    }
    componentDidMount() {
        const { params: { id }, convertToTemplate, } = this.props;
        convertToTemplate(id);
    }
    render() {
        const { variableTemplate, status } = this.props;
        return (react_default.a.createElement(components_ExportOverlay, { resourceName: "Variable", resource: variableTemplate, onDismissOverlay: this.onDismiss, status: status }));
    }
}
const VariableExportOverlay_mstp = (state) => ({
    variableTemplate: state.resources.templates.exportTemplate.item,
    status: state.resources.templates.exportTemplate.status,
});
const VariableExportOverlay_mdtp = {
    convertToTemplate: variables_actions_thunks["b" /* convertToTemplate */],
    clearExportTemplate: templates_actions_thunks["b" /* clearExportTemplate */],
};
/* harmony default export */ var components_VariableExportOverlay = (Object(es["b" /* connect */])(VariableExportOverlay_mstp, VariableExportOverlay_mdtp)(Object(react_router_es["g" /* withRouter */])(VariableExportOverlay_VariableExportOverlay)));

// CONCATENATED MODULE: ./src/shared/containers/SetOrg.tsx






const SetOrg = ({ params: { orgID }, orgs, router, setOrg, children, }) => {
    const [loading, setLoading] = Object(react["useState"])(clockface_dist["RemoteDataState"].Loading);
    Object(react["useEffect"])(() => {
        const foundOrg = orgs.find(o => o.id === orgID);
        if (foundOrg) {
            setOrg(foundOrg);
            setLoading(clockface_dist["RemoteDataState"].Done);
            return;
        }
        if (!orgs.length) {
            router.push(`/no-orgs`);
            return;
        }
        router.push(`/orgs/${orgs[0].id}`);
    }, [orgID]);
    return (react_default.a.createElement(clockface_dist["SpinnerContainer"], { loading: loading, spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null) }, children));
};
const SetOrg_mdtp = {
    setOrg: creators_setOrg,
};
const SetOrg_mstp = (state) => {
    const orgs = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Orgs);
    return { orgs };
};
/* harmony default export */ var containers_SetOrg = (Object(es["b" /* connect */])(SetOrg_mstp, SetOrg_mdtp)(SetOrg));

// CONCATENATED MODULE: ./src/shared/containers/RouteToOrg.tsx





class RouteToOrg_RouteToOrg extends react["PureComponent"] {
    componentDidMount() {
        const { orgs, router, org } = this.props;
        if (!orgs || !orgs.length) {
            router.push(`/no-orgs`);
            return;
        }
        if (org && org.id) {
            router.push(`/orgs/${org.id}`);
            return;
        }
        router.push(`/orgs/${orgs[0].id}`);
    }
    render() {
        return false;
    }
}
const RouteToOrg_mstp = (state) => {
    const org = Object(selectors["a" /* getOrg */])(state);
    const orgs = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Orgs);
    return { orgs, org };
};
/* harmony default export */ var containers_RouteToOrg = (Object(es["b" /* connect */])(RouteToOrg_mstp)(RouteToOrg_RouteToOrg));

// CONCATENATED MODULE: ./src/organizations/components/CreateOrgOverlay.tsx







class CreateOrgOverlay_CreateOrgOverlay extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleCreateOrg = async () => {
            const { org, bucket } = this.state;
            const { createOrgWithBucket } = this.props;
            await createOrgWithBucket(org, bucket);
        };
        this.closeModal = () => {
            this.props.router.goBack();
        };
        this.handleChangeOrgInput = (e) => {
            const value = e.target.value;
            const key = e.target.name;
            const org = Object.assign(Object.assign({}, this.state.org), { [key]: value });
            if (!value) {
                return this.setState({
                    org,
                    orgNameInputStatus: clockface_dist["ComponentStatus"].Error,
                    orgErrorMessage: this.randomErrorMessage(key, 'organization'),
                });
            }
            this.setState({
                org,
                orgNameInputStatus: clockface_dist["ComponentStatus"].Valid,
                orgErrorMessage: '',
            });
        };
        this.handleChangeBucketInput = (e) => {
            const value = e.target.value;
            const key = e.target.name;
            const bucket = Object.assign(Object.assign({}, this.state.bucket), { [key]: value });
            if (!value) {
                return this.setState({
                    bucket,
                    bucketNameInputStatus: clockface_dist["ComponentStatus"].Error,
                    bucketErrorMessage: this.randomErrorMessage(key, 'bucket'),
                });
            }
            this.setState({
                bucket,
                bucketNameInputStatus: clockface_dist["ComponentStatus"].Valid,
                bucketErrorMessage: '',
            });
        };
        this.randomErrorMessage = (key, resource) => {
            const messages = [
                `Imagine that! ${Object(lodash["startCase"])(resource)} without a ${key}`,
                `${Object(lodash["startCase"])(resource)} needs a ${key}`,
                `You're not getting far without a ${key}`,
                `The ${resource} formerly known as...`,
                `Pick a ${key}, any ${key}`,
                `Any ${key} will do`,
            ];
            return Object(lodash["sample"])(messages);
        };
        this.state = {
            org: { name: '' },
            bucket: { name: '', retentionRules: [] },
            orgNameInputStatus: clockface_dist["ComponentStatus"].Default,
            bucketNameInputStatus: clockface_dist["ComponentStatus"].Default,
            orgErrorMessage: '',
            bucketErrorMessage: '',
        };
    }
    render() {
        const { org, orgNameInputStatus, orgErrorMessage, bucket, bucketNameInputStatus, bucketErrorMessage, } = this.state;
        return (react_default.a.createElement(clockface_dist["Overlay"], { visible: true },
            react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 500 },
                react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Create Organization", onDismiss: this.closeModal }),
                react_default.a.createElement(clockface_dist["Form"], { onSubmit: this.handleCreateOrg },
                    react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Organization Name", errorMessage: orgErrorMessage },
                            react_default.a.createElement(clockface_dist["Input"], { placeholder: "Give your organization a name", name: "name", autoFocus: true, value: org.name, onChange: this.handleChangeOrgInput, status: orgNameInputStatus, testID: "create-org-name-input" })),
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Bucket Name", errorMessage: bucketErrorMessage },
                            react_default.a.createElement(clockface_dist["Input"], { placeholder: "Give your bucket a name", name: "name", autoFocus: false, value: bucket.name, onChange: this.handleChangeBucketInput, status: bucketNameInputStatus, testID: "create-org-name-input" }))),
                    react_default.a.createElement(clockface_dist["Overlay"].Footer, null,
                        react_default.a.createElement(clockface_dist["Button"], { text: "Cancel", onClick: this.closeModal }),
                        react_default.a.createElement(clockface_dist["Button"], { text: "Create", type: clockface_dist["ButtonType"].Submit, color: clockface_dist["ComponentColor"].Primary, status: this.submitButtonStatus, testID: "create-org-submit-button" }))))));
    }
    get submitButtonStatus() {
        const { org, bucket } = this.state;
        if (org.name && bucket.name) {
            return clockface_dist["ComponentStatus"].Default;
        }
        return clockface_dist["ComponentStatus"].Disabled;
    }
}
const CreateOrgOverlay_mdtp = {
    createOrgWithBucket: createOrgWithBucket,
};
/* harmony default export */ var components_CreateOrgOverlay = (Object(es["b" /* connect */])(null, CreateOrgOverlay_mdtp)(Object(react_router_es["g" /* withRouter */])(CreateOrgOverlay_CreateOrgOverlay)));

// CONCATENATED MODULE: ./src/scrapers/components/CreateScraperForm.tsx





class CreateScraperForm_ScraperTarget extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleNameValidation = (name) => {
            if (!name) {
                return 'Name cannot be empty';
            }
            return null;
        };
        this.handleUrlValidation = (url) => {
            if (!url) {
                return 'Target URL cannot be empty';
            }
            const isURLValid = lodash_default.a.startsWith(url, 'http://') || lodash_default.a.startsWith(url, 'https://');
            if (!isURLValid) {
                return 'Target URL must begin with "http://"';
            }
            return null;
        };
    }
    render() {
        const { onInputChange, url, name, onSelectBucket, buckets, selectedBucketID, onSubmit, onDismiss, } = this.props;
        return (react_default.a.createElement(clockface_dist["Form"], { onSubmit: onSubmit },
            react_default.a.createElement(clockface_dist["Grid"], null,
                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Six },
                        react_default.a.createElement(clockface_dist["Form"].ValidationElement, { label: "Name", validationFunc: this.handleNameValidation, value: name }, status => (react_default.a.createElement(clockface_dist["Input"], { value: name, name: "name", onChange: onInputChange, titleText: "Name", placeholder: "Name this scraper", autoFocus: true, status: status })))),
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Six },
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Bucket to store scraped metrics" },
                            react_default.a.createElement(BucketsDropdown["a" /* default */], { selectedBucketID: selectedBucketID, buckets: buckets, onSelectBucket: onSelectBucket }))),
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Twelve },
                        react_default.a.createElement(clockface_dist["Form"].ValidationElement, { label: "Target URL", validationFunc: this.handleUrlValidation, value: url }, status => (react_default.a.createElement(clockface_dist["Input"], { value: url, name: "url", placeholder: "http://", onChange: onInputChange, titleText: "Target URL", status: status }))))),
                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                    react_default.a.createElement(clockface_dist["Grid"].Column, null,
                        react_default.a.createElement(clockface_dist["Form"].Footer, null,
                            react_default.a.createElement(clockface_dist["Button"], { text: "Cancel", onClick: onDismiss, testID: "create-scraper--cancel" }),
                            react_default.a.createElement(clockface_dist["Button"], { status: this.submitButtonStatus, text: "Create", color: clockface_dist["ComponentColor"].Success, testID: "create-scraper--submit", type: clockface_dist["ButtonType"].Submit })))))));
    }
    get submitButtonStatus() {
        const { name, url, selectedBucketID } = this.props;
        if (!url || !name || !selectedBucketID) {
            return clockface_dist["ComponentStatus"].Disabled;
        }
        return clockface_dist["ComponentStatus"].Default;
    }
}
/* harmony default export */ var CreateScraperForm = (CreateScraperForm_ScraperTarget);

// CONCATENATED MODULE: ./src/scrapers/components/CreateScraperOverlay.tsx










class CreateScraperOverlay_CreateScraperOverlay extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleInputChange = (e) => {
            const value = e.target.value;
            const key = e.target.name;
            const scraper = Object.assign(Object.assign({}, this.state.scraper), { [key]: value });
            this.setState({
                scraper,
            });
        };
        this.handleSelectBucket = (bucket) => {
            const { orgID, id } = bucket;
            const scraper = Object.assign(Object.assign({}, this.state.scraper), { orgID: orgID, bucketID: id });
            this.setState({ scraper });
        };
        this.handleFormSubmit = (e) => {
            const { onCreateScraper } = this.props;
            const { scraper } = this.state;
            e.preventDefault();
            onCreateScraper(scraper);
            this.onDismiss();
        };
        this.onDismiss = () => {
            this.props.router.goBack();
        };
        const { params: { bucketID, orgID }, buckets, } = this.props;
        const firstBucketID = Object(lodash["get"])(buckets, '0.id', '');
        this.state = {
            scraper: {
                name: 'Name this Scraper',
                type: dist["d" /* ScraperTargetRequest */].TypeEnum.Prometheus,
                url: `${this.origin}/metrics`,
                orgID,
                bucketID: bucketID ? bucketID : firstBucketID,
            },
        };
    }
    render() {
        const { scraper } = this.state;
        const { buckets } = this.props;
        return (react_default.a.createElement(clockface_dist["Overlay"], { visible: true },
            react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 600 },
                react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Create Scraper", onDismiss: this.onDismiss }),
                react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                    react_default.a.createElement("h5", { className: "wizard-step--sub-title" }, "Scrapers collect data from multiple targets at regular intervals and to write to a bucket"),
                    react_default.a.createElement(CreateScraperForm, { buckets: buckets, url: scraper.url, name: scraper.name, selectedBucketID: scraper.bucketID, onInputChange: this.handleInputChange, onSelectBucket: this.handleSelectBucket, onSubmit: this.handleFormSubmit, onDismiss: this.onDismiss })))));
    }
    get origin() {
        return window.location.origin;
    }
}
const CreateScraperOverlay_mstp = (state) => ({
    buckets: Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Buckets),
});
const CreateScraperOverlay_mdtp = {
    onCreateScraper: scrapers_actions_thunks["a" /* createScraper */],
};
/* harmony default export */ var components_CreateScraperOverlay = (Object(es["b" /* connect */])(CreateScraperOverlay_mstp, CreateScraperOverlay_mdtp)(Object(react_router_es["g" /* withRouter */])(CreateScraperOverlay_CreateScraperOverlay)));

// CONCATENATED MODULE: ./src/shared/components/EditableName.tsx









let EditableName_EditableName = class EditableName extends react["Component"] {
    constructor(props) {
        super(props);
        this.handleStartEditing = () => {
            this.setState({ isEditing: true });
        };
        this.handleStopEditing = () => {
            const { workingName } = this.state;
            const { onUpdate } = this.props;
            this.setState({ loading: types["RemoteDataState"].Loading });
            onUpdate(workingName);
            this.setState({ loading: types["RemoteDataState"].Done, isEditing: false });
        };
        this.handleInputChange = (e) => {
            this.setState({ workingName: e.target.value });
        };
        this.handleKeyDown = (e) => {
            const { onUpdate, name } = this.props;
            const { workingName } = this.state;
            if (e.key === 'Enter') {
                e.persist();
                if (!workingName) {
                    this.setState({ isEditing: false, workingName: name });
                    return;
                }
                this.setState({ loading: types["RemoteDataState"].Loading });
                onUpdate(workingName);
                this.setState({ isEditing: false, loading: types["RemoteDataState"].Done });
            }
            if (e.key === 'Escape') {
                this.setState({ isEditing: false, workingName: name });
            }
        };
        this.handleInputFocus = (e) => {
            e.currentTarget.select();
        };
        this.state = {
            isEditing: false,
            workingName: props.name,
            loading: types["RemoteDataState"].Done,
        };
    }
    render() {
        const { name, onEditName, hrefValue, noNameString, testID } = this.props;
        return (react_default.a.createElement("div", { className: this.className, "data-testid": testID },
            react_default.a.createElement(clockface_dist["SpinnerContainer"], { loading: this.state.loading, spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], { diameterPixels: 20 }) },
                react_default.a.createElement("a", { href: hrefValue, onClick: onEditName },
                    react_default.a.createElement("span", null, name || noNameString))),
            react_default.a.createElement("div", { className: "editable-name--toggle", onClick: this.handleStartEditing, "data-testid": testID + '--toggle' },
                react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].Pencil })),
            this.input));
    }
    get input() {
        const { placeholder } = this.props;
        const { workingName, isEditing, loading } = this.state;
        if (isEditing && loading !== types["RemoteDataState"].Loading) {
            return (react_default.a.createElement(ClickOutside["a" /* ClickOutside */], { onClickOutside: this.handleStopEditing },
                react_default.a.createElement(clockface_dist["Input"], { size: clockface_dist["ComponentSize"].ExtraSmall, maxLength: 90, autoFocus: true, spellCheck: false, placeholder: placeholder, onFocus: this.handleInputFocus, onChange: this.handleInputChange, onKeyDown: this.handleKeyDown, className: "editable-name--input", value: workingName })));
        }
    }
    get className() {
        const { name, noNameString } = this.props;
        return classnames_default()('editable-name', {
            'untitled-name': name === noNameString,
        });
    }
};
EditableName_EditableName.defaultProps = {
    hrefValue: 'javascript:void(0);',
    testID: 'editable-name',
};
EditableName_EditableName = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], EditableName_EditableName);
/* harmony default export */ var components_EditableName = (EditableName_EditableName);

// CONCATENATED MODULE: ./src/authorizations/components/TokenRow.tsx






class TokenRow_TokenRow extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.changeToggle = () => {
            const { auth, onUpdate } = this.props;
            if (auth.status === 'active') {
                auth.status = 'inactive';
            }
            else {
                auth.status = 'active';
            }
            onUpdate(auth);
        };
        this.handleDelete = () => {
            const { id, description } = this.props.auth;
            this.props.onDelete(id, description);
        };
        this.handleClickDescription = (e) => {
            const { onClickDescription, auth } = this.props;
            e.preventDefault();
            onClickDescription(auth.id);
        };
        this.handleUpdateName = (value) => {
            const { auth, onUpdate } = this.props;
            onUpdate(Object.assign(Object.assign({}, auth), { description: value }));
        };
    }
    render() {
        const { description } = this.props.auth;
        return (react_default.a.createElement(clockface_dist["IndexList"].Row, { brighten: true },
            react_default.a.createElement(clockface_dist["IndexList"].Cell, null,
                react_default.a.createElement(components_EditableName, { name: description, onUpdate: this.handleUpdateName, noNameString: dashboards_constants["i" /* DEFAULT_TOKEN_DESCRIPTION */], onEditName: this.handleClickDescription })),
            react_default.a.createElement(clockface_dist["IndexList"].Cell, null,
                react_default.a.createElement(clockface_dist["SlideToggle"], { active: this.isTokenEnabled, size: clockface_dist["ComponentSize"].ExtraSmall, onChange: this.changeToggle, color: clockface_dist["ComponentColor"].Success })),
            react_default.a.createElement(clockface_dist["IndexList"].Cell, { alignment: clockface_dist["Alignment"].Right, revealOnHover: true },
                react_default.a.createElement(clockface_dist["ConfirmationButton"], { testID: "delete-token", size: clockface_dist["ComponentSize"].ExtraSmall, text: "Delete", confirmationLabel: "Really delete this token?", confirmationButtonText: "Confirm", confirmationButtonColor: clockface_dist["ComponentColor"].Danger, popoverAppearance: clockface_dist["Appearance"].Outline, popoverColor: clockface_dist["ComponentColor"].Danger, color: clockface_dist["ComponentColor"].Danger, onConfirm: this.handleDelete }))));
    }
    get isTokenEnabled() {
        const { auth } = this.props;
        return auth.status === 'active';
    }
}
const TokenRow_mdtp = {
    onDelete: authorizations_actions_thunks["b" /* deleteAuthorization */],
    onUpdate: authorizations_actions_thunks["d" /* updateAuthorization */],
};
/* harmony default export */ var components_TokenRow = (Object(es["b" /* connect */])(null, TokenRow_mdtp)(TokenRow_TokenRow));

// CONCATENATED MODULE: ./src/shared/components/permissionsWidget/PermissionsWidgetItem.tsx




class PermissionsWidgetItem_PermissionsWidgetItem extends react["Component"] {
    constructor() {
        super(...arguments);
        this.handleClick = () => {
            const { id, mode, selected, onToggle } = this.props;
            if (mode === PermissionsWidgetMode.Read || !onToggle) {
                return;
            }
            if (selected === PermissionsWidgetSelection.Selected) {
                onToggle(id, PermissionsWidgetSelection.Unselected);
            }
            else if (selected === PermissionsWidgetSelection.Unselected) {
                onToggle(id, PermissionsWidgetSelection.Selected);
            }
        };
    }
    render() {
        const { label, testID } = this.props;
        return (react_default.a.createElement("li", { className: this.className, onClick: this.handleClick, "data-testid": testID || 'permissions--item' },
            this.checkbox,
            react_default.a.createElement("label", { className: "permissions-widget--item-label" }, label)));
    }
    get checkbox() {
        const { mode, selected } = this.props;
        if (mode === PermissionsWidgetMode.Write) {
            return (react_default.a.createElement("div", { className: "permissions-widget--checkbox" },
                react_default.a.createElement("span", { className: `icon ${clockface["g" /* IconFont */].Checkmark}` })));
        }
        if (selected === PermissionsWidgetSelection.Selected) {
            return (react_default.a.createElement("div", { className: "permissions-widget--icon" },
                react_default.a.createElement("span", { className: `icon ${clockface["g" /* IconFont */].Checkmark}` })));
        }
        return (react_default.a.createElement("div", { className: "permissions-widget--icon" },
            react_default.a.createElement("span", { className: `icon ${clockface["g" /* IconFont */].Remove}` })));
    }
    get className() {
        const { selected, mode } = this.props;
        return classnames_default()('permissions-widget--item', {
            selected: selected === PermissionsWidgetSelection.Selected,
            unselected: selected === PermissionsWidgetSelection.Unselected,
            selectable: mode === PermissionsWidgetMode.Write,
        });
    }
}
/* harmony default export */ var permissionsWidget_PermissionsWidgetItem = (PermissionsWidgetItem_PermissionsWidgetItem);

// CONCATENATED MODULE: ./src/shared/components/permissionsWidget/PermissionsWidgetSection.tsx




class PermissionsWidgetSection_PermissionsWidgetSection extends react["Component"] {
    constructor() {
        super(...arguments);
        this.handleSelectAll = () => {
            const { id, onSelectAll } = this.props;
            if (onSelectAll) {
                onSelectAll(id);
            }
        };
        this.handleDeselectAll = () => {
            const { id, onDeselectAll } = this.props;
            if (onDeselectAll) {
                onDeselectAll(id);
            }
        };
    }
    render() {
        const { title, testID } = this.props;
        return (react_default.a.createElement("section", { className: "permissions-widget--section", "data-testid": testID || 'permissions-section' },
            react_default.a.createElement("header", { className: "permissions-widget--section-heading" },
                react_default.a.createElement("h3", { className: "permissions-widget--section-title" }, title),
                this.selectionButtons),
            react_default.a.createElement("ul", { className: "permissions-widget--section-list" }, this.sectionItems)));
    }
    get sectionItems() {
        const { children, mode } = this.props;
        return react_default.a.Children.map(children, (child) => {
            if (child.type !== permissionsWidget_PermissionsWidgetItem) {
                return null;
            }
            return react_default.a.createElement(permissionsWidget_PermissionsWidgetItem, Object.assign({}, child.props, { mode: mode }));
        });
    }
    get selectionButtons() {
        const { mode, title } = this.props;
        if (mode === PermissionsWidgetMode.Write) {
            return (react_default.a.createElement(clockface_dist["FlexBox"], { margin: clockface_dist["ComponentSize"].Small, direction: clockface_dist["FlexDirection"].Row, justifyContent: clockface_dist["JustifyContent"].FlexEnd },
                react_default.a.createElement(clockface_dist["Button"], { text: "Select All", size: clockface_dist["ComponentSize"].ExtraSmall, titleText: `Select all permissions within ${title}`, onClick: this.handleSelectAll }),
                react_default.a.createElement(clockface_dist["Button"], { text: "Deselect All", size: clockface_dist["ComponentSize"].ExtraSmall, titleText: `Deselect all permissions within ${title}`, onClick: this.handleDeselectAll })));
        }
    }
}
/* harmony default export */ var permissionsWidget_PermissionsWidgetSection = (PermissionsWidgetSection_PermissionsWidgetSection);

// CONCATENATED MODULE: ./src/shared/components/permissionsWidget/PermissionsWidget.tsx




var PermissionsWidgetMode;
(function (PermissionsWidgetMode) {
    PermissionsWidgetMode["Read"] = "read";
    PermissionsWidgetMode["Write"] = "write";
})(PermissionsWidgetMode || (PermissionsWidgetMode = {}));
var PermissionsWidgetSelection;
(function (PermissionsWidgetSelection) {
    PermissionsWidgetSelection["Selected"] = "selected";
    PermissionsWidgetSelection["Unselected"] = "unselected";
})(PermissionsWidgetSelection || (PermissionsWidgetSelection = {}));
class PermissionsWidget_PermissionsWidget extends react["Component"] {
    render() {
        return (react_default.a.createElement("div", { className: this.className, style: this.style },
            react_default.a.createElement("div", { className: "permissions-widget--header" }, this.headerText),
            react_default.a.createElement("div", { className: "permissions-widget--body" },
                react_default.a.createElement(FancyScrollbar["a" /* default */], { autoHide: false }, this.sections))));
    }
    get className() {
        const { className } = this.props;
        if (className) {
            return `permissions-widget ${className}`;
        }
        return 'permissions-widget';
    }
    get sections() {
        const { children, mode } = this.props;
        return react_default.a.Children.map(children, (child) => {
            if (child.type !== permissionsWidget_PermissionsWidgetSection) {
                return null;
            }
            return react_default.a.createElement(permissionsWidget_PermissionsWidgetSection, Object.assign({}, child.props, { mode: mode }));
        });
    }
    get style() {
        const { heightPixels } = this.props;
        return { height: `${heightPixels}px` };
    }
    get headerText() {
        const { mode } = this.props;
        if (mode === PermissionsWidgetMode.Read) {
            return 'Summary of access permissions';
        }
        else if (mode === PermissionsWidgetMode.Write) {
            return 'Summary of access permissions, each item can be toggled ON or OFF';
        }
    }
}
PermissionsWidget_PermissionsWidget.defaultProps = {
    heightPixels: 500,
};
PermissionsWidget_PermissionsWidget.Section = permissionsWidget_PermissionsWidgetSection;
PermissionsWidget_PermissionsWidget.Item = permissionsWidget_PermissionsWidgetItem;
/* harmony default export */ var permissionsWidget_PermissionsWidget = (PermissionsWidget_PermissionsWidget);

// CONCATENATED MODULE: ./src/authorizations/components/ViewTokenOverlay.tsx






class ViewTokenOverlay_ViewTokenOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.itemID = (permission, action) => {
            return `${permission}-${action}-${permission || '*'}-${permission || '*'}`;
        };
        this.handleDismiss = () => {
            this.props.onDismissOverlay();
        };
    }
    render() {
        const { description } = this.props.auth;
        const permissions = this.permissions;
        const notes = (_text, success) => {
            if (success) {
                return Object(copy_notifications["s" /* authorizationCopySuccess */])();
            }
            return Object(copy_notifications["r" /* authorizationCopyFailed */])();
        };
        return (react_default.a.createElement(clockface_dist["Overlay"].Container, null,
            react_default.a.createElement(clockface_dist["Overlay"].Header, { title: description, onDismiss: this.handleDismiss }),
            react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                react_default.a.createElement(CodeSnippet["a" /* default */], { copyText: this.props.auth.token, label: description, onCopyText: notes }),
                react_default.a.createElement(permissionsWidget_PermissionsWidget, { mode: PermissionsWidgetMode.Read, heightPixels: 500 }, Object.keys(permissions).map(type => {
                    return (react_default.a.createElement(permissionsWidget_PermissionsWidget.Section, { key: type, id: type, title: type, mode: PermissionsWidgetMode.Read }, permissions[type].map((action, i) => (react_default.a.createElement(permissionsWidget_PermissionsWidget.Item, { key: i, label: action, id: this.itemID(type, action), selected: PermissionsWidgetSelection.Selected })))));
                })))));
    }
    get permissions() {
        const p = this.props.auth.permissions.reduce((acc, { action, resource }) => {
            const { type } = resource;
            const name = Object(lodash["get"])(resource, 'name', '');
            let key = `${type}`;
            if (name) {
                key = `${type}-${name}`;
            }
            let actions = Object(lodash["get"])(acc, key, []);
            if (name && actions) {
                return Object.assign(Object.assign({}, acc), { [key]: [...actions, action] });
            }
            actions = Object(lodash["get"])(acc, key || resource.type, []);
            return Object.assign(Object.assign({}, acc), { [type]: [...actions, action] });
        }, {});
        return p;
    }
}

// CONCATENATED MODULE: ./src/authorizations/components/TokenList.tsx







class TokenList_TokenList extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.memGetSortedResources = Object(memoize_one_esm["a" /* default */])(getSortedResources);
        this.handleDismissOverlay = () => {
            this.setState({ isTokenOverlayVisible: false });
        };
        this.handleClickDescription = (authID) => {
            const authInView = this.props.auths.find(a => a.id === authID);
            this.setState({ isTokenOverlayVisible: true, authInView });
        };
        this.state = {
            isTokenOverlayVisible: false,
            authInView: null,
        };
    }
    render() {
        const { sortKey, sortDirection, onClickColumn } = this.props;
        const { isTokenOverlayVisible, authInView } = this.state;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["IndexList"], null,
                react_default.a.createElement(clockface_dist["IndexList"].Header, null,
                    react_default.a.createElement(clockface_dist["IndexList"].HeaderCell, { sortKey: this.headerKeys[0], sort: sortKey === this.headerKeys[0] ? sortDirection : clockface_dist["Sort"].None, columnName: "Description", onClick: onClickColumn, width: "50%" }),
                    react_default.a.createElement(clockface_dist["IndexList"].HeaderCell, { sortKey: this.headerKeys[1], sort: sortKey === this.headerKeys[1] ? sortDirection : clockface_dist["Sort"].None, columnName: "Status", onClick: onClickColumn, width: "50%" })),
                react_default.a.createElement(clockface_dist["IndexList"].Body, { emptyState: this.emptyState, columnCount: 2 }, this.rows)),
            react_default.a.createElement(clockface_dist["Overlay"], { visible: isTokenOverlayVisible },
                react_default.a.createElement(ViewTokenOverlay_ViewTokenOverlay, { auth: authInView, onDismissOverlay: this.handleDismissOverlay }))));
    }
    get headerKeys() {
        return ['description', 'status'];
    }
    get rows() {
        const { auths, sortDirection, sortKey, sortType } = this.props;
        const sortedAuths = this.memGetSortedResources(auths, sortKey, sortDirection, sortType);
        return sortedAuths.map(auth => (react_default.a.createElement(components_TokenRow, { key: auth.id, auth: auth, onClickDescription: this.handleClickDescription })));
    }
    get emptyState() {
        const { searchTerm } = this.props;
        let emptyStateText = 'There are not any Tokens associated with this account. Contact your administrator';
        if (searchTerm) {
            emptyStateText = 'No Tokens match your search term';
        }
        return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Large },
            react_default.a.createElement(clockface_dist["EmptyState"].Text, null, emptyStateText)));
    }
}

// CONCATENATED MODULE: ./src/authorizations/components/GenerateTokenDropdown.tsx



class GenerateTokenDropdown_GenerateTokenDropdown extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleSelect = (selection) => {
            if (selection === this.allAccessOption) {
                this.props.onSelectAllAccess();
            }
            else if (selection === this.bucketReadWriteOption) {
                this.props.onSelectReadWrite();
            }
        };
    }
    render() {
        return (react_default.a.createElement(clockface_dist["Dropdown"], { testID: "dropdown--gen-token", style: { width: '160px' }, button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { active: active, onClick: onClick, icon: clockface_dist["IconFont"].Plus, color: clockface_dist["ComponentColor"].Primary, testID: "dropdown-button--gen-token" }, "Generate")), menu: onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse }, this.optionItems)) }));
    }
    get optionItems() {
        return [
            react_default.a.createElement(clockface_dist["Dropdown"].Item, { testID: "dropdown-item generate-token--read-write", id: this.bucketReadWriteOption, key: this.bucketReadWriteOption, value: this.bucketReadWriteOption, onClick: this.handleSelect }, this.bucketReadWriteOption),
            react_default.a.createElement(clockface_dist["Dropdown"].Item, { testID: "dropdown-item generate-token--all-access", id: this.allAccessOption, key: this.allAccessOption, value: this.allAccessOption, onClick: this.handleSelect }, this.allAccessOption),
        ];
    }
    get bucketReadWriteOption() {
        return 'Read/Write Token';
    }
    get allAccessOption() {
        return 'All Access Token';
    }
}

// CONCATENATED MODULE: ./src/authorizations/components/TokensTab.tsx












var AuthSearchKeys;
(function (AuthSearchKeys) {
    AuthSearchKeys["Description"] = "description";
    AuthSearchKeys["Status"] = "status";
})(AuthSearchKeys || (AuthSearchKeys = {}));
const FilterAuthorizations = FilterListContainer();
class TokensTab_TokensTab extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleClickColumn = (nextSort, sortKey) => {
            const sortType = SortTypes.String;
            this.setState({ sortKey, sortDirection: nextSort, sortType });
        };
        this.handleChangeSearchTerm = (searchTerm) => {
            this.setState({ searchTerm });
        };
        this.handleGenerateAllAccess = () => {
            const { router, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/load-data/tokens/generate/all-access`);
        };
        this.handleGenerateReadWrite = () => {
            const { router, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/load-data/tokens/generate/buckets`);
        };
        this.state = {
            searchTerm: '',
            sortKey: 'description',
            sortDirection: clockface_dist["Sort"].Ascending,
            sortType: SortTypes.String,
        };
    }
    render() {
        const { searchTerm, sortKey, sortDirection, sortType } = this.state;
        const { tokens } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(tabbed_page_TabbedPageHeader, null,
                react_default.a.createElement(search_widget_SearchWidget, { searchTerm: searchTerm, placeholderText: "Filter Tokens...", onSearch: this.handleChangeSearchTerm, testID: "input-field--filter" }),
                react_default.a.createElement(GenerateTokenDropdown_GenerateTokenDropdown, { onSelectAllAccess: this.handleGenerateAllAccess, onSelectReadWrite: this.handleGenerateReadWrite })),
            react_default.a.createElement(FilterAuthorizations, { list: tokens, searchTerm: searchTerm, searchKeys: this.searchKeys }, filteredAuths => (react_default.a.createElement(TokenList_TokenList, { auths: filteredAuths, searchTerm: searchTerm, sortKey: sortKey, sortDirection: sortDirection, sortType: sortType, onClickColumn: this.handleClickColumn })))));
    }
    get searchKeys() {
        return [AuthSearchKeys.Status, AuthSearchKeys.Description];
    }
}
const TokensTab_mstp = (state) => ({
    tokens: Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Authorizations),
});
/* harmony default export */ var components_TokensTab = (Object(es["b" /* connect */])(TokensTab_mstp, null)(Object(react_router_es["g" /* withRouter */])(TokensTab_TokensTab)));

// CONCATENATED MODULE: ./src/authorizations/containers/TokensIndex.tsx












let TokensIndex_TokensIndex = class TokensIndex extends react["Component"] {
    render() {
        const { org, children } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Page"], { titleTag: pageTitleSuffixer(['Tokens', 'Load Data']) },
                react_default.a.createElement(components_LoadDataHeader, null),
                react_default.a.createElement(components_LoadDataTabbedPage, { activeTab: "tokens", orgID: org.id },
                    react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Authorizations] },
                        react_default.a.createElement(components_TokensTab, null)))),
            children));
    }
};
TokensIndex_TokensIndex = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], TokensIndex_TokensIndex);
const TokensIndex_mstp = (state) => ({ org: Object(selectors["a" /* getOrg */])(state) });
/* harmony default export */ var containers_TokensIndex = (Object(es["b" /* connect */])(TokensIndex_mstp, null)(TokensIndex_TokensIndex));

// CONCATENATED MODULE: ./src/members/components/MemberContextMenu.tsx




class MemberContextMenu_MemberContextMenu extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleDelete = () => {
            const { member, onDelete } = this.props;
            onDelete(member);
        };
    }
    render() {
        const { member } = this.props;
        return (react_default.a.createElement(CloudExclude, null,
            react_default.a.createElement(clockface["f" /* Context */], null,
                react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface_dist["IconFont"].Trash, color: clockface_dist["ComponentColor"].Danger, testID: "context-delete-menu" },
                    react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Delete", action: this.handleDelete, value: member, testID: "context-delete-task" })))));
    }
}

// CONCATENATED MODULE: ./src/members/components/MemberCard.tsx



class MemberCard_MemberCard extends react["PureComponent"] {
    render() {
        const { member, onDelete } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["ResourceCard"], { testID: "task-card", contextMenu: react_default.a.createElement(MemberContextMenu_MemberContextMenu, { member: member, onDelete: onDelete }), name: react_default.a.createElement(clockface_dist["ResourceCard"].Name, { name: member.name }), metaData: [react_default.a.createElement(react_default.a.Fragment, null,
                        "Role: ",
                        member.role)] })));
    }
}

// CONCATENATED MODULE: ./src/members/components/MemberList.tsx






class MemberList_MemberList extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.memGetSortedResources = Object(memoize_one_esm["a" /* default */])(getSortedResources);
    }
    render() {
        const { sortKey, sortDirection, onClickColumn } = this.props;
        return (react_default.a.createElement(clockface_dist["ResourceList"], null,
            react_default.a.createElement(clockface_dist["ResourceList"].Header, null,
                react_default.a.createElement(clockface_dist["ResourceList"].Sorter, { name: "Username", sortKey: this.headerKeys[0], sort: sortKey === this.headerKeys[0] ? sortDirection : clockface_dist["Sort"].None, onClick: onClickColumn }),
                react_default.a.createElement(clockface_dist["ResourceList"].Sorter, { name: "Role", sortKey: this.headerKeys[1], sort: sortKey === this.headerKeys[1] ? sortDirection : clockface_dist["Sort"].None, onClick: onClickColumn })),
            react_default.a.createElement(clockface_dist["ResourceList"].Body, { emptyState: this.props.emptyState, "data-testid": "members-list" }, this.rows)));
    }
    get headerKeys() {
        return ['name', 'role'];
    }
    get rows() {
        const { members, sortKey, sortDirection, sortType, onDelete } = this.props;
        const sortedMembers = this.memGetSortedResources(members, sortKey, sortDirection, sortType);
        return sortedMembers.map(member => (react_default.a.createElement(MemberCard_MemberCard, { key: member.id, member: member, onDelete: onDelete })));
    }
}

// EXTERNAL MODULE: ./src/members/actions/thunks.ts
var members_actions_thunks = __webpack_require__(749);

// CONCATENATED MODULE: ./src/members/components/Members.tsx














const FilterMembers = FilterListContainer();
class Members_Members extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleClickColumn = (nextSort, sortKey) => {
            const sortType = SortTypes.String;
            this.setState({ sortKey, sortDirection: nextSort, sortType });
        };
        this.removeMember = (member) => {
            const { onRemoveMember } = this.props;
            onRemoveMember(member);
        };
        this.handleFilterChange = (searchTerm) => {
            this.setState({ searchTerm });
        };
        this.state = {
            searchTerm: '',
            sortKey: 'name',
            sortDirection: clockface_dist["Sort"].Ascending,
            sortType: SortTypes.String,
        };
    }
    render() {
        const { searchTerm, sortKey, sortDirection, sortType } = this.state;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(components_SettingsTabbedPageHeader, null,
                react_default.a.createElement(search_widget_SearchWidget, { placeholderText: "Filter members...", searchTerm: searchTerm, onSearch: this.handleFilterChange })),
            react_default.a.createElement(FilterMembers, { list: this.props.members, searchKeys: ['name'], searchTerm: searchTerm }, ms => (react_default.a.createElement(MemberList_MemberList, { members: ms, emptyState: this.emptyState, onDelete: this.removeMember, sortKey: sortKey, sortDirection: sortDirection, sortType: sortType, onClickColumn: this.handleClickColumn })))));
    }
    get emptyState() {
        const { searchTerm } = this.state;
        if (Object(lodash["isEmpty"])(searchTerm)) {
            return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Medium },
                react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                    "Looks like there aren't any ",
                    react_default.a.createElement("b", null, "Members"),
                    ".")));
        }
        return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Medium },
            react_default.a.createElement(clockface_dist["EmptyState"].Text, null, "No Members match your query")));
    }
}
const Members_mstp = (state) => {
    const members = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Members);
    return { members };
};
const Members_mdtp = {
    onRemoveMember: members_actions_thunks["a" /* deleteMember */],
};
/* harmony default export */ var components_Members = (Object(es["b" /* connect */])(Members_mstp, Members_mdtp)(Object(react_router_es["g" /* withRouter */])(Members_Members)));

// CONCATENATED MODULE: ./src/members/containers/MembersIndex.tsx













let MembersIndex_MembersIndex = class MembersIndex extends react["Component"] {
    constructor(props) {
        super(props);
    }
    render() {
        const { org, children } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Page"], { titleTag: pageTitleSuffixer(['Members', 'Settings']) },
                react_default.a.createElement(components_SettingsHeader, null),
                react_default.a.createElement(components_SettingsTabbedPage, { activeTab: "members", orgID: org.id },
                    react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Members] },
                        react_default.a.createElement(components_Members, null)))),
            children));
    }
};
MembersIndex_MembersIndex = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], MembersIndex_MembersIndex);
const MembersIndex_mstp = (state, props) => {
    const org = Object(resources_selectors["b" /* getByID */])(state, types["ResourceType"].Orgs, props.params.orgID);
    return {
        org,
    };
};
/* harmony default export */ var containers_MembersIndex = (Object(es["b" /* connect */])(MembersIndex_mstp, null)(Object(react_router_es["g" /* withRouter */])(MembersIndex_MembersIndex)));

// CONCATENATED MODULE: ./src/labels/components/UpdateLabelOverlay.tsx





let UpdateLabelOverlay_UpdateLabelOverlay = class UpdateLabelOverlay extends react["Component"] {
    constructor(props) {
        super(props);
        this.handleSubmit = () => {
            const { onUpdateLabel, onDismiss } = this.props;
            onUpdateLabel(this.state.label);
            onDismiss();
        };
        this.handleInputChange = (e) => {
            const { value, name } = e.target;
            this.setState(prevState => ({
                label: Object.assign(Object.assign({}, prevState.label), { [name]: value }),
            }));
        };
        this.handleLabelPropertyChange = (e) => {
            const { value, name } = e.target;
            this.setState(prevState => ({
                label: Object.assign(Object.assign({}, prevState.label), { properties: Object.assign(Object.assign({}, prevState.label.properties), { [name]: value }) }),
            }));
        };
        this.handleColorHexChange = (color, colorStatus) => {
            const properties = Object.assign(Object.assign({}, this.state.label.properties), { color });
            const label = Object.assign(Object.assign({}, this.state.label), { properties });
            this.setState({ label, colorStatus });
        };
        this.state = {
            label: props.label,
            colorStatus: clockface_dist["ComponentStatus"].Default,
        };
    }
    render() {
        const { onDismiss, onNameValidation } = this.props;
        const { label } = this.state;
        return (react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 400 },
            react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Edit Label", onDismiss: onDismiss }),
            react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                react_default.a.createElement(components_LabelOverlayForm, { id: label.id, name: label.name, description: label.properties.description, color: label.properties.color, onColorChange: this.handleColorHexChange, onSubmit: this.handleSubmit, onCloseModal: onDismiss, onInputChange: this.handleInputChange, onLabelPropertyChange: this.handleLabelPropertyChange, buttonText: "Save Changes", isFormValid: this.isFormValid, onNameValidation: onNameValidation }))));
    }
    get isFormValid() {
        const { label, colorStatus } = this.state;
        const nameIsValid = this.props.onNameValidation(label.name) === null;
        const colorIsValid = colorStatus === clockface_dist["ComponentStatus"].Default ||
            colorStatus == clockface_dist["ComponentStatus"].Valid;
        return nameIsValid && colorIsValid;
    }
};
UpdateLabelOverlay_UpdateLabelOverlay = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], UpdateLabelOverlay_UpdateLabelOverlay);
/* harmony default export */ var components_UpdateLabelOverlay = (UpdateLabelOverlay_UpdateLabelOverlay);

// CONCATENATED MODULE: ./src/labels/components/LabelContextMenu.tsx



class LabelContextMenu_LabelContextMenu extends react["PureComponent"] {
    render() {
        const { label, onDelete } = this.props;
        return (react_default.a.createElement(clockface["f" /* Context */], null,
            react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface_dist["IconFont"].Trash, color: clockface_dist["ComponentColor"].Danger, testID: "context-delete-menu" },
                react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Delete", action: onDelete, value: label.id, testID: "context-delete-label" }))));
    }
}

// CONCATENATED MODULE: ./src/labels/components/LabelCard.tsx





let LabelCard_LabelCard = class LabelCard extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleClick = () => {
            const { label, onClick } = this.props;
            onClick(label.id);
        };
    }
    render() {
        const { label, onDelete } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["ResourceCard"], { testID: "label-card", contextMenu: react_default.a.createElement(LabelContextMenu_LabelContextMenu, { label: label, onDelete: onDelete }), name: react_default.a.createElement(clockface_dist["Label"], { id: label.id, name: label.name, color: label.properties.color, description: label.properties.description, size: clockface_dist["ComponentSize"].Small, onClick: this.handleClick }), metaData: [react_default.a.createElement(react_default.a.Fragment, null,
                        "Description: ",
                        label.properties.description)] })));
    }
};
LabelCard_LabelCard = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], LabelCard_LabelCard);
/* harmony default export */ var components_LabelCard = (LabelCard_LabelCard);

// CONCATENATED MODULE: ./src/labels/components/LabelList.tsx











let LabelList_LabelList = class LabelList extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.memGetSortedResources = Object(memoize_one_esm["a" /* default */])(getSortedResources);
        this.state = {
            labelID: null,
            overlayState: types["OverlayState"].Closed,
        };
        this.handleCloseModal = () => {
            this.setState({ overlayState: types["OverlayState"].Closed });
        };
        this.handleStartEdit = (labelID) => {
            this.setState({ labelID, overlayState: types["OverlayState"].Open });
        };
        this.handleUpdateLabel = (updatedLabel) => {
            this.props.onUpdateLabel(updatedLabel);
            this.setState({ overlayState: types["OverlayState"].Closed });
        };
        this.handleNameValidation = (name) => {
            const { labels } = this.props;
            const names = labels.map(label => label.name).filter(l => l !== name);
            return Object(utils["c" /* validateLabelUniqueness */])(names, name);
        };
    }
    render() {
        const { sortKey, sortDirection, onClickColumn } = this.props;
        const headerKeys = ['name', 'properties.description'];
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["ResourceList"], null,
                react_default.a.createElement(clockface_dist["ResourceList"].Header, null,
                    react_default.a.createElement(clockface_dist["ResourceList"].Sorter, { name: headerKeys[0], sortKey: headerKeys[0], sort: sortKey === headerKeys[0] ? sortDirection : clockface_dist["Sort"].None, onClick: onClickColumn, testID: "sorter--name" }),
                    react_default.a.createElement(clockface_dist["ResourceList"].Sorter, { name: "Description", sortKey: headerKeys[1], sort: sortKey === headerKeys[1] ? sortDirection : clockface_dist["Sort"].None, onClick: onClickColumn, testID: "sorter--desc" })),
                react_default.a.createElement(clockface_dist["ResourceList"].Body, { emptyState: this.props.emptyState }, this.rows)),
            react_default.a.createElement(clockface_dist["Overlay"], { visible: this.isOverlayVisible },
                react_default.a.createElement(components_UpdateLabelOverlay, { label: this.label, onDismiss: this.handleCloseModal, onUpdateLabel: this.handleUpdateLabel, onNameValidation: this.handleNameValidation }))));
    }
    get rows() {
        const { labels, sortKey, sortDirection, sortType, onDeleteLabel } = this.props;
        const sortedLabels = this.memGetSortedResources(labels, sortKey, sortDirection, sortType);
        return sortedLabels.map((label, index) => (react_default.a.createElement(components_LabelCard, { key: label.id || `label-${index}`, onDelete: onDeleteLabel, onClick: this.handleStartEdit, label: label })));
    }
    get label() {
        if (this.state.labelID) {
            return this.props.labels.find(l => l.id === this.state.labelID);
        }
    }
    get isOverlayVisible() {
        const { labelID, overlayState } = this.state;
        return !!labelID && overlayState === types["OverlayState"].Open;
    }
};
LabelList_LabelList = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], LabelList_LabelList);
/* harmony default export */ var components_LabelList = (LabelList_LabelList);

// CONCATENATED MODULE: ./src/labels/components/LabelsTab.tsx
















const FilterLabels = FilterListContainer();
let LabelsTab_Labels = class Labels extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleClickColumn = (nextSort, sortKey) => {
            const sortType = SortTypes.String;
            this.setState({ sortKey, sortDirection: nextSort, sortType });
        };
        this.handleShowOverlay = () => {
            this.setState({ isOverlayVisible: true });
        };
        this.handleDismissOverlay = () => {
            this.setState({ isOverlayVisible: false });
        };
        this.handleFilterChange = (searchTerm) => {
            this.setState({ searchTerm });
        };
        this.handleCreateLabel = (label) => {
            this.props.createLabel(label.name, label.properties);
        };
        this.handleUpdateLabel = (label) => {
            this.props.updateLabel(label.id, label);
        };
        this.handleDelete = (id) => {
            this.props.deleteLabel(id);
        };
        this.handleNameValidation = (name) => {
            const names = this.props.labels.map(label => label.name);
            return Object(utils["c" /* validateLabelUniqueness */])(names, name);
        };
        this.state = {
            searchTerm: '',
            isOverlayVisible: false,
            sortKey: 'name',
            sortDirection: clockface_dist["Sort"].Ascending,
            sortType: SortTypes.String,
        };
    }
    render() {
        const { labels } = this.props;
        const { searchTerm, isOverlayVisible, sortKey, sortDirection, sortType, } = this.state;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(tabbed_page_TabbedPageHeader, null,
                react_default.a.createElement(search_widget_SearchWidget, { searchTerm: searchTerm, onSearch: this.handleFilterChange, placeholderText: "Filter Labels..." }),
                react_default.a.createElement(clockface_dist["Button"], { text: "Create Label", color: clockface_dist["ComponentColor"].Primary, icon: clockface_dist["IconFont"].Plus, onClick: this.handleShowOverlay, testID: "button-create" })),
            react_default.a.createElement(FilterLabels, { list: labels, searchKeys: ['name', 'properties.description'], searchTerm: searchTerm }, ls => (react_default.a.createElement(components_LabelList, { labels: ls, emptyState: this.emptyState, onUpdateLabel: this.handleUpdateLabel, onDeleteLabel: this.handleDelete, sortKey: sortKey, sortDirection: sortDirection, sortType: sortType, onClickColumn: this.handleClickColumn }))),
            react_default.a.createElement(components_CreateLabelOverlay, { isVisible: isOverlayVisible, onDismiss: this.handleDismissOverlay, onCreateLabel: this.handleCreateLabel, onNameValidation: this.handleNameValidation })));
    }
    get emptyState() {
        const { searchTerm } = this.state;
        if (searchTerm) {
            return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Medium },
                react_default.a.createElement(clockface_dist["EmptyState"].Text, null, "No Labels match your search term")));
        }
        return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Medium },
            react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                "Looks like you haven't created any ",
                react_default.a.createElement("b", null, "Labels"),
                ", why not create one?"),
            react_default.a.createElement(clockface_dist["Button"], { text: "Create Label", color: clockface_dist["ComponentColor"].Primary, icon: clockface_dist["IconFont"].Plus, onClick: this.handleShowOverlay, testID: "button-create-initial" })));
    }
};
LabelsTab_Labels = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], LabelsTab_Labels);
const LabelsTab_mstp = (state) => {
    const labels = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Labels);
    return { labels };
};
const LabelsTab_mdtp = {
    createLabel: labels_actions_thunks["a" /* createLabel */],
    updateLabel: labels_actions_thunks["d" /* updateLabel */],
    deleteLabel: labels_actions_thunks["b" /* deleteLabel */],
};
/* harmony default export */ var LabelsTab = (Object(es["b" /* connect */])(LabelsTab_mstp, LabelsTab_mdtp)(LabelsTab_Labels));

// CONCATENATED MODULE: ./src/labels/containers/LabelsIndex.tsx












let LabelsIndex_LabelsIndex = class LabelsIndex extends react["PureComponent"] {
    render() {
        const { org, children } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Page"], { titleTag: pageTitleSuffixer(['Labels', 'Settings']) },
                react_default.a.createElement(components_SettingsHeader, null),
                react_default.a.createElement(components_SettingsTabbedPage, { activeTab: "labels", orgID: org.id },
                    react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Labels] },
                        react_default.a.createElement(LabelsTab, null)))),
            children));
    }
};
LabelsIndex_LabelsIndex = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], LabelsIndex_LabelsIndex);
const LabelsIndex_mstp = (state) => ({ org: Object(selectors["a" /* getOrg */])(state) });
/* harmony default export */ var containers_LabelsIndex = (Object(es["b" /* connect */])(LabelsIndex_mstp, null)(LabelsIndex_LabelsIndex));

// CONCATENATED MODULE: ./src/shared/components/ViewOverlay.tsx





class ViewOverlay_ViewOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.doNothing = () => { };
    }
    render() {
        const { isVisible, overlayHeading, onDismissOverlay, status } = this.props;
        return (react_default.a.createElement(clockface_dist["Overlay"], { visible: isVisible },
            react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 800 },
                react_default.a.createElement(clockface_dist["Overlay"].Header, { title: overlayHeading, onDismiss: onDismissOverlay }),
                react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                    react_default.a.createElement(clockface_dist["SpinnerContainer"], { loading: status, spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null) }, this.overlayBody)),
                react_default.a.createElement(clockface_dist["Overlay"].Footer, null,
                    this.closeButton,
                    this.copyButton))));
    }
    get overlayBody() {
        const options = {
            tabIndex: 1,
            mode: 'json',
            readonly: true,
            lineNumbers: true,
            autoRefresh: true,
            theme: 'time-machine',
            completeSingle: false,
        };
        return (react_default.a.createElement("div", { className: "export-overlay--text-area" },
            react_default.a.createElement(react_codemirror2["Controlled"], { autoFocus: false, autoCursor: true, value: this.resourceText, options: options, onBeforeChange: this.doNothing, onTouchStart: this.doNothing })));
    }
    get resourceText() {
        return JSON.stringify(this.props.resource, null, 1);
    }
    get copyButton() {
        return (react_default.a.createElement(CopyButton["a" /* default */], { textToCopy: this.resourceText, contentName: this.props.overlayHeading, size: clockface_dist["ComponentSize"].Small, color: clockface_dist["ComponentColor"].Secondary }));
    }
    get closeButton() {
        return (react_default.a.createElement(clockface_dist["Button"], { text: "Close", onClick: this.props.onDismissOverlay, color: clockface_dist["ComponentColor"].Primary }));
    }
}
ViewOverlay_ViewOverlay.defaultProps = {
    isVisible: true,
};

// CONCATENATED MODULE: ./src/templates/components/TemplateViewOverlay.tsx







let TemplateViewOverlay_TemplateExportOverlay = class TemplateExportOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.onDismiss = () => {
            const { router, clearExportTemplate } = this.props;
            router.goBack();
            clearExportTemplate();
        };
    }
    componentDidMount() {
        const { params: { id }, convertToTemplate, } = this.props;
        convertToTemplate(id);
    }
    render() {
        const { exportTemplate, status } = this.props;
        return (react_default.a.createElement(ViewOverlay_ViewOverlay, { resource: exportTemplate, overlayHeading: this.overlayTitle, onDismissOverlay: this.onDismiss, status: status }));
    }
    get overlayTitle() {
        const { exportTemplate } = this.props;
        if (exportTemplate) {
            return exportTemplate.meta.name;
        }
        return '';
    }
};
TemplateViewOverlay_TemplateExportOverlay = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], TemplateViewOverlay_TemplateExportOverlay);
const TemplateViewOverlay_mstp = (state) => ({
    exportTemplate: state.resources.templates.exportTemplate.item,
    status: state.resources.templates.exportTemplate.status,
});
const TemplateViewOverlay_mdtp = {
    convertToTemplate: templates_actions_thunks["d" /* convertToTemplate */],
    clearExportTemplate: templates_actions_thunks["b" /* clearExportTemplate */],
};
/* harmony default export */ var TemplateViewOverlay = (Object(es["b" /* connect */])(TemplateViewOverlay_mstp, TemplateViewOverlay_mdtp)(Object(react_router_es["g" /* withRouter */])(TemplateViewOverlay_TemplateExportOverlay)));

// CONCATENATED MODULE: ./src/dataLoaders/components/lineProtocolWizard/configure/PrecisionDropdown.tsx




const writePrecisions = [
    dist["A" /* WritePrecision */].Ns,
    dist["A" /* WritePrecision */].Us,
    dist["A" /* WritePrecision */].Ms,
    dist["A" /* WritePrecision */].S,
];
const makePrecisionReadable = {
    [dist["A" /* WritePrecision */].Ns]: dataLoaders["h" /* Precision */].Nanoseconds,
    [dist["A" /* WritePrecision */].Us]: dataLoaders["h" /* Precision */].Microseconds,
    [dist["A" /* WritePrecision */].S]: dataLoaders["h" /* Precision */].Seconds,
    [dist["A" /* WritePrecision */].Ms]: dataLoaders["h" /* Precision */].Milliseconds,
};
class PrecisionDropdown_PrecisionDropdown extends react["PureComponent"] {
    render() {
        const { setPrecision, precision } = this.props;
        return (react_default.a.createElement(clockface_dist["Dropdown"], { testID: "wizard-step--lp-precision--dropdown", style: { width: '220px' }, button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { active: active, onClick: onClick }, `Precision: ${makePrecisionReadable[precision]}`)), menu: onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse }, writePrecisions.map(value => (react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: value, value: value, id: value, onClick: setPrecision, testID: `wizard-step--lp-precision-${value}`, selected: `${value}` === `${precision}` }, makePrecisionReadable[value]))))) }));
    }
}
/* harmony default export */ var configure_PrecisionDropdown = (PrecisionDropdown_PrecisionDropdown);

// CONCATENATED MODULE: ./src/dataLoaders/components/lineProtocolWizard/configure/Tab.tsx


/* harmony default export */ var Tab = (class extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleClick = () => {
            this.props.onClick(this.props.tab);
        };
    }
    render() {
        const { tab, active } = this.props;
        return (react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "line-protocol", key: tab, id: tab, titleText: tab, value: tab, active: active, onClick: this.handleClick, testID: tab }, tab));
    }
});

// CONCATENATED MODULE: ./src/dataLoaders/components/lineProtocolWizard/configure/TabSelector.tsx



/* harmony default export */ var TabSelector = (class extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleTabClick = (tab) => {
            const { activeLPTab, onClick } = this.props;
            if (tab !== activeLPTab) {
                onClick(tab);
            }
        };
    }
    render() {
        const { tabs, activeLPTab } = this.props;
        return (react_default.a.createElement(clockface_dist["SelectGroup"], { shape: clockface_dist["ButtonShape"].Default }, tabs.map(t => (react_default.a.createElement(Tab, { tab: t, key: t, active: activeLPTab === t, onClick: this.handleTabClick })))));
    }
});

// CONCATENATED MODULE: ./src/dataLoaders/components/lineProtocolWizard/configure/TabBody.tsx




/* harmony default export */ var TabBody = (class extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleChange = (e) => {
            const { value } = e.target;
            this.props.onURLChange(value);
        };
        this.handleTextChange = (e) => {
            const { setLineProtocolBody } = this.props;
            setLineProtocolBody(e.target.value);
        };
        this.handleSetLineProtocol = (lpBody) => {
            const { setLineProtocolBody } = this.props;
            setLineProtocolBody(lpBody);
        };
    }
    render() {
        const { lineProtocolBody, activeLPTab, urlInput } = this.props;
        switch (activeLPTab) {
            case types["LineProtocolTab"].UploadFile:
                return (react_default.a.createElement(components_DragAndDrop, { submitText: "Upload File", handleSubmit: this.handleSetLineProtocol, submitOnDrop: true, submitOnUpload: true, className: "line-protocol--content" }));
            case types["LineProtocolTab"].EnterManually:
                return (react_default.a.createElement(clockface_dist["TextArea"], { value: lineProtocolBody, placeholder: "Write text here", onChange: this.handleTextChange, testID: "line-protocol--text-area", className: "line-protocol--content" }));
            case types["LineProtocolTab"].EnterURL:
                return (react_default.a.createElement(clockface_dist["Grid"], null,
                    react_default.a.createElement(clockface_dist["Grid"].Row, null,
                        react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve, widthMD: clockface_dist["Columns"].Ten, offsetMD: clockface_dist["Columns"].One },
                            react_default.a.createElement(clockface_dist["Form"].Element, { label: "File URL:" },
                                react_default.a.createElement(clockface_dist["Input"], { titleText: "File URL:", type: clockface_dist["InputType"].Text, placeholder: "http://...", value: urlInput, onChange: this.handleChange, autoFocus: true, size: clockface_dist["ComponentSize"].Large }))))));
        }
    }
});

// CONCATENATED MODULE: ./src/dataLoaders/components/lineProtocolWizard/configure/LineProtocolTabs.tsx






class LineProtocolTabs_LineProtocolTabs extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleTabClick = (tab) => {
            const { setActiveLPTab, setLineProtocolBody } = this.props;
            setLineProtocolBody('');
            setActiveLPTab(tab);
        };
        this.handleURLChange = (urlInput) => {
            this.setState({ urlInput });
        };
        this.state = {
            urlInput: '',
        };
    }
    render() {
        const { setPrecision, precision, activeLPTab, tabs, setLineProtocolBody, lineProtocolBody, } = this.props;
        const { urlInput } = this.state;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement("div", { className: "line-protocol--header" },
                react_default.a.createElement(TabSelector, { activeLPTab: activeLPTab, tabs: tabs, onClick: this.handleTabClick }),
                react_default.a.createElement(configure_PrecisionDropdown, { setPrecision: setPrecision, precision: precision })),
            react_default.a.createElement(TabBody, { onURLChange: this.handleURLChange, activeLPTab: activeLPTab, precision: precision, urlInput: urlInput, lineProtocolBody: lineProtocolBody, setLineProtocolBody: setLineProtocolBody })));
    }
}
const LineProtocolTabs_mstp = ({ dataLoading: { dataLoaders: { lineProtocolBody, activeLPTab, precision }, }, }) => {
    return { lineProtocolBody, activeLPTab, precision };
};
const LineProtocolTabs_mdtp = {
    setLineProtocolBody: actions_dataLoaders["l" /* setLineProtocolBody */],
    setActiveLPTab: actions_dataLoaders["g" /* setActiveLPTab */],
    setPrecision: actions_dataLoaders["n" /* setPrecision */],
};
/* harmony default export */ var configure_LineProtocolTabs = (Object(es["b" /* connect */])(LineProtocolTabs_mstp, LineProtocolTabs_mdtp)(LineProtocolTabs_LineProtocolTabs));

// CONCATENATED MODULE: ./src/dataLoaders/components/lineProtocolWizard/LineProtocolHelperText.tsx

const LineProtocolHelperText = () => {
    return (react_default.a.createElement("p", null,
        "Need help writing InfluxDB Line Protocol?",
        ' ',
        react_default.a.createElement("a", { href: "https://v2.docs.influxdata.com/v2.0/write-data/#write-data-in-the-influxdb-ui", target: "_blank" }, "See Documentation")));
};
/* harmony default export */ var lineProtocolWizard_LineProtocolHelperText = (LineProtocolHelperText);

// CONCATENATED MODULE: ./src/dataLoaders/components/lineProtocolWizard/configure/LineProtocol.tsx












let LineProtocol_LineProtocol = class LineProtocol extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleSubmit = () => {
            const { onIncrementCurrentStepIndex } = this.props;
            this.handleUpload();
            onIncrementCurrentStepIndex();
        };
        this.handleUpload = () => {
            const { bucket, org, lineProtocolBody, precision } = this.props;
            this.props.writeLineProtocolAction(org, bucket, lineProtocolBody, precision);
        };
    }
    componentDidMount() {
        const { setLPStatus } = this.props;
        setLPStatus(types["RemoteDataState"].NotStarted);
    }
    render() {
        const { bucket, org } = this.props;
        return (react_default.a.createElement(clockface_dist["Form"], { onSubmit: this.handleSubmit },
            react_default.a.createElement(clockface_dist["Overlay"].Body, { style: { textAlign: 'center' } },
                react_default.a.createElement(configure_LineProtocolTabs, { tabs: this.LineProtocolTabs, bucket: bucket, org: org }),
                react_default.a.createElement(lineProtocolWizard_LineProtocolHelperText, null)),
            react_default.a.createElement(OnboardingButtons["a" /* default */], { autoFocusNext: true, nextButtonText: "Write Data" })));
    }
    get LineProtocolTabs() {
        return [dataLoaders["g" /* LineProtocolTab */].UploadFile, dataLoaders["g" /* LineProtocolTab */].EnterManually];
    }
};
LineProtocol_LineProtocol = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], LineProtocol_LineProtocol);

const LineProtocol_mstp = (state) => {
    const { dataLoading } = state;
    const { dataLoaders: { lineProtocolBody, precision }, steps: { bucket }, } = dataLoading;
    const org = Object(selectors["a" /* getOrg */])(state).name;
    return { lineProtocolBody, precision, bucket, org };
};
const LineProtocol_mdtp = {
    setLPStatus: actions_dataLoaders["k" /* setLPStatus */],
    writeLineProtocolAction: actions_dataLoaders["s" /* writeLineProtocolAction */],
};
/* harmony default export */ var configure_LineProtocol = (Object(es["b" /* connect */])(LineProtocol_mstp, LineProtocol_mdtp)(LineProtocol_LineProtocol));

// CONCATENATED MODULE: ./src/dataLoaders/components/lineProtocolWizard/verify/StatusIndicator.tsx





class StatusIndicator_StatusIndicator extends react["PureComponent"] {
    render() {
        const { status } = this.props;
        return (react_default.a.createElement("div", { className: "line-protocol--spinner" },
            react_default.a.createElement("p", { "data-testid": "line-protocol--status", className: this.statusClassName }, this.statusText.status),
            react_default.a.createElement(clockface_dist["SparkleSpinner"], { loading: status, sizePixels: 220 }),
            react_default.a.createElement("p", { className: this.statusClassName }, this.statusText.message)));
    }
    get statusClassName() {
        const { status } = this.props;
        return classnames_default()(`line-protocol--status`, {
            loading: status === types["RemoteDataState"].Loading,
            success: status === types["RemoteDataState"].Done,
            error: status === types["RemoteDataState"].Error,
        });
    }
    get statusText() {
        let status = '';
        let message = '';
        switch (this.props.status) {
            case types["RemoteDataState"].Loading:
                status = 'Loading...';
                message = 'Just a moment';
                break;
            case types["RemoteDataState"].Done:
                status = 'Data Written Successfully';
                message = 'Hooray!';
                break;
            case types["RemoteDataState"].Error:
                status = 'Unable to Write Data';
                message = `Error: ${this.props.errorMessage}`;
                break;
        }
        return {
            status,
            message,
        };
    }
}
const StatusIndicator_mstp = ({ dataLoading: { dataLoaders: { lpStatus, lpError }, }, }) => ({
    status: lpStatus,
    errorMessage: lpError,
});
/* harmony default export */ var verify_StatusIndicator = (Object(es["b" /* connect */])(StatusIndicator_mstp, null)(StatusIndicator_StatusIndicator));

// CONCATENATED MODULE: ./src/dataLoaders/components/lineProtocolWizard/verify/LineProtocolVerifyStep.tsx







let LineProtocolVerifyStep_VerifyLineProtocolStep = class VerifyLineProtocolStep extends react["PureComponent"] {
    render() {
        const { onDecrementCurrentStepIndex, onExit } = this.props;
        return (react_default.a.createElement(clockface_dist["Form"], { onSubmit: onExit },
            react_default.a.createElement(clockface_dist["Overlay"].Body, { style: { textAlign: 'center' } },
                react_default.a.createElement(verify_StatusIndicator, null),
                react_default.a.createElement(lineProtocolWizard_LineProtocolHelperText, null)),
            react_default.a.createElement(OnboardingButtons["a" /* default */], { onClickBack: onDecrementCurrentStepIndex, nextButtonText: "Finish" })));
    }
};
LineProtocolVerifyStep_VerifyLineProtocolStep = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], LineProtocolVerifyStep_VerifyLineProtocolStep);

/* harmony default export */ var LineProtocolVerifyStep = (LineProtocolVerifyStep_VerifyLineProtocolStep);

// CONCATENATED MODULE: ./src/dataLoaders/components/lineProtocolWizard/verify/LineProtocolStepSwitcher.tsx






let LineProtocolStepSwitcher_StepSwitcher = class StepSwitcher extends react["PureComponent"] {
    render() {
        const { stepProps } = this.props;
        switch (stepProps.currentStepIndex) {
            case types["LineProtocolStep"].Configure:
                return react_default.a.createElement(configure_LineProtocol, Object.assign({}, stepProps));
            case types["LineProtocolStep"].Verify:
                return react_default.a.createElement(LineProtocolVerifyStep, Object.assign({}, stepProps));
            default:
                return react_default.a.createElement("div", null);
        }
    }
};
LineProtocolStepSwitcher_StepSwitcher = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], LineProtocolStepSwitcher_StepSwitcher);
/* harmony default export */ var LineProtocolStepSwitcher = (LineProtocolStepSwitcher_StepSwitcher);

// CONCATENATED MODULE: ./src/dataLoaders/components/lineProtocolWizard/LineProtocolWizard.tsx












let LineProtocolWizard_LineProtocolWizard = class LineProtocolWizard extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleSetBucketInfo = () => {
            const { bucket, buckets } = this.props;
            if (!bucket && buckets && buckets.length) {
                const { orgID, name, id } = buckets[0];
                this.props.onSetBucketInfo(orgID, name, id);
            }
        };
        this.handleSetStartingValues = () => {
            const { startingStep } = this.props;
            const hasStartingStep = startingStep || startingStep === 0;
            if (hasStartingStep) {
                this.props.onSetCurrentStepIndex(startingStep);
            }
        };
        this.handleDismiss = () => {
            const { router, onClearDataLoaders, onClearSteps } = this.props;
            onClearDataLoaders();
            onClearSteps();
            router.goBack();
        };
    }
    componentDidMount() {
        this.handleSetBucketInfo();
        this.handleSetStartingValues();
    }
    render() {
        const { buckets } = this.props;
        return (react_default.a.createElement(clockface_dist["Overlay"], { visible: true },
            react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 800 },
                react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Add Data Using Line Protocol", onDismiss: this.handleDismiss }),
                react_default.a.createElement(LineProtocolStepSwitcher, { stepProps: this.stepProps, buckets: buckets }))));
    }
    get stepProps() {
        const { notify, currentStepIndex, onDecrementCurrentStepIndex, onIncrementCurrentStepIndex, } = this.props;
        return {
            currentStepIndex,
            onIncrementCurrentStepIndex,
            onDecrementCurrentStepIndex,
            notify,
            onExit: this.handleDismiss,
        };
    }
};
LineProtocolWizard_LineProtocolWizard = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], LineProtocolWizard_LineProtocolWizard);
const LineProtocolWizard_mstp = (state) => {
    const { dataLoading: { steps: { currentStep, bucket }, }, me: { name }, } = state;
    const buckets = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Buckets);
    return {
        currentStepIndex: currentStep,
        username: name,
        bucket,
        buckets,
    };
};
const LineProtocolWizard_mdtp = {
    notify: actions_notifications["c" /* notify */],
    onSetBucketInfo: actions_steps["d" /* setBucketInfo */],
    onIncrementCurrentStepIndex: actions_steps["c" /* incrementCurrentStepIndex */],
    onDecrementCurrentStepIndex: actions_steps["b" /* decrementCurrentStepIndex */],
    onSetCurrentStepIndex: actions_steps["e" /* setCurrentStepIndex */],
    onClearDataLoaders: actions_dataLoaders["c" /* clearDataLoaders */],
    onClearSteps: actions_steps["a" /* clearSteps */],
};
/* harmony default export */ var lineProtocolWizard_LineProtocolWizard = (Object(es["b" /* connect */])(LineProtocolWizard_mstp, LineProtocolWizard_mdtp)(Object(react_router_es["g" /* withRouter */])(LineProtocolWizard_LineProtocolWizard)));

// EXTERNAL MODULE: ./node_modules/react-loadable/lib/index.js
var react_loadable_lib = __webpack_require__(1520);
var react_loadable_lib_default = /*#__PURE__*/__webpack_require__.n(react_loadable_lib);

// CONCATENATED MODULE: ./src/dataLoaders/components/TelegrafEditorFooter.tsx





class TelegrafEditorFooter_TelegrafEditorFooter extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleDownloadConfig = () => {
            downloadTextFile(this.props.script, 'telegraf', '.conf');
        };
        this.handleSaveConfig = () => {
            this.props.onDismiss();
        };
    }
    render() {
        if (!Object(featureFlag["c" /* isFlagEnabled */])('telegrafEditor')) {
            return false;
        }
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Button"], { color: clockface_dist["ComponentColor"].Secondary, text: "Download Config", onClick: this.handleDownloadConfig }),
            react_default.a.createElement(clockface_dist["Button"], { color: clockface_dist["ComponentColor"].Primary, text: "Save Config", onClick: this.handleSaveConfig })));
    }
}
const TelegrafEditorFooter_mstp = (state) => {
    const script = state.telegrafEditor.text;
    return {
        script,
    };
};
const TelegrafEditorFooter_mdtp = {};
/* harmony default export */ var components_TelegrafEditorFooter = (Object(es["b" /* connect */])(TelegrafEditorFooter_mstp, TelegrafEditorFooter_mdtp)(TelegrafEditorFooter_TelegrafEditorFooter));

// EXTERNAL MODULE: ./src/dataLoaders/actions/telegrafEditor.ts
var actions_telegrafEditor = __webpack_require__(253);

// CONCATENATED MODULE: ./src/buckets/selectors/index.ts
const SYSTEM = 'system';
const isSystemBucket = (type) => type === SYSTEM;
const selectors_sortFunc = (a, b) => {
    const firstBucket = `${a.name}`.toLowerCase();
    const secondBucket = `${b.name}`.toLowerCase();
    if (firstBucket === secondBucket) {
        return 0;
    }
    if (firstBucket < secondBucket) {
        return -1;
    }
    if (firstBucket > secondBucket) {
        return 1;
    }
    return 0;
};
const getSortedBucketNames = (buckets) => {
    const systemBuckets = [];
    const otherBuckets = [];
    buckets.forEach(bucket => {
        if (isSystemBucket(bucket.type)) {
            systemBuckets.push(bucket);
        }
        else {
            otherBuckets.push(bucket);
        }
    });
    systemBuckets.sort(selectors_sortFunc);
    otherBuckets.sort(selectors_sortFunc);
    return otherBuckets.concat(systemBuckets).map(bucket => bucket.name);
};

// CONCATENATED MODULE: ./src/dataLoaders/components/collectorsWizard/CollectorsWizard.tsx








const spinner = react_default.a.createElement("div", null);
const TelegrafEditor = react_loadable_lib_default()({
    loader: () => __webpack_require__.e(/* import() */ 3).then(__webpack_require__.bind(null, 1552)),
    loading() {
        return spinner;
    },
});
const CollectorsStepSwitcher = react_loadable_lib_default()({
    loader: () => __webpack_require__.e(/* import() */ 6).then(__webpack_require__.bind(null, 1551)),
    loading() {
        return spinner;
    },
});









let CollectorsWizard_CollectorsWizard = class CollectorsWizard extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleDismiss = () => {
            const { router, org } = this.props;
            if (Object(featureFlag["c" /* isFlagEnabled */])('telegrafEditor')) {
                const { onClearTelegrafEditor } = this.props;
                onClearTelegrafEditor();
            }
            else {
                const { onClearDataLoaders, onClearSteps } = this.props;
                onClearDataLoaders();
                onClearSteps();
            }
            router.push(`/orgs/${org.id}/load-data/telegrafs`);
        };
    }
    componentDidMount() {
        const { bucket, buckets } = this.props;
        if (!bucket && buckets && buckets.length) {
            const { orgID, name, id } = buckets[0];
            this.props.onSetBucketInfo(orgID, name, id);
        }
        this.props.onSetCurrentStepIndex(0);
    }
    render() {
        const { buckets } = this.props;
        return (react_default.a.createElement(clockface_dist["Overlay"], { visible: true },
            react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 1200 },
                react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Create a Telegraf Configuration", onDismiss: this.handleDismiss }),
                react_default.a.createElement(clockface_dist["Overlay"].Body, { className: "data-loading--overlay" },
                    react_default.a.createElement(featureFlag["a" /* FeatureFlag */], { name: "telegrafEditor" },
                        react_default.a.createElement(TelegrafEditor, null)),
                    react_default.a.createElement(featureFlag["a" /* FeatureFlag */], { name: "telegrafEditor", equals: false },
                        react_default.a.createElement(CollectorsStepSwitcher, { stepProps: this.stepProps, buckets: buckets }))),
                react_default.a.createElement(clockface_dist["Overlay"].Footer, null,
                    react_default.a.createElement(components_TelegrafEditorFooter, { onDismiss: this.handleDismiss })))));
    }
    get stepProps() {
        const { notify, currentStepIndex, onDecrementCurrentStepIndex, onIncrementCurrentStepIndex, } = this.props;
        return {
            currentStepIndex,
            onIncrementCurrentStepIndex,
            onDecrementCurrentStepIndex,
            notify,
            onExit: this.handleDismiss,
        };
    }
};
CollectorsWizard_CollectorsWizard = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], CollectorsWizard_CollectorsWizard);
const CollectorsWizard_mstp = (state) => {
    const { links, dataLoading: { dataLoaders: { telegrafPlugins }, steps: { currentStep, substep, bucket }, }, me: { name }, telegrafEditor, } = state;
    const buckets = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Buckets);
    const nonSystemBuckets = buckets.filter(bucket => !isSystemBucket(bucket.name));
    const org = Object(selectors["a" /* getOrg */])(state);
    return {
        links,
        telegrafPlugins,
        text: telegrafEditor.text,
        currentStepIndex: currentStep,
        substep,
        username: name,
        bucket,
        buckets: nonSystemBuckets,
        org,
    };
};
const CollectorsWizard_mdtp = {
    notify: actions_notifications["c" /* notify */],
    onSetBucketInfo: actions_steps["d" /* setBucketInfo */],
    onIncrementCurrentStepIndex: actions_steps["c" /* incrementCurrentStepIndex */],
    onDecrementCurrentStepIndex: actions_steps["b" /* decrementCurrentStepIndex */],
    onSetCurrentStepIndex: actions_steps["e" /* setCurrentStepIndex */],
    onClearDataLoaders: actions_dataLoaders["c" /* clearDataLoaders */],
    onClearSteps: actions_steps["a" /* clearSteps */],
    onClearTelegrafEditor: actions_telegrafEditor["b" /* reset */],
    onSetActiveTelegrafPlugin: actions_dataLoaders["h" /* setActiveTelegrafPlugin */],
    onSetPluginConfiguration: actions_dataLoaders["m" /* setPluginConfiguration */],
};
/* harmony default export */ var collectorsWizard_CollectorsWizard = (Object(es["b" /* connect */])(CollectorsWizard_mstp, CollectorsWizard_mdtp)(Object(react_router_es["g" /* withRouter */])(CollectorsWizard_CollectorsWizard)));

// EXTERNAL MODULE: ./src/dataLoaders/components/verifyStep/TelegrafInstructions.tsx
var TelegrafInstructions = __webpack_require__(842);

// CONCATENATED MODULE: ./src/telegrafs/components/TelegrafInstructionsOverlay.tsx












const { Authorizations: TelegrafInstructionsOverlay_Authorizations } = types["ResourceType"];
let TelegrafInstructionsOverlay_TelegrafInstructionsOverlay = class TelegrafInstructionsOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleDismiss = () => {
            const { router, params: { orgID }, } = this.props;
            this.setState({
                collectorID: null,
            });
            router.push(`/orgs/${orgID}/load-data/telegrafs/`);
        };
    }
    render() {
        return (react_default.a.createElement(clockface_dist["Overlay"], { visible: true },
            react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 700 },
                react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Telegraf Setup Instructions", onDismiss: this.handleDismiss }),
                react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                    react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Authorizations] },
                        react_default.a.createElement(TelegrafInstructions["a" /* default */], { token: this.token, configID: Object(lodash["get"])(this.collector, 'id', '') }))))));
    }
    get token() {
        const { telegrafs, tokens } = this.props;
        const config = telegrafs.find(t => Object(lodash["get"])(this.collector, 'id', '') === t.id) ||
            this.collector;
        if (!config) {
            return 'no config found';
        }
        const labels = Object(lodash["get"])(config, 'labels', []);
        const label = labels.find(l => l.name === labels_constants["f" /* TOKEN_LABEL */]);
        const auth = tokens.find(t => t.id === Object(lodash["get"])(label, 'properties.tokenID'));
        if (!label || !auth) {
            return 'unknown token';
        }
        return auth.token;
    }
    get collector() {
        const { params: { id }, collectors, } = this.props;
        return collectors.find(c => c.id === id);
    }
};
TelegrafInstructionsOverlay_TelegrafInstructionsOverlay = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], TelegrafInstructionsOverlay_TelegrafInstructionsOverlay);

const TelegrafInstructionsOverlay_mstp = (state) => {
    const { me: { name }, } = state;
    const tokens = Object(resources_selectors["a" /* getAll */])(state, TelegrafInstructionsOverlay_Authorizations);
    const telegrafs = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Telegrafs);
    return {
        username: name,
        tokens,
        collectors: telegrafs,
        telegrafs: telegrafs,
    };
};
/* harmony default export */ var components_TelegrafInstructionsOverlay = (Object(es["b" /* connect */])(TelegrafInstructionsOverlay_mstp, null)(Object(react_router_es["g" /* withRouter */])(TelegrafInstructionsOverlay_TelegrafInstructionsOverlay)));

// CONCATENATED MODULE: ./src/organizations/components/OrgProfileTab.tsx






let OrgProfileTab_OrgProfileTab = class OrgProfileTab extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleShowEditOverlay = () => {
            const { params: { orgID }, router, } = this.props;
            router.push(`/orgs/${orgID}/settings/profile/rename`);
        };
    }
    render() {
        return (react_default.a.createElement(clockface_dist["Panel"], { backgroundColor: clockface_dist["InfluxColors"].Onyx },
            react_default.a.createElement(clockface_dist["Panel"].Header, { size: clockface_dist["ComponentSize"].Small },
                react_default.a.createElement("h4", null, "Organization Profile")),
            react_default.a.createElement(clockface_dist["Panel"].Body, { size: clockface_dist["ComponentSize"].Small },
                react_default.a.createElement(clockface_dist["Form"], { onSubmit: this.handleShowEditOverlay },
                    react_default.a.createElement(clockface_dist["Panel"], { gradient: clockface_dist["Gradients"].DocScott },
                        react_default.a.createElement(clockface_dist["Panel"].Header, { size: clockface_dist["ComponentSize"].ExtraSmall },
                            react_default.a.createElement("h5", null, "Danger Zone!")),
                        react_default.a.createElement(clockface_dist["Panel"].Body, { size: clockface_dist["ComponentSize"].ExtraSmall },
                            react_default.a.createElement(clockface_dist["FlexBox"], { stretchToFitWidth: true, alignItems: clockface_dist["AlignItems"].Center, direction: clockface_dist["FlexDirection"].Row, justifyContent: clockface_dist["JustifyContent"].SpaceBetween },
                                react_default.a.createElement("div", null,
                                    react_default.a.createElement("h5", { style: { marginBottom: '0' } }, "Rename Organization"),
                                    react_default.a.createElement("p", { style: { marginTop: '2px' } }, "This action can have wide-reaching unintended consequences.")),
                                react_default.a.createElement(clockface_dist["Button"], { text: "Rename", icon: clockface_dist["IconFont"].Pencil, type: clockface["c" /* ButtonType */].Submit }))))))));
    }
};
OrgProfileTab_OrgProfileTab = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], OrgProfileTab_OrgProfileTab);
/* harmony default export */ var components_OrgProfileTab = (Object(react_router_es["g" /* withRouter */])(OrgProfileTab_OrgProfileTab));

// CONCATENATED MODULE: ./src/organizations/containers/OrgProfilePage.tsx










let OrgProfilePage_OrgProfilePage = class OrgProfilePage extends react["Component"] {
    render() {
        const { org, children } = this.props;
        return (react_default.a.createElement(react_default.a.Fragment, null,
            react_default.a.createElement(clockface_dist["Page"], { titleTag: pageTitleSuffixer(['Org Profile', 'Settings']) },
                react_default.a.createElement(components_SettingsHeader, null),
                react_default.a.createElement(components_SettingsTabbedPage, { activeTab: "profile", orgID: org.id },
                    react_default.a.createElement(clockface_dist["Grid"], null,
                        react_default.a.createElement(clockface_dist["Grid"].Row, null,
                            react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve, widthSM: clockface_dist["Columns"].Six },
                                react_default.a.createElement(components_OrgProfileTab, null)))))),
            children));
    }
};
OrgProfilePage_OrgProfilePage = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], OrgProfilePage_OrgProfilePage);
const OrgProfilePage_mstp = (state) => ({ org: Object(selectors["a" /* getOrg */])(state) });
/* harmony default export */ var containers_OrgProfilePage = (Object(es["b" /* connect */])(OrgProfilePage_mstp, null)(OrgProfilePage_OrgProfilePage));

// CONCATENATED MODULE: ./src/shared/components/dangerConfirmation/DangerConfirmationForm.tsx




let DangerConfirmationForm_DangerConfirmationForm = class DangerConfirmationForm extends react["PureComponent"] {
    render() {
        return (react_default.a.createElement(clockface_dist["Form"], { onSubmit: this.props.onConfirm },
            react_default.a.createElement(clockface_dist["FlexBox"], { alignItems: clockface_dist["AlignItems"].Center, direction: clockface_dist["FlexDirection"].Column, margin: clockface_dist["ComponentSize"].Large },
                react_default.a.createElement(clockface_dist["Alert"], { color: clockface_dist["ComponentColor"].Danger, icon: clockface_dist["IconFont"].AlertTriangle }, "Bad things could happen if you don't read this!"),
                react_default.a.createElement(clockface_dist["Form"].Element, { label: "" },
                    react_default.a.createElement(react_default.a.Fragment, null,
                        react_default.a.createElement("p", null, this.props.message),
                        react_default.a.createElement("ul", null, this.props.effectedItems.map(item => (react_default.a.createElement("li", { key: item }, item)))))),
                react_default.a.createElement(clockface_dist["Form"].Footer, null,
                    react_default.a.createElement(clockface_dist["Button"], { color: clockface_dist["ComponentColor"].Danger, text: this.props.confirmButtonText, type: clockface_dist["ButtonType"].Submit, testID: "danger-confirmation-button" })))));
    }
};
DangerConfirmationForm_DangerConfirmationForm = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], DangerConfirmationForm_DangerConfirmationForm);
/* harmony default export */ var dangerConfirmation_DangerConfirmationForm = (DangerConfirmationForm_DangerConfirmationForm);

// CONCATENATED MODULE: ./src/shared/components/dangerConfirmation/DangerConfirmationOverlay.tsx





let DangerConfirmationOverlay_DangerConfirmationOverlay = class DangerConfirmationOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            isConfirmed: false,
        };
        this.handleCloseOverlay = () => {
            this.props.onClose();
        };
        this.handleConfirm = () => {
            this.setState({ isConfirmed: true });
        };
    }
    render() {
        return (react_default.a.createElement(clockface_dist["Overlay"], { visible: true },
            react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 400 },
                react_default.a.createElement(clockface_dist["Overlay"].Header, { title: this.overlayTitle, onDismiss: this.handleCloseOverlay }),
                react_default.a.createElement(clockface_dist["Overlay"].Body, null, this.overlayContents))));
    }
    get overlayTitle() {
        const { title } = this.props;
        if (this.state.isConfirmed) {
            return title;
        }
        return 'Are you sure?';
    }
    get overlayContents() {
        const { message, effectedItems, confirmButtonText } = this.props;
        if (this.state.isConfirmed) {
            return this.props.children;
        }
        return (react_default.a.createElement(dangerConfirmation_DangerConfirmationForm, { onConfirm: this.handleConfirm, message: message, effectedItems: effectedItems, confirmButtonText: confirmButtonText }));
    }
};
DangerConfirmationOverlay_DangerConfirmationOverlay = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], DangerConfirmationOverlay_DangerConfirmationOverlay);
/* harmony default export */ var dangerConfirmation_DangerConfirmationOverlay = (DangerConfirmationOverlay_DangerConfirmationOverlay);

// CONCATENATED MODULE: ./src/organizations/components/RenameOrgForm.tsx










let RenameOrgForm_RenameOrgForm = class RenameOrgForm extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.saveButtonStatus = (validationStatus) => {
            if (this.state.org.name === this.props.startOrg.name ||
                validationStatus === clockface_dist["ComponentStatus"].Error) {
                return clockface_dist["ComponentStatus"].Disabled;
            }
            return validationStatus;
        };
        this.handleGoBack = () => {
            this.props.router.push(`/orgs/${this.props.startOrg.id}/settings/profile`);
        };
        this.handleValidation = (orgName) => {
            if (!orgName) {
                return 'Name is required';
            }
            if (!this.isUniqueName(orgName)) {
                return 'This org name is taken';
            }
        };
        this.isUniqueName = (orgName) => {
            return !this.props.orgNames.find(o => o === orgName);
        };
        this.handleInputChange = (e) => {
            const name = e.target.value;
            const org = Object.assign(Object.assign({}, this.state.org), { name });
            this.setState({ org });
        };
        this.handleRenameOrg = async () => {
            const { onRenameOrg, startOrg } = this.props;
            const { org } = this.state;
            await onRenameOrg(startOrg.name, org);
            this.handleGoBack();
        };
        this.state = {
            org: this.props.startOrg,
        };
    }
    render() {
        const { org } = this.state;
        return (react_default.a.createElement(clockface_dist["Form"], { onSubmit: this.handleRenameOrg },
            react_default.a.createElement(clockface_dist["Form"].ValidationElement, { label: "Name", validationFunc: this.handleValidation, value: org.name }, status => (react_default.a.createElement(react_default.a.Fragment, null,
                react_default.a.createElement(clockface_dist["FlexBox"], { alignItems: clockface_dist["AlignItems"].Center, direction: clockface_dist["FlexDirection"].Column, margin: clockface_dist["ComponentSize"].Large },
                    react_default.a.createElement(clockface_dist["Input"], { placeholder: "Give your organization a name", name: "name", autoFocus: true, onChange: this.handleInputChange, value: org.name, status: status, testID: "create-org-name-input" }),
                    react_default.a.createElement(clockface_dist["FlexBox"], { alignItems: clockface_dist["AlignItems"].Center, direction: clockface_dist["FlexDirection"].Row, margin: clockface_dist["ComponentSize"].Small },
                        react_default.a.createElement(clockface_dist["Button"], { text: "Cancel", icon: clockface_dist["IconFont"].Remove, onClick: this.handleGoBack }),
                        react_default.a.createElement(clockface_dist["Button"], { text: "Change Organization Name", icon: clockface_dist["IconFont"].Checkmark, status: this.saveButtonStatus(status), color: clockface_dist["ComponentColor"].Success, type: clockface_dist["ButtonType"].Submit }))))))));
    }
};
RenameOrgForm_RenameOrgForm = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], RenameOrgForm_RenameOrgForm);
const RenameOrgForm_mstp = (state) => {
    const { resources } = state;
    const { orgs: { org: startOrg }, } = resources;
    const orgs = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Orgs);
    const orgNames = orgs.filter(o => o.id !== startOrg.id).map(o => o.name);
    return { startOrg, orgNames };
};
const RenameOrgForm_mdtp = {
    onRenameOrg: renameOrg,
};
/* harmony default export */ var components_RenameOrgForm = (Object(es["b" /* connect */])(RenameOrgForm_mstp, RenameOrgForm_mdtp)(Object(react_router_es["g" /* withRouter */])(RenameOrgForm_RenameOrgForm)));

// CONCATENATED MODULE: ./src/organizations/components/RenameOrgOverlay.tsx






let RenameOrgOverlay_RenameOrgOverlay = class RenameOrgOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleClose = () => {
            const { router, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/settings/profile`);
        };
    }
    render() {
        return (react_default.a.createElement(dangerConfirmation_DangerConfirmationOverlay, { title: "Rename Organization", message: this.message, effectedItems: this.effectedItems, onClose: this.handleClose, confirmButtonText: "I understand, let's rename my Organization" },
            react_default.a.createElement(components_RenameOrgForm, null)));
    }
    get message() {
        return 'Updating the name of an Organization can have unintended consequences. Anything that references this Organization by name will stop working including:';
    }
    get effectedItems() {
        return [
            'Queries',
            'Dashboards',
            'Tasks',
            'Telegraf Configurations',
            'Client Libraries',
        ];
    }
};
RenameOrgOverlay_RenameOrgOverlay = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], RenameOrgOverlay_RenameOrgOverlay);
/* harmony default export */ var components_RenameOrgOverlay = (Object(react_router_es["g" /* withRouter */])(RenameOrgOverlay_RenameOrgOverlay));

// CONCATENATED MODULE: ./src/buckets/components/UpdateBucketOverlay.tsx











const UpdateBucketOverlay = ({ onUpdateBucket, onNotify, params: { bucketID, orgID }, router, }) => {
    const [bucketDraft, setBucketDraft] = Object(react["useState"])(null);
    const [loadingStatus, setLoadingStatus] = Object(react["useState"])(clockface_dist["RemoteDataState"].Loading);
    const [retentionSelection, setRetentionSelection] = Object(react["useState"])(DEFAULT_SECONDS);
    Object(react["useEffect"])(() => {
        const fetchBucket = async () => {
            const resp = await client["v" /* getBucket */]({ bucketID });
            if (resp.status !== 200) {
                onNotify(Object(copy_notifications["lb" /* getBucketFailed */])(bucketID, resp.data.message));
                handleClose();
                return;
            }
            setBucketDraft(resp.data);
            const rules = Object(lodash["get"])(resp.data, 'retentionRules', []);
            const rule = rules.find(r => r.type === 'expire');
            if (rule) {
                setRetentionSelection(rule.everySeconds);
            }
            setLoadingStatus(clockface_dist["RemoteDataState"].Done);
        };
        fetchBucket();
    }, [bucketID]);
    const handleChangeRetentionRule = (everySeconds) => {
        setBucketDraft(Object.assign(Object.assign({}, bucketDraft), { retentionRules: [{ type: 'expire', everySeconds }] }));
        setRetentionSelection(everySeconds);
    };
    const handleChangeRuleType = (ruleType) => {
        if (ruleType) {
            setBucketDraft(Object.assign(Object.assign({}, bucketDraft), { retentionRules: [
                    { type: 'expire', everySeconds: retentionSelection },
                ] }));
        }
        else {
            setBucketDraft(Object.assign(Object.assign({}, bucketDraft), { retentionRules: [] }));
        }
    };
    const handleSubmit = (e) => {
        e.preventDefault();
        onUpdateBucket(bucketDraft);
        handleClose();
    };
    const handleChangeInput = (e) => {
        const key = e.target.name;
        const value = e.target.value;
        setBucketDraft(Object.assign(Object.assign({}, bucketDraft), { [key]: value }));
    };
    const handleClose = () => {
        router.push(`/orgs/${orgID}/load-data/buckets`);
    };
    const rules = Object(lodash["get"])(bucketDraft, 'retentionRules', []);
    const rule = rules.find(r => r.type === 'expire');
    const retentionSeconds = rule ? rule.everySeconds : retentionSelection;
    const ruleType = rule ? 'expire' : null;
    return (react_default.a.createElement(clockface_dist["Overlay"], { visible: true },
        react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 500 },
            react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Edit Bucket", onDismiss: handleClose }),
            react_default.a.createElement(clockface_dist["SpinnerContainer"], { spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null), loading: loadingStatus },
                react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                    react_default.a.createElement(BucketOverlayForm_BucketOverlayForm, { name: bucketDraft ? bucketDraft.name : '', buttonText: "Save Changes", ruleType: ruleType, onCloseModal: handleClose, onSubmit: handleSubmit, disableRenaming: true, onChangeInput: handleChangeInput, retentionSeconds: retentionSeconds, onChangeRuleType: handleChangeRuleType, onChangeRetentionRule: handleChangeRetentionRule }))))));
};
const UpdateBucketOverlay_mdtp = {
    onUpdateBucket: buckets_actions_thunks["g" /* updateBucket */],
    onNotify: actions_notifications["c" /* notify */],
};
/* harmony default export */ var components_UpdateBucketOverlay = (Object(es["b" /* connect */])(null, UpdateBucketOverlay_mdtp)(Object(react_router_es["g" /* withRouter */])(UpdateBucketOverlay)));

// CONCATENATED MODULE: ./src/buckets/components/RenameBucketForm.tsx








class RenameBucketForm_RenameBucketForm extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = { bucket: this.props.startBucket };
        this.saveButtonStatus = (validationStatus) => {
            if (this.state.bucket.name === this.props.startBucket.name ||
                validationStatus === clockface["e" /* ComponentStatus */].Error) {
                return clockface["e" /* ComponentStatus */].Disabled;
            }
            return validationStatus;
        };
        this.handleValidation = (bucketName) => {
            if (!bucketName) {
                return 'Name is required';
            }
            if (this.props.buckets.find(b => b.name === bucketName)) {
                return 'This bucket name is taken';
            }
        };
        this.handleSubmit = () => {
            const { startBucket, onRenameBucket } = this.props;
            const { bucket } = this.state;
            onRenameBucket(startBucket.name, bucket);
            this.handleClose();
        };
        this.handleChangeInput = (e) => {
            const name = e.target.value;
            const bucket = Object.assign(Object.assign({}, this.state.bucket), { name });
            this.setState({ bucket });
        };
        this.handleClose = () => {
            const { router, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/load-data/buckets`);
        };
    }
    render() {
        const { bucket } = this.state;
        return (react_default.a.createElement(clockface_dist["Form"], { onSubmit: this.handleSubmit },
            react_default.a.createElement(clockface_dist["Form"].ValidationElement, { label: "Name", validationFunc: this.handleValidation, value: bucket.name }, status => (react_default.a.createElement(react_default.a.Fragment, null,
                react_default.a.createElement(clockface_dist["FlexBox"], { alignItems: clockface_dist["AlignItems"].Center, direction: clockface_dist["FlexDirection"].Column, margin: clockface_dist["ComponentSize"].Large },
                    react_default.a.createElement(clockface_dist["Input"], { placeholder: "Give your bucket a name", name: "name", autoFocus: true, value: bucket.name, onChange: this.handleChangeInput, status: status }),
                    react_default.a.createElement(clockface_dist["FlexBox"], { alignItems: clockface_dist["AlignItems"].Center, direction: clockface_dist["FlexDirection"].Row, margin: clockface_dist["ComponentSize"].Small },
                        react_default.a.createElement(clockface_dist["Button"], { text: "Cancel", onClick: this.handleClose, type: clockface_dist["ButtonType"].Button }),
                        react_default.a.createElement(clockface_dist["Button"], { text: "Change Bucket Name", color: clockface_dist["ComponentColor"].Danger, status: this.saveButtonStatus(status), type: clockface_dist["ButtonType"].Submit }))))))));
    }
}
const RenameBucketForm_mstp = (state, props) => {
    const { params: { bucketID }, } = props;
    const startBucket = Object(resources_selectors["b" /* getByID */])(state, types["ResourceType"].Buckets, bucketID);
    const buckets = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Buckets).filter(b => b.id !== bucketID);
    return {
        startBucket,
        buckets,
    };
};
const RenameBucketForm_mdtp = {
    onRenameBucket: buckets_actions_thunks["f" /* renameBucket */],
};
/* harmony default export */ var components_RenameBucketForm = (Object(react_router_es["g" /* withRouter */])(Object(es["b" /* connect */])(RenameBucketForm_mstp, RenameBucketForm_mdtp)(RenameBucketForm_RenameBucketForm)));

// CONCATENATED MODULE: ./src/buckets/components/RenameBucketOverlay.tsx






let RenameBucketOverlay_RenameBucketOverlay = class RenameBucketOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleClose = () => {
            const { router, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/load-data/buckets`);
        };
    }
    render() {
        return (react_default.a.createElement(dangerConfirmation_DangerConfirmationOverlay, { title: "Rename Bucket", message: this.message, effectedItems: this.effectedItems, onClose: this.handleClose, confirmButtonText: "I understand, let's rename my Bucket" },
            react_default.a.createElement(components_RenameBucketForm, null)));
    }
    get message() {
        return 'Updating the name of a Bucket can have unintended consequences. Anything that references this Bucket by name will stop working including:';
    }
    get effectedItems() {
        return [
            'Queries',
            'Dashboards',
            'Tasks',
            'Telegraf Configurations',
            'Templates',
        ];
    }
};
RenameBucketOverlay_RenameBucketOverlay = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], RenameBucketOverlay_RenameBucketOverlay);
/* harmony default export */ var components_RenameBucketOverlay = (Object(react_router_es["g" /* withRouter */])(RenameBucketOverlay_RenameBucketOverlay));

// CONCATENATED MODULE: ./src/variables/components/RenameVariableForm.tsx








class RenameVariableForm_RenameVariableOverlayForm extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            workingVariable: this.props.startVariable,
            isNameValid: true,
        };
        this.handleSubmit = (e) => {
            const { workingVariable } = this.state;
            e.preventDefault();
            this.props.onUpdateVariable(workingVariable.id, workingVariable);
            this.props.onClose();
        };
        this.handleNameValidation = (name) => {
            const { variables } = this.props;
            const { error } = validateVariableName(name, variables);
            this.setState({ isNameValid: !error });
            return error;
        };
        this.handleChangeInput = (e) => {
            const name = e.target.value;
            const workingVariable = Object.assign(Object.assign({}, this.state.workingVariable), { name });
            this.setState({
                workingVariable,
            });
        };
    }
    render() {
        const { onClose } = this.props;
        const { workingVariable, isNameValid } = this.state;
        return (react_default.a.createElement(clockface_dist["Form"], { onSubmit: this.handleSubmit },
            react_default.a.createElement(clockface_dist["Grid"], null,
                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Six },
                        react_default.a.createElement("div", { className: "overlay-flux-editor--spacing" },
                            react_default.a.createElement(clockface_dist["Form"].ValidationElement, { label: "Name", value: workingVariable.name, required: true, validationFunc: this.handleNameValidation }, status => (react_default.a.createElement(clockface_dist["Input"], { placeholder: "Rename your variable", name: "name", autoFocus: true, value: workingVariable.name, onChange: this.handleChangeInput, status: status, testID: "rename-variable-input" })))))),
                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                    react_default.a.createElement(clockface_dist["Grid"].Column, null,
                        react_default.a.createElement(clockface_dist["Form"].Footer, null,
                            react_default.a.createElement(clockface_dist["Button"], { text: "Cancel", color: clockface_dist["ComponentColor"].Danger, onClick: onClose }),
                            react_default.a.createElement(clockface_dist["Button"], { text: "Submit", type: clockface_dist["ButtonType"].Submit, color: clockface_dist["ComponentColor"].Primary, status: isNameValid
                                    ? clockface_dist["ComponentStatus"].Default
                                    : clockface_dist["ComponentStatus"].Disabled, testID: "rename-variable-submit" })))))));
    }
}
const RenameVariableForm_mstp = (state, { params: { id } }) => {
    const variables = Object(variables_selectors["f" /* extractVariablesList */])(state);
    const startVariable = variables.find(v => v.id === id);
    return { variables, startVariable };
};
const RenameVariableForm_mdtp = {
    onUpdateVariable: variables_actions_thunks["i" /* updateVariable */],
};
/* harmony default export */ var RenameVariableForm = (Object(react_router_es["g" /* withRouter */])(Object(es["b" /* connect */])(RenameVariableForm_mstp, RenameVariableForm_mdtp)(RenameVariableForm_RenameVariableOverlayForm)));

// CONCATENATED MODULE: ./src/variables/components/RenameVariableOverlay.tsx






let RenameVariableOverlay_RenameVariableOverlay = class RenameVariableOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleClose = () => {
            const { router, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/settings/variables`);
        };
    }
    render() {
        return (react_default.a.createElement(dangerConfirmation_DangerConfirmationOverlay, { title: "Rename Variable", message: this.message, effectedItems: this.effectedItems, onClose: this.handleClose, confirmButtonText: "I understand, let's rename my Variable" },
            react_default.a.createElement(RenameVariableForm, { onClose: this.handleClose })));
    }
    get message() {
        return 'Updating the name of a Variable can have unintended consequences. Anything that references this Variable by name will stop working including:';
    }
    get effectedItems() {
        return ['Queries', 'Dashboards', 'Telegraf Configurations', 'Templates'];
    }
};
RenameVariableOverlay_RenameVariableOverlay = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], RenameVariableOverlay_RenameVariableOverlay);
/* harmony default export */ var components_RenameVariableOverlay = (Object(react_router_es["g" /* withRouter */])(RenameVariableOverlay_RenameVariableOverlay));

// CONCATENATED MODULE: ./src/variables/components/UpdateVariableOverlay.tsx









class UpdateVariableOverlay_UpdateVariableOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.state = {
            workingVariable: this.props.startVariable,
            isNameValid: true,
            hasValidArgs: true,
        };
        this.handleChangeType = (selectedType) => {
            const { isNameValid, workingVariable } = this.state;
            const defaults = { hasValidArgs: false, isNameValid };
            switch (selectedType) {
                case 'query':
                    return this.setState(Object.assign(Object.assign({}, defaults), { workingVariable: Object.assign(Object.assign({}, workingVariable), { arguments: {
                                type: 'query',
                                values: {
                                    query: '',
                                    language: 'flux',
                                },
                            }, selected: null }) }));
                case 'map':
                    return this.setState(Object.assign(Object.assign({}, defaults), { workingVariable: Object.assign(Object.assign({}, workingVariable), { selected: null, arguments: {
                                type: 'map',
                                values: {},
                            } }) }));
                case 'constant':
                    return this.setState(Object.assign(Object.assign({}, defaults), { workingVariable: Object.assign(Object.assign({}, workingVariable), { selected: null, arguments: {
                                type: 'constant',
                                values: [],
                            } }) }));
            }
        };
        this.handleSelectMapDefault = (selected) => {
            const { workingVariable } = this.state;
            this.setState({
                workingVariable: Object.assign(Object.assign({}, workingVariable), { selected: [selected] }),
            });
        };
        this.handleChangeArgs = ({ args, isValid, }) => {
            const { workingVariable } = this.state;
            this.setState({
                workingVariable: Object.assign(Object.assign({}, workingVariable), { arguments: args }),
                hasValidArgs: isValid,
            });
        };
        this.handleSubmit = (e) => {
            e.preventDefault();
            const { workingVariable } = this.state;
            this.props.onUpdateVariable(workingVariable.id, workingVariable);
            this.handleClose();
        };
        this.handleClose = () => {
            const { router, params: { orgID }, } = this.props;
            router.push(`/orgs/${orgID}/settings/variables`);
        };
    }
    render() {
        const { workingVariable, hasValidArgs } = this.state;
        return (react_default.a.createElement(clockface_dist["Overlay"], { visible: true },
            react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 1000 },
                react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Edit Variable", onDismiss: this.handleClose }),
                react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                    react_default.a.createElement(clockface_dist["Form"], { onSubmit: this.handleSubmit },
                        react_default.a.createElement(clockface_dist["Grid"], null,
                            react_default.a.createElement(clockface_dist["Grid"].Row, null,
                                react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Six },
                                    react_default.a.createElement("div", { className: "overlay-flux-editor--spacing" },
                                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Name", helpText: "To rename your variable use the rename button. Renaming is not allowed here." },
                                            react_default.a.createElement(clockface_dist["Input"], { placeholder: "Give your variable a name", name: "name", autoFocus: true, value: workingVariable.name, status: clockface_dist["ComponentStatus"].Disabled })))),
                                react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Six },
                                    react_default.a.createElement(clockface_dist["Form"].Element, { label: "Type", required: true },
                                        react_default.a.createElement(clockface_dist["Dropdown"], { button: (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { active: active, onClick: onClick }, this.typeDropdownLabel)), menu: onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse }, variables_constants["f" /* variableItemTypes */].map(v => (react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: v.type, id: v.type, value: v.type, onClick: this.handleChangeType, selected: v.type === workingVariable.arguments.type }, v.label))))) })))),
                            react_default.a.createElement(clockface_dist["Grid"].Row, null,
                                react_default.a.createElement(clockface_dist["Grid"].Column, null,
                                    react_default.a.createElement(components_VariableArgumentsEditor, { onChange: this.handleChangeArgs, onSelectMapDefault: this.handleSelectMapDefault, selected: workingVariable.selected, args: workingVariable.arguments }))),
                            react_default.a.createElement(clockface_dist["Grid"].Row, null,
                                react_default.a.createElement(clockface_dist["Grid"].Column, null,
                                    react_default.a.createElement(clockface_dist["Form"].Footer, null,
                                        react_default.a.createElement(clockface_dist["Button"], { text: "Cancel", color: clockface_dist["ComponentColor"].Danger, onClick: this.handleClose }),
                                        react_default.a.createElement(clockface_dist["Button"], { text: "Submit", type: clockface_dist["ButtonType"].Submit, color: clockface_dist["ComponentColor"].Primary, status: hasValidArgs
                                                ? clockface_dist["ComponentStatus"].Default
                                                : clockface_dist["ComponentStatus"].Disabled }))))))))));
    }
    get typeDropdownLabel() {
        const { workingVariable } = this.state;
        return variables_constants["f" /* variableItemTypes */].find(variable => variable.type === workingVariable.arguments.type).label;
    }
}
const UpdateVariableOverlay_mstp = (state, { params: { id } }) => {
    const variables = Object(variables_selectors["f" /* extractVariablesList */])(state);
    const startVariable = variables.find(v => v.id === id);
    return { variables, startVariable };
};
const UpdateVariableOverlay_mdtp = {
    onUpdateVariable: variables_actions_thunks["i" /* updateVariable */],
};
/* harmony default export */ var components_UpdateVariableOverlay = (Object(react_router_es["g" /* withRouter */])(Object(es["b" /* connect */])(UpdateVariableOverlay_mstp, UpdateVariableOverlay_mdtp)(UpdateVariableOverlay_UpdateVariableOverlay)));

// CONCATENATED MODULE: ./src/tasks/components/TemplateBrowserEmpty.tsx





class components_TemplateBrowserEmpty_TemplateBrowserEmpty extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleButtonClick = () => {
            const { router, org } = this.props;
            router.push(`/orgs/${org.id}/tasks/import`);
        };
    }
    render() {
        return (react_default.a.createElement("div", { className: "import-template-overlay--empty" },
            react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Large },
                react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                    "Looks like you don't have any ",
                    react_default.a.createElement("b", null, "Templates"),
                    " yet, why not import one?"),
                react_default.a.createElement(clockface_dist["Button"], { size: clockface_dist["ComponentSize"].Medium, text: "Import One Here", icon: clockface_dist["IconFont"].CogThick, onClick: this.handleButtonClick }))));
    }
}
const components_TemplateBrowserEmpty_mstp = (state) => ({
    org: Object(selectors["a" /* getOrg */])(state),
});
/* harmony default export */ var components_TemplateBrowserEmpty = (Object(es["b" /* connect */])(components_TemplateBrowserEmpty_mstp, null)(Object(react_router_es["g" /* withRouter */])(components_TemplateBrowserEmpty_TemplateBrowserEmpty)));

// CONCATENATED MODULE: ./src/tasks/components/TaskImportFromTemplateOverlay.tsx












class TaskImportFromTemplateOverlay_TaskImportFromTemplateOverlay extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleSelectTemplate = async (selectedTemplateSummary) => {
            const selectedTemplate = await Object(templates_actions_thunks["j" /* getTemplateByID */])(selectedTemplateSummary.id);
            this.setState({
                selectedTemplateSummary,
                selectedTemplate,
            });
        };
        this.onDismiss = () => {
            const { router } = this.props;
            router.goBack();
        };
        this.onSubmit = () => {
            const { createTaskFromTemplate } = this.props;
            const taskTemplate = this.state.selectedTemplate;
            createTaskFromTemplate(taskTemplate);
            this.onDismiss();
        };
        this.state = {
            selectedTemplateSummary: null,
            selectedTemplate: null,
        };
    }
    render() {
        return (react_default.a.createElement(clockface_dist["Overlay"], { visible: true },
            react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Templates] },
                react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 900 },
                    react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Create Task from a Template", onDismiss: this.onDismiss }),
                    react_default.a.createElement(clockface_dist["Overlay"].Body, null, this.overlayBody),
                    react_default.a.createElement(clockface_dist["Overlay"].Footer, null,
                        react_default.a.createElement(clockface_dist["Button"], { text: "Cancel", onClick: this.onDismiss, key: "cancel-button" }),
                        react_default.a.createElement(clockface_dist["Button"], { text: "Create Task", onClick: this.onSubmit, key: "submit-button", testID: "create-task-button", color: clockface_dist["ComponentColor"].Success, status: this.submitStatus }))))));
    }
    get overlayBody() {
        const { selectedTemplateSummary, selectedTemplate } = this.state;
        const { templates } = this.props;
        if (!templates.length) {
            return react_default.a.createElement(components_TemplateBrowserEmpty, null);
        }
        return (react_default.a.createElement(createFromTemplateOverlay_TemplateBrowser, { templates: templates, selectedTemplate: selectedTemplate, selectedTemplateSummary: selectedTemplateSummary, onSelectTemplate: this.handleSelectTemplate }));
    }
    get submitStatus() {
        const { selectedTemplate } = this.state;
        return selectedTemplate ? clockface_dist["ComponentStatus"].Default : clockface_dist["ComponentStatus"].Disabled;
    }
}
const TaskImportFromTemplateOverlay_mstp = (state) => {
    const { resources: { templates: { status }, }, } = state;
    const items = getAll(state, types["ResourceType"].Templates);
    const filteredTemplates = items.filter(t => !t.meta.type || t.meta.type === types["TemplateType"].Task);
    const templates = Object(lodash["sortBy"])(filteredTemplates, item => item.meta.name.toLocaleLowerCase());
    return {
        templates,
        templateStatus: status,
    };
};
const TaskImportFromTemplateOverlay_mdtp = {
    createTaskFromTemplate: tasks_actions_thunks["e" /* createTaskFromTemplate */],
};
/* harmony default export */ var components_TaskImportFromTemplateOverlay = (Object(es["b" /* connect */])(TaskImportFromTemplateOverlay_mstp, TaskImportFromTemplateOverlay_mdtp)(Object(react_router_es["g" /* withRouter */])(TaskImportFromTemplateOverlay_TaskImportFromTemplateOverlay)));

// CONCATENATED MODULE: ./src/templates/components/StaticTemplateViewOverlay.tsx







let StaticTemplateViewOverlay_TemplateExportOverlay = class TemplateExportOverlay extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.onDismiss = () => {
            const { router } = this.props;
            router.goBack();
        };
    }
    render() {
        return (react_default.a.createElement(ViewOverlay_ViewOverlay, { resource: this.template, overlayHeading: this.overlayTitle, onDismissOverlay: this.onDismiss, status: clockface_dist["RemoteDataState"].Done }));
    }
    get template() {
        const { params: { id }, } = this.props;
        return defaultTemplates["c" /* staticTemplates */][id];
    }
    get overlayTitle() {
        return this.template.meta.name;
    }
};
StaticTemplateViewOverlay_TemplateExportOverlay = Object(tslib_es6["a" /* __decorate */])([
    decorators_errors["a" /* ErrorHandling */]
], StaticTemplateViewOverlay_TemplateExportOverlay);
/* harmony default export */ var StaticTemplateViewOverlay = (Object(react_router_es["g" /* withRouter */])(StaticTemplateViewOverlay_TemplateExportOverlay));

// CONCATENATED MODULE: ./src/shared/utils/useMountedEffect.ts

const useMountedEffect = (effect, inputs) => {
    const isFirstRender = Object(react["useRef"])(true);
    Object(react["useEffect"])(() => {
        if (isFirstRender.current) {
            isFirstRender.current = false;
            return;
        }
        return effect();
    }, inputs);
};
const useMountedLayoutEffect = (effect, inputs) => {
    const isFirstRender = Object(react["useRef"])(true);
    Object(react["useLayoutEffect"])(() => {
        if (isFirstRender.current) {
            isFirstRender.current = false;
            return;
        }
        return effect();
    }, inputs);
};

// CONCATENATED MODULE: ./src/eventViewer/utils/search.ts
const parseSearchInput = (input) => {
    if (input.trim() === '') {
        return null;
    }
    return new Parser(input).parse();
};
const searchExprToFlux = (searchExpr) => {
    if (searchExpr === null) {
        return 'true';
    }
    switch (searchExpr.type) {
        case 'BooleanExpression': {
            const left = searchExprToFlux(searchExpr.left);
            const right = searchExprToFlux(searchExpr.right);
            return `(${left}) ${searchExpr.operator} (${right})`;
        }
        case 'TagExpression': {
            const left = searchExpr.left.value;
            const right = searchExpr.right.value;
            const delim = searchExpr.right.type === 'RegexLiteral' ? '/' : '"';
            return `r["${left}"] ${searchExpr.operator} ${delim}${right}${delim}`;
        }
        default: {
            const badExpr = JSON.stringify(searchExpr);
            throw new Error(`cannot convert search expression to Flux: ${badExpr} `);
        }
    }
};
const isSearchInputValid = (input) => {
    try {
        parseSearchInput(input);
    }
    catch (_a) {
        return false;
    }
    return true;
};
class Lexer {
    constructor(input) {
        this.i = 0;
        this.input = input;
    }
    lex() {
        const tokens = [];
        while (this.current()) {
            switch (this.current()) {
                case ' ':
                case '\r':
                case '\n':
                    this.advance();
                    break;
                case '(':
                    tokens.push({ type: '(' });
                    this.advance();
                    break;
                case ')':
                    tokens.push({ type: ')' });
                    this.advance();
                    break;
                case 'a':
                    this.advance();
                    this.expect('n');
                    this.advance();
                    this.expect('d');
                    tokens.push({ type: 'and' });
                    this.advance();
                    break;
                case 'o':
                    this.advance();
                    this.expect('r');
                    tokens.push({ type: 'or' });
                    this.advance();
                    break;
                case '=':
                case '!':
                    const head = this.current();
                    this.advance();
                    this.expect('=', '~');
                    tokens.push({ type: `${head}${this.current()}` });
                    this.advance();
                    break;
                case '"':
                    this.advance();
                    tokens.push({ type: 'StringLiteral', value: this.readToDelimiter('"') });
                    this.advance();
                    break;
                case '/':
                    this.advance();
                    tokens.push({ type: 'RegexLiteral', value: this.readToDelimiter('/') });
                    this.advance();
                    break;
                default:
                    throw new Error(`unexpected character "${this.current()}"`);
            }
        }
        return tokens;
    }
    readToDelimiter(delimiter) {
        let value = '';
        while (this.current() !== delimiter) {
            if (!this.current()) {
                throw new Error('unexpected end of input');
            }
            value += this.current();
            this.advance();
        }
        return value;
    }
    current() {
        return this.input[this.i];
    }
    advance() {
        this.i += 1;
        return this.input[this.i];
    }
    expect(...expected) {
        const actual = this.input[this.i];
        if (!expected.includes(actual)) {
            throw new Error(`expected one of "${JSON.stringify(expected)}" but got "${actual}"`);
        }
        return actual;
    }
}
class Parser {
    constructor(input) {
        this.i = 0;
        this.input = input;
    }
    parse() {
        this.tokens = new Lexer(this.input).lex();
        return this.parseExpr();
    }
    parseExpr(precedence = 0) {
        let left;
        switch (this.current().type) {
            case 'StringLiteral':
                left = this.parseStringLiteral();
                break;
            case 'RegexLiteral':
                left = this.parseRegexLiteral();
                break;
            case '(':
                left = this.parseGroupedExpr();
                break;
            default:
                throw new Error(`unexpected token ${this.current().type}`);
        }
        while (!!this.next() && precedence < this.nextPrecedence()) {
            this.advance();
            switch (left.type) {
                case 'StringLiteral':
                    left = this.parseTagExpr(left);
                    break;
                case 'BooleanExpression':
                case 'TagExpression':
                    left = this.parseBooleanExpr(left);
                    break;
                default:
                    throw new Error(`unexpected node ${left.type}`);
            }
        }
        return left;
    }
    parseBooleanExpr(left) {
        this.expect('and', 'or');
        const operator = this.current().type;
        const precedence = this.currentPrecedence();
        this.advance();
        const right = this.parseExpr(precedence);
        return { type: 'BooleanExpression', operator, left, right };
    }
    parseTagExpr(left) {
        this.expect('==', '!=', '=~', '!~');
        const operator = this.current().type;
        this.advance();
        const right = operator.endsWith('~')
            ? this.parseRegexLiteral()
            : this.parseStringLiteral();
        return { type: 'TagExpression', operator, left, right };
    }
    parseStringLiteral() {
        this.expect('StringLiteral');
        return this.current();
    }
    parseRegexLiteral() {
        this.expect('RegexLiteral');
        return this.current();
    }
    parseGroupedExpr() {
        this.advance();
        const expr = this.parseExpr(0);
        this.advance();
        this.expect(')');
        return expr;
    }
    advance() {
        this.i += 1;
    }
    current() {
        return this.tokens[this.i];
    }
    next() {
        return this.tokens[this.i + 1];
    }
    currentPrecedence() {
        return Parser.PRECEDENCES[this.tokens[this.i].type];
    }
    nextPrecedence() {
        return Parser.PRECEDENCES[this.tokens[this.i + 1].type];
    }
    expect(...expectedTypes) {
        const expectedMsg = `expected one of ${JSON.stringify(expectedTypes)} `;
        if (!this.current()) {
            throw new Error(`${expectedMsg} but found nothing`);
        }
        const actual = this.current().type;
        if (!expectedTypes.includes(actual)) {
            throw new Error(`${expectedMsg} but got ${actual}`);
        }
    }
}
Parser.PRECEDENCES = {
    ')': 0,
    and: 1,
    or: 1,
    '==': 2,
    '!=': 2,
    '=~': 2,
    '!~': 2,
    '(': 3,
};

// CONCATENATED MODULE: ./src/eventViewer/components/EventViewer.reducer.ts


const EventViewer_reducer_INITIAL_STATE = {
    rows: [],
    offset: 0,
    limit: 100,
    now: null,
    nextRowsStatus: types["RemoteDataState"].NotStarted,
    nextRowsErrorMessage: null,
    nextRowsCanceller: null,
    hasReachedEnd: false,
    searchInput: '',
    searchExpr: null,
    searchTimeoutID: null,
    scrollTop: 0,
    nextScrollTop: null,
};
const EventViewer_reducer_reducer = (state, action) => {
    switch (action.type) {
        case 'NEXT_ROWS_LOADING': {
            return Object.assign(Object.assign({}, state), { nextRowsStatus: types["RemoteDataState"].Loading, nextRowsCanceller: action.cancel, now: action.now ? action.now : state.now });
        }
        case 'NEXT_ROWS_FAILED_TO_LOAD': {
            return Object.assign(Object.assign({}, state), { nextRowsStatus: types["RemoteDataState"].Error, nextRowsErrorMessage: action.errorMessage });
        }
        case 'NEXT_ROWS_LOADED': {
            const rows = [...state.rows, ...action.rows];
            return Object.assign(Object.assign({}, state), { rows, nextRowsStatus: types["RemoteDataState"].Done, offset: rows.length, hasReachedEnd: action.rows.length === 0 });
        }
        case 'SEARCH_TYPED': {
            return Object.assign(Object.assign({}, state), { searchInput: action.searchInput });
        }
        case 'SEARCH_SCHEDULED': {
            return Object.assign(Object.assign({}, state), { searchTimeoutID: action.searchTimeoutID });
        }
        case 'SEARCH_STARTED': {
            return Object.assign(Object.assign({}, state), { rows: [], offset: 0, now: action.now, searchExpr: action.expr, nextRowsCanceller: action.cancel, nextRowsStatus: types["RemoteDataState"].Loading, hasReachedEnd: false });
        }
        case 'SEARCH_COMPLETED': {
            return Object.assign(Object.assign({}, state), { rows: action.rows, nextRowsStatus: types["RemoteDataState"].Done, offset: action.rows.length, hasReachedEnd: action.rows.length < action.limit });
        }
        case 'SEARCH_FAILED': {
            return Object.assign(Object.assign({}, state), { nextRowsStatus: types["RemoteDataState"].Error, nextRowsErrorMessage: action.errorMessage });
        }
        case 'SEARCH_CLEARED': {
            return Object.assign(Object.assign({}, state), { rows: [], offset: 0, now: action.now, nextRowsStatus: types["RemoteDataState"].Loading, nextScrollTop: 0, hasReachedEnd: false, nextRowsCanceller: action.cancel, searchExpr: null });
        }
        case 'SCROLLED': {
            return Object.assign(Object.assign({}, state), { scrollTop: action.scrollTop });
        }
        case 'CLICKED_BACK_TO_TOP': {
            return Object.assign(Object.assign({}, state), { nextScrollTop: 0 });
        }
        case 'CONSUMED_NEXT_SCROLL_INDEX': {
            return Object.assign(Object.assign({}, state), { nextScrollTop: null });
        }
        case 'REFRESHED': {
            return Object.assign(Object.assign({}, state), { rows: [], offset: 0, now: action.now, nextRowsStatus: types["RemoteDataState"].Loading, hasReachedEnd: false, nextRowsCanceller: action.cancel, nextScrollTop: 0 });
        }
        default: {
            const neverAction = action;
            throw new Error(`unhandled action "${neverAction.type}"`);
        }
    }
};
const loadNextRows = async (state, dispatch, loadRows, now) => {
    if (state.nextRowsStatus === types["RemoteDataState"].Loading ||
        state.nextRowsStatus === types["RemoteDataState"].Error ||
        state.hasReachedEnd) {
        return;
    }
    try {
        const { promise, cancel } = loadRows({
            offset: state.offset,
            limit: state.limit,
            until: now || state.now,
            filter: state.searchExpr,
        });
        dispatch({ type: 'NEXT_ROWS_LOADING', cancel, now });
        const rows = await promise;
        dispatch({ type: 'NEXT_ROWS_LOADED', rows });
    }
    catch (error) {
        if (error.name === 'CancellationError') {
            return;
        }
        dispatch({ type: 'NEXT_ROWS_FAILED_TO_LOAD', errorMessage: error.message });
    }
};
const search = (state, dispatch, loadRows, searchInput, searchImmediately = false) => {
    clearTimeout(state.searchTimeoutID);
    dispatch({ type: 'SEARCH_TYPED', searchInput });
    let searchExpr = null;
    let parsingFailed = false;
    try {
        searchExpr = parseSearchInput(searchInput);
    }
    catch (_a) {
        parsingFailed = true;
    }
    if (parsingFailed || (searchExpr === null && state.searchExpr === null)) {
        return;
    }
    else if (searchExpr === null) {
        clearSearch(state, dispatch, loadRows);
    }
    else if (searchImmediately) {
        performSearch(state, dispatch, loadRows, searchExpr);
    }
    else {
        const searchTimeoutID = setTimeout(() => {
            performSearch(state, dispatch, loadRows, searchExpr);
        }, 500);
        dispatch({ type: 'SEARCH_SCHEDULED', searchTimeoutID });
    }
};
const performSearch = async (state, dispatch, loadRows, searchExpr) => {
    try {
        if (state.nextRowsCanceller) {
            state.nextRowsCanceller();
        }
        const now = Date.now();
        const limit = state.limit;
        const { promise, cancel } = loadRows({
            offset: 0,
            limit,
            until: now,
            filter: searchExpr,
        });
        dispatch({ type: 'SEARCH_STARTED', cancel, now, expr: searchExpr });
        const rows = await promise;
        dispatch({ type: 'SEARCH_COMPLETED', rows, limit });
    }
    catch (error) {
        if (error.name === 'CancellationError') {
            return;
        }
        dispatch({ type: 'SEARCH_FAILED', errorMessage: error.message });
    }
};
const clearSearch = async (state, dispatch, loadRows) => {
    try {
        if (state.nextRowsCanceller) {
            state.nextRowsCanceller();
        }
        const now = Date.now();
        const { promise, cancel } = loadRows({
            offset: 0,
            limit: state.limit,
            until: now,
        });
        dispatch({ type: 'SEARCH_CLEARED', now, cancel });
        const rows = await promise;
        dispatch({ type: 'NEXT_ROWS_LOADED', rows });
    }
    catch (error) {
        if (error.name === 'CancellationError') {
            return;
        }
        dispatch({ type: 'NEXT_ROWS_FAILED_TO_LOAD', errorMessage: error.message });
    }
};
const refresh = async (state, dispatch, loadRows) => {
    try {
        if (state.nextRowsCanceller) {
            state.nextRowsCanceller();
        }
        const now = Date.now();
        const { promise, cancel } = loadRows({
            offset: 0,
            limit: state.limit,
            until: now,
            filter: state.searchExpr,
        });
        dispatch({ type: 'REFRESHED', cancel, now });
        const rows = await promise;
        dispatch({ type: 'NEXT_ROWS_LOADED', rows });
    }
    catch (error) {
        if (error.name === 'CancellationError') {
            return;
        }
        dispatch({ type: 'NEXT_ROWS_FAILED_TO_LOAD', errorMessage: error.message });
    }
};
const getRowCount = (state) => {
    const isInitialLoad = state.rows.length === 0 &&
        state.offset === 0 &&
        state.nextRowsStatus === types["RemoteDataState"].Loading;
    if (isInitialLoad && state.nextRowsStatus !== types["RemoteDataState"].Error) {
        return state.rows.length + 100;
    }
    return state.rows.length + 1;
};

// CONCATENATED MODULE: ./src/eventViewer/components/EventViewer.tsx



const EventViewer = ({ loadRows, children, initialState }) => {
    const [state, dispatch] = Object(react["useReducer"])(EventViewer_reducer_reducer, Object.assign(Object.assign({}, EventViewer_reducer_INITIAL_STATE), initialState));
    Object(react["useEffect"])(() => {
        loadNextRows(state, dispatch, loadRows, Date.now());
    }, []);
    useMountedLayoutEffect(() => {
        refresh(state, dispatch, loadRows);
    }, [loadRows]);
    return children({ state, dispatch, loadRows });
};
/* harmony default export */ var components_EventViewer = (EventViewer);

// CONCATENATED MODULE: ./src/alerting/components/SearchBar.tsx




const SearchBar_SUGGESTION_CLASS = 'status-search-bar--suggestion';
const components_SearchBar_SearchBar = ({ placeholder, exampleSearches, state, dispatch, loadRows, }) => {
    const [isFocused, setIsFocused] = Object(react["useState"])(false);
    const inputStatus = isSearchInputValid(state.searchInput)
        ? clockface_dist["ComponentStatus"].Default
        : clockface_dist["ComponentStatus"].Error;
    const handleClickSuggestion = (suggestion) => {
        search(state, dispatch, loadRows, suggestion, true);
        setIsFocused(false);
    };
    const handleClickOutside = e => {
        const didClickSuggestion = e.target.classList.contains(SearchBar_SUGGESTION_CLASS) ||
            e.target.parentNode.classList.contains(SearchBar_SUGGESTION_CLASS);
        if (!didClickSuggestion) {
            setIsFocused(false);
        }
    };
    return (react_default.a.createElement("div", { className: "status-search-bar" },
        react_default.a.createElement(clockface_dist["ClickOutside"], { onClickOutside: handleClickOutside },
            react_default.a.createElement(clockface_dist["Input"], { icon: clockface_dist["IconFont"].Search, placeholder: placeholder, value: state.searchInput, status: inputStatus, onChange: e => search(state, dispatch, loadRows, e.target.value), onFocus: () => setIsFocused(true) })),
        state.searchInput.trim() !== '' && (react_default.a.createElement("div", { className: "status-search-bar--clear", onClick: () => search(state, dispatch, loadRows, '', true) },
            react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].Remove }))),
        isFocused && (react_default.a.createElement(clockface_dist["DropdownMenu"], { className: "status-search-bar--suggestions", noScrollX: true, noScrollY: true },
            react_default.a.createElement(clockface_dist["DropdownDivider"], { text: "Examples" }),
            exampleSearches.map(s => (react_default.a.createElement(clockface_dist["DropdownItem"], { key: s, value: s, className: SearchBar_SUGGESTION_CLASS, onClick: handleClickSuggestion }, s)))))));
};
/* harmony default export */ var alerting_components_SearchBar = (components_SearchBar_SearchBar);

// CONCATENATED MODULE: ./src/alerting/components/LevelTableField.tsx

const LevelTableField = ({ row: { level } }) => {
    return (react_default.a.createElement("div", { className: `level-table-field level-table-field--${level.toLowerCase()}` }, level));
};
/* harmony default export */ var components_LevelTableField = (LevelTableField);

// CONCATENATED MODULE: ./src/alerting/components/TimeTableField.tsx



const TimeTableField = ({ row: { time } }) => {
    return (react_default.a.createElement("div", { className: "time-table-field" }, moment_default.a.utc(time).format(constants["o" /* DEFAULT_TIME_FORMAT */])));
};
/* harmony default export */ var components_TimeTableField = (TimeTableField);

// CONCATENATED MODULE: ./src/eventViewer/components/Header.tsx

const Header = ({ fields }) => {
    return (react_default.a.createElement("div", { className: "event-table-header" }, fields.map(({ rowKey, columnWidth, columnName }) => {
        const style = { flexBasis: `${columnWidth}px` };
        return (react_default.a.createElement("div", { key: rowKey, className: "event-table-header--field", style: style }, columnName));
    })));
};
/* harmony default export */ var components_Header = (Header);

// CONCATENATED MODULE: ./src/eventViewer/components/TableRow.tsx

const TableRow = ({ row, style, fields }) => {
    return (react_default.a.createElement("div", { style: style },
        react_default.a.createElement("div", { className: "event-row" }, fields.map(({ component: Component, columnWidth, rowKey }) => {
            const style = { flexBasis: `${columnWidth}px` };
            let content;
            if (row[rowKey] === undefined) {
                content = null;
            }
            else if (Component) {
                content = react_default.a.createElement(Component, { key: rowKey, row: row });
            }
            else {
                content = String(row[rowKey]);
            }
            return (react_default.a.createElement("div", { key: rowKey, className: "event-row--field", style: style }, content));
        }))));
};
/* harmony default export */ var components_TableRow = (TableRow);

// CONCATENATED MODULE: ./src/eventViewer/components/LoadingRow.tsx


const PLACEHOLDER_MIN_WIDTH = 80;
const PLACEHOLDER_MAX_WIDTH = 140;
const PLACEHOLDER_HEIGHT = 10;
const RANDOM_NUMBERS = Object(lodash["range"])(30).map(_ => Math.random());
const LoadingRow = ({ index, style }) => {
    const randomNumber = RANDOM_NUMBERS[index % RANDOM_NUMBERS.length];
    const width = Math.floor(PLACEHOLDER_MIN_WIDTH +
        randomNumber * (PLACEHOLDER_MAX_WIDTH - PLACEHOLDER_MIN_WIDTH));
    return (react_default.a.createElement("div", { style: style },
        react_default.a.createElement("div", { className: "event-loading-row" },
            react_default.a.createElement("div", { className: "event-loading-row--placeholder", style: {
                    width: `${width}px`,
                    height: `${PLACEHOLDER_HEIGHT}px`,
                    animationDelay: `${(index % 5) / 2}s`,
                } }))));
};
/* harmony default export */ var components_LoadingRow = (LoadingRow);

// CONCATENATED MODULE: ./src/eventViewer/components/FooterRow.tsx

const FooterRow = ({ style }) => {
    return (react_default.a.createElement("div", { style: style },
        react_default.a.createElement("div", { className: "event-footer-row" }, "No more data found.")));
};
/* harmony default export */ var components_FooterRow = (FooterRow);

// CONCATENATED MODULE: ./src/eventViewer/components/ErrorRow.tsx

const ErrorRow = ({ style, index }) => {
    return (react_default.a.createElement("div", { style: style },
        react_default.a.createElement("div", { className: "event-error-row" }, index === 0 ? 'Failed to load :(' : 'Failed to load next rows :(')));
};
/* harmony default export */ var components_ErrorRow = (ErrorRow);

// CONCATENATED MODULE: ./src/eventViewer/components/EventTable.tsx









const EventTable = ({ state, dispatch, loadRows, fields }) => {
    const rowCount = getRowCount(state);
    const isRowLoaded = ({ index }) => !!state.rows[index];
    const loadMoreRows = () => loadNextRows(state, dispatch, loadRows);
    const rowRenderer = ({ key, index, style }) => {
        const isLastRow = index === state.rows.length;
        if (isLastRow && state.nextRowsStatus === types["RemoteDataState"].Error) {
            return react_default.a.createElement(components_ErrorRow, { key: key, index: index, style: style });
        }
        if (isLastRow && state.hasReachedEnd) {
            return react_default.a.createElement(components_FooterRow, { key: key, style: style });
        }
        if (!state.rows[index]) {
            return react_default.a.createElement(components_LoadingRow, { key: key, index: index, style: style });
        }
        return (react_default.a.createElement(components_TableRow, { key: key, style: style, row: state.rows[index], fields: fields }));
    };
    const scrollTop = state.nextScrollTop === null ? undefined : state.nextScrollTop;
    Object(react["useLayoutEffect"])(() => {
        dispatch({ type: 'CONSUMED_NEXT_SCROLL_INDEX' });
    }, [scrollTop, dispatch]);
    return (react_default.a.createElement("div", { className: "event-table" },
        react_default.a.createElement(components_Header, { fields: fields }),
        react_default.a.createElement("div", { className: "event-table--table" },
            react_default.a.createElement(dist_es["a" /* AutoSizer */], null, ({ width, height }) => {
                if (!width || !height) {
                    return null;
                }
                return (react_default.a.createElement(dist_es["d" /* InfiniteLoader */], { isRowLoaded: isRowLoaded, loadMoreRows: loadMoreRows, rowCount: rowCount }, ({ onRowsRendered, registerChild }) => (react_default.a.createElement(dist_es["e" /* List */], { width: width, height: height, ref: registerChild, onRowsRendered: onRowsRendered, rowCount: rowCount, rowHeight: 38, rowRenderer: rowRenderer, overscanRowCount: 20, scrollTop: scrollTop, onScroll: ({ scrollTop }) => dispatch({ type: 'SCROLLED', scrollTop }) }))));
            }))));
};
/* harmony default export */ var components_EventTable = (EventTable);

// CONCATENATED MODULE: ./src/eventViewer/components/BackToTopButton.tsx



const BackToTopButton = ({ state, dispatch, loadRows, }) => {
    if (state.scrollTop === 0) {
        return (react_default.a.createElement(clockface_dist["Button"], { className: "back-to-top-button", icon: clockface_dist["IconFont"].Refresh, text: "Refresh", onClick: () => refresh(state, dispatch, loadRows) }));
    }
    return (react_default.a.createElement(clockface_dist["Button"], { className: "back-to-top-button", icon: clockface_dist["IconFont"].CaretUp, text: "Back to Top", onClick: () => dispatch({ type: 'CLICKED_BACK_TO_TOP' }) }));
};
/* harmony default export */ var components_BackToTopButton = (BackToTopButton);

// CONCATENATED MODULE: ./src/alerting/components/AlertHistoryControls.tsx





const AlertHistoryControls = ({ eventViewerProps, historyType, onSetHistoryType, }) => {
    return (react_default.a.createElement("div", { className: "alert-history-controls" },
        react_default.a.createElement("div", { className: "alert-history-controls--left" },
            react_default.a.createElement(clockface_dist["SelectGroup"], { className: "alert-history-controls--switcher" },
                react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "alert-history-mode", id: "alert-history-mode--statuses", value: "statuses", onClick: () => onSetHistoryType('statuses'), titleText: "View Status History", active: historyType === 'statuses' }, "Statuses"),
                react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "alert-history-mode", id: "alert-history-mode--notifications", value: "notifications", onClick: () => onSetHistoryType('notifications'), titleText: "View Notification History", active: historyType === 'notifications' }, "Notifications"))),
        react_default.a.createElement("div", { className: "alert-history-controls--right" },
            react_default.a.createElement(components_BackToTopButton, Object.assign({}, eventViewerProps)),
            react_default.a.createElement(alerting_components_SearchBar, Object.assign({}, eventViewerProps, { placeholder: `Search ${historyType}...`, exampleSearches: historyType === 'statuses'
                    ? EXAMPLE_STATUS_SEARCHES
                    : EXAMPLE_NOTIFICATION_SEARCHES })))));
};
/* harmony default export */ var components_AlertHistoryControls = (AlertHistoryControls);

// CONCATENATED MODULE: ./src/shared/utils/queryParams.ts



const readQueryParams = () => {
    return qs_lib_default.a.parse(window.location.search, { ignoreQueryPrefix: true });
};
const queryParams_updateQueryParams = (updatedQueryParams) => {
    const currentQueryString = window.location.search;
    const newQueryParams = Object(lodash["pickBy"])(Object.assign(Object.assign({}, qs_lib_default.a.parse(currentQueryString, { ignoreQueryPrefix: true })), updatedQueryParams), v => !!v);
    const newQueryString = qs_lib_default.a.stringify(newQueryParams);
    react_router_es["e" /* browserHistory */].replace(`${window.location.pathname}?${newQueryString}`);
};

// CONCATENATED MODULE: ./src/alerting/components/AlertHistoryQueryParams.tsx



const AlertHistoryQueryParams = ({ searchInput, historyType }) => {
    Object(react["useEffect"])(() => {
        queryParams_updateQueryParams({
            [SEARCH_QUERY_PARAM]: searchInput || null,
            [HISTORY_TYPE_QUERY_PARAM]: historyType || null,
        });
    }, [searchInput, historyType]);
    return null;
};
/* harmony default export */ var components_AlertHistoryQueryParams = (AlertHistoryQueryParams);

// EXTERNAL MODULE: ./src/shared/utils/ast.ts
var ast = __webpack_require__(744);

// CONCATENATED MODULE: ./src/alerting/utils/history.ts








const loadStatuses = (orgID, { offset, limit, since, until, filter }) => {
    const start = since ? Math.round(since / 1000) : '-60d';
    const fluxFilter = filter ? searchExprToFlux(renameTagKeys(filter)) : null;
    const query = `
from(bucket: "${alerting_constants["n" /* MONITORING_BUCKET */]}")
  |> range(start: ${start}, stop: ${Math.round(until / 1000)})
  |> filter(fn: (r) => r._measurement == "statuses" and r._field == "_message")
  |> keep(columns: ["_time", "_value", "_check_id", "_check_name", "_level"])
  |> rename(columns: {"_time": "time",
                      "_value": "message",
                      "_check_id": "checkID",
                      "_check_name": "checkName",
                      "_level": "level"})
  |> group()${fluxFilter ? `\n  |> filter(fn: (r) => ${fluxFilter})` : ''}
  |> sort(columns: ["time"], desc: true)
  |> limit(n: ${limit}, offset: ${offset})
`;
    return processResponse(Object(apis_query["a" /* runQuery */])(orgID, query));
};
const loadNotifications = (orgID, { offset, limit, since, until, filter }) => {
    const start = since ? Math.round(since / 1000) : '-60d';
    const fluxFilter = filter ? searchExprToFlux(renameTagKeys(filter)) : null;
    const query = `
from(bucket: "${alerting_constants["n" /* MONITORING_BUCKET */]}")
  |> range(start: ${start}, stop: ${Math.round(until / 1000)})
  |> filter(fn: (r) => r._measurement == "notifications")
  |> filter(fn: (r) => r._field !~ /^_/)
  |> keep(columns: ["_time",
                    "_check_id",
                    "_check_name",
                    "_notification_rule_id",
                    "_notification_rule_name",
                    "_notification_endpoint_id",
                    "_notification_endpoint_name",
                    "_level",
                    "_sent"])
  |> rename(columns: {"_time": "time",
                      "_check_id": "checkID",
                      "_check_name": "checkName",
                      "_notification_rule_id": "notificationRuleID",
                      "_notification_rule_name": "notificationRuleName",
                      "_notification_endpoint_id": "notificationEndpointID",
                      "_notification_endpoint_name": "notificationEndpointName",
                      "_level": "level",
                      "_sent": "sent"})
  |> group()${fluxFilter ? `\n  |> filter(fn: (r) => ${fluxFilter})` : ''}
  |> sort(columns: ["time"], desc: true)
  |> limit(n: ${limit}, offset: ${offset})
`;
    return processResponse(Object(apis_query["a" /* runQuery */])(orgID, query));
};
const renameTagKeys = (searchExpr) => {
    const rewrittenExpr = Object(lodash["cloneDeep"])(searchExpr);
    const tagExprNodes = Object(ast["a" /* findNodes */])(rewrittenExpr, n => n && n.type === 'TagExpression');
    const tagKeyNodes = tagExprNodes.map(n => n.left);
    for (const node of tagKeyNodes) {
        const normal = node.value
            .trim()
            .toLowerCase()
            .replace(' ', '')
            .replace('_', '');
        if (normal === 'notificationrule' || normal === 'rule') {
            node.value = 'notificationRule';
        }
        else if (normal === 'notificationEndpoint' || normal === 'endpoint') {
            node.value = 'notificationEndpoint';
        }
    }
    return rewrittenExpr;
};
const processResponse = ({ promise: queryPromise, cancel, }) => {
    const promise = queryPromise.then(resp => {
        if (resp.type !== 'SUCCESS') {
            return Promise.reject(new Error(resp.message));
        }
        const { table } = Object(giraffe_dist["fromFlux"])(resp.csv);
        const rows = [];
        for (let i = 0; i < table.length; i++) {
            const row = {};
            for (const key of table.columnKeys) {
                row[key] = table.getColumn(key)[i];
            }
            rows.push(row);
        }
        return rows;
    });
    return {
        promise,
        cancel,
    };
};
const getInitialHistoryType = () => {
    return readQueryParams()[HISTORY_TYPE_QUERY_PARAM] || 'statuses';
};
const getInitialState = () => {
    const searchInput = readQueryParams()[SEARCH_QUERY_PARAM];
    if (!searchInput) {
        return {};
    }
    try {
        const searchExpr = parseSearchInput(searchInput);
        return { searchInput, searchExpr };
    }
    catch (_a) {
        return { searchInput };
    }
};

// CONCATENATED MODULE: ./src/checks/selectors/index.ts
const getCheck = (state, id) => {
    return state.resources.checks.byID[id] || null;
};
const getCheckIDs = (state) => {
    return state.resources.checks.allIDs.reduce((acc, id) => (Object.assign(Object.assign({}, acc), { [id]: true })), {});
};

// CONCATENATED MODULE: ./src/notifications/endpoints/selectors/index.ts
const getEndpointIDs = (state) => {
    return state.resources.endpoints.allIDs.reduce((acc, id) => (Object.assign(Object.assign({}, acc), { [id]: true })), {});
};

// CONCATENATED MODULE: ./src/notifications/rules/selectors/index.ts
const getRuleIDs = (state) => {
    return state.resources.rules.allIDs.reduce((acc, ruleID) => (Object.assign(Object.assign({}, acc), { [ruleID]: true })), {});
};

// CONCATENATED MODULE: ./src/alerting/components/AlertHistoryIndex.tsx














const ResourceIDsContext = Object(react["createContext"])(null);
const AlertHistoryIndex = ({ params: { orgID }, resourceIDs }) => {
    const [historyType, setHistoryType] = Object(react["useState"])(getInitialHistoryType());
    const loadRows = Object(react["useMemo"])(() => {
        return historyType === 'statuses'
            ? options => loadStatuses(orgID, options)
            : options => loadNotifications(orgID, options);
    }, [orgID, historyType]);
    const fields = historyType === 'statuses' ? STATUS_FIELDS : NOTIFICATION_FIELDS;
    return (react_default.a.createElement(GetResources["a" /* default */], { resources: [
            types["ResourceType"].Checks,
            types["ResourceType"].NotificationEndpoints,
            types["ResourceType"].NotificationRules,
        ] },
        react_default.a.createElement(ResourceIDsContext.Provider, { value: resourceIDs },
            react_default.a.createElement(components_EventViewer, { loadRows: loadRows, initialState: getInitialState() }, props => (react_default.a.createElement(clockface_dist["Page"], { titleTag: "Check Statuses | InfluxDB 2.0", className: "alert-history-page" },
                react_default.a.createElement(clockface_dist["Page"].Header, { fullWidth: true },
                    react_default.a.createElement("div", { className: "alert-history-page--header" },
                        react_default.a.createElement(clockface_dist["Page"].Title, { title: "Check Statuses", testID: "alert-history-title" }),
                        react_default.a.createElement(components_AlertHistoryQueryParams, { searchInput: props.state.searchInput, historyType: historyType }),
                        react_default.a.createElement(components_AlertHistoryControls, { historyType: historyType, onSetHistoryType: setHistoryType, eventViewerProps: props }))),
                react_default.a.createElement(clockface_dist["Page"].Contents, { fullWidth: true, scrollable: false, className: "alert-history-page--contents" },
                    react_default.a.createElement("div", { className: "alert-history" },
                        react_default.a.createElement(components_EventTable, Object.assign({}, props, { fields: fields }))))))))));
};
const AlertHistoryIndex_mstp = (state) => {
    const checkIDs = getCheckIDs(state);
    const endpointIDs = getEndpointIDs(state);
    const ruleIDs = getRuleIDs(state);
    const resourceIDs = {
        checkIDs,
        endpointIDs,
        ruleIDs,
    };
    return { resourceIDs };
};
/* harmony default export */ var components_AlertHistoryIndex = (Object(es["b" /* connect */])(AlertHistoryIndex_mstp)(AlertHistoryIndex));

// CONCATENATED MODULE: ./src/shared/utils/formatOrgRoute.ts
const formatOrgRoute = (route) => {
    return (location.pathname
        .split('/')
        .slice(0, 3)
        .join('/') + route);
};

// CONCATENATED MODULE: ./src/checks/components/CheckTableField.tsx




const CheckTableField = ({ row: { checkName, checkID } }) => {
    const { checkIDs } = Object(react["useContext"])(ResourceIDsContext);
    if (!checkIDs[checkID]) {
        return (react_default.a.createElement("div", { className: "check-name-field", title: "The check that created this no longer exists" }, checkName));
    }
    const href = formatOrgRoute(`/alerting/checks/${checkID}/edit`);
    return react_default.a.createElement(react_router_es["b" /* Link */], { to: href }, checkName);
};
/* harmony default export */ var components_CheckTableField = (CheckTableField);

// CONCATENATED MODULE: ./src/alerting/components/NotificationRuleTableField.tsx




const NotificationRuleTableField = ({ row: { notificationRuleName, notificationRuleID }, }) => {
    const { ruleIDs } = Object(react["useContext"])(ResourceIDsContext);
    if (!ruleIDs[notificationRuleID]) {
        return (react_default.a.createElement("div", { className: "rule-name-field", title: "The rule that created this no longer exists" }, notificationRuleName));
    }
    const href = formatOrgRoute(`/alerting/rules/${notificationRuleID}/edit`);
    return react_default.a.createElement(react_router_es["b" /* Link */], { to: href }, notificationRuleName);
};
/* harmony default export */ var components_NotificationRuleTableField = (NotificationRuleTableField);

// CONCATENATED MODULE: ./src/notifications/endpoints/components/NotificationEndpointTableField.tsx




const NotificationEndpointTableField = ({ row: { notificationEndpointName, notificationEndpointID }, }) => {
    const { endpointIDs } = Object(react["useContext"])(ResourceIDsContext);
    if (!endpointIDs[notificationEndpointID]) {
        return (react_default.a.createElement("div", { className: "endpoint-name-field", title: "This endpoint no longer exists" }, notificationEndpointName));
    }
    const href = formatOrgRoute(`/alerting/endpoints/${notificationEndpointID}/edit`);
    return react_default.a.createElement(react_router_es["b" /* Link */], { to: href }, notificationEndpointName);
};
/* harmony default export */ var components_NotificationEndpointTableField = (NotificationEndpointTableField);

// CONCATENATED MODULE: ./src/alerting/components/SentTableField.tsx


const SentTableField = ({ row: { sent } }) => {
    const modifier = sent === 'true' ? 'sent' : 'not-sent';
    return (react_default.a.createElement("div", { className: `sent-table-field sent-table-field--${modifier}` }, sent === 'true' ? (react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].Checkmark })) : (react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].AlertTriangle }))));
};
/* harmony default export */ var components_SentTableField = (SentTableField);

// CONCATENATED MODULE: ./src/alerting/constants/history.ts






const STATUS_FIELDS = [
    {
        rowKey: 'time',
        columnName: 'Time',
        columnWidth: 160,
        component: components_TimeTableField,
    },
    {
        rowKey: 'level',
        columnName: 'Level',
        columnWidth: 50,
        component: components_LevelTableField,
    },
    {
        rowKey: 'checkID',
        columnName: 'Check',
        columnWidth: 150,
        component: components_CheckTableField,
    },
    {
        rowKey: 'message',
        columnName: 'Message',
        columnWidth: 300,
    },
];
const NOTIFICATION_FIELDS = [
    {
        rowKey: 'time',
        columnName: 'Time',
        columnWidth: 160,
        component: components_TimeTableField,
    },
    {
        rowKey: 'level',
        columnName: 'Level',
        columnWidth: 50,
        component: components_LevelTableField,
    },
    {
        rowKey: 'checkID',
        columnName: 'Check',
        columnWidth: 150,
        component: components_CheckTableField,
    },
    {
        rowKey: 'notificationRuleID',
        columnName: 'Notification Rule',
        columnWidth: 200,
        component: components_NotificationRuleTableField,
    },
    {
        rowKey: 'notificationEndpointID',
        columnName: 'Notification Endpoint',
        columnWidth: 200,
        component: components_NotificationEndpointTableField,
    },
    {
        rowKey: 'sent',
        columnName: 'Sent',
        columnWidth: 50,
        component: components_SentTableField,
    },
];
const EXAMPLE_STATUS_SEARCHES = [
    '"check" == "my check"',
    '"level" != "ok"',
    '"level" == "warn"',
    '"level" == "crit"',
    '"message" =~ /exceeded capacity/',
    '"check" == "my check" and ("level" == "crit" or "level" == "warn")',
];
const EXAMPLE_NOTIFICATION_SEARCHES = [
    '"check" == "my check"',
    '"level" == "crit"',
    '"level" != "ok"',
    '"notification rule" == "my rule"',
];
const HISTORY_TYPE_QUERY_PARAM = 'type';
const SEARCH_QUERY_PARAM = 'filter';

// CONCATENATED MODULE: ./src/checks/components/CheckHistoryControls.tsx



const CheckHistoryControls = ({ eventViewerProps }) => {
    return (react_default.a.createElement("div", { className: "alert-history-controls" },
        react_default.a.createElement("div", { className: "alert-history-controls--right" },
            react_default.a.createElement(alerting_components_SearchBar, Object.assign({}, eventViewerProps, { placeholder: "Search statuses...", exampleSearches: EXAMPLE_STATUS_SEARCHES })))));
};
/* harmony default export */ var components_CheckHistoryControls = (CheckHistoryControls);

// CONCATENATED MODULE: ./src/checks/components/CheckHistoryVisualization.tsx









const CheckHistoryVisualization_ResourceIDsContext = Object(react["createContext"])(null);
const CheckHistoryVisualization = ({ check, timeZone }) => {
    const view = Object(helpers["a" /* createView */])(Object(lodash["get"])(check, 'threshold'));
    const [submitToken] = Object(react["useState"])(0);
    const [manualRefresh] = Object(react["useState"])(0);
    return (react_default.a.createElement(components_TimeSeries, { submitToken: submitToken, queries: [check.query], key: manualRefresh, variables: Object(getTimeRangeVars["a" /* getTimeRangeVars */])({ lower: 'now() - 5m' }), check: check }, ({ giraffeResult, loading, errorMessage, isInitialFetch, statuses }) => {
        return (react_default.a.createElement(EmptyQueryView_EmptyQueryView, { errorFormat: ErrorFormat.Tooltip, errorMessage: errorMessage, hasResults: Object(vis["a" /* checkResultsLength */])(giraffeResult), loading: loading, isInitialFetch: isInitialFetch, queries: [check.query], fallbackNote: null },
            react_default.a.createElement(components_CheckPlot, { checkType: check.type, thresholds: check.type === 'threshold' ? check.thresholds : [], table: Object(lodash["get"])(giraffeResult, 'table'), fluxGroupKeyUnion: Object(lodash["get"])(giraffeResult, 'fluxGroupKeyUnion'), loading: loading, timeZone: timeZone, viewProperties: view.properties, statuses: statuses }, config => react_default.a.createElement(giraffe_dist["Plot"], { config: config }))));
    }));
};
/* harmony default export */ var components_CheckHistoryVisualization = (CheckHistoryVisualization);

// CONCATENATED MODULE: ./src/checks/components/CheckHistory.tsx















const CheckHistory = ({ params: { orgID }, check, timeZone, resourceIDs, }) => {
    const loadRows = Object(react["useMemo"])(() => options => loadStatuses(orgID, options), [
        orgID,
    ]);
    const historyType = 'statuses';
    const fields = STATUS_FIELDS;
    return (react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Checks] },
        react_default.a.createElement(ResourceIDsContext.Provider, { value: resourceIDs },
            react_default.a.createElement(components_EventViewer, { loadRows: loadRows, initialState: getInitialState() }, props => (react_default.a.createElement(clockface_dist["Page"], { titleTag: "Check Statuses | InfluxDB 2.0", className: "alert-history-page" },
                react_default.a.createElement(clockface_dist["Page"].Header, { fullWidth: true },
                    react_default.a.createElement("div", { className: "alert-history-page--header" },
                        react_default.a.createElement(clockface_dist["Page"].Title, { title: "Check Statuses", testID: "alert-history-title" }),
                        react_default.a.createElement(components_AlertHistoryQueryParams, { searchInput: props.state.searchInput, historyType: historyType }),
                        react_default.a.createElement(components_CheckHistoryControls, { eventViewerProps: props }))),
                react_default.a.createElement(clockface_dist["Page"].Contents, { fullWidth: true, scrollable: false, className: "alert-history-page--contents" },
                    react_default.a.createElement("div", { className: "alert-history-contents" },
                        check.type !== 'custom' && (react_default.a.createElement(components_CheckHistoryVisualization, { check: check, timeZone: timeZone })),
                        react_default.a.createElement("div", { className: "alert-history" },
                            react_default.a.createElement(components_EventTable, Object.assign({}, props, { fields: fields })))))))))));
};
const CheckHistory_mstp = (state, props) => {
    const timeZone = state.app.persisted.timeZone;
    const checkIDs = getCheckIDs(state);
    const check = Object(resources_selectors["b" /* getByID */])(state, types["ResourceType"].Checks, props.params.checkID);
    const resourceIDs = {
        checkIDs,
        endpointIDs: null,
        ruleIDs: null,
    };
    return { check, timeZone, resourceIDs };
};
/* harmony default export */ var components_CheckHistory = (Object(es["b" /* connect */])(CheckHistory_mstp)(CheckHistory));

// CONCATENATED MODULE: ./src/checks/components/CheckCardContext.tsx



const CheckCardContext = ({ onDelete, onClone, onView, }) => {
    return (react_default.a.createElement(clockface["f" /* Context */], null,
        react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface["g" /* IconFont */].EyeOpen },
            react_default.a.createElement(clockface["f" /* Context */].Item, { label: "View History", action: onView })),
        react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface["g" /* IconFont */].Duplicate, color: clockface_dist["ComponentColor"].Secondary },
            react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Clone", action: onClone })),
        react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface["g" /* IconFont */].Trash, color: clockface_dist["ComponentColor"].Danger, testID: "context-delete-menu" },
            react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Delete", action: onDelete, testID: "context-delete-task" }))));
};
/* harmony default export */ var components_CheckCardContext = (CheckCardContext);

// EXTERNAL MODULE: ./src/checks/actions/thunks.ts + 2 modules
var checks_actions_thunks = __webpack_require__(276);

// CONCATENATED MODULE: ./src/checks/components/CheckCard.tsx













const CheckCard = ({ onRemoveCheckLabel, onAddCheckLabel, onCloneCheck, onNotify, check, onUpdateCheckDisplayProperties, deleteCheck, params: { orgID }, router, }) => {
    const { id, activeStatus, name, description } = check;
    const onUpdateName = (name) => {
        try {
            onUpdateCheckDisplayProperties(check.id, { name });
        }
        catch (error) {
            onNotify(Object(copy_notifications["Kc" /* updateCheckFailed */])(error.message));
        }
    };
    const onUpdateDescription = (description) => {
        try {
            onUpdateCheckDisplayProperties(check.id, { description });
        }
        catch (e) {
            onNotify(Object(copy_notifications["Kc" /* updateCheckFailed */])(e.message));
        }
    };
    const onDelete = () => {
        deleteCheck(check.id);
    };
    const onClone = () => {
        onCloneCheck(check);
    };
    const onToggle = () => {
        const status = activeStatus === 'active' ? 'inactive' : 'active';
        try {
            onUpdateCheckDisplayProperties(id, { status });
        }
        catch (error) {
            onNotify(Object(copy_notifications["Kc" /* updateCheckFailed */])(error.message));
        }
    };
    const onCheckClick = () => {
        router.push(`/orgs/${orgID}/alerting/checks/${id}/edit`);
    };
    const onView = () => {
        const queryParams = new URLSearchParams({
            [SEARCH_QUERY_PARAM]: `"checkID" == "${id}"`,
        });
        router.push(`/orgs/${orgID}/checks/${id}/?${queryParams}`);
    };
    const handleAddCheckLabel = (label) => {
        onAddCheckLabel(id, label);
    };
    const handleRemoveCheckLabel = (label) => {
        onRemoveCheckLabel(id, label.id);
    };
    return (react_default.a.createElement(clockface_dist["ResourceCard"], { key: `check-id--${id}`, testID: "check-card", name: react_default.a.createElement(clockface_dist["ResourceCard"].EditableName, { onUpdate: onUpdateName, onClick: onCheckClick, name: check.name, noNameString: alerting_constants["d" /* DEFAULT_CHECK_NAME */], testID: "check-card--name", buttonTestID: "check-card--name-button", inputTestID: "check-card--input" }), toggle: react_default.a.createElement(clockface_dist["SlideToggle"], { active: activeStatus === 'active', size: clockface_dist["ComponentSize"].ExtraSmall, onChange: onToggle, testID: "check-card--slide-toggle" }), description: react_default.a.createElement(clockface_dist["ResourceCard"].EditableDescription, { onUpdate: onUpdateDescription, description: description, placeholder: `Describe ${name}` }), labels: react_default.a.createElement(inlineLabels_InlineLabels, { selectedLabelIDs: check.labels, onAddLabel: handleAddCheckLabel, onRemoveLabel: handleRemoveCheckLabel }), disabled: activeStatus === 'inactive', contextMenu: react_default.a.createElement(components_CheckCardContext, { onView: onView, onDelete: onDelete, onClone: onClone }), metaData: [
            react_default.a.createElement(react_default.a.Fragment, null,
                "Last completed at ",
                check.latestCompleted),
            react_default.a.createElement(react_default.a.Fragment, null, relativeTimestampFormatter(check.updatedAt, 'Last updated ')),
            react_default.a.createElement(lastRunTaskStatus_LastRunTaskStatus, { key: 2, lastRunError: check.lastRunError, lastRunStatus: check.lastRunStatus }),
        ] }));
};
const CheckCard_mdtp = {
    onUpdateCheckDisplayProperties: checks_actions_thunks["h" /* updateCheckDisplayProperties */],
    deleteCheck: checks_actions_thunks["d" /* deleteCheck */],
    onAddCheckLabel: checks_actions_thunks["a" /* addCheckLabel */],
    onRemoveCheckLabel: checks_actions_thunks["e" /* deleteCheckLabel */],
    onCloneCheck: checks_actions_thunks["b" /* cloneCheck */],
    onNotify: actions_notifications["c" /* notify */],
};
/* harmony default export */ var components_CheckCard = (Object(es["b" /* connect */])(null, CheckCard_mdtp)(Object(react_router_es["g" /* withRouter */])(CheckCard)));

// CONCATENATED MODULE: ./src/checks/components/CheckCards.tsx





const FilterChecks = FilterListContainer();
const CheckCards = ({ checks, searchTerm, showFirstTimeWidget, onCreateThreshold, onCreateDeadman, }) => {
    const cards = cs => cs.map(c => react_default.a.createElement(components_CheckCard, { key: c.id, check: c }));
    const body = filtered => (react_default.a.createElement(clockface_dist["ResourceList"].Body, { emptyState: react_default.a.createElement(EmptyChecksList, { showFirstTimeWidget: showFirstTimeWidget, onCreateThreshold: onCreateThreshold, onCreateDeadman: onCreateDeadman, searchTerm: searchTerm }) }, cards(filtered)));
    const filteredChecks = (react_default.a.createElement(FilterChecks, { list: checks, searchKeys: ['name'], searchTerm: searchTerm }, filtered => body(filtered)));
    return (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement(clockface_dist["ResourceList"], null, filteredChecks)));
};
const EmptyChecksList = ({ showFirstTimeWidget, onCreateThreshold, onCreateDeadman, searchTerm, }) => {
    if (searchTerm) {
        return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Small, className: "alert-column--empty" },
            react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                "No ",
                react_default.a.createElement("b", null, "checks"),
                " match your search")));
    }
    if (showFirstTimeWidget) {
        return (react_default.a.createElement(clockface_dist["Panel"], { gradient: clockface_dist["Gradients"].PolarExpress, className: "alerting-first-time" },
            react_default.a.createElement(clockface_dist["Panel"].Body, { size: clockface_dist["ComponentSize"].Large },
                react_default.a.createElement("h1", null, "Get started monitoring by creating a check"),
                react_default.a.createElement("h5", null, "When a value crosses a specific threshold:"),
                react_default.a.createElement(clockface_dist["Button"], { size: clockface_dist["ComponentSize"].Medium, color: clockface_dist["ComponentColor"].Primary, onClick: onCreateThreshold, text: "Threshold Check", icon: clockface_dist["IconFont"].Plus, shape: clockface_dist["ButtonShape"].StretchToFit }),
                react_default.a.createElement("h5", null, "If a service stops sending metrics:"),
                react_default.a.createElement(clockface_dist["Button"], { size: clockface_dist["ComponentSize"].Medium, color: clockface_dist["ComponentColor"].Primary, onClick: onCreateDeadman, text: "Deadman Check", icon: clockface_dist["IconFont"].Plus, shape: clockface_dist["ButtonShape"].StretchToFit }))));
    }
    return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Small, className: "alert-column--empty" },
        react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
            "Looks like you have not created a ",
            react_default.a.createElement("b", null, "Check"),
            " yet",
            react_default.a.createElement("br", null),
            react_default.a.createElement("br", null),
            "You will need one to be notified about",
            react_default.a.createElement("br", null),
            " any changes in system status")));
};
/* harmony default export */ var components_CheckCards = (CheckCards);

// CONCATENATED MODULE: ./src/alerting/components/AlertsColumn.tsx


const AlertsColumnHeader = ({ type, children, title, createButton, questionMarkTooltipContents, }) => {
    const [searchTerm, onChangeSearchTerm] = Object(react["useState"])('');
    return (react_default.a.createElement(clockface_dist["Panel"], { backgroundColor: clockface_dist["InfluxColors"].Kevlar, className: "alerting-index--column", testID: `${type}--column` },
        react_default.a.createElement(clockface_dist["Panel"].Header, null,
            react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, margin: clockface_dist["ComponentSize"].Small },
                react_default.a.createElement("h4", { style: { width: 'auto', marginRight: '6px' } }, title),
                react_default.a.createElement(clockface_dist["QuestionMarkTooltip"], { diameter: 18, color: clockface_dist["ComponentColor"].Primary, testID: `${title}--question-mark`, tooltipContents: questionMarkTooltipContents })),
            createButton),
        react_default.a.createElement("div", { className: "alerting-index--search" },
            react_default.a.createElement(clockface_dist["Input"], { icon: clockface_dist["IconFont"].Search, placeholder: `Filter ${title}...`, value: searchTerm, onChange: e => onChangeSearchTerm(e.target.value), testID: `filter--input ${type}` })),
        react_default.a.createElement("div", { className: "alerting-index--column-body" },
            react_default.a.createElement(clockface_dist["DapperScrollbars"], { autoSize: true, autoHide: true, style: { width: '100%', height: '100%' } },
                react_default.a.createElement("div", { className: "alerting-index--list" }, children(searchTerm))))));
};
/* harmony default export */ var AlertsColumn = (AlertsColumnHeader);

// CONCATENATED MODULE: ./src/checks/components/CreateCheckDropdown.tsx


const CreateCheckDropdown = ({ onCreateThreshold, onCreateDeadman, }) => {
    const handleItemClick = (type) => {
        if (type === 'threshold') {
            onCreateThreshold();
        }
        if (type === 'deadman') {
            onCreateDeadman();
        }
    };
    const DropdownButton = (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { icon: clockface_dist["IconFont"].Plus, color: clockface_dist["ComponentColor"].Primary, active: active, onClick: onClick, testID: "create-check" }, "Create"));
    const DropdownMenu = (onCollapse) => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse },
        react_default.a.createElement(clockface_dist["Dropdown"].Item, { value: "threshold", onClick: handleItemClick, testID: "create-threshold-check" }, "Threshold Check"),
        react_default.a.createElement(clockface_dist["Dropdown"].Item, { value: "deadman", onClick: handleItemClick, testID: "create-deadman-check" }, "Deadman Check")));
    return (react_default.a.createElement(clockface_dist["Dropdown"], { button: DropdownButton, menu: DropdownMenu, style: { width: '124px' } }));
};
/* harmony default export */ var components_CreateCheckDropdown = (CreateCheckDropdown);

// CONCATENATED MODULE: ./src/checks/components/ChecksColumn.tsx








const ChecksColumn = ({ checks, router, params: { orgID }, rules, endpoints, }) => {
    const handleCreateThreshold = () => {
        router.push(`/orgs/${orgID}/alerting/checks/new-threshold`);
    };
    const handleCreateDeadman = () => {
        router.push(`/orgs/${orgID}/alerting/checks/new-deadman`);
    };
    const tooltipContents = (react_default.a.createElement(react_default.a.Fragment, null,
        "A ",
        react_default.a.createElement("strong", null, "Check"),
        " is a periodic query that the system",
        react_default.a.createElement("br", null),
        "performs against your time series data",
        react_default.a.createElement("br", null),
        "that will generate a status",
        react_default.a.createElement("br", null),
        react_default.a.createElement("br", null),
        react_default.a.createElement("a", { href: "https://v2.docs.influxdata.com/v2.0/monitor-alert/checks/create/", target: "_blank" }, "Read Documentation")));
    const noAlertingResourcesExist = !checks.length && !rules.length && !endpoints.length;
    const createButton = (react_default.a.createElement(components_CreateCheckDropdown, { onCreateThreshold: handleCreateThreshold, onCreateDeadman: handleCreateDeadman }));
    return (react_default.a.createElement(AlertsColumn, { type: types["ResourceType"].Checks, title: "Checks", createButton: createButton, questionMarkTooltipContents: tooltipContents }, searchTerm => (react_default.a.createElement(components_CheckCards, { checks: checks, searchTerm: searchTerm, onCreateThreshold: handleCreateThreshold, onCreateDeadman: handleCreateDeadman, showFirstTimeWidget: noAlertingResourcesExist }))));
};
const ChecksColumn_mstp = (state) => {
    const checks = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Checks);
    const endpoints = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].NotificationEndpoints);
    const rules = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].NotificationRules);
    return {
        checks,
        rules,
        endpoints,
    };
};
/* harmony default export */ var components_ChecksColumn = (Object(es["b" /* connect */])(ChecksColumn_mstp, null)(Object(react_router_es["g" /* withRouter */])(ChecksColumn)));

// CONCATENATED MODULE: ./src/notifications/rules/components/RuleCardContext.tsx



const RuleCardContext = ({ onDelete, onClone, onView, }) => {
    return (react_default.a.createElement(clockface["f" /* Context */], null,
        react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface["g" /* IconFont */].EyeOpen, testID: "context-history-menu" },
            react_default.a.createElement(clockface["f" /* Context */].Item, { label: "View History", action: onView, testID: "context-history-task" })),
        react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface["g" /* IconFont */].Duplicate, color: clockface_dist["ComponentColor"].Secondary, testID: "context-clone-menu" },
            react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Clone", action: onClone, testID: "context-clone-task" })),
        react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface["g" /* IconFont */].Trash, color: clockface_dist["ComponentColor"].Danger, testID: "context-delete-menu" },
            react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Delete", action: onDelete, testID: "context-delete-task" }))));
};
/* harmony default export */ var components_RuleCardContext = (RuleCardContext);

// EXTERNAL MODULE: ./src/notifications/rules/actions/thunks.ts
var rules_actions_thunks = __webpack_require__(314);

// CONCATENATED MODULE: ./src/notifications/rules/components/RuleCard.tsx











const RuleCard = ({ rule, onUpdateRuleProperties, deleteNotificationRule, onCloneRule, onAddRuleLabel, onRemoveRuleLabel, params: { orgID }, router, }) => {
    const { id, activeStatus, name, lastRunError, lastRunStatus, description, latestCompleted, } = rule;
    const onUpdateName = (name) => {
        onUpdateRuleProperties(id, { name });
    };
    const onUpdateDescription = (description) => {
        onUpdateRuleProperties(id, { description });
    };
    const onDelete = () => {
        deleteNotificationRule(id);
    };
    const onClone = () => {
        onCloneRule(rule);
    };
    const onToggle = () => {
        const status = activeStatus === 'active' ? 'inactive' : 'active';
        onUpdateRuleProperties(id, { status });
    };
    const onRuleClick = () => {
        router.push(`/orgs/${orgID}/alerting/rules/${id}/edit`);
    };
    const onView = () => {
        const historyType = 'notifications';
        const queryParams = new URLSearchParams({
            [HISTORY_TYPE_QUERY_PARAM]: historyType,
            [SEARCH_QUERY_PARAM]: `"notificationRuleID" == "${id}"`,
        });
        router.push(`/orgs/${orgID}/alert-history?${queryParams}`);
    };
    const handleAddRuleLabel = (label) => {
        onAddRuleLabel(id, label);
    };
    const handleRemoveRuleLabel = (label) => {
        onRemoveRuleLabel(id, label.id);
    };
    return (react_default.a.createElement(clockface_dist["ResourceCard"], { key: `rule-id--${id}`, testID: `rule-card ${name}`, name: react_default.a.createElement(clockface_dist["ResourceCard"].EditableName, { onUpdate: onUpdateName, onClick: onRuleClick, name: name, noNameString: alerting_constants["j" /* DEFAULT_NOTIFICATION_RULE_NAME */], testID: "rule-card--name", buttonTestID: "rule-card--name-button", inputTestID: "rule-card--input" }), toggle: react_default.a.createElement(clockface_dist["SlideToggle"], { active: activeStatus === 'active', size: clockface_dist["ComponentSize"].ExtraSmall, onChange: onToggle, testID: "rule-card--slide-toggle" }), description: react_default.a.createElement(clockface_dist["ResourceCard"].EditableDescription, { onUpdate: onUpdateDescription, description: description, placeholder: `Describe ${name}` }), labels: react_default.a.createElement(inlineLabels_InlineLabels, { selectedLabelIDs: rule.labels, onAddLabel: handleAddRuleLabel, onRemoveLabel: handleRemoveRuleLabel }), disabled: activeStatus === 'inactive', contextMenu: react_default.a.createElement(components_RuleCardContext, { onView: onView, onClone: onClone, onDelete: onDelete }), metaData: [
            react_default.a.createElement(react_default.a.Fragment, null,
                "Last completed at ",
                latestCompleted),
            react_default.a.createElement(react_default.a.Fragment, null, relativeTimestampFormatter(rule.updatedAt, 'Last updated ')),
            react_default.a.createElement(lastRunTaskStatus_LastRunTaskStatus, { key: 2, lastRunError: lastRunError, lastRunStatus: lastRunStatus }),
        ] }));
};
const RuleCard_mdtp = {
    onUpdateRuleProperties: rules_actions_thunks["h" /* updateRuleProperties */],
    deleteNotificationRule: rules_actions_thunks["d" /* deleteRule */],
    onAddRuleLabel: rules_actions_thunks["a" /* addRuleLabel */],
    onRemoveRuleLabel: rules_actions_thunks["e" /* deleteRuleLabel */],
    onCloneRule: rules_actions_thunks["b" /* cloneRule */],
};
/* harmony default export */ var components_RuleCard = (Object(es["b" /* connect */])(null, RuleCard_mdtp)(Object(react_router_es["g" /* withRouter */])(RuleCard)));

// CONCATENATED MODULE: ./src/notifications/rules/components/RuleCards.tsx





const FilterRules = FilterListContainer();
const NotificationRuleCards = ({ rules, searchTerm }) => {
    const cards = rules => rules.map(nr => react_default.a.createElement(components_RuleCard, { key: nr.id, rule: nr }));
    const filteredCards = (react_default.a.createElement(FilterRules, { list: rules, searchKeys: ['name'], searchTerm: searchTerm }, filtered => (react_default.a.createElement(clockface_dist["ResourceList"].Body, { emptyState: react_default.a.createElement(EmptyNotificationRulesList, { searchTerm: searchTerm }) }, cards(filtered)))));
    return react_default.a.createElement(clockface_dist["ResourceList"], null, filteredCards);
};
const EmptyNotificationRulesList = ({ searchTerm }) => {
    if (searchTerm) {
        return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Small, className: "alert-column--empty" },
            react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                "No ",
                react_default.a.createElement("b", null, "rules"),
                " match your search")));
    }
    return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Small, className: "alert-column--empty" },
        react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
            "You need at least 1 ",
            react_default.a.createElement("b", null, "Notification Endpoint"),
            " before",
            react_default.a.createElement("br", null),
            "you can create a ",
            react_default.a.createElement("b", null, "Notification Rule"))));
};
/* harmony default export */ var RuleCards = (NotificationRuleCards);

// CONCATENATED MODULE: ./src/notifications/rules/components/RulesColumn.tsx








const NotificationRulesColumn = ({ rules, router, params, endpoints, }) => {
    const handleOpenOverlay = () => {
        const newRuleRoute = `/orgs/${params.orgID}/alerting/rules/new`;
        router.push(newRuleRoute);
    };
    const tooltipContents = (react_default.a.createElement(react_default.a.Fragment, null,
        "A ",
        react_default.a.createElement("strong", null, "Notification Rule"),
        " will query statuses",
        react_default.a.createElement("br", null),
        "written by ",
        react_default.a.createElement("strong", null, "Checks"),
        " to determine if a",
        react_default.a.createElement("br", null),
        "notification should be sent to a",
        react_default.a.createElement("br", null),
        react_default.a.createElement("strong", null, "Notification Endpoint"),
        react_default.a.createElement("br", null),
        react_default.a.createElement("br", null),
        react_default.a.createElement("a", { href: "https://v2.docs.influxdata.com/v2.0/monitor-alert/notification-rules/create", target: "_blank" }, "Read Documentation")));
    const buttonStatus = !!endpoints.length
        ? clockface_dist["ComponentStatus"].Default
        : clockface_dist["ComponentStatus"].Disabled;
    const buttonTitleText = !!endpoints.length
        ? 'Create a Notification Rule'
        : 'You need at least 1 Notifcation Endpoint to create a Notification Rule';
    const createButton = (react_default.a.createElement(clockface_dist["Button"], { color: clockface_dist["ComponentColor"].Secondary, text: "Create", onClick: handleOpenOverlay, testID: "create-rule", icon: clockface_dist["IconFont"].Plus, status: buttonStatus, titleText: buttonTitleText }));
    return (react_default.a.createElement(AlertsColumn, { type: types["ResourceType"].NotificationRules, title: "Notification Rules", createButton: createButton, questionMarkTooltipContents: tooltipContents }, searchTerm => (react_default.a.createElement(RuleCards, { rules: rules, searchTerm: searchTerm }))));
};
const RulesColumn_mstp = (state) => {
    const rules = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].NotificationRules);
    const endpoints = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].NotificationEndpoints);
    return { rules, endpoints };
};
/* harmony default export */ var RulesColumn = (Object(es["b" /* connect */])(RulesColumn_mstp, null)(Object(react_router_es["g" /* withRouter */])(NotificationRulesColumn)));

// EXTERNAL MODULE: ./src/notifications/endpoints/actions/thunks.ts + 1 modules
var endpoints_actions_thunks = __webpack_require__(359);

// CONCATENATED MODULE: ./src/notifications/endpoints/components/EndpointCardMenu.tsx



const EndpointCardContext = ({ onDelete, onView }) => {
    return (react_default.a.createElement(clockface["f" /* Context */], null,
        react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface["g" /* IconFont */].EyeOpen, testID: "context-history-menu" },
            react_default.a.createElement(clockface["f" /* Context */].Item, { label: "View History", action: onView, testID: "context-history-task" })),
        react_default.a.createElement(clockface["f" /* Context */].Menu, { icon: clockface["g" /* IconFont */].Trash, color: clockface_dist["ComponentColor"].Danger, testID: "context-delete-menu" },
            react_default.a.createElement(clockface["f" /* Context */].Item, { label: "Delete", action: onDelete, testID: "context-delete-task" }))));
};
/* harmony default export */ var EndpointCardMenu = (EndpointCardContext);

// CONCATENATED MODULE: ./src/notifications/endpoints/components/EndpointCard.tsx









const EndpointCard = ({ router, params: { orgID }, endpoint, onUpdateEndpointProperties, onCloneEndpoint, onDeleteEndpoint, onAddEndpointLabel, onRemoveEndpointLabel, }) => {
    const { id, name, description, activeStatus } = endpoint;
    const handleUpdateName = (name) => {
        onUpdateEndpointProperties(id, { name });
    };
    const handleClick = () => {
        router.push(`orgs/${orgID}/alerting/endpoints/${id}/edit`);
    };
    const nameComponent = (react_default.a.createElement(clockface_dist["ResourceCard"].EditableName, { key: id, name: name, onClick: handleClick, onUpdate: handleUpdateName, testID: `endpoint-card--name ${name}`, inputTestID: "endpoint-card--input", buttonTestID: "endpoint-card--name-button", noNameString: "Name this notification endpoint" }));
    const handleToggle = () => {
        const toStatus = activeStatus === 'active' ? 'inactive' : 'active';
        onUpdateEndpointProperties(id, { status: toStatus });
    };
    const toggle = (react_default.a.createElement(clockface_dist["SlideToggle"], { active: activeStatus === 'active', size: clockface_dist["ComponentSize"].ExtraSmall, onChange: handleToggle, testID: "endpoint-card--slide-toggle" }));
    const handleView = () => {
        const historyType = 'notifications';
        const queryParams = new URLSearchParams({
            [HISTORY_TYPE_QUERY_PARAM]: historyType,
            [SEARCH_QUERY_PARAM]: `"notificationEndpointID" == "${id}"`,
        });
        router.push(`/orgs/${orgID}/alert-history?${queryParams}`);
    };
    const handleDelete = () => {
        onDeleteEndpoint(id);
    };
    const handleClone = () => {
        onCloneEndpoint(endpoint);
    };
    const contextMenu = (react_default.a.createElement(EndpointCardMenu, { onDelete: handleDelete, onView: handleView, onClone: handleClone }));
    const handleAddEndpointLabel = (label) => {
        onAddEndpointLabel(id, label);
    };
    const handleRemoveEndpointLabel = (label) => {
        onRemoveEndpointLabel(id, label.id);
    };
    const labelsComponent = (react_default.a.createElement(inlineLabels_InlineLabels, { selectedLabelIDs: endpoint.labels, onAddLabel: handleAddEndpointLabel, onRemoveLabel: handleRemoveEndpointLabel }));
    const handleUpdateDescription = (description) => {
        onUpdateEndpointProperties(id, { description });
    };
    const descriptionComponent = (react_default.a.createElement(clockface_dist["ResourceCard"].EditableDescription, { onUpdate: handleUpdateDescription, description: description, placeholder: `Describe ${name}` }));
    return (react_default.a.createElement(clockface_dist["ResourceCard"], { key: id, toggle: toggle, name: nameComponent, contextMenu: contextMenu, description: descriptionComponent, labels: labelsComponent, disabled: activeStatus === 'inactive', metaData: [
            react_default.a.createElement(react_default.a.Fragment, null, relativeTimestampFormatter(endpoint.updatedAt, 'Last updated ')),
        ], testID: `endpoint-card ${name}` }));
};
const EndpointCard_mdtp = {
    onDeleteEndpoint: endpoints_actions_thunks["d" /* deleteEndpoint */],
    onAddEndpointLabel: endpoints_actions_thunks["a" /* addEndpointLabel */],
    onRemoveEndpointLabel: endpoints_actions_thunks["e" /* deleteEndpointLabel */],
    onUpdateEndpointProperties: endpoints_actions_thunks["h" /* updateEndpointProperties */],
    onCloneEndpoint: endpoints_actions_thunks["b" /* cloneEndpoint */],
};
/* harmony default export */ var components_EndpointCard = (Object(es["b" /* connect */])(null, EndpointCard_mdtp)(Object(react_router_es["g" /* withRouter */])(EndpointCard)));

// CONCATENATED MODULE: ./src/notifications/endpoints/components/EndpointCards.tsx




const FilterEndpoints = FilterListContainer();
const EndpointCards = ({ endpoints, searchTerm }) => {
    const cards = endpoints => endpoints.map(endpoint => (react_default.a.createElement(components_EndpointCard, { key: endpoint.id, endpoint: endpoint })));
    const body = (react_default.a.createElement(FilterEndpoints, { list: endpoints, searchKeys: ['name'], searchTerm: searchTerm }, filteredEndpoints => (react_default.a.createElement(clockface_dist["ResourceList"].Body, { emptyState: react_default.a.createElement(EmptyEndpointList, { searchTerm: searchTerm }) }, cards(filteredEndpoints)))));
    return react_default.a.createElement(clockface_dist["ResourceList"], null, body);
};
const EmptyEndpointList = ({ searchTerm }) => {
    if (searchTerm) {
        return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Small, className: "alert-column--empty" },
            react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
                "\"No ",
                react_default.a.createElement("b", null, "endpoints"),
                " match your search")));
    }
    return (react_default.a.createElement(clockface_dist["EmptyState"], { size: clockface_dist["ComponentSize"].Small, className: "alert-column--empty" },
        react_default.a.createElement(clockface_dist["EmptyState"].Text, null,
            "Want to send notifications to Slack,",
            react_default.a.createElement("br", null),
            "PagerDuty or an HTTP server?",
            react_default.a.createElement("br", null),
            react_default.a.createElement("br", null),
            "Try creating a ",
            react_default.a.createElement("b", null, "Notification Endpoint"))));
};
/* harmony default export */ var components_EndpointCards = (EndpointCards);

// CONCATENATED MODULE: ./src/notifications/endpoints/components/EndpointsColumn.tsx








const EndpointsColumn = ({ router, params, endpoints }) => {
    const handleOpenOverlay = () => {
        const newRuleRoute = `/orgs/${params.orgID}/alerting/endpoints/new`;
        router.push(newRuleRoute);
    };
    const tooltipContents = (react_default.a.createElement(react_default.a.Fragment, null,
        "A ",
        react_default.a.createElement("strong", null, "Notification Endpoint"),
        " stores the information to connect",
        react_default.a.createElement("br", null),
        "to a third party service that can receive notifications",
        react_default.a.createElement("br", null),
        "like Slack, PagerDuty, or an HTTP server",
        react_default.a.createElement("br", null),
        react_default.a.createElement("br", null),
        react_default.a.createElement("a", { href: "https://v2.docs.influxdata.com/v2.0/monitor-alert/notification-endpoints/create", target: "_blank" }, "Read Documentation")));
    const createButton = (react_default.a.createElement(clockface_dist["Button"], { color: clockface_dist["ComponentColor"].Secondary, text: "Create", onClick: handleOpenOverlay, testID: "create-endpoint", icon: clockface_dist["IconFont"].Plus }));
    return (react_default.a.createElement(AlertsColumn, { type: types["ResourceType"].NotificationEndpoints, title: "Notification Endpoints", createButton: createButton, questionMarkTooltipContents: tooltipContents }, searchTerm => (react_default.a.createElement(components_EndpointCards, { endpoints: endpoints, searchTerm: searchTerm }))));
};
const EndpointsColumn_mstp = (state) => {
    const endpoints = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].NotificationEndpoints);
    return { endpoints };
};
/* harmony default export */ var components_EndpointsColumn = (Object(es["b" /* connect */])(EndpointsColumn_mstp)(Object(react_router_es["g" /* withRouter */])(EndpointsColumn)));

// CONCATENATED MODULE: ./src/alerting/components/AlertingIndex.tsx













const AlertingIndex = ({ children, limitStatus, limitedResources, }) => {
    return (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement(clockface_dist["Page"], { titleTag: pageTitleSuffixer(['Monitoring & Alerting']) },
            react_default.a.createElement(clockface_dist["Page"].Header, { fullWidth: false },
                react_default.a.createElement(clockface_dist["Page"].HeaderLeft, null,
                    react_default.a.createElement(components_PageTitleWithOrg, { title: "Monitoring & Alerting" })),
                react_default.a.createElement(clockface_dist["Page"].HeaderRight, null)),
            react_default.a.createElement(clockface_dist["Page"].Contents, { fullWidth: false, scrollable: false },
                react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Labels] },
                    react_default.a.createElement(components_GetAssetLimits, null,
                        react_default.a.createElement(AssetLimitAlert_AssetLimitAlert, { resourceName: limitedResources, limitStatus: limitStatus, className: "load-data--asset-alert" }),
                        react_default.a.createElement(clockface_dist["Grid"], { className: "alerting-index" },
                            react_default.a.createElement(clockface_dist["GridRow"], { testID: "grid--row" },
                                react_default.a.createElement(clockface_dist["GridColumn"], { widthLG: 4, widthMD: 4, widthSM: 4, widthXS: 12 },
                                    react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Checks] },
                                        react_default.a.createElement(components_ChecksColumn, null))),
                                react_default.a.createElement(clockface_dist["GridColumn"], { widthLG: 4, widthMD: 4, widthSM: 4, widthXS: 12 },
                                    react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].NotificationEndpoints] },
                                        react_default.a.createElement(components_EndpointsColumn, null))),
                                react_default.a.createElement(clockface_dist["GridColumn"], { widthLG: 4, widthMD: 4, widthSM: 4, widthXS: 12 },
                                    react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].NotificationRules] },
                                        react_default.a.createElement(RulesColumn, null))))))))),
        children));
};
const AlertingIndex_mstp = ({ cloud: { limits } }) => {
    return {
        limitStatus: Object(utils_limits["j" /* extractMonitoringLimitStatus */])(limits),
        limitedResources: Object(utils_limits["i" /* extractLimitedMonitoringResources */])(limits),
    };
};
/* harmony default export */ var components_AlertingIndex = (Object(es["b" /* connect */])(AlertingIndex_mstp, null)(AlertingIndex));

// EXTERNAL MODULE: ./src/timeMachine/apis/queryBuilder.ts
var apis_queryBuilder = __webpack_require__(416);

// CONCATENATED MODULE: ./src/shared/components/DeleteDataForm/BucketsDropdown.tsx






const BucketsDropdown_BucketsDropdown = ({ bucketNames, bucketName, onSetBucketName, }) => {
    return (react_default.a.createElement(clockface_dist["SelectDropdown"], { options: bucketNames, selectedOption: bucketName, onSelect: onSetBucketName }));
};
const BucketsDropdown_mstp = (state) => {
    const buckets = getSortedBucketNames(Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Buckets));
    return {
        bucketNames: buckets,
    };
};
/* harmony default export */ var DeleteDataForm_BucketsDropdown = (Object(es["b" /* connect */])(BucketsDropdown_mstp)(BucketsDropdown_BucketsDropdown));

// CONCATENATED MODULE: ./src/shared/components/DeleteDataForm/DeleteButton.tsx



const DeleteButton = ({ status, valid, onClick }) => {
    if (status === types["RemoteDataState"].Done) {
        return (react_default.a.createElement("div", { className: "delete-data-button delete-data-button--success" },
            react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].Checkmark }),
            "Success!"));
    }
    if (status === types["RemoteDataState"].Error) {
        return (react_default.a.createElement("div", { className: "delete-data-button delete-data-button--error" },
            react_default.a.createElement(clockface_dist["Icon"], { glyph: clockface_dist["IconFont"].Remove }),
            "An error occured and has been reported."));
    }
    let deleteButtonStatus;
    if (status === types["RemoteDataState"].Loading) {
        deleteButtonStatus = clockface_dist["ComponentStatus"].Loading;
    }
    else if (!valid) {
        deleteButtonStatus = clockface_dist["ComponentStatus"].Disabled;
    }
    else {
        deleteButtonStatus = clockface_dist["ComponentStatus"].Default;
    }
    return (react_default.a.createElement(clockface_dist["Button"], { testID: "confirm-delete-btn", text: "Confirm Delete", color: clockface_dist["ComponentColor"].Danger, status: deleteButtonStatus, onClick: onClick }));
};
/* harmony default export */ var DeleteDataForm_DeleteButton = (DeleteButton);

// CONCATENATED MODULE: ./src/shared/actions/predicates.ts













const predicates_deleteFilter = (index) => ({
    type: 'DELETE_FILTER',
    payload: { index },
});
const predicates_resetFilters = () => ({
    type: 'RESET_FILTERS',
});
const predicates_resetPredicateState = () => ({
    type: 'SET_PREDICATE_DEFAULT',
});
const setBucketName = (bucketName) => ({
    type: 'SET_BUCKET_NAME',
    payload: { bucketName },
});
const setDeletionStatus = (status) => ({
    type: 'SET_DELETION_STATUS',
    payload: { deletionStatus: status },
});
const setFiles = (files) => ({
    type: 'SET_FILES',
    payload: { files },
});
const predicates_setFilter = (filter, index) => ({
    type: 'SET_FILTER',
    payload: { filter, index },
});
const predicates_setIsSerious = (isSerious) => ({
    type: 'SET_IS_SERIOUS',
    payload: { isSerious },
});
const setKeys = (keys) => ({
    type: 'SET_KEYS_BY_BUCKET',
    payload: { keys },
});
const setPreviewStatus = (status) => ({
    type: 'SET_PREVIEW_STATUS',
    payload: { previewStatus: status },
});
const predicates_setTimeRange = (timeRange) => ({
    type: 'SET_DELETE_TIME_RANGE',
    payload: { timeRange },
});
const setValues = (values) => ({
    type: 'SET_VALUES_BY_KEY',
    payload: { values },
});
const formatFilters = (filters) => filters.map(f => `${f.key} ${f.equality} ${f.value}`).join(' AND ');
const predicates_deleteWithPredicate = () => async (dispatch, getState) => {
    dispatch(setDeletionStatus(types["RemoteDataState"].Loading));
    const { predicates: { timeRange, bucketName, filters }, } = getState();
    const orgID = Object(selectors["a" /* getOrg */])(getState()).id;
    const data = {
        start: moment_default()(timeRange.lower).toISOString(),
        stop: moment_default()(timeRange.upper).toISOString(),
    };
    if (filters.length > 0) {
        data['predicate'] = formatFilters(filters);
    }
    try {
        const resp = await Object(client["ib" /* postDelete */])({
            data,
            query: {
                orgID,
                bucket: bucketName,
            },
        });
        if (resp.status !== 204) {
            throw new Error(resp.data.message);
        }
        dispatch(setDeletionStatus(types["RemoteDataState"].Done));
        dispatch(Object(actions_notifications["c" /* notify */])(Object(copy_notifications["Ub" /* predicateDeleteSucceeded */])()));
        dispatch(predicates_resetPredicateState());
    }
    catch (_a) {
        dispatch(Object(actions_notifications["c" /* notify */])(Object(copy_notifications["Tb" /* predicateDeleteFailed */])()));
        dispatch(setDeletionStatus(types["RemoteDataState"].Error));
        dispatch(predicates_resetPredicateState());
    }
};
const predicates_executePreviewQuery = (query) => async (dispatch, getState) => {
    dispatch(setPreviewStatus(types["RemoteDataState"].Loading));
    try {
        const orgID = Object(selectors["a" /* getOrg */])(getState()).id;
        const variableAssignments = Object(timeMachine_selectors["o" /* getVariableAssignments */])(getState());
        const windowVars = Object(getWindowVars["b" /* getWindowVars */])(query, variableAssignments);
        const extern = Object(buildVarsOption["a" /* buildVarsOption */])([...variableAssignments, ...windowVars]);
        const result = await Object(apis_query["a" /* runQuery */])(orgID, query, extern).promise;
        if (result.type === 'UNKNOWN_ERROR') {
            throw new Error(result.message);
        }
        if (result.type === 'RATE_LIMIT_ERROR') {
            dispatch(Object(actions_notifications["c" /* notify */])(Object(copy_notifications["Wb" /* rateLimitReached */])(result.retryAfter)));
            throw new Error(result.message);
        }
        if (result.didTruncate) {
            dispatch(Object(actions_notifications["c" /* notify */])(Object(copy_notifications["hc" /* resultTooLarge */])(result.bytesRead)));
        }
        Object(checkQueryResult["a" /* checkQueryResult */])(result.csv);
        const files = [result.csv];
        dispatch(setFiles(files));
    }
    catch (e) {
        if (e.name === 'CancellationError') {
            return;
        }
        console.error(e);
        dispatch(setPreviewStatus(types["RemoteDataState"].Error));
    }
};
const predicates_setBucketAndKeys = (bucketName) => async (dispatch, getState) => {
    const orgID = Object(selectors["a" /* getOrg */])(getState()).id;
    try {
        const query = `import "influxdata/influxdb/v1"
    v1.tagKeys(bucket: "${bucketName}")
    |> filter(fn: (r) => r._value != "_stop" and r._value != "_start")`;
        const keys = await Object(apis_queryBuilder["a" /* extractBoxedCol */])(Object(apis_query["a" /* runQuery */])(orgID, query), '_value').promise;
        keys.sort();
        dispatch(setBucketName(bucketName));
        dispatch(setKeys(keys));
    }
    catch (_a) {
        dispatch(Object(actions_notifications["c" /* notify */])(Object(copy_notifications["rc" /* setFilterKeyFailed */])()));
        dispatch(setDeletionStatus(types["RemoteDataState"].Error));
    }
};
const predicates_setValuesByKey = (bucketName, keyName) => async (dispatch, getState) => {
    const orgID = Object(selectors["a" /* getOrg */])(getState()).id;
    try {
        const query = `import "influxdata/influxdb/v1" v1.tagValues(bucket: "${bucketName}", tag: "${keyName}")`;
        const values = await Object(apis_queryBuilder["a" /* extractBoxedCol */])(Object(apis_query["a" /* runQuery */])(orgID, query), '_value')
            .promise;
        values.sort();
        dispatch(setValues(values));
    }
    catch (_a) {
        dispatch(Object(actions_notifications["c" /* notify */])(Object(copy_notifications["sc" /* setFilterValueFailed */])()));
        dispatch(setDeletionStatus(types["RemoteDataState"].Error));
    }
};

// CONCATENATED MODULE: ./src/shared/components/DeleteDataForm/FilterRow.tsx





const FilterRow = ({ bucket, filter: { key, equality, value }, keys, onChange, onDelete, setValuesByKey, shouldValidate, values, }) => {
    const keyErrorMessage = shouldValidate && key.trim() === '' ? 'Key cannot be empty' : null;
    const equalityErrorMessage = shouldValidate && equality.trim() === '' ? 'Equality cannot be empty' : null;
    const valueErrorMessage = shouldValidate && value.trim() === '' ? 'Value cannot be empty' : null;
    const onChangeKey = (input) => onChange({ key: input, equality, value });
    const onKeySelect = (input) => {
        setValuesByKey(bucket, input);
        onChange({ key: input, equality, value });
    };
    const onChangeValue = (input) => onChange({ key, equality, value: input });
    const onChangeEquality = (e) => onChange({ key, equality: e, value });
    return (react_default.a.createElement("div", { className: "delete-data-filter" },
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Tag Key", required: true, errorMessage: keyErrorMessage },
            react_default.a.createElement(components_SearchableDropdown, { className: "dwp-filter-dropdown", searchTerm: key, emptyText: "No Tags Found", searchPlaceholder: "Search keys...", selectedOption: key, onSelect: onKeySelect, onChangeSearchTerm: onChangeKey, testID: "dwp-filter-key-input", buttonTestID: "tag-selector--dropdown-button", menuTestID: "tag-selector--dropdown-menu", options: keys })),
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Equality Filter", required: true, errorMessage: equalityErrorMessage },
            react_default.a.createElement(clockface_dist["SelectDropdown"], { className: "dwp-filter-dropdown", options: ['=', '!='], selectedOption: equality, onSelect: onChangeEquality })),
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Tag Value", required: true, errorMessage: valueErrorMessage },
            react_default.a.createElement(components_SearchableDropdown, { className: "dwp-filter-dropdown", searchTerm: value, emptyText: "No Tags Found", searchPlaceholder: "Search values...", selectedOption: value, onSelect: onChangeValue, onChangeSearchTerm: onChangeValue, testID: "dwp-filter-value-input", buttonTestID: "tag-selector--dropdown-button", menuTestID: "tag-selector--dropdown-menu", options: values })),
        react_default.a.createElement(clockface_dist["Button"], { className: "delete-data-filter--remove", shape: clockface_dist["ButtonShape"].Square, icon: clockface_dist["IconFont"].Remove, onClick: onDelete })));
};
const FilterRow_mdtp = { setValuesByKey: predicates_setValuesByKey };
/* harmony default export */ var DeleteDataForm_FilterRow = (Object(es["b" /* connect */])(null, FilterRow_mdtp)(FilterRow));

// CONCATENATED MODULE: ./src/shared/components/DeleteDataForm/FilterEditor.tsx



const FilterEditor = ({ bucket, filters, keys, onDeleteFilter, onSetFilter, shouldValidate, values, }) => {
    return (react_default.a.createElement("div", { className: "delete-data-filters" },
        react_default.a.createElement(clockface_dist["Button"], { text: "Add Filter", testID: "add-filter-btn", icon: clockface_dist["IconFont"].Plus, shape: clockface_dist["ButtonShape"].StretchToFit, className: "delete-data-filters--new-filter", onClick: () => onSetFilter({ key: '', equality: '=', value: '' }, filters.length) }),
        filters.length > 0 ? (react_default.a.createElement("div", { className: "delete-data-filters--filters" }, filters.map((filter, i) => (react_default.a.createElement(DeleteDataForm_FilterRow, { bucket: bucket, key: i, keys: keys, filter: filter, onChange: filter => onSetFilter(filter, i), onDelete: () => onDeleteFilter(i), shouldValidate: shouldValidate, values: values }))))) : (react_default.a.createElement(clockface_dist["Panel"], { className: "delete-data-filters--no-filters" },
            react_default.a.createElement(clockface_dist["Panel"].Body, null,
                react_default.a.createElement("p", null, "If no filters are specified, all data points in the selected time range will be marked for deletion."))))));
};
/* harmony default export */ var DeleteDataForm_FilterEditor = (FilterEditor);

// CONCATENATED MODULE: ./src/shared/components/DeleteDataForm/PreviewDataTable.tsx


const PreviewDataTable = ({ bodyData, headers }) => {
    return (react_default.a.createElement(clockface_dist["Table"], { borders: clockface_dist["BorderType"].Vertical, fontSize: clockface_dist["ComponentSize"].ExtraSmall, cellPadding: clockface_dist["ComponentSize"].ExtraSmall },
        react_default.a.createElement(clockface_dist["Table"].Header, null,
            react_default.a.createElement(clockface_dist["Table"].Row, null,
                react_default.a.createElement(clockface_dist["Table"].HeaderCell, null, "Columns"),
                react_default.a.createElement(clockface_dist["Table"].HeaderCell, null, "Sample Values"))),
        react_default.a.createElement(clockface_dist["Table"].Body, null, headers.map((header, i) => (react_default.a.createElement(clockface_dist["Table"].Row, { key: header },
            react_default.a.createElement(clockface_dist["Table"].Cell, null, header),
            react_default.a.createElement(clockface_dist["Table"].Cell, null, bodyData[i])))))));
};
/* harmony default export */ var DeleteDataForm_PreviewDataTable = (PreviewDataTable);

// CONCATENATED MODULE: ./src/shared/components/DeleteDataForm/TimeRangeDropdown.tsx





const DeleteDataForm_TimeRangeDropdown_TimeRangeDropdown = ({ timeRange, onSetTimeRange }) => {
    const [pickerActive, setPickerActive] = Object(react["useState"])(false);
    const buttonRef = Object(react["useRef"])(null);
    let dropdownLabel = 'Select a Time Range';
    if (timeRange) {
        dropdownLabel = Object(utils_duration["d" /* getTimeRangeLabel */])(timeRange);
    }
    const handleApplyTimeRange = (timeRange) => {
        onSetTimeRange(timeRange);
        setPickerActive(false);
    };
    return (react_default.a.createElement("div", { ref: buttonRef },
        react_default.a.createElement(clockface_dist["Dropdown"].Button, { onClick: () => setPickerActive(!pickerActive) }, dropdownLabel),
        react_default.a.createElement(clockface_dist["Popover"], { appearance: clockface_dist["Appearance"].Outline, position: clockface_dist["PopoverPosition"].Below, triggerRef: buttonRef, visible: pickerActive, showEvent: clockface_dist["PopoverInteraction"].None, hideEvent: clockface_dist["PopoverInteraction"].None, distanceFromTrigger: 8, testID: "timerange-popover", enableDefaultStyles: false, contents: () => (react_default.a.createElement(dateRangePicker_DateRangePicker, { timeRange: timeRange || Object(utils_duration["b" /* convertTimeRangeToCustom */])(timeRanges["e" /* pastHourTimeRange */]), onSetTimeRange: handleApplyTimeRange, onClose: () => setPickerActive(false), position: { position: 'relative' } })) })));
};
/* harmony default export */ var DeleteDataForm_TimeRangeDropdown = (DeleteDataForm_TimeRangeDropdown_TimeRangeDropdown);

// CONCATENATED MODULE: ./src/shared/selectors/canDelete.ts

const setCanDelete = (state) => state.isSerious &&
    state.deletionStatus === types["RemoteDataState"].NotStarted &&
    state.filters.every(f => !!f.key && !!f.value && !!f.equality);

// CONCATENATED MODULE: ./src/shared/components/DeleteDataForm/DeleteDataForm.tsx
















const DeleteDataForm = ({ canDelete, deleteFilter, deletionStatus, deleteWithPredicate, executePreviewQuery, files, filters, handleDismiss, isSerious, keys, resetFilters, setFilter, setIsSerious, setBucketAndKeys, setTimeRange, timeRange, values, bucketName, orgID, }) => {
    const [count, setCount] = Object(react["useState"])('0');
    Object(react["useEffect"])(() => {
        if (bucketName) {
            setBucketAndKeys(bucketName);
        }
    });
    Object(react["useEffect"])(() => {
        if (filters.every(filter => filter.key !== '' && filter.value !== '')) {
            handleDeleteDataPreview();
        }
    }, [filters]);
    const formatPredicatesForPreview = (predicates) => {
        let result = '';
        predicates.forEach(predicate => {
            const { key, equality, value } = predicate;
            result += `\n|> filter(fn: (r) => r.${key} ${equality === '=' ? '==' : '!='} "${value}")`;
        });
        return result;
    };
    const handleDeleteDataPreview = async () => {
        const { lower, upper } = timeRange;
        let query = `from(bucket: "${name}")
      |> range(start: ${moment_default()(lower).toISOString()}, stop: ${moment_default()(upper).toISOString()})`;
        if (filters.length > 0) {
            query += ` ${formatPredicatesForPreview(filters)}`;
        }
        const countQuery = `${query}
      |> count()
      |> keep(columns: ["_value"])
      |> sum()
    `;
        const rowQuery = `${query}
      |> limit(n: 1)
      |> yield(name: "sample_data")
    `;
        const [total] = await Object(apis_queryBuilder["a" /* extractBoxedCol */])(Object(apis_query["a" /* runQuery */])(orgID, countQuery), '_value')
            .promise;
        executePreviewQuery(rowQuery);
        setCount(total);
    };
    const handleDelete = () => {
        deleteWithPredicate();
        handleDismiss();
    };
    const handleBucketClick = (selectedBucketName) => {
        setBucketAndKeys(selectedBucketName);
        resetFilters();
    };
    const formatNumber = (num) => {
        if (num) {
            return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,');
        }
        return 0;
    };
    return (react_default.a.createElement(clockface_dist["Form"], { className: "delete-data-form" },
        react_default.a.createElement(clockface_dist["Grid"], null,
            react_default.a.createElement(clockface_dist["Grid"].Row, null,
                react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Four },
                    react_default.a.createElement(clockface_dist["Form"].Element, { label: "Target Bucket" },
                        react_default.a.createElement(DeleteDataForm_BucketsDropdown, { bucketName: bucketName, onSetBucketName: handleBucketClick }))),
                react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Eight },
                    react_default.a.createElement(clockface_dist["Form"].Element, { label: "Time Range" },
                        react_default.a.createElement(DeleteDataForm_TimeRangeDropdown, { timeRange: timeRange, onSetTimeRange: setTimeRange })))),
            react_default.a.createElement(clockface_dist["Grid"].Row, null,
                react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
                    react_default.a.createElement(DeleteDataForm_FilterEditor, { bucket: name, filters: filters, keys: keys, onDeleteFilter: deleteFilter, onSetFilter: setFilter, shouldValidate: isSerious, values: values }))),
            react_default.a.createElement(clockface_dist["Grid"].Row, { className: "delete-data-preview" },
                react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
                    react_default.a.createElement(clockface_dist["Panel"], null,
                        react_default.a.createElement(clockface_dist["Panel"].Header, { size: clockface_dist["ComponentSize"].ExtraSmall },
                            react_default.a.createElement("p", { className: "preview-data-margins" }, "Preview Data")),
                        react_default.a.createElement(clockface_dist["Panel"].Body, { size: clockface_dist["ComponentSize"].ExtraSmall }, files && files.length > 0 && files[0].length > 1 && (react_default.a.createElement(components_FluxTablesTransform, { files: files }, tables => {
                            const [table] = tables;
                            if (table && table.data) {
                                let [headers, bodyData] = table.data;
                                headers = headers.slice(3);
                                bodyData = bodyData.slice(3);
                                return (react_default.a.createElement(DeleteDataForm_PreviewDataTable, { headers: headers, bodyData: bodyData }));
                            }
                            return react_default.a.createElement("span", null);
                        })))))),
            react_default.a.createElement(clockface_dist["Grid"].Row, null,
                react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
                    react_default.a.createElement(clockface_dist["Panel"], { className: "delete-data-form--danger-zone" },
                        react_default.a.createElement(clockface_dist["Panel"].Header, null,
                            react_default.a.createElement("h5", null,
                                "Danger Zone! You're deleting",
                                ' ',
                                react_default.a.createElement("span", { style: { color: clockface_dist["InfluxColors"].Dreamsicle } }, formatNumber(count)),
                                ' ',
                                "records")),
                        react_default.a.createElement(clockface_dist["Panel"].Body, { className: "delete-data-form--confirm" },
                            react_default.a.createElement(components_Checkbox, { testID: "delete-checkbox", label: "I understand that this cannot be undone.", checked: isSerious, onSetChecked: isSerious => setIsSerious(isSerious) }),
                            react_default.a.createElement(DeleteDataForm_DeleteButton, { status: deletionStatus, valid: canDelete, onClick: handleDelete }))))))));
};
const DeleteDataForm_mstp = (state) => {
    const { predicates } = state;
    const { bucketName, deletionStatus, files, filters, keys, isSerious, timeRange, values, } = predicates;
    return {
        bucketName,
        canDelete: setCanDelete(predicates),
        deletionStatus,
        files,
        filters,
        isSerious,
        keys,
        timeRange,
        values,
        orgID: Object(selectors["a" /* getOrg */])(state).id,
    };
};
const DeleteDataForm_mdtp = {
    deleteFilter: predicates_deleteFilter,
    deleteWithPredicate: predicates_deleteWithPredicate,
    resetFilters: predicates_resetFilters,
    executePreviewQuery: predicates_executePreviewQuery,
    setFilter: predicates_setFilter,
    setIsSerious: predicates_setIsSerious,
    setBucketAndKeys: predicates_setBucketAndKeys,
    setTimeRange: predicates_setTimeRange,
};
/* harmony default export */ var DeleteDataForm_DeleteDataForm = (Object(es["b" /* connect */])(DeleteDataForm_mstp, DeleteDataForm_mdtp)(DeleteDataForm));

// CONCATENATED MODULE: ./src/shared/components/DeleteDataOverlay.tsx








const DeleteDataOverlay = ({ buckets, router, params: { orgID, bucketID }, resetPredicateState, setBucketAndKeys, }) => {
    const bucket = buckets.find(bucket => bucket.id === bucketID);
    Object(react["useEffect"])(() => {
        if (bucket) {
            setBucketAndKeys(bucket.name);
        }
    }, []);
    const handleDismiss = () => {
        resetPredicateState();
        router.push(`/orgs/${orgID}/load-data/buckets/`);
    };
    return (react_default.a.createElement(clockface_dist["Overlay"], { visible: true },
        react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 600 },
            react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Delete Data", onDismiss: handleDismiss }),
            react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                react_default.a.createElement(clockface_dist["SpinnerContainer"], { spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null), loading: bucket ? types["RemoteDataState"].Done : types["RemoteDataState"].Loading },
                    react_default.a.createElement(DeleteDataForm_DeleteDataForm, { handleDismiss: handleDismiss }))))));
};
const DeleteDataOverlay_mstp = (state) => {
    return {
        buckets: Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Buckets),
    };
};
const DeleteDataOverlay_mdtp = {
    resetPredicateState: predicates_resetPredicateState,
    setBucketAndKeys: predicates_setBucketAndKeys,
};
/* harmony default export */ var components_DeleteDataOverlay = (Object(es["b" /* connect */])(DeleteDataOverlay_mstp, DeleteDataOverlay_mdtp)(Object(react_router_es["g" /* withRouter */])(DeleteDataOverlay)));

// CONCATENATED MODULE: ./src/dataExplorer/components/DeleteDataOverlay.tsx











const DeleteDataOverlay_DeleteDataOverlay = ({ router, params: { orgID }, bucketNameFromDE, timeRangeFromDE, resetPredicateState, setTimeRange, setBucketAndKeys, }) => {
    Object(react["useEffect"])(() => {
        if (bucketNameFromDE) {
            setBucketAndKeys(bucketNameFromDE);
        }
    }, [bucketNameFromDE]);
    Object(react["useEffect"])(() => {
        if (timeRangeFromDE) {
            setTimeRange(Object(utils_duration["b" /* convertTimeRangeToCustom */])(timeRangeFromDE));
        }
    }, [timeRangeFromDE]);
    const handleDismiss = () => {
        resetPredicateState();
        router.push(`/orgs/${orgID}/data-explorer`);
    };
    return (react_default.a.createElement(clockface_dist["Overlay"], { visible: true },
        react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 600 },
            react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Delete Data", onDismiss: handleDismiss }),
            react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                react_default.a.createElement(GetResources["a" /* default */], { resources: [types["ResourceType"].Buckets] },
                    react_default.a.createElement(DeleteDataForm_DeleteDataForm, { handleDismiss: handleDismiss }))))));
};
const components_DeleteDataOverlay_mstp = (state) => {
    const activeQuery = Object(timeMachine_selectors["a" /* getActiveQuery */])(state);
    const bucketNameFromDE = Object(lodash["get"])(activeQuery, 'builderConfig.buckets.0');
    const { timeRange } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    return {
        bucketNameFromDE,
        timeRangeFromDE: timeRange,
    };
};
const components_DeleteDataOverlay_mdtp = {
    resetPredicateState: predicates_resetPredicateState,
    setTimeRange: predicates_setTimeRange,
    setBucketAndKeys: predicates_setBucketAndKeys,
};
/* harmony default export */ var dataExplorer_components_DeleteDataOverlay = (Object(es["b" /* connect */])(components_DeleteDataOverlay_mstp, components_DeleteDataOverlay_mdtp)(Object(react_router_es["g" /* withRouter */])(DeleteDataOverlay_DeleteDataOverlay)));

// CONCATENATED MODULE: ./src/checks/components/CheckAlertingButton.tsx


const CheckAlertingButton = ({ setActiveTab, activeTab, }) => {
    const handleClick = (nextTab) => () => {
        if (activeTab !== nextTab) {
            setActiveTab(nextTab);
        }
    };
    return (react_default.a.createElement(clockface_dist["SelectGroup"], { shape: clockface_dist["ButtonShape"].StretchToFit, style: { width: '300px' } },
        react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "query-mode", key: "queries", id: "queries", titleText: "queries", value: "queries", active: activeTab === 'queries', onClick: handleClick('queries') }, "1. Define Query"),
        react_default.a.createElement(clockface_dist["SelectGroup"].Option, { name: "query-mode", key: "alerting", id: "alerting", testID: "checkeo--header alerting-tab", titleText: "alerting", value: "alerting", active: activeTab === 'alerting', onClick: handleClick('alerting') }, "2. Configure Check")));
};
/* harmony default export */ var components_CheckAlertingButton = (CheckAlertingButton);

// CONCATENATED MODULE: ./src/checks/components/CheckEOSaveButton.tsx


const CheckEOSaveButton = ({ onSave, status, className, checkType, singleField, singleAggregateFunc, oneOrMoreThresholds, }) => {
    const triggerRef = Object(react["useRef"])(null);
    return (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement(clockface_dist["Popover"], { triggerRef: triggerRef, visible: status !== clockface_dist["ComponentStatus"].Default, position: clockface_dist["PopoverPosition"].Below, enableDefaultStyles: false, showEvent: clockface_dist["PopoverInteraction"].None, hideEvent: clockface_dist["PopoverInteraction"].None, color: clockface_dist["ComponentColor"].Secondary, appearance: clockface_dist["Appearance"].Outline, contents: () => (react_default.a.createElement("div", { className: "query-checklist--popover" },
                react_default.a.createElement("p", null, `To create a ${checkType} check, you must select:`),
                react_default.a.createElement("ul", { className: "query-checklist--list" },
                    react_default.a.createElement(QueryChecklistItem, { text: "One field", selected: singleField }),
                    checkType === 'threshold' && (react_default.a.createElement(react_default.a.Fragment, null,
                        react_default.a.createElement(QueryChecklistItem, { text: "One aggregate function", selected: singleAggregateFunc }),
                        react_default.a.createElement(QueryChecklistItem, { text: "One or more thresholds", selected: oneOrMoreThresholds })))))) }),
        react_default.a.createElement(clockface_dist["SquareButton"], { ref: triggerRef, className: className, icon: clockface_dist["IconFont"].Checkmark, color: clockface_dist["ComponentColor"].Success, size: clockface_dist["ComponentSize"].Small, status: status, onClick: onSave, testID: "save-cell--button" })));
};
/* harmony default export */ var components_CheckEOSaveButton = (CheckEOSaveButton);
const QueryChecklistItem = ({ selected, text, }) => {
    const className = selected
        ? 'query-checklist--item valid'
        : 'query-checklist--item error';
    const icon = selected ? clockface_dist["IconFont"].Checkmark : clockface_dist["IconFont"].Remove;
    return (react_default.a.createElement("li", { className: className },
        react_default.a.createElement(clockface_dist["Icon"], { glyph: icon }),
        text));
};

// CONCATENATED MODULE: ./src/checks/components/CheckEOHeader.tsx











const CheckEOHeader_saveButtonClass = 'veo-header--save-cell-button';
const CheckEOHeader = ({ name, onSetName, onCancel, onSave, setActiveTab, activeTab, draftQueries, checkType, thresholds, }) => {
    const [saveStatus, setSaveStatus] = Object(react["useState"])(types["RemoteDataState"].NotStarted);
    const handleSave = () => {
        if (saveStatus === types["RemoteDataState"].Loading) {
            return;
        }
        setSaveStatus(types["RemoteDataState"].Loading);
        onSave();
        setSaveStatus(types["RemoteDataState"].NotStarted);
    };
    const handleClickOutsideTitle = (e) => {
        if (e.target.classList.contains(CheckEOHeader_saveButtonClass)) {
            handleSave();
        }
    };
    const saveButtonStatus = () => {
        if (!Object(utils_queryBuilder["d" /* isCheckSaveable */])(draftQueries, checkType, thresholds)) {
            return clockface_dist["ComponentStatus"].Disabled;
        }
        if (saveStatus == types["RemoteDataState"].Loading) {
            return clockface_dist["ComponentStatus"].Loading;
        }
        return clockface_dist["ComponentStatus"].Default;
    };
    const { singleField, singleAggregateFunc } = Object(utils_queryBuilder["f" /* isDraftQueryAlertable */])(draftQueries);
    const oneOrMoreThresholds = checkType === 'threshold' && thresholds && !!thresholds.length;
    return (react_default.a.createElement(clockface_dist["Page"].Header, { fullWidth: true },
        react_default.a.createElement(clockface_dist["Page"].HeaderLeft, null,
            react_default.a.createElement(components_RenamablePageTitle, { name: name, onRename: onSetName, placeholder: alerting_constants["d" /* DEFAULT_CHECK_NAME */], maxLength: alerting_constants["a" /* CHECK_NAME_MAX_LENGTH */], onClickOutside: handleClickOutsideTitle })),
        react_default.a.createElement(clockface_dist["Page"].HeaderCenter, null, activeTab !== 'customCheckQuery' && (react_default.a.createElement(components_CheckAlertingButton, { activeTab: activeTab, draftQueries: draftQueries, setActiveTab: setActiveTab }))),
        react_default.a.createElement(clockface_dist["Page"].HeaderRight, null,
            react_default.a.createElement(clockface_dist["SquareButton"], { icon: clockface_dist["IconFont"].Remove, onClick: onCancel, size: clockface_dist["ComponentSize"].Small }),
            react_default.a.createElement(components_CheckEOSaveButton, { status: saveButtonStatus(), onSave: handleSave, className: CheckEOHeader_saveButtonClass, checkType: checkType, singleField: singleField, singleAggregateFunc: singleAggregateFunc, oneOrMoreThresholds: oneOrMoreThresholds }))));
};
const CheckEOHeader_mstp = (state) => {
    const { activeTab, draftQueries } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    const { alertBuilder: { type, thresholds }, } = state;
    return { activeTab, draftQueries, checkType: type, thresholds };
};
const CheckEOHeader_mdtp = {
    setActiveTab: timeMachine_actions["i" /* setActiveTab */],
};
/* harmony default export */ var components_CheckEOHeader = (Object(es["b" /* connect */])(CheckEOHeader_mstp, CheckEOHeader_mdtp)(CheckEOHeader));

// CONCATENATED MODULE: ./src/checks/components/NewThresholdCheckEO.tsx











const NewCheckOverlay = ({ status, params: { orgID }, checkName, router, onSaveCheckFromTimeMachine, onSetActiveTimeMachine, onResetAlertBuilder, onUpdateAlertBuilderName, onInitializeAlertBuilder, }) => {
    Object(react["useEffect"])(() => {
        const view = Object(helpers["a" /* createView */])('threshold');
        onInitializeAlertBuilder('threshold');
        onSetActiveTimeMachine('alerting', {
            view,
        });
    }, []);
    const handleClose = () => {
        router.push(`/orgs/${orgID}/alerting`);
        onResetAlertBuilder();
    };
    return (react_default.a.createElement(clockface_dist["Overlay"], { visible: true, className: "veo-overlay" },
        react_default.a.createElement("div", { className: "veo" },
            react_default.a.createElement(clockface_dist["SpinnerContainer"], { spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null), loading: status || types["RemoteDataState"].Loading },
                react_default.a.createElement(components_CheckEOHeader, { key: checkName, name: checkName, onSetName: onUpdateAlertBuilderName, onCancel: handleClose, onSave: onSaveCheckFromTimeMachine }),
                react_default.a.createElement("div", { className: "veo-contents" },
                    react_default.a.createElement(components_TimeMachine, null))))));
};
const NewThresholdCheckEO_mstp = ({ alertBuilder: { name, status } }) => {
    return { checkName: name, status };
};
const NewThresholdCheckEO_mdtp = {
    onSetActiveTimeMachine: timeMachine_actions["j" /* setActiveTimeMachine */],
    onSaveCheckFromTimeMachine: checks_actions_thunks["c" /* createCheckFromTimeMachine */],
    onResetAlertBuilder: actions_alertBuilder["f" /* resetAlertBuilder */],
    onUpdateAlertBuilderName: actions_alertBuilder["p" /* updateName */],
    onInitializeAlertBuilder: actions_alertBuilder["c" /* initializeAlertBuilder */],
};
/* harmony default export */ var NewThresholdCheckEO = (Object(es["b" /* connect */])(NewThresholdCheckEO_mstp, NewThresholdCheckEO_mdtp)(Object(react_router_es["g" /* withRouter */])(NewCheckOverlay)));

// CONCATENATED MODULE: ./src/checks/components/NewDeadmanCheckEO.tsx











const NewDeadmanCheckEO_NewCheckOverlay = ({ params: { orgID }, status, checkName, router, onSaveCheckFromTimeMachine, onSetActiveTimeMachine, onResetAlertBuilder, onUpdateAlertBuilderName, onInitializeAlertBuilder, }) => {
    Object(react["useEffect"])(() => {
        const view = Object(helpers["a" /* createView */])('deadman');
        onInitializeAlertBuilder('deadman');
        onSetActiveTimeMachine('alerting', {
            view,
        });
    }, []);
    const handleClose = () => {
        router.push(`/orgs/${orgID}/alerting`);
        onResetAlertBuilder();
    };
    return (react_default.a.createElement(clockface_dist["Overlay"], { visible: true, className: "veo-overlay" },
        react_default.a.createElement("div", { className: "veo" },
            react_default.a.createElement(clockface_dist["SpinnerContainer"], { spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null), loading: status || types["RemoteDataState"].Loading },
                react_default.a.createElement(components_CheckEOHeader, { key: checkName, name: checkName, onSetName: onUpdateAlertBuilderName, onCancel: handleClose, onSave: onSaveCheckFromTimeMachine }),
                react_default.a.createElement("div", { className: "veo-contents" },
                    react_default.a.createElement(components_TimeMachine, null))))));
};
const NewDeadmanCheckEO_mstp = ({ alertBuilder: { name, status } }) => {
    return { checkName: name, status };
};
const NewDeadmanCheckEO_mdtp = {
    onSetActiveTimeMachine: timeMachine_actions["j" /* setActiveTimeMachine */],
    onSaveCheckFromTimeMachine: checks_actions_thunks["c" /* createCheckFromTimeMachine */],
    onResetAlertBuilder: actions_alertBuilder["f" /* resetAlertBuilder */],
    onUpdateAlertBuilderName: actions_alertBuilder["p" /* updateName */],
    onInitializeAlertBuilder: actions_alertBuilder["c" /* initializeAlertBuilder */],
};
/* harmony default export */ var NewDeadmanCheckEO = (Object(es["b" /* connect */])(NewDeadmanCheckEO_mstp, NewDeadmanCheckEO_mdtp)(Object(react_router_es["g" /* withRouter */])(NewDeadmanCheckEO_NewCheckOverlay)));

// CONCATENATED MODULE: ./src/checks/components/EditCheckEO.tsx












const EditCheckEditorOverlay = ({ onUpdateAlertBuilderName, onResetAlertBuilder, onSaveCheckFromTimeMachine, onExecuteQueries, onGetCheckForTimeMachine, activeTimeMachineID, status, router, params: { checkID, orgID }, checkName, loadedCheckID, view, }) => {
    Object(react["useEffect"])(() => {
        onGetCheckForTimeMachine(checkID);
    }, [checkID]);
    Object(react["useEffect"])(() => {
        onExecuteQueries();
    }, [Object(lodash["get"])(view, 'properties.queries[0]', null)]);
    const handleClose = () => {
        router.push(`/orgs/${orgID}/alerting`);
        onResetAlertBuilder();
    };
    let loadingStatus = types["RemoteDataState"].Loading;
    if (status === types["RemoteDataState"].Error) {
        loadingStatus = types["RemoteDataState"].Error;
    }
    if (status === types["RemoteDataState"].Done &&
        activeTimeMachineID === 'alerting' &&
        loadedCheckID === checkID) {
        loadingStatus = types["RemoteDataState"].Done;
    }
    return (react_default.a.createElement(clockface_dist["Overlay"], { visible: true, className: "veo-overlay" },
        react_default.a.createElement("div", { className: "veo" },
            react_default.a.createElement(clockface_dist["SpinnerContainer"], { spinnerComponent: react_default.a.createElement(clockface_dist["TechnoSpinner"], null), loading: loadingStatus },
                react_default.a.createElement(components_CheckEOHeader, { name: checkName, onSetName: onUpdateAlertBuilderName, onCancel: handleClose, onSave: onSaveCheckFromTimeMachine }),
                react_default.a.createElement("div", { className: "veo-contents" },
                    react_default.a.createElement(components_TimeMachine, null))))));
};
const EditCheckEO_mstp = (state) => {
    const { timeMachines: { activeTimeMachineID }, alertBuilder: { status, name, id }, } = state;
    const { view } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    return {
        loadedCheckID: id,
        checkName: name,
        status,
        activeTimeMachineID,
        view,
    };
};
const EditCheckEO_mdtp = {
    onGetCheckForTimeMachine: checks_actions_thunks["f" /* getCheckForTimeMachine */],
    onSaveCheckFromTimeMachine: checks_actions_thunks["i" /* updateCheckFromTimeMachine */],
    onExecuteQueries: actions_queries["c" /* executeQueries */],
    onResetAlertBuilder: actions_alertBuilder["f" /* resetAlertBuilder */],
    onUpdateAlertBuilderName: actions_alertBuilder["p" /* updateName */],
};
/* harmony default export */ var EditCheckEO = (Object(es["b" /* connect */])(EditCheckEO_mstp, EditCheckEO_mdtp)(Object(react_router_es["g" /* withRouter */])(EditCheckEditorOverlay)));

// CONCATENATED MODULE: ./src/notifications/rules/components/RuleSchedule.tsx





const RuleSchedule = ({ rule, onChange }) => {
    const { every, offset } = rule;
    return (react_default.a.createElement(clockface_dist["Grid"].Row, null,
        react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Four },
            react_default.a.createElement(clockface_dist["Form"].Element, { label: "Schedule Every" },
                react_default.a.createElement(components_DurationInput, { value: every || '', onSubmit: onChange('every'), suggestions: constants_queryBuilder["c" /* DURATIONS */], placeholder: "1d3h30s", testID: "rule-schedule-every--input" }))),
        react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Four },
            react_default.a.createElement(clockface_dist["Form"].Element, { label: "Offset" },
                react_default.a.createElement(components_DurationInput, { value: offset || '', onSubmit: onChange('offset'), suggestions: alerting_constants["b" /* CHECK_OFFSET_OPTIONS */], placeholder: "10m", testID: "rule-schedule-offset--input" })))));
};
/* harmony default export */ var components_RuleSchedule = (RuleSchedule);

// CONCATENATED MODULE: ./src/notifications/rules/components/RuleLevelsDropdown.tsx


const RuleLevelsDropdown = ({ type, selectedLevel, otherLevel, onClickLevel, }) => {
    let levels = [
        { display: 'CRIT', hex: clockface_dist["InfluxColors"].Fire, value: 'CRIT' },
        { display: 'INFO', hex: clockface_dist["InfluxColors"].Ocean, value: 'INFO' },
        { display: 'WARN', hex: clockface_dist["InfluxColors"].Thunder, value: 'WARN' },
        { display: 'OK', hex: clockface_dist["InfluxColors"].Viridian, value: 'OK' },
        { display: 'ANY', hex: clockface_dist["InfluxColors"].Sidewalk, value: 'ANY' },
    ];
    if (otherLevel) {
        levels = levels.filter(l => l.value !== otherLevel);
    }
    const selected = levels.find(l => l.value === selectedLevel);
    if (!selected) {
        throw new Error('Unknown level type provided to <LevelsDropdown/>');
    }
    const button = (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { color: clockface_dist["ComponentColor"].Default, active: active, onClick: onClick, testID: `levels--dropdown--button ${type}` },
        react_default.a.createElement("div", { className: "color-dropdown--item" },
            react_default.a.createElement("div", { className: "color-dropdown--swatch", style: { backgroundColor: selected.hex } }),
            react_default.a.createElement("div", { className: "color-dropdown--name" }, selected.value))));
    const items = levels.map(({ value, display, hex }) => (react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: value, id: value, value: value, onClick: () => onClickLevel(type, value), testID: `levels--dropdown-item ${value}` },
        react_default.a.createElement("div", { className: "color-dropdown--item" },
            react_default.a.createElement("div", { className: "color-dropdown--swatch", style: { backgroundColor: hex } }),
            react_default.a.createElement("div", { className: "color-dropdown--name" }, display)))));
    const menu = onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { theme: clockface_dist["DropdownMenuTheme"].Onyx, onCollapse: onCollapse }, items));
    return (react_default.a.createElement(clockface_dist["Dropdown"], { button: button, menu: menu, testID: `levels--dropdown ${type}` }));
};
/* harmony default export */ var components_RuleLevelsDropdown = (RuleLevelsDropdown);

// CONCATENATED MODULE: ./src/notifications/rules/components/RuleOverlay.reducer.tsx


const RuleOverlay_reducer_reducer = (state, action) => {
    switch (action.type) {
        case 'UPDATE_RULE': {
            const { rule } = action;
            return Object.assign(Object.assign({}, state), rule);
        }
        case 'SET_ACTIVE_SCHEDULE': {
            const { schedule } = action;
            let newState = state;
            if (schedule === 'every') {
                newState = Object(lodash["omit"])(state, 'cron');
            }
            if (schedule === 'cron') {
                newState = Object(lodash["omit"])(state, 'every');
            }
            return Object.assign(Object.assign({}, newState), { [schedule]: '' });
        }
        case 'UPDATE_STATUS_RULES': {
            const { statusRule } = action;
            const statusRules = state.statusRules.map(s => {
                if (s.cid !== statusRule.cid) {
                    return s;
                }
                return statusRule;
            });
            return Object.assign(Object.assign({}, state), { statusRules });
        }
        case 'ADD_TAG_RULE': {
            const { tagRule } = action;
            return Object.assign(Object.assign({}, state), { tagRules: [...state.tagRules, Object.assign(Object.assign({}, tagRule), { id: Object(uuid["v4"])() })] });
        }
        case 'UPDATE_TAG_RULES': {
            const { tagRule } = action;
            const tagRules = state.tagRules.map(t => {
                if (t.cid !== tagRule.cid) {
                    return t;
                }
                return tagRule;
            });
            return Object.assign(Object.assign({}, state), { tagRules });
        }
        case 'DELETE_STATUS_RULE': {
            const { statusRuleID } = action;
            const statusRules = state.statusRules.filter(s => {
                return s.cid !== statusRuleID;
            });
            return Object.assign(Object.assign({}, state), { statusRules });
        }
        case 'DELETE_TAG_RULE': {
            const { tagRuleID } = action;
            const tagRules = state.tagRules.filter(tr => {
                return tr.cid !== tagRuleID;
            });
            return Object.assign(Object.assign({}, state), { tagRules });
        }
        case 'UPDATE_STATUS_LEVEL': {
            const { levelType, level, statusID } = action;
            const statusRules = state.statusRules.map(status => {
                if (status.cid !== statusID) {
                    return status;
                }
                const value = Object.assign(Object.assign({}, status.value), { [levelType]: level });
                return Object.assign(Object.assign({}, status), { value });
            });
            return Object.assign(Object.assign({}, state), { statusRules });
        }
        case 'SET_TAG_RULE_OPERATOR': {
            const { tagRuleID, operator } = action;
            const tagRules = state.tagRules.map(tagRule => {
                if (tagRule.cid !== tagRuleID) {
                    return tagRule;
                }
                return Object.assign(Object.assign({}, tagRule), { value: Object.assign(Object.assign({}, tagRule.value), { operator }) });
            });
            return Object.assign(Object.assign({}, state), { tagRules });
        }
        default:
            const neverAction = action;
            throw new Error(`Unhandled action "${neverAction.type}" in RuleOverlay.reducer.ts`);
    }
};

// CONCATENATED MODULE: ./src/notifications/rules/components/RuleOverlayProvider.tsx


const RuleStateContext = Object(react["createContext"])(null);
const RuleDispatchContext = Object(react["createContext"])(null);
const useRuleState = () => {
    return Object(react["useContext"])(RuleStateContext);
};
const useRuleDispatch = () => {
    return Object(react["useContext"])(RuleDispatchContext);
};
const RuleOverlayProvider = ({ initialState, children, }) => {
    const prevInitialStateRef = Object(react["useRef"])(initialState);
    const [state, dispatch] = Object(react["useReducer"])((state, action) => {
        if (prevInitialStateRef.current !== initialState) {
            prevInitialStateRef.current = initialState;
            return initialState;
        }
        return RuleOverlay_reducer_reducer(state, action);
    }, initialState);
    return (react_default.a.createElement(RuleStateContext.Provider, { value: state },
        react_default.a.createElement(RuleDispatchContext.Provider, { value: dispatch }, children)));
};
/* harmony default export */ var components_RuleOverlayProvider = (RuleOverlayProvider);

// CONCATENATED MODULE: ./src/notifications/rules/components/StatusChangeDropdown.tsx




const StatusChangeDropdown = ({ status }) => {
    const dispatch = useRuleDispatch();
    const statusChange = (s, c) => dispatch({
        type: 'UPDATE_STATUS_RULES',
        statusRule: Object(rules_utils["c" /* changeStatusRule */])(s, c),
    });
    const items = rules_utils["a" /* CHANGES */].map(change => (react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: change, id: change, value: change, testID: `status-change--dropdown-item ${change}`, onClick: () => statusChange(status, change) }, change)));
    const buttonText = Object(rules_utils["b" /* activeChange */])(status);
    const button = (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { testID: "status-change--dropdown--button", active: active, onClick: onClick }, buttonText));
    const menu = onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse }, items));
    return (react_default.a.createElement(clockface_dist["Dropdown"], { button: button, menu: menu, testID: "status-change--dropdown" }));
};
/* harmony default export */ var components_StatusChangeDropdown = (StatusChangeDropdown);

// CONCATENATED MODULE: ./src/notifications/rules/components/StatusLevels.tsx





const StatusLevels = ({ status }) => {
    const { currentLevel, previousLevel } = status.value;
    const dispatch = useRuleDispatch();
    const onClickLevel = (levelType, level) => {
        dispatch({
            type: 'UPDATE_STATUS_LEVEL',
            statusID: status.cid,
            levelType,
            level,
        });
    };
    return (react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, margin: clockface_dist["ComponentSize"].Small },
        react_default.a.createElement(clockface_dist["TextBlock"], { text: "When status" }),
        react_default.a.createElement(clockface_dist["FlexBox"].Child, { grow: 0, basis: 140 },
            react_default.a.createElement(components_StatusChangeDropdown, { status: status })),
        !!previousLevel && (react_default.a.createElement(clockface_dist["FlexBox"].Child, { grow: 0, basis: 140 },
            react_default.a.createElement(components_RuleLevelsDropdown, { type: "previousLevel", selectedLevel: previousLevel, otherLevel: currentLevel, onClickLevel: onClickLevel }))),
        !!previousLevel && react_default.a.createElement(clockface_dist["TextBlock"], { text: "to" }),
        react_default.a.createElement(clockface_dist["FlexBox"].Child, { grow: 0, basis: 140 },
            react_default.a.createElement(components_RuleLevelsDropdown, { type: "currentLevel", selectedLevel: currentLevel, otherLevel: previousLevel, onClickLevel: onClickLevel }))));
};
/* harmony default export */ var components_StatusLevels = (StatusLevels);

// CONCATENATED MODULE: ./src/notifications/rules/components/StatusRule.tsx



const StatusRuleComponent = ({ status }) => {
    return (react_default.a.createElement(clockface_dist["Panel"], { testID: "status-rule" },
        react_default.a.createElement(clockface_dist["Panel"].Body, { size: clockface_dist["ComponentSize"].ExtraSmall },
            react_default.a.createElement(components_StatusLevels, { status: status }))));
};
/* harmony default export */ var StatusRule = (StatusRuleComponent);

// CONCATENATED MODULE: ./src/notifications/rules/components/TagRuleOperatorDropdown.tsx


const operators = [
    { operator: 'equal', display: '==' },
];
const TagRuleOperatorDropdown = ({ selectedOperator, onSelect }) => {
    const items = operators.map(({ operator, display }) => (react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: operator, id: operator, value: display, testID: `tag-rule--dropdown-item ${operator}`, onClick: () => onSelect(operator) }, display)));
    const buttonText = operators.find(o => o.operator === selectedOperator);
    const button = (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { testID: "tag-rule--dropdown--button", active: active, onClick: onClick }, buttonText.display));
    const menu = onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse }, items));
    return react_default.a.createElement(clockface_dist["Dropdown"], { menu: menu, button: button, testID: "tag-rule--dropdown" });
};
/* harmony default export */ var components_TagRuleOperatorDropdown = (TagRuleOperatorDropdown);

// CONCATENATED MODULE: ./src/notifications/rules/components/TagRule.tsx




const TagRule = ({ tagRule }) => {
    const { key, value, operator } = tagRule.value;
    const dispatch = useRuleDispatch();
    const onChange = ({ target }) => {
        const { name, value } = target;
        const newValue = Object.assign(Object.assign({}, tagRule.value), { [name]: value });
        dispatch({
            type: 'UPDATE_TAG_RULES',
            tagRule: Object.assign(Object.assign({}, tagRule), { value: newValue }),
        });
    };
    const onSelectOperator = (operator) => {
        dispatch({
            type: 'SET_TAG_RULE_OPERATOR',
            tagRuleID: tagRule.cid,
            operator,
        });
    };
    const onDelete = () => {
        dispatch({
            type: 'DELETE_TAG_RULE',
            tagRuleID: tagRule.cid,
        });
    };
    return (react_default.a.createElement(clockface_dist["Panel"], { testID: "tag-rule" },
        react_default.a.createElement(clockface_dist["DismissButton"], { onClick: onDelete, color: clockface_dist["ComponentColor"].Default }),
        react_default.a.createElement(clockface_dist["Panel"].Body, { size: clockface_dist["ComponentSize"].ExtraSmall },
            react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Row, margin: clockface_dist["ComponentSize"].Small },
                react_default.a.createElement(clockface_dist["TextBlock"], { text: "AND", textColor: clockface_dist["InfluxColors"].Honeydew, backgroundColor: clockface_dist["InfluxColors"].Pepper }),
                react_default.a.createElement(clockface_dist["TextBlock"], { text: "When" }),
                react_default.a.createElement(clockface_dist["FlexBox"].Child, { grow: 1 },
                    react_default.a.createElement(clockface_dist["Input"], { testID: "tag-rule-key--input", placeholder: "Tag", value: key, name: "key", onChange: onChange })),
                react_default.a.createElement(clockface_dist["FlexBox"].Child, { grow: 0, basis: 60 },
                    react_default.a.createElement(components_TagRuleOperatorDropdown, { selectedOperator: operator, onSelect: onSelectOperator })),
                react_default.a.createElement(clockface_dist["FlexBox"].Child, { grow: 1 },
                    react_default.a.createElement(clockface_dist["Input"], { testID: "tag-rule-key--input", placeholder: "Value", value: value, name: "value", onChange: onChange }))))));
};
/* harmony default export */ var components_TagRule = (TagRule);

// CONCATENATED MODULE: ./src/notifications/rules/components/RuleConditions.tsx







const RuleConditions = ({ rule }) => {
    const dispatch = useRuleDispatch();
    const { statusRules, tagRules } = rule;
    const addTagRule = () => {
        dispatch({
            type: 'ADD_TAG_RULE',
            tagRule: Object(rules_utils["g" /* newTagRuleDraft */])(),
        });
    };
    const statuses = statusRules.map(status => (react_default.a.createElement(StatusRule, { key: status.cid, status: status })));
    const tags = tagRules.map(tagRule => (react_default.a.createElement(components_TagRule, { key: tagRule.cid, tagRule: tagRule })));
    return (react_default.a.createElement(clockface_dist["Grid"].Row, null,
        react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Two }, "Conditions"),
        react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Ten },
            react_default.a.createElement(clockface_dist["FlexBox"], { direction: clockface_dist["FlexDirection"].Column, margin: clockface_dist["ComponentSize"].Small, alignItems: clockface_dist["AlignItems"].Stretch },
                statuses,
                tags,
                react_default.a.createElement(dashed_button_DashedButton, { text: "+ Tag Filter", onClick: addTagRule, color: clockface_dist["ComponentColor"].Primary, size: clockface_dist["ComponentSize"].Small }))),
        react_default.a.createElement(clockface_dist["Grid"].Column, null,
            react_default.a.createElement("hr", null))));
};
/* harmony default export */ var components_RuleConditions = (RuleConditions);

// CONCATENATED MODULE: ./src/notifications/rules/components/RuleEndpointDropdown.tsx



const RuleEndpointDropdown = ({ endpoints, selectedEndpointID, onSelectEndpoint, }) => {
    if (!endpoints.length) {
        const button = () => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { status: clockface_dist["ComponentStatus"].Disabled, onClick: () => { } }, "No Endpoints Found"));
        const menu = () => null;
        return react_default.a.createElement(clockface_dist["Dropdown"], { button: button, style: { width: '160px' }, menu: menu });
    }
    const items = endpoints.map(({ id, name }) => (react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: id, id: id, value: id, testID: `endpoint--dropdown-item ${id}`, onClick: () => onSelectEndpoint(id) }, name)));
    const selectedEndpoint = endpoints.find(e => e.id === selectedEndpointID) || endpoints[0];
    const button = (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { testID: "endpoint--dropdown--button", active: active, onClick: onClick }, Object(lodash["get"])(selectedEndpoint, 'name')));
    const menu = onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse }, items));
    return (react_default.a.createElement(clockface_dist["Dropdown"], { button: button, menu: menu, style: { width: '160px' }, testID: "endpoint-change--dropdown" }));
};
/* harmony default export */ var components_RuleEndpointDropdown = (RuleEndpointDropdown);

// CONCATENATED MODULE: ./src/notifications/rules/components/SlackMessage.tsx


const SlackMessage = ({ messageTemplate, onChange }) => {
    return (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Message Template" },
            react_default.a.createElement(clockface_dist["TextArea"], { name: "messageTemplate", testID: "slack-message-template--textarea", value: messageTemplate, onChange: onChange, rows: 3 }))));
};
/* harmony default export */ var components_SlackMessage = (SlackMessage);

// CONCATENATED MODULE: ./src/notifications/rules/components/SMTPMessage.tsx


const SMTPMessage = ({ to, subjectTemplate, bodyTemplate, onChange, }) => {
    return (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "To" },
            react_default.a.createElement(clockface_dist["Input"], { value: to, name: "to", onChange: onChange })),
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Subject" },
            react_default.a.createElement(clockface_dist["Input"], { value: subjectTemplate, name: "subjectTemplate", onChange: onChange })),
        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Body" },
            react_default.a.createElement(clockface_dist["TextArea"], { name: "bodyTemplate", value: bodyTemplate, onChange: onChange, rows: 3 }))));
};
/* harmony default export */ var components_SMTPMessage = (SMTPMessage);

// CONCATENATED MODULE: ./src/notifications/rules/components/PagerDutyMessage.tsx


const PagerDutyMessage = ({ messageTemplate, onChange }) => {
    return (react_default.a.createElement(clockface_dist["Form"].Element, { label: "Message Template" },
        react_default.a.createElement(clockface_dist["TextArea"], { name: "messageTemplate", onChange: onChange, value: messageTemplate, rows: 3 })));
};
/* harmony default export */ var components_PagerDutyMessage = (PagerDutyMessage);

// CONCATENATED MODULE: ./src/notifications/rules/components/RuleMessageContents.tsx





const RuleMessageContents = ({ rule }) => {
    const dispatch = useRuleDispatch();
    const onChange = ({ target }) => {
        const { name, value } = target;
        dispatch({
            type: 'UPDATE_RULE',
            rule: Object.assign(Object.assign({}, rule), { [name]: value }),
        });
    };
    switch (rule.type) {
        case 'slack': {
            const { messageTemplate, channel } = rule;
            return (react_default.a.createElement(components_SlackMessage, { messageTemplate: messageTemplate, channel: channel, onChange: onChange }));
        }
        case 'smtp': {
            const { to, subjectTemplate, bodyTemplate } = rule;
            return (react_default.a.createElement(components_SMTPMessage, { to: to, onChange: onChange, bodyTemplate: bodyTemplate, subjectTemplate: subjectTemplate }));
        }
        case 'pagerduty': {
            const { messageTemplate } = rule;
            return (react_default.a.createElement(components_PagerDutyMessage, { messageTemplate: messageTemplate, onChange: onChange }));
        }
        case 'http': {
            return react_default.a.createElement(react_default.a.Fragment, null);
        }
        default:
            throw new Error('Unexpected endpoint type in <RuleMessageContents/>.');
    }
};
/* harmony default export */ var components_RuleMessageContents = (RuleMessageContents);

// CONCATENATED MODULE: ./src/notifications/rules/components/RuleMessage.tsx









const RuleMessage = ({ endpoints, rule }) => {
    const dispatch = useRuleDispatch();
    const onSelectEndpoint = endpointID => {
        dispatch({
            type: 'UPDATE_RULE',
            rule: Object.assign(Object.assign(Object.assign({}, rule), Object(rules_utils["e" /* getRuleVariantDefaults */])(endpoints, endpointID)), { endpointID }),
        });
    };
    Object(react["useEffect"])(() => {
        if (!rule.endpointID && endpoints.length) {
            onSelectEndpoint(endpoints[0].id);
        }
    }, []);
    return (react_default.a.createElement(clockface_dist["Grid"].Row, null,
        react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Two }, "Message"),
        react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Ten },
            react_default.a.createElement(clockface_dist["Panel"], null,
                react_default.a.createElement(clockface_dist["Panel"].Body, null,
                    react_default.a.createElement(clockface_dist["Form"].Element, { label: "Notification Endpoint" },
                        react_default.a.createElement(components_RuleEndpointDropdown, { endpoints: endpoints, onSelectEndpoint: onSelectEndpoint, selectedEndpointID: rule.endpointID })),
                    react_default.a.createElement(components_RuleMessageContents, { rule: rule }))))));
};
const RuleMessage_mstp = (state) => {
    const endpoints = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].NotificationEndpoints);
    return {
        endpoints,
    };
};
/* harmony default export */ var components_RuleMessage = (Object(es["b" /* connect */])(RuleMessage_mstp)(RuleMessage));

// CONCATENATED MODULE: ./src/notifications/rules/components/RuleOverlayFooter.tsx




const RuleOverlayFooter = ({ saveButtonText, onSave }) => {
    const rule = useRuleState();
    const [saveStatus, setSaveStatus] = Object(react["useState"])(types["RemoteDataState"].NotStarted);
    const [errorMessage, setErrorMessage] = Object(react["useState"])(null);
    const handleSave = async () => {
        if (saveStatus === types["RemoteDataState"].Loading) {
            return;
        }
        try {
            setSaveStatus(types["RemoteDataState"].Loading);
            setErrorMessage(null);
            await onSave(rule);
        }
        catch (e) {
            setSaveStatus(types["RemoteDataState"].Error);
            setErrorMessage(e.message);
        }
    };
    const buttonStatus = saveStatus === types["RemoteDataState"].Loading
        ? clockface_dist["ComponentStatus"].Loading
        : clockface_dist["ComponentStatus"].Default;
    return (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement(clockface_dist["Grid"].Row, null,
            react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
                errorMessage && (react_default.a.createElement("div", { className: "rule-overlay-footer--error" }, errorMessage)),
                react_default.a.createElement(clockface_dist["Form"].Footer, { className: "rule-overlay-footer" },
                    react_default.a.createElement(clockface_dist["Button"], { testID: "rule-overlay-save--button", text: saveButtonText, onClick: handleSave, color: clockface_dist["ComponentColor"].Primary, status: buttonStatus }))))));
};
/* harmony default export */ var components_RuleOverlayFooter = (RuleOverlayFooter);

// CONCATENATED MODULE: ./src/notifications/rules/components/RuleOverlayContents.tsx







const RuleOverlayContents = ({ saveButtonText, onSave }) => {
    const rule = useRuleState();
    const dispatch = useRuleDispatch();
    const handleChange = e => {
        const { name, value } = e.target;
        dispatch({
            type: 'UPDATE_RULE',
            rule: Object.assign(Object.assign({}, rule), { [name]: value }),
        });
    };
    const handleChangeParameter = (key) => (value) => {
        dispatch({
            type: 'UPDATE_RULE',
            rule: Object.assign(Object.assign({}, rule), { [key]: value }),
        });
    };
    return (react_default.a.createElement(clockface_dist["Grid"], null,
        react_default.a.createElement(clockface_dist["Form"], null,
            react_default.a.createElement(clockface_dist["Grid"].Row, null,
                react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Two }, "About"),
                react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Ten },
                    react_default.a.createElement(clockface_dist["Panel"], null,
                        react_default.a.createElement(clockface_dist["Panel"].Body, { size: clockface_dist["ComponentSize"].ExtraSmall },
                            react_default.a.createElement(clockface_dist["Form"].Element, { label: "Name" },
                                react_default.a.createElement(clockface_dist["Input"], { testID: "rule-name--input", placeholder: "Name this new rule", value: rule.name, name: "name", onChange: handleChange })),
                            react_default.a.createElement(components_RuleSchedule, { rule: rule, onChange: handleChangeParameter })))),
                react_default.a.createElement(clockface_dist["Grid"].Column, null,
                    react_default.a.createElement("hr", null))),
            react_default.a.createElement(components_RuleConditions, { rule: rule }),
            react_default.a.createElement(components_RuleMessage, { rule: rule }),
            react_default.a.createElement(components_RuleOverlayFooter, { saveButtonText: saveButtonText, onSave: onSave }))));
};
/* harmony default export */ var components_RuleOverlayContents = (RuleOverlayContents);

// CONCATENATED MODULE: ./src/notifications/rules/components/NewRuleOverlay.tsx








const NewRuleOverlay = ({ params: { orgID }, router, onCreateRule }) => {
    const handleDismiss = () => {
        router.push(`/orgs/${orgID}/alerting`);
    };
    const handleCreateRule = async (rule) => {
        await onCreateRule(rule);
        handleDismiss();
    };
    const initialState = Object(react["useMemo"])(() => Object(rules_utils["f" /* initRuleDraft */])(orgID), [orgID]);
    return (react_default.a.createElement(components_RuleOverlayProvider, { initialState: initialState },
        react_default.a.createElement(clockface_dist["Overlay"], { visible: true },
            react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 800 },
                react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Create a Notification Rule", onDismiss: handleDismiss, testID: "dismiss-overlay" }),
                react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                    react_default.a.createElement(components_RuleOverlayContents, { saveButtonText: "Create Notification Rule", onSave: handleCreateRule }))))));
};
const NewRuleOverlay_mdtp = {
    onCreateRule: rules_actions_thunks["c" /* createRule */],
};
/* harmony default export */ var components_NewRuleOverlay = (Object(es["b" /* connect */])(null, NewRuleOverlay_mdtp)(Object(react_router_es["g" /* withRouter */])(NewRuleOverlay)));

// CONCATENATED MODULE: ./src/notifications/rules/components/EditRuleOverlay.tsx











const EditRuleOverlay = ({ params, router, stateRule, onUpdateRule, onNotify, }) => {
    const handleDismiss = () => {
        router.push(`/orgs/${params.orgID}/alerting`);
    };
    if (!stateRule) {
        onNotify(Object(copy_notifications["sb" /* getNotificationRuleFailed */])(params.ruleID));
        handleDismiss();
        return null;
    }
    const handleUpdateRule = async (rule) => {
        await onUpdateRule(rule);
        handleDismiss();
    };
    return (react_default.a.createElement(components_RuleOverlayProvider, { initialState: stateRule },
        react_default.a.createElement(clockface_dist["Overlay"], { visible: true },
            react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 800 },
                react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Edit this Notification Rule", onDismiss: handleDismiss, testID: "dismiss-overlay" }),
                react_default.a.createElement(clockface_dist["Overlay"].Body, null,
                    react_default.a.createElement(components_RuleOverlayContents, { saveButtonText: "Save Changes", onSave: handleUpdateRule }))))));
};
const EditRuleOverlay_mstp = (state, { params }) => {
    const { ruleID } = params;
    const stateRule = Object(resources_selectors["b" /* getByID */])(state, types["ResourceType"].NotificationRules, ruleID);
    return {
        stateRule,
    };
};
const EditRuleOverlay_mdtp = {
    onNotify: actions_notifications["c" /* notify */],
    onUpdateRule: rules_actions_thunks["g" /* updateRule */],
};
/* harmony default export */ var components_EditRuleOverlay = (Object(es["b" /* connect */])(EditRuleOverlay_mstp, EditRuleOverlay_mdtp)(Object(react_router_es["g" /* withRouter */])(EditRuleOverlay)));

// CONCATENATED MODULE: ./src/notifications/endpoints/components/EndpointOverlay.reducer.ts


const EndpointOverlay_reducer_reducer = (state, action) => {
    switch (action.type) {
        case 'UPDATE_ENDPOINT': {
            const { endpoint } = action;
            return Object.assign(Object.assign({}, state), endpoint);
        }
        case 'UPDATE_ENDPOINT_TYPE': {
            const { endpoint } = action;
            if (state.type != endpoint.type) {
                const baseProps = Object(lodash["omit"])(endpoint, [
                    'url',
                    'token',
                    'username',
                    'password',
                    'method',
                    'authMethod',
                    'contentTemplate',
                    'headers',
                    'clientURL',
                    'routingKey',
                ]);
                switch (endpoint.type) {
                    case 'pagerduty':
                        return Object.assign(Object.assign({}, baseProps), { type: 'pagerduty', clientURL: `${location.origin}/orgs/${baseProps.orgID}/alert-history`, routingKey: '' });
                    case 'http':
                        return Object.assign(Object.assign({}, baseProps), { type: 'http', method: 'POST', authMethod: 'none', url: alerting_constants["i" /* DEFAULT_ENDPOINT_URLS */].http });
                    case 'slack':
                        return Object.assign(Object.assign({}, baseProps), { type: 'slack', url: alerting_constants["i" /* DEFAULT_ENDPOINT_URLS */].slack, token: '' });
                }
            }
            return state;
        }
        case 'DELETE_ENDPOINT': {
            return state;
        }
        default:
            const neverAction = action;
            throw new Error(`Unhandled action "${neverAction.type}" in EndpointsOverlay.reducer.ts`);
    }
};

// CONCATENATED MODULE: ./src/notifications/endpoints/components/EndpointOverlayProvider.tsx


const EndpointStateContext = Object(react["createContext"])(null);
const EndpointDispatchContext = Object(react["createContext"])(null);
const EndpointOverlayProvider = ({ initialState, children, }) => {
    const prevInitialStateRef = Object(react["useRef"])(initialState);
    const [state, dispatch] = Object(react["useReducer"])((state, action) => {
        if (prevInitialStateRef.current !== initialState) {
            prevInitialStateRef.current = initialState;
            return initialState;
        }
        return EndpointOverlay_reducer_reducer(state, action);
    }, initialState);
    return (react_default.a.createElement(EndpointStateContext.Provider, { value: state },
        react_default.a.createElement(EndpointDispatchContext.Provider, { value: dispatch }, children)));
};
const useEndpointState = () => {
    return Object(react["useContext"])(EndpointStateContext);
};
const useEndpointDispatch = () => {
    return Object(react["useContext"])(EndpointDispatchContext);
};
const useEndpointReducer = () => {
    return [useEndpointState(), useEndpointDispatch()];
};

// CONCATENATED MODULE: ./src/notifications/endpoints/components/EndpointOptionsSlack.tsx


const EndpointOptionsSlack = ({ url, onChange }) => {
    return (react_default.a.createElement(clockface_dist["Panel"], null,
        react_default.a.createElement(clockface_dist["Panel"].Header, null,
            react_default.a.createElement("h4", null, "Slack Options")),
        react_default.a.createElement(clockface_dist["Panel"].Body, null,
            react_default.a.createElement(clockface_dist["Grid"], null,
                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
                        react_default.a.createElement(clockface_dist["FormElement"], { label: "Incoming Webhook URL" },
                            react_default.a.createElement(clockface_dist["Input"], { name: "url", value: url, testID: "slack-url", onChange: onChange }))))))));
};
/* harmony default export */ var components_EndpointOptionsSlack = (EndpointOptionsSlack);

// CONCATENATED MODULE: ./src/notifications/endpoints/components/EndpointOptionsPagerDuty.tsx


const EndpointOptionsPagerDuty = ({ clientURL, routingKey, onChange, }) => {
    return (react_default.a.createElement(clockface_dist["Panel"], null,
        react_default.a.createElement(clockface_dist["Panel"].Header, null,
            react_default.a.createElement("h4", null, "Pagerduty Options")),
        react_default.a.createElement(clockface_dist["Panel"].Body, null,
            react_default.a.createElement(clockface_dist["Grid"], null,
                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                    react_default.a.createElement(clockface_dist["Grid"].Column, null,
                        react_default.a.createElement(clockface_dist["FormElement"], { label: "Client URL" },
                            react_default.a.createElement(clockface_dist["Input"], { name: "clientURL", value: clientURL, testID: "pagerduty-url", onChange: onChange }))),
                    react_default.a.createElement(clockface_dist["Grid"].Column, null,
                        react_default.a.createElement(clockface_dist["FormElement"], { label: "Routing Key" },
                            react_default.a.createElement(clockface_dist["Input"], { name: "routingKey", value: routingKey, testID: "pagerduty-routing-key", onChange: onChange, type: clockface_dist["InputType"].Password }))))))));
};
/* harmony default export */ var components_EndpointOptionsPagerDuty = (EndpointOptionsPagerDuty);

// CONCATENATED MODULE: ./src/notifications/endpoints/components/MethodTypeDropdown.tsx


const MethodTypeDropdown_types = [{ name: 'POST', type: 'POST', id: 'POST' }];
const MethodTypeDropdown = ({ selectedType, onSelectType }) => {
    const items = MethodTypeDropdown_types.map(({ id, type, name }) => (react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: id, id: id, value: id, testID: `http-method--dropdown-item ${type}`, onClick: onSelectType }, name)));
    const selected = MethodTypeDropdown_types.find(t => t.type === selectedType);
    if (!selected) {
        throw new Error('Incorrect method type provided to <MethodTypeDropdown/>');
    }
    const button = (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { testID: "http-method--dropdown--button", active: active, onClick: onClick }, selected.name));
    const menu = onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse }, items));
    return (react_default.a.createElement(clockface_dist["Dropdown"], { button: button, menu: menu, testID: "http-method-change--dropdown" }));
};
/* harmony default export */ var components_MethodTypeDropdown = (MethodTypeDropdown);

// CONCATENATED MODULE: ./src/notifications/endpoints/components/AuthMethodTypeDropdown.tsx


const AuthMethodTypeDropdown_types = [
    { name: 'none', type: 'none', id: 'none' },
    { name: 'basic', type: 'basic', id: 'basic' },
    { name: 'bearer', type: 'bearer', id: 'bearer' },
];
const AuthMethodTypeDropdown = ({ selectedType, onSelectType }) => {
    const items = AuthMethodTypeDropdown_types.map(({ id, type, name }) => (react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: id, id: id, value: id, testID: `http-authMethod--dropdown-item ${type}`, onClick: onSelectType }, name)));
    const selected = AuthMethodTypeDropdown_types.find(t => t.type === selectedType);
    if (!selected) {
        throw new Error('Incorrect authMethod type provided to <AuthMethodTypeDropdown/>');
    }
    const button = (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { testID: "http-authMethod--dropdown--button", active: active, onClick: onClick }, selected.name));
    const menu = onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse }, items));
    return (react_default.a.createElement(clockface_dist["Dropdown"], { button: button, menu: menu, testID: "http-authMethod-change--dropdown" }));
};
/* harmony default export */ var components_AuthMethodTypeDropdown = (AuthMethodTypeDropdown);

// CONCATENATED MODULE: ./src/notifications/endpoints/components/EndpointOptionsHTTP.tsx




const EndpointOptionsHTTP = ({ url, onChange, token, username, password, method, authMethod, onChangeParameter, }) => {
    return (react_default.a.createElement(clockface_dist["Panel"], null,
        react_default.a.createElement(clockface_dist["Panel"].Header, null,
            react_default.a.createElement("h4", null, "HTTP Options")),
        react_default.a.createElement(clockface_dist["Panel"].Body, null,
            react_default.a.createElement(clockface_dist["Grid"], null,
                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Six },
                        react_default.a.createElement(clockface_dist["FormElement"], { label: "HTTP Method" },
                            react_default.a.createElement(components_MethodTypeDropdown, { onSelectType: onChangeParameter('method'), selectedType: method }))),
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Six },
                        react_default.a.createElement(clockface_dist["FormElement"], { label: "Auth Method" },
                            react_default.a.createElement(components_AuthMethodTypeDropdown, { onSelectType: onChangeParameter('authMethod'), selectedType: authMethod }))),
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
                        react_default.a.createElement(clockface_dist["FormElement"], { label: "URL" },
                            react_default.a.createElement(clockface_dist["Input"], { name: "url", value: url, onChange: onChange, required: true, testID: "http-url" }))),
                    authMethod === 'bearer' && (react_default.a.createElement(clockface_dist["Grid"].Column, { widthXS: clockface_dist["Columns"].Twelve },
                        react_default.a.createElement(clockface_dist["FormElement"], { label: "Token" },
                            react_default.a.createElement(clockface_dist["Input"], { name: "token", value: token, onChange: onChange, type: clockface_dist["InputType"].Password, testID: "http-bearer-token" })))),
                    authMethod === 'basic' && (react_default.a.createElement(react_default.a.Fragment, null,
                        react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Six },
                            react_default.a.createElement(clockface_dist["FormElement"], { label: "Username" },
                                react_default.a.createElement(clockface_dist["Input"], { name: "username", value: username, onChange: onChange, type: username && username.includes('secret: ')
                                        ? clockface_dist["InputType"].Password
                                        : clockface_dist["InputType"].Text, testID: "http-username" }))),
                        react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Six },
                            react_default.a.createElement(clockface_dist["FormElement"], { label: "Password" },
                                react_default.a.createElement(clockface_dist["Input"], { name: "password", value: password, type: clockface_dist["InputType"].Password, onChange: onChange, testID: "http-password" }))))))))));
};
/* harmony default export */ var components_EndpointOptionsHTTP = (EndpointOptionsHTTP);

// CONCATENATED MODULE: ./src/notifications/endpoints/components/EndpointOptions.tsx




const EndpointOptions = ({ endpoint, onChange, onChangeParameter, }) => {
    switch (endpoint.type) {
        case 'slack': {
            const { url } = endpoint;
            return react_default.a.createElement(components_EndpointOptionsSlack, { url: url, onChange: onChange });
        }
        case 'pagerduty': {
            const { clientURL, routingKey } = endpoint;
            return (react_default.a.createElement(components_EndpointOptionsPagerDuty, { clientURL: clientURL, routingKey: routingKey, onChange: onChange }));
        }
        case 'http': {
            const { url, token, username, password, method, authMethod, contentTemplate, } = endpoint;
            return (react_default.a.createElement(components_EndpointOptionsHTTP, { onChange: onChange, onChangeParameter: onChangeParameter, url: url, token: token, username: username, password: password, method: method, authMethod: authMethod, contentTemplate: contentTemplate }));
        }
        default:
            throw new Error(`Unknown endpoint type for endpoint: ${JSON.stringify(endpoint, null, 2)}`);
    }
};
/* harmony default export */ var components_EndpointOptions = (EndpointOptions);

// CONCATENATED MODULE: ./src/notifications/endpoints/components/EndpointTypeDropdown.tsx




const EndpointTypeDropdown_types = [
    { name: 'HTTP', type: 'http', id: 'http' },
    { name: 'Slack', type: 'slack', id: 'slack' },
    { name: 'Pagerduty', type: 'pagerduty', id: 'pagerduty' },
];
const EndpointTypeDropdown = ({ selectedType, onSelectType, blockedEndpoints, }) => {
    const items = EndpointTypeDropdown_types
        .filter(({ type }) => !blockedEndpoints.includes(type))
        .map(({ id, type, name }) => (react_default.a.createElement(clockface_dist["Dropdown"].Item, { key: id, id: id, value: id, testID: `endpoint--dropdown-item ${type}`, onClick: onSelectType }, name)));
    const selected = EndpointTypeDropdown_types.find(t => t.type === selectedType);
    if (!selected) {
        throw new Error('Incorrect endpoint type provided to <EndpointTypeDropdown/>');
    }
    const button = (active, onClick) => (react_default.a.createElement(clockface_dist["Dropdown"].Button, { testID: "endpoint--dropdown--button", active: active, onClick: onClick }, selected.name));
    const menu = onCollapse => (react_default.a.createElement(clockface_dist["Dropdown"].Menu, { onCollapse: onCollapse }, items));
    return (react_default.a.createElement(clockface_dist["Dropdown"], { button: button, menu: menu, testID: "endpoint-change--dropdown" }));
};
const EndpointTypeDropdown_mstp = ({ cloud: { limits } }) => {
    return {
        blockedEndpoints: Object(utils_limits["a" /* extractBlockedEndpoints */])(limits),
    };
};
/* harmony default export */ var components_EndpointTypeDropdown = (Object(es["b" /* connect */])(EndpointTypeDropdown_mstp)(EndpointTypeDropdown));

// CONCATENATED MODULE: ./src/notifications/endpoints/components/EndpointOverlayFooter.tsx




const EndpointOverlayFooter = ({ saveButtonText, onSave, onCancel, onSetErrorMessage, }) => {
    const endpoint = useEndpointState();
    const [saveStatus, setSaveStatus] = Object(react["useState"])(types["RemoteDataState"].NotStarted);
    const handleSave = () => {
        if (saveStatus === types["RemoteDataState"].Loading) {
            return;
        }
        try {
            setSaveStatus(types["RemoteDataState"].Loading);
            onSetErrorMessage(null);
            onSave(endpoint);
        }
        catch (e) {
            setSaveStatus(types["RemoteDataState"].Error);
            onSetErrorMessage(e.message);
        }
    };
    const buttonStatus = saveStatus === types["RemoteDataState"].Loading
        ? clockface_dist["ComponentStatus"].Loading
        : clockface_dist["ComponentStatus"].Default;
    return (react_default.a.createElement(clockface_dist["Overlay"].Footer, null,
        react_default.a.createElement(clockface_dist["Button"], { testID: "endpoint-cancel--button", onClick: onCancel, text: "Cancel" }),
        react_default.a.createElement(clockface_dist["Button"], { testID: "endpoint-save--button", onClick: handleSave, text: saveButtonText, status: buttonStatus, color: clockface_dist["ComponentColor"].Primary })));
};
/* harmony default export */ var components_EndpointOverlayFooter = (EndpointOverlayFooter);

// CONCATENATED MODULE: ./src/notifications/endpoints/components/EndpointOverlayContents.tsx






const EndpointOverlayContents = ({ onSave, saveButtonText, onCancel, }) => {
    const [endpoint, dispatch] = useEndpointReducer();
    const [errorMessage, setErrorMessage] = Object(react["useState"])(null);
    const handleChange = (e) => {
        const { name, value } = e.target;
        dispatch({
            type: 'UPDATE_ENDPOINT',
            endpoint: Object.assign(Object.assign({}, endpoint), { [name]: value }),
        });
    };
    const handleChangeParameter = (key) => (value) => {
        dispatch({
            type: 'UPDATE_ENDPOINT',
            endpoint: Object.assign(Object.assign({}, endpoint), { [key]: value }),
        });
    };
    const handleSelectType = (type) => {
        dispatch({
            type: 'UPDATE_ENDPOINT_TYPE',
            endpoint: Object.assign(Object.assign({}, endpoint), { type }),
        });
    };
    return (react_default.a.createElement(clockface_dist["Form"], null,
        react_default.a.createElement(clockface_dist["Overlay"].Body, null,
            react_default.a.createElement(clockface_dist["Grid"], null,
                react_default.a.createElement(clockface_dist["Grid"].Row, null,
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Six },
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Destination" },
                            react_default.a.createElement(components_EndpointTypeDropdown, { onSelectType: handleSelectType, selectedType: endpoint.type }))),
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Six },
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Name" },
                            react_default.a.createElement(clockface_dist["Input"], { testID: "endpoint-name--input", placeholder: "Name this endpoint", value: endpoint.name, name: "name", onChange: handleChange }))),
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Twelve },
                        react_default.a.createElement(clockface_dist["Form"].Element, { label: "Description" },
                            react_default.a.createElement(clockface_dist["TextArea"], { rows: 1, className: "endpoint-description--textarea", testID: "endpoint-description--textarea", name: "description", value: endpoint.description, onChange: handleChange }))),
                    react_default.a.createElement(clockface_dist["Grid"].Column, { widthSM: clockface_dist["Columns"].Twelve },
                        react_default.a.createElement(components_EndpointOptions, { endpoint: endpoint, onChange: handleChange, onChangeParameter: handleChangeParameter })),
                    react_default.a.createElement(clockface_dist["Grid"].Column, { style: {
                            display: 'flex',
                            justifyContent: 'center',
                            minHeight: '43px',
                        } }, errorMessage && (react_default.a.createElement(clockface_dist["Alert"], { color: clockface_dist["ComponentColor"].Danger, icon: clockface_dist["IconFont"].AlertTriangle, style: { width: 'auto', marginTop: '8px' } }, errorMessage)))))),
        react_default.a.createElement(components_EndpointOverlayFooter, { onSave: onSave, onCancel: onCancel, saveButtonText: saveButtonText, onSetErrorMessage: setErrorMessage })));
};
/* harmony default export */ var components_EndpointOverlayContents = (EndpointOverlayContents);

// CONCATENATED MODULE: ./src/notifications/endpoints/components/NewEndpointOverlay.tsx








const NewEndpointOverlay_NewRuleOverlay = ({ params, router, onCreateEndpoint }) => {
    const { orgID } = params;
    const handleDismiss = () => {
        router.push(`/orgs/${params.orgID}/alerting`);
    };
    const handleCreateEndpoint = (endpoint) => {
        onCreateEndpoint(endpoint);
        handleDismiss();
    };
    const initialState = Object(react["useMemo"])(() => (Object.assign(Object.assign({}, alerting_constants["o" /* NEW_ENDPOINT_DRAFT */]), { orgID })), [orgID]);
    return (react_default.a.createElement(EndpointOverlayProvider, { initialState: initialState },
        react_default.a.createElement(clockface_dist["Overlay"], { visible: true },
            react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 666 },
                react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Create a Notification Endpoint", onDismiss: handleDismiss }),
                react_default.a.createElement(components_EndpointOverlayContents, { onSave: handleCreateEndpoint, onCancel: handleDismiss, saveButtonText: "Create Notification Endpoint" })))));
};
const NewEndpointOverlay_mdtp = {
    onCreateEndpoint: endpoints_actions_thunks["c" /* createEndpoint */],
};
/* harmony default export */ var NewEndpointOverlay = (Object(es["b" /* connect */])(null, NewEndpointOverlay_mdtp)(Object(react_router_es["g" /* withRouter */])(NewEndpointOverlay_NewRuleOverlay)));

// CONCATENATED MODULE: ./src/notifications/endpoints/components/EditEndpointOverlay.tsx











const EditEndpointOverlay = ({ params, router, onUpdateEndpoint, onNotify, endpoint, }) => {
    const handleDismiss = () => {
        router.push(`/orgs/${params.orgID}/alerting`);
    };
    if (!endpoint) {
        onNotify(Object(copy_notifications["pb" /* getEndpointFailed */])(params.endpointID));
        handleDismiss();
        return null;
    }
    const handleEditEndpoint = (endpoint) => {
        onUpdateEndpoint(endpoint);
        handleDismiss();
    };
    return (react_default.a.createElement(EndpointOverlayProvider, { initialState: endpoint },
        react_default.a.createElement(clockface_dist["Overlay"], { visible: true },
            react_default.a.createElement(clockface_dist["Overlay"].Container, { maxWidth: 600 },
                react_default.a.createElement(clockface_dist["Overlay"].Header, { title: "Edit a Notification Endpoint", onDismiss: handleDismiss }),
                react_default.a.createElement(clockface_dist["Overlay"].Body, null),
                react_default.a.createElement(components_EndpointOverlayContents, { onSave: handleEditEndpoint, onCancel: handleDismiss, saveButtonText: "Edit Notification Endpoint" })))));
};
const EditEndpointOverlay_mdtp = {
    onUpdateEndpoint: endpoints_actions_thunks["g" /* updateEndpoint */],
    onNotify: actions_notifications["c" /* notify */],
};
const EditEndpointOverlay_mstp = (state, { params }) => {
    const endpoint = Object(resources_selectors["b" /* getByID */])(state, types["ResourceType"].NotificationEndpoints, params.endpointID);
    return { endpoint };
};
/* harmony default export */ var components_EditEndpointOverlay = (Object(react_router_es["g" /* withRouter */])(Object(es["b" /* connect */])(EditEndpointOverlay_mstp, EditEndpointOverlay_mdtp)(EditEndpointOverlay)));

// CONCATENATED MODULE: ./src/organizations/containers/NoOrgsPage.tsx




const NoOrgsPage = ({ router, me }) => {
    const handleClick = () => {
        router.push('/signin');
    };
    return (react_default.a.createElement(clockface_dist["FunnelPage"], null,
        react_default.a.createElement("div", { className: "cf-funnel-page--logo", "data-testid": "funnel-page--logo" },
            react_default.a.createElement("img", { src: "https://influxdata.github.io/branding/img/downloads/influxdata-logo--full--white-alpha.png", width: "170" })),
        react_default.a.createElement("h1", { className: "cf-funnel-page--title" }, "Whoops!"),
        react_default.a.createElement("p", { className: "cf-funnel-page--subtitle" },
            "You don't belong to an organization.",
            react_default.a.createElement("br", null),
            "Add user ",
            react_default.a.createElement("strong", null, `"${me.name}"`),
            " to an organization to continue"),
        react_default.a.createElement(clockface_dist["Button"], { text: "Sign In", color: clockface_dist["ComponentColor"].Primary, onClick: handleClick })));
};
const NoOrgsPage_mstp = ({ me }) => {
    return { me };
};
/* harmony default export */ var containers_NoOrgsPage = (Object(es["b" /* connect */])(NoOrgsPage_mstp)(Object(react_router_es["g" /* withRouter */])(NoOrgsPage)));

// CONCATENATED MODULE: ./src/overlays/components/RouteOverlay.tsx




class RouteOverlay_OverlayHandler extends react["Component"] {
    componentWillUnmount() {
        this.props.onDismissOverlay();
    }
    render() {
        const closer = () => {
            this.props.onClose(this.props.router);
        };
        const { overlayID, params, onShowOverlay } = this.props;
        onShowOverlay(overlayID, params, closer);
        return null;
    }
}
const RouteOverlay_mdtp = {
    onShowOverlay: showOverlay,
    onDismissOverlay: dismissOverlay,
};
/* harmony default export */ var RouteOverlay = (Object(es["b" /* connect */])(null, RouteOverlay_mdtp)(Object(react_router_es["g" /* withRouter */])(RouteOverlay_OverlayHandler)));
function RouteOverlay_RouteOverlay(WrappedComponent, overlayID, onClose) {
    return class extends react["Component"] {
        render() {
            return (react_default.a.createElement(WrappedComponent, Object.assign({}, this.props, { onClose: onClose, overlayID: overlayID })));
        }
    };
}

// EXTERNAL MODULE: ./src/style/chronograf.scss
var chronograf = __webpack_require__(1524);

// EXTERNAL MODULE: ./node_modules/@influxdata/clockface/dist/index.css
var _influxdata_clockface_dist = __webpack_require__(1525);

// CONCATENATED MODULE: ./src/index.tsx
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "store", function() { return src_store; });

























































































const AddNoteOverlay = RouteOverlay_RouteOverlay(RouteOverlay, 'add-note', router => {
    router.push(`/orgs/${router.params.orgID}/dashboards/${router.params.dashboardID}`);
});
const EditNoteOverlay = RouteOverlay_RouteOverlay(RouteOverlay, 'edit-note', router => {
    router.push(`/orgs/${router.params.orgID}/dashboards/${router.params.dashboardID}`);
});
const src_AllAccessTokenOverlay = RouteOverlay_RouteOverlay(RouteOverlay, 'add-master-token', router => {
    router.push(`/orgs/${router.params.orgID}/load-data/tokens`);
});
const src_BucketsTokenOverlay = RouteOverlay_RouteOverlay(RouteOverlay, 'add-token', router => {
    router.push(`/orgs/${router.params.orgID}/load-data/tokens`);
});
const src_TelegrafConfigOverlay = RouteOverlay_RouteOverlay(RouteOverlay, 'telegraf-config', router => {
    router.push(`/orgs/${router.params.orgID}/load-data/telegrafs`);
});
const src_TelegrafOutputOverlay = RouteOverlay_RouteOverlay(RouteOverlay, 'telegraf-output', router => {
    router.push(`/orgs/${router.params.orgID}/load-data/telegrafs`);
});



const rootNode = Object(nodes["a" /* getRootNode */])();
const src_basepath = Object(basepath["b" /* getBrowserBasepath */])();
window.basepath = src_basepath;
const src_history = Object(react_router_es["f" /* useRouterHistory */])(history_lib["createHistory"])({
    basename: src_basepath,
});
const src_store = configureStore(loadLocalStorage(), src_history);
const { dispatch: src_dispatch } = src_store;
if (window['Cypress']) {
    window['store'] = src_store;
}
src_history.listen(() => {
    src_dispatch(disablePresentationMode());
});
window.addEventListener('keyup', event => {
    const escapeKeyCode = 27;
    if (event.key === 'Escape' || event.keyCode === escapeKeyCode) {
        src_dispatch(disablePresentationMode());
    }
});
class src_Root extends react["PureComponent"] {
    render() {
        return (react_default.a.createElement(es["a" /* Provider */], { store: src_store },
            react_default.a.createElement(react_router_es["d" /* Router */], { history: src_history },
                react_default.a.createElement(react_router_es["c" /* Route */], { component: containers_GetLinks },
                    react_default.a.createElement(react_router_es["c" /* Route */], { component: src_Setup },
                        react_default.a.createElement(react_router_es["c" /* Route */], { path: "/onboarding" },
                            react_default.a.createElement(react_router_es["c" /* Route */], { path: ":stepID", component: containers_OnboardingWizardPage }),
                            react_default.a.createElement(react_router_es["c" /* Route */], { path: ":stepID/:substepID", component: containers_OnboardingWizardPage }),
                            react_default.a.createElement(react_router_es["c" /* Route */], { component: UnauthenticatedApp },
                                react_default.a.createElement(react_router_es["c" /* Route */], { path: "/signin", component: containers_SigninPage }),
                                react_default.a.createElement(react_router_es["c" /* Route */], { path: "/logout", component: src_Logout }))),
                        react_default.a.createElement(react_router_es["c" /* Route */], { component: src_Signin },
                            react_default.a.createElement(react_router_es["c" /* Route */], { component: containers_GetMe },
                                react_default.a.createElement(react_router_es["c" /* Route */], { component: containers_GetOrganizations },
                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "/" },
                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: "no-orgs", component: containers_NoOrgsPage }),
                                        react_default.a.createElement(react_router_es["a" /* IndexRoute */], { component: containers_RouteToOrg }),
                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: "orgs", component: src_App },
                                            react_default.a.createElement(react_router_es["c" /* Route */], { path: "new", component: components_CreateOrgOverlay }),
                                            react_default.a.createElement(react_router_es["c" /* Route */], { path: ":orgID", component: containers_SetOrg },
                                                react_default.a.createElement(react_router_es["a" /* IndexRoute */], { component: containers_MePage }),
                                                react_default.a.createElement(react_router_es["c" /* Route */], { path: "tasks", component: containers_TasksPage },
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: ":id/export", component: components_TaskExportOverlay }),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "import", component: components_TaskImportOverlay }),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "import/template", component: components_TaskImportFromTemplateOverlay })),
                                                react_default.a.createElement(react_router_es["c" /* Route */], { path: "tasks/:id/runs", component: components_TaskRunsPage }),
                                                react_default.a.createElement(react_router_es["c" /* Route */], { path: "tasks/new", component: containers_TaskPage }),
                                                react_default.a.createElement(react_router_es["c" /* Route */], { path: "tasks/:id", component: containers_TaskEditPage }),
                                                react_default.a.createElement(react_router_es["c" /* Route */], { path: "data-explorer", component: components_DataExplorerPage },
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "save", component: components_SaveAsOverlay }),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "delete-data", component: dataExplorer_components_DeleteDataOverlay })),
                                                react_default.a.createElement(react_router_es["c" /* Route */], { path: "dashboards", component: DashboardsIndex },
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "import", component: components_DashboardImportOverlay }),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "import/template", component: CreateFromTemplateOverlay }),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: ":dashboardID/export", component: components_DashboardExportOverlay })),
                                                react_default.a.createElement(react_router_es["c" /* Route */], { path: "dashboards/:dashboardID", component: components_DashboardContainer },
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "cells" },
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: "new", component: NewVEO }),
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: ":cellID/edit", component: EditVEO })),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "notes" },
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: "new", component: AddNoteOverlay }),
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: ":cellID/edit", component: EditNoteOverlay }))),
                                                react_default.a.createElement(react_router_es["c" /* Route */], { path: "me", component: containers_MePage }),
                                                react_default.a.createElement(react_router_es["c" /* Route */], { path: "load-data" },
                                                    react_default.a.createElement(react_router_es["a" /* IndexRoute */], { component: containers_BucketsIndex }),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "tokens", component: containers_TokensIndex },
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: "generate" },
                                                            react_default.a.createElement(react_router_es["c" /* Route */], { path: "all-access", component: src_AllAccessTokenOverlay }),
                                                            react_default.a.createElement(react_router_es["c" /* Route */], { path: "buckets", component: src_BucketsTokenOverlay }))),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "buckets", component: containers_BucketsIndex },
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: ":bucketID" },
                                                            react_default.a.createElement(react_router_es["c" /* Route */], { path: "line-protocols/new", component: lineProtocolWizard_LineProtocolWizard }),
                                                            react_default.a.createElement(react_router_es["c" /* Route */], { path: "telegrafs/new", component: collectorsWizard_CollectorsWizard }),
                                                            react_default.a.createElement(react_router_es["c" /* Route */], { path: "scrapers/new", component: components_CreateScraperOverlay }),
                                                            react_default.a.createElement(react_router_es["c" /* Route */], { path: "edit", component: components_UpdateBucketOverlay }),
                                                            react_default.a.createElement(react_router_es["c" /* Route */], { path: "delete-data", component: components_DeleteDataOverlay }),
                                                            react_default.a.createElement(react_router_es["c" /* Route */], { path: "rename", component: components_RenameBucketOverlay }))),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "telegrafs", component: containers_TelegrafsPage },
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: ":id/view", component: src_TelegrafConfigOverlay }),
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: ":id/instructions", component: components_TelegrafInstructionsOverlay }),
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: "output", component: src_TelegrafOutputOverlay }),
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: "new", component: collectorsWizard_CollectorsWizard })),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "scrapers", component: containers_ScrapersIndex },
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: "new", component: components_CreateScraperOverlay })),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "client-libraries", component: containers_ClientLibrariesPage },
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: "csharp", component: components_ClientCSharpOverlay }),
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: "go", component: components_ClientGoOverlay }),
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: "java", component: components_ClientJavaOverlay }),
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: "javascript-node", component: components_ClientJSOverlay }),
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: "python", component: components_ClientPythonOverlay }),
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: "ruby", component: components_ClientRubyOverlay }))),
                                                react_default.a.createElement(react_router_es["c" /* Route */], { path: "settings" },
                                                    constants["e" /* CLOUD */] ? (react_default.a.createElement(react_router_es["a" /* IndexRoute */], { component: containers_VariablesIndex })) : (react_default.a.createElement(react_default.a.Fragment, null,
                                                        react_default.a.createElement(react_router_es["a" /* IndexRoute */], { component: containers_MembersIndex }),
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: "members", component: containers_MembersIndex }))),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "templates", component: containers_TemplatesIndex },
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: "import", component: components_TemplateImportOverlay }),
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: ":id/export", component: components_TemplateExportOverlay }),
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: ":id/view", component: TemplateViewOverlay }),
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: ":id/static/view", component: StaticTemplateViewOverlay })),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "variables", component: containers_VariablesIndex },
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: "import", component: components_VariableImportOverlay }),
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: ":id/export", component: components_VariableExportOverlay }),
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: "new", component: components_CreateVariableOverlay }),
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: ":id/rename", component: components_RenameVariableOverlay }),
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: ":id/edit", component: components_UpdateVariableOverlay })),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "labels", component: containers_LabelsIndex }),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "profile", component: containers_OrgProfilePage },
                                                        react_default.a.createElement(react_router_es["c" /* Route */], { path: "rename", component: components_RenameOrgOverlay }))),
                                                react_default.a.createElement(react_router_es["c" /* Route */], { path: "alerting", component: components_AlertingIndex },
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "checks/new-threshold", component: NewThresholdCheckEO }),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "checks/new-deadman", component: NewDeadmanCheckEO }),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "checks/:checkID/edit", component: EditCheckEO }),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "rules/new", component: components_NewRuleOverlay }),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "rules/:ruleID/edit", component: components_EditRuleOverlay }),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "endpoints/new", component: NewEndpointOverlay }),
                                                    react_default.a.createElement(react_router_es["c" /* Route */], { path: "endpoints/:endpointID/edit", component: components_EditEndpointOverlay })),
                                                react_default.a.createElement(react_router_es["c" /* Route */], { path: "alert-history", component: components_AlertHistoryIndex }),
                                                react_default.a.createElement(react_router_es["c" /* Route */], { path: "checks/:checkID", component: components_CheckHistory }))))))))),
                react_default.a.createElement(react_router_es["c" /* Route */], { path: "*", component: components_NotFound }))));
    }
}
if (rootNode) {
    Object(react_dom["render"])(react_default.a.createElement(src_Root, null), rootNode);
}


/***/ }),

/***/ 100:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return isLimitError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return extractBucketLimits; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return extractBucketMax; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return extractBucketMaxRetentionSeconds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return extractDashboardLimits; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return extractDashboardMax; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return extractTaskLimits; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return extractTaskMax; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return extractChecksMax; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return extractRulesMax; });
/* unused harmony export extractBlockedRules */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return extractEndpointsMax; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return extractBlockedEndpoints; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return extractMonitoringLimitStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return extractLimitedMonitoringResources; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return extractRateLimitStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return extractRateLimitResources; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_cloud_constants_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(726);
/* harmony import */ var src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(72);



const isLimitError = (error) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(error, 'response.status', '') === src_cloud_constants_index__WEBPACK_IMPORTED_MODULE_1__[/* ASSET_LIMIT_ERROR_STATUS */ "a"];
};
const extractBucketLimits = (limits) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'buckets.limitStatus');
};
const extractBucketMax = (limits) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'buckets.maxAllowed') || Infinity;
};
const extractBucketMaxRetentionSeconds = (limits) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'buckets.maxRetentionSeconds', null);
};
const extractDashboardLimits = (limits) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'dashboards.limitStatus');
};
const extractDashboardMax = (limits) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'dashboards.maxAllowed') || Infinity;
};
const extractTaskLimits = (limits) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'tasks.limitStatus');
};
const extractTaskMax = (limits) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'tasks.maxAllowed') || Infinity;
};
const extractChecksMax = (limits) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'checks.maxAllowed') || Infinity;
};
const extractRulesMax = (limits) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'rules.maxAllowed') || Infinity;
};
const extractBlockedRules = (limits) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'rules.blocked') || [];
};
const extractEndpointsMax = (limits) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'endpoints.maxAllowed') || Infinity;
};
const extractBlockedEndpoints = (limits) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'endpoints.blocked') || [];
};
const extractMonitoringLimitStatus = (limits) => {
    const statuses = [
        Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'rules.limitStatus'),
        Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'endpoints.limitStatus'),
        Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'checks.limitStatus'),
    ];
    if (statuses.includes(src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_2__[/* LimitStatus */ "b"].EXCEEDED)) {
        return src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_2__[/* LimitStatus */ "b"].EXCEEDED;
    }
    return src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_2__[/* LimitStatus */ "b"].OK;
};
const extractLimitedMonitoringResources = (limits) => {
    const rateLimitedResources = [];
    if (Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'checks.limitStatus') === src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_2__[/* LimitStatus */ "b"].EXCEEDED) {
        rateLimitedResources.push('checks');
    }
    if (Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'rules.limitStatus') === src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_2__[/* LimitStatus */ "b"].EXCEEDED) {
        rateLimitedResources.push('rules');
    }
    if (Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'endpoints.limitStatus') === src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_2__[/* LimitStatus */ "b"].EXCEEDED) {
        rateLimitedResources.push('endpoints');
    }
    return rateLimitedResources.join(', ');
};
const extractRateLimitStatus = (limits) => {
    const statuses = [
        Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'rate.writeKBs.limitStatus'),
        Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'rate.readKBs.limitStatus'),
        Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'rate.cardinality.limitStatus'),
    ];
    if (statuses.includes(src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_2__[/* LimitStatus */ "b"].EXCEEDED)) {
        return src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_2__[/* LimitStatus */ "b"].EXCEEDED;
    }
    return src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_2__[/* LimitStatus */ "b"].OK;
};
const extractRateLimitResources = (limits) => {
    const rateLimitedResources = [];
    if (Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'rate.readKBs.limitStatus') === src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_2__[/* LimitStatus */ "b"].EXCEEDED) {
        rateLimitedResources.push('read');
    }
    if (Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'rate.writeKBs.limitStatus') === src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_2__[/* LimitStatus */ "b"].EXCEEDED) {
        rateLimitedResources.push('write');
    }
    if (Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(limits, 'rate.cardinality.limitStatus') === src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_2__[/* LimitStatus */ "b"].EXCEEDED) {
        rateLimitedResources.push('cardinality');
    }
    return rateLimitedResources;
};


/***/ }),

/***/ 1095:
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": 600,
	"./af.js": 600,
	"./ar": 601,
	"./ar-dz": 602,
	"./ar-dz.js": 602,
	"./ar-kw": 603,
	"./ar-kw.js": 603,
	"./ar-ly": 604,
	"./ar-ly.js": 604,
	"./ar-ma": 605,
	"./ar-ma.js": 605,
	"./ar-sa": 606,
	"./ar-sa.js": 606,
	"./ar-tn": 607,
	"./ar-tn.js": 607,
	"./ar.js": 601,
	"./az": 608,
	"./az.js": 608,
	"./be": 609,
	"./be.js": 609,
	"./bg": 610,
	"./bg.js": 610,
	"./bm": 611,
	"./bm.js": 611,
	"./bn": 612,
	"./bn.js": 612,
	"./bo": 613,
	"./bo.js": 613,
	"./br": 614,
	"./br.js": 614,
	"./bs": 615,
	"./bs.js": 615,
	"./ca": 616,
	"./ca.js": 616,
	"./cs": 617,
	"./cs.js": 617,
	"./cv": 618,
	"./cv.js": 618,
	"./cy": 619,
	"./cy.js": 619,
	"./da": 620,
	"./da.js": 620,
	"./de": 621,
	"./de-at": 622,
	"./de-at.js": 622,
	"./de-ch": 623,
	"./de-ch.js": 623,
	"./de.js": 621,
	"./dv": 624,
	"./dv.js": 624,
	"./el": 625,
	"./el.js": 625,
	"./en-au": 626,
	"./en-au.js": 626,
	"./en-ca": 627,
	"./en-ca.js": 627,
	"./en-gb": 628,
	"./en-gb.js": 628,
	"./en-ie": 629,
	"./en-ie.js": 629,
	"./en-il": 630,
	"./en-il.js": 630,
	"./en-nz": 631,
	"./en-nz.js": 631,
	"./eo": 632,
	"./eo.js": 632,
	"./es": 633,
	"./es-do": 634,
	"./es-do.js": 634,
	"./es-us": 635,
	"./es-us.js": 635,
	"./es.js": 633,
	"./et": 636,
	"./et.js": 636,
	"./eu": 637,
	"./eu.js": 637,
	"./fa": 638,
	"./fa.js": 638,
	"./fi": 639,
	"./fi.js": 639,
	"./fo": 640,
	"./fo.js": 640,
	"./fr": 641,
	"./fr-ca": 642,
	"./fr-ca.js": 642,
	"./fr-ch": 643,
	"./fr-ch.js": 643,
	"./fr.js": 641,
	"./fy": 644,
	"./fy.js": 644,
	"./gd": 645,
	"./gd.js": 645,
	"./gl": 646,
	"./gl.js": 646,
	"./gom-latn": 647,
	"./gom-latn.js": 647,
	"./gu": 648,
	"./gu.js": 648,
	"./he": 649,
	"./he.js": 649,
	"./hi": 650,
	"./hi.js": 650,
	"./hr": 651,
	"./hr.js": 651,
	"./hu": 652,
	"./hu.js": 652,
	"./hy-am": 653,
	"./hy-am.js": 653,
	"./id": 654,
	"./id.js": 654,
	"./is": 655,
	"./is.js": 655,
	"./it": 656,
	"./it.js": 656,
	"./ja": 657,
	"./ja.js": 657,
	"./jv": 658,
	"./jv.js": 658,
	"./ka": 659,
	"./ka.js": 659,
	"./kk": 660,
	"./kk.js": 660,
	"./km": 661,
	"./km.js": 661,
	"./kn": 662,
	"./kn.js": 662,
	"./ko": 663,
	"./ko.js": 663,
	"./ky": 664,
	"./ky.js": 664,
	"./lb": 665,
	"./lb.js": 665,
	"./lo": 666,
	"./lo.js": 666,
	"./lt": 667,
	"./lt.js": 667,
	"./lv": 668,
	"./lv.js": 668,
	"./me": 669,
	"./me.js": 669,
	"./mi": 670,
	"./mi.js": 670,
	"./mk": 671,
	"./mk.js": 671,
	"./ml": 672,
	"./ml.js": 672,
	"./mn": 673,
	"./mn.js": 673,
	"./mr": 674,
	"./mr.js": 674,
	"./ms": 675,
	"./ms-my": 676,
	"./ms-my.js": 676,
	"./ms.js": 675,
	"./mt": 677,
	"./mt.js": 677,
	"./my": 678,
	"./my.js": 678,
	"./nb": 679,
	"./nb.js": 679,
	"./ne": 680,
	"./ne.js": 680,
	"./nl": 681,
	"./nl-be": 682,
	"./nl-be.js": 682,
	"./nl.js": 681,
	"./nn": 683,
	"./nn.js": 683,
	"./pa-in": 684,
	"./pa-in.js": 684,
	"./pl": 685,
	"./pl.js": 685,
	"./pt": 686,
	"./pt-br": 687,
	"./pt-br.js": 687,
	"./pt.js": 686,
	"./ro": 688,
	"./ro.js": 688,
	"./ru": 689,
	"./ru.js": 689,
	"./sd": 690,
	"./sd.js": 690,
	"./se": 691,
	"./se.js": 691,
	"./si": 692,
	"./si.js": 692,
	"./sk": 693,
	"./sk.js": 693,
	"./sl": 694,
	"./sl.js": 694,
	"./sq": 695,
	"./sq.js": 695,
	"./sr": 696,
	"./sr-cyrl": 697,
	"./sr-cyrl.js": 697,
	"./sr.js": 696,
	"./ss": 698,
	"./ss.js": 698,
	"./sv": 699,
	"./sv.js": 699,
	"./sw": 700,
	"./sw.js": 700,
	"./ta": 701,
	"./ta.js": 701,
	"./te": 702,
	"./te.js": 702,
	"./tet": 703,
	"./tet.js": 703,
	"./tg": 704,
	"./tg.js": 704,
	"./th": 705,
	"./th.js": 705,
	"./tl-ph": 706,
	"./tl-ph.js": 706,
	"./tlh": 707,
	"./tlh.js": 707,
	"./tr": 708,
	"./tr.js": 708,
	"./tzl": 709,
	"./tzl.js": 709,
	"./tzm": 710,
	"./tzm-latn": 711,
	"./tzm-latn.js": 711,
	"./tzm.js": 710,
	"./ug-cn": 712,
	"./ug-cn.js": 712,
	"./uk": 713,
	"./uk.js": 713,
	"./ur": 714,
	"./ur.js": 714,
	"./uz": 715,
	"./uz-latn": 716,
	"./uz-latn.js": 716,
	"./uz.js": 715,
	"./vi": 717,
	"./vi.js": 717,
	"./x-pseudo": 718,
	"./x-pseudo.js": 718,
	"./yo": 719,
	"./yo.js": 719,
	"./zh-cn": 720,
	"./zh-cn.js": 720,
	"./zh-hk": 721,
	"./zh-hk.js": 721,
	"./zh-tw": 722,
	"./zh-tw.js": 722
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 1095;

/***/ }),

/***/ 11:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export ErrorHandlingWith */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ErrorHandling; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_shared_components_DefaultErrorMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(730);
/* harmony import */ var src_shared_utils_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(301);



function ErrorHandlingWith(Error) {
    return (constructor) => {
        class Wrapped extends constructor {
            constructor() {
                super(...arguments);
                this.error = null;
            }
            static get displayName() {
                return constructor.name;
            }
            componentDidCatch(error, errorInfo) {
                this.error = error;
                this.forceUpdate();
                Object(src_shared_utils_errors__WEBPACK_IMPORTED_MODULE_2__[/* reportError */ "b"])(error, { component: Object(src_shared_utils_errors__WEBPACK_IMPORTED_MODULE_2__[/* parseComponentName */ "a"])(errorInfo) });
            }
            render() {
                if (this.error) {
                    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Error, { error: this.error });
                }
                return super.render();
            }
        }
        return Wrapped;
    };
}
const ErrorHandling = ErrorHandlingWith(src_shared_components_DefaultErrorMessage__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]);


/***/ }),

/***/ 110:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export OSS_FLAGS */
/* unused harmony export CLOUD_FLAGS */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return isFlagEnabled; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FeatureFlag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getUserFlags; });
/* unused harmony export set */
/* unused harmony export toggleLocalStorageFlag */
/* harmony import */ var src_shared_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(32);

const OSS_FLAGS = {
    deleteWithPredicate: false,
    downloadCellCSV: false,
    telegrafEditor: false,
    customCheckQuery: false,
    matchingNotificationRules: false,
};
const CLOUD_FLAGS = {
    deleteWithPredicate: false,
    multiUser: false,
    cloudBilling: src_shared_constants__WEBPACK_IMPORTED_MODULE_0__[/* CLOUD_BILLING_VISIBLE */ "g"],
    downloadCellCSV: false,
    telegrafEditor: false,
    customCheckQuery: false,
    matchingNotificationRules: false,
};
const isFlagEnabled = (flagName, equals) => {
    let localStorageFlags;
    let _equals = equals;
    try {
        localStorageFlags = JSON.parse(window.localStorage.featureFlags);
    }
    catch (_a) {
        localStorageFlags = {};
    }
    if (_equals === undefined) {
        _equals = true;
    }
    if (localStorageFlags.hasOwnProperty(flagName)) {
        return localStorageFlags[flagName] === _equals;
    }
    if (src_shared_constants__WEBPACK_IMPORTED_MODULE_0__[/* CLOUD */ "e"]) {
        if (CLOUD_FLAGS.hasOwnProperty(flagName)) {
            return CLOUD_FLAGS[flagName] === _equals;
        }
        return false;
    }
    if (OSS_FLAGS.hasOwnProperty(flagName)) {
        return OSS_FLAGS[flagName] === _equals;
    }
    return false;
};
const FeatureFlag = ({ name, equals, children }) => {
    if (!isFlagEnabled(name, equals)) {
        return null;
    }
    return children;
};
const getUserFlags = function getUserFlags() {
    const flagKeys = src_shared_constants__WEBPACK_IMPORTED_MODULE_0__[/* CLOUD */ "e"] ? Object.keys(CLOUD_FLAGS) : Object.keys(OSS_FLAGS);
    const flags = {};
    flagKeys.forEach(key => {
        flags[key] = isFlagEnabled(key);
    });
    return flags;
};
const list = () => {
    console.log('Currently Available Feature Flags');
    console.table(getUserFlags());
};
const reset = () => {
    const featureFlags = JSON.parse(window.localStorage.featureFlags || '{}');
    if (src_shared_constants__WEBPACK_IMPORTED_MODULE_0__[/* CLOUD */ "e"]) {
        Object.keys(featureFlags).forEach(k => {
            if (!CLOUD_FLAGS.hasOwnProperty(k)) {
                delete featureFlags[k];
            }
            else {
                featureFlags[k] = CLOUD_FLAGS[k];
            }
        });
    }
    else {
        Object.keys(featureFlags).forEach(k => {
            if (!OSS_FLAGS.hasOwnProperty(k)) {
                delete featureFlags[k];
            }
            else {
                featureFlags[k] = OSS_FLAGS[k];
            }
        });
    }
    window.localStorage.featureFlags = JSON.stringify(featureFlags);
};
const set = (flagName, value) => {
    const featureFlags = JSON.parse(window.localStorage.featureFlags || '{}');
    featureFlags[flagName] = value;
    window.localStorage.featureFlags = JSON.stringify(featureFlags);
    return featureFlags[flagName];
};
const toggleLocalStorageFlag = (flagName) => {
    const featureFlags = JSON.parse(window.localStorage.featureFlags || '{}');
    featureFlags[flagName] = !featureFlags[flagName];
    window.localStorage.featureFlags = JSON.stringify(featureFlags);
    return featureFlags[flagName];
};
const w = window;
w.influx = { toggleFeature: toggleLocalStorageFlag, list, reset, set };


/***/ }),

/***/ 112:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return getTemplateByID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return getTemplates; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return createTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return createTemplateFromResource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return updateTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return convertToTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return clearExportTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return deleteTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return cloneTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return createResourceFromStaticTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return createResourceFromTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addTemplateLabelsAsync; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return removeTemplateLabelsAsync; });
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var src_utils_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(87);
/* harmony import */ var src_dashboards_actions_thunks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(77);
/* harmony import */ var src_variables_actions_thunks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(127);
/* harmony import */ var src_tasks_actions_thunks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(121);
/* harmony import */ var src_schemas_templates__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(308);
/* harmony import */ var src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(33);
/* harmony import */ var src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(245);
/* harmony import */ var src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(35);
/* harmony import */ var src_templates_constants_defaultTemplates__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(165);
/* harmony import */ var _influxdata_influx__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(98);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(5);
/* harmony import */ var src_shared_utils_resourceToTemplate__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(310);
/* harmony import */ var src_organizations_selectors__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(19);
/* harmony import */ var src_resources_selectors__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(24);















const getTemplateByID = async (id) => {
    const template = (await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].templates.get(id));
    return template;
};
const getTemplates = () => async (dispatch, getState) => {
    const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_13__[/* getOrg */ "a"])(getState());
    dispatch(Object(src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* setTemplatesStatus */ "l"])(src_types__WEBPACK_IMPORTED_MODULE_11__["RemoteDataState"].Loading));
    const items = await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].templates.getAll(org.id);
    const templateSummaries = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(items, src_schemas_templates__WEBPACK_IMPORTED_MODULE_5__[/* arrayOfTemplates */ "a"]);
    dispatch(Object(src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* populateTemplateSummaries */ "h"])(templateSummaries));
};
const createTemplate = (template) => async (dispatch, getState) => {
    try {
        const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_13__[/* getOrg */ "a"])(getState());
        const item = await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].templates.create(Object.assign(Object.assign({}, template), { orgID: org.id }));
        const templateSummary = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(item, src_schemas_templates__WEBPACK_IMPORTED_MODULE_5__[/* templateSchema */ "b"]);
        dispatch(Object(src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* addTemplateSummary */ "g"])(templateSummary));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_8__[/* importTemplateSucceeded */ "Db"]()));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_8__[/* importTemplateFailed */ "Cb"](error)));
    }
};
const createTemplateFromResource = (resource, resourceName) => async (dispatch, getState) => {
    try {
        const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_13__[/* getOrg */ "a"])(getState());
        await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].templates.create(Object.assign(Object.assign({}, resource), { orgID: org.id }));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_8__[/* resourceSavedAsTemplate */ "gc"](resourceName)));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_8__[/* saveResourceAsTemplateFailed */ "ic"](resourceName, error)));
    }
};
const updateTemplate = (id, props) => async (dispatch, getState) => {
    Object(src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* setTemplateSummary */ "k"])(id, src_types__WEBPACK_IMPORTED_MODULE_11__["RemoteDataState"].Loading);
    const state = getState();
    const labels = Object(src_resources_selectors__WEBPACK_IMPORTED_MODULE_14__[/* getLabels */ "c"])(state, props.labels);
    try {
        const item = await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].templates.update(id, Object.assign(Object.assign({}, props), { labels }));
        const templateSummary = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(item, src_schemas_templates__WEBPACK_IMPORTED_MODULE_5__[/* templateSchema */ "b"]);
        dispatch(Object(src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* setTemplateSummary */ "k"])(id, src_types__WEBPACK_IMPORTED_MODULE_11__["RemoteDataState"].Done, templateSummary));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_8__[/* updateTemplateSucceeded */ "Oc"]()));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_8__[/* updateTemplateFailed */ "Nc"](error)));
    }
};
const convertToTemplate = (id) => async (dispatch) => {
    try {
        dispatch(Object(src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* setExportTemplate */ "j"])(src_types__WEBPACK_IMPORTED_MODULE_11__["RemoteDataState"].Loading));
        const templateDocument = await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].templates.get(id);
        const template = Object(src_shared_utils_resourceToTemplate__WEBPACK_IMPORTED_MODULE_12__[/* templateToExport */ "c"])(templateDocument);
        dispatch(Object(src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* setExportTemplate */ "j"])(src_types__WEBPACK_IMPORTED_MODULE_11__["RemoteDataState"].Done, template));
    }
    catch (error) {
        dispatch(Object(src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* setExportTemplate */ "j"])(src_types__WEBPACK_IMPORTED_MODULE_11__["RemoteDataState"].Error));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_8__[/* createTemplateFailed */ "U"](error)));
    }
};
const clearExportTemplate = () => (dispatch) => {
    dispatch(Object(src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* setExportTemplate */ "j"])(src_types__WEBPACK_IMPORTED_MODULE_11__["RemoteDataState"].NotStarted, null));
};
const deleteTemplate = (templateID) => async (dispatch) => {
    try {
        await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].templates.delete(templateID);
        dispatch(Object(src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* removeTemplateSummary */ "i"])(templateID));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_8__[/* deleteTemplateSuccess */ "ib"]()));
    }
    catch (e) {
        console.error(e);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_8__[/* deleteTemplateFailed */ "hb"](e)));
    }
};
const cloneTemplate = (templateID) => async (dispatch, getState) => {
    try {
        const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_13__[/* getOrg */ "a"])(getState());
        const createdTemplate = await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].templates.clone(templateID, org.id);
        const templateSummary = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(createdTemplate, src_schemas_templates__WEBPACK_IMPORTED_MODULE_5__[/* templateSchema */ "b"]);
        dispatch(Object(src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* addTemplateSummary */ "g"])(templateSummary));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_8__[/* cloneTemplateSuccess */ "M"]()));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_8__[/* cloneTemplateFailed */ "L"](error)));
    }
};
const createFromTemplate = (template) => dispatch => {
    const { content: { data: { type }, }, } = template;
    try {
        switch (type) {
            case _influxdata_influx__WEBPACK_IMPORTED_MODULE_10__[/* TemplateType */ "z"].Dashboard:
                return dispatch(Object(src_dashboards_actions_thunks__WEBPACK_IMPORTED_MODULE_2__[/* createDashboardFromTemplate */ "e"])(template));
            case _influxdata_influx__WEBPACK_IMPORTED_MODULE_10__[/* TemplateType */ "z"].Task:
                return dispatch(Object(src_tasks_actions_thunks__WEBPACK_IMPORTED_MODULE_4__[/* createTaskFromTemplate */ "e"])(template));
            case _influxdata_influx__WEBPACK_IMPORTED_MODULE_10__[/* TemplateType */ "z"].Variable:
                return dispatch(Object(src_variables_actions_thunks__WEBPACK_IMPORTED_MODULE_3__[/* createVariableFromTemplate */ "d"])(template));
            default:
                throw new Error(`Cannot create template: ${type}`);
        }
    }
    catch (e) {
        console.error(e);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_8__[/* createResourceFromTemplateFailed */ "S"](e)));
    }
};
const createResourceFromStaticTemplate = (name) => dispatch => {
    const template = src_templates_constants_defaultTemplates__WEBPACK_IMPORTED_MODULE_9__[/* staticTemplates */ "c"][name];
    dispatch(createFromTemplate(template));
};
const createResourceFromTemplate = (templateID) => async (dispatch) => {
    const template = (await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].templates.get(templateID));
    dispatch(createFromTemplate(template));
};
const addTemplateLabelsAsync = (templateID, labels) => async (dispatch) => {
    try {
        await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].templates.addLabels(templateID, labels.map(l => l.id));
        const item = await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].templates.get(templateID);
        const templateSummary = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(item, src_schemas_templates__WEBPACK_IMPORTED_MODULE_5__[/* templateSchema */ "b"]);
        dispatch(Object(src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* setTemplateSummary */ "k"])(templateID, src_types__WEBPACK_IMPORTED_MODULE_11__["RemoteDataState"].Done, templateSummary));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_8__[/* addTemplateLabelFailed */ "p"]()));
    }
};
const removeTemplateLabelsAsync = (templateID, labels) => async (dispatch) => {
    try {
        await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].templates.removeLabels(templateID, labels.map(l => l.id));
        const item = await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].templates.get(templateID);
        const templateSummary = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(item, src_schemas_templates__WEBPACK_IMPORTED_MODULE_5__[/* templateSchema */ "b"]);
        dispatch(Object(src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* setTemplateSummary */ "k"])(templateID, src_types__WEBPACK_IMPORTED_MODULE_11__["RemoteDataState"].Done, templateSummary));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_8__[/* removeTemplateLabelFailed */ "cc"]()));
    }
};


/***/ }),

/***/ 121:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/react-router-redux/lib/index.js
var lib = __webpack_require__(209);

// EXTERNAL MODULE: ./node_modules/normalizr/dist/normalizr.es.js
var normalizr_es = __webpack_require__(41);

// EXTERNAL MODULE: ./src/client/index.ts + 1 modules
var client = __webpack_require__(14);

// EXTERNAL MODULE: ./src/templates/api/index.ts + 1 modules
var api = __webpack_require__(278);

// EXTERNAL MODULE: ./src/schemas/tasks.ts
var schemas_tasks = __webpack_require__(248);

// EXTERNAL MODULE: ./src/templates/actions/creators.ts
var creators = __webpack_require__(245);

// EXTERNAL MODULE: ./src/shared/actions/notifications.ts
var notifications = __webpack_require__(33);

// EXTERNAL MODULE: ./src/tasks/actions/creators.ts
var actions_creators = __webpack_require__(211);

// EXTERNAL MODULE: ./src/shared/copy/notifications.ts + 1 modules
var copy_notifications = __webpack_require__(35);

// EXTERNAL MODULE: ./src/types/index.ts
var types = __webpack_require__(5);

// EXTERNAL MODULE: ./src/utils/api.ts
var utils_api = __webpack_require__(87);

// EXTERNAL MODULE: ./node_modules/lodash/lodash.js
var lodash = __webpack_require__(6);

// CONCATENATED MODULE: ./src/shared/utils/insertPreambleInScript.ts


const insertPreambleInScript = async (script, preamble) => {
    if (!script.includes('import')) {
        return `${preamble}\n\n${script}`;
    }
    const resp = await Object(client["qb" /* postQueryAst */])({ data: { query: script } });
    if (resp.status !== 200) {
        throw new Error(resp.data.message);
    }
    const ast = resp.data.ast;
    const imports = Object(lodash["get"])(ast, 'files.0.imports', []);
    const body = Object(lodash["get"])(ast, 'files.0.body', []);
    const importsText = imports.map(d => d.location.source).join('\n');
    const bodyText = body.map(d => d.location.source).join('\n\n');
    const result = `${importsText}\n${preamble}\n\n${bodyText}`;
    return result;
};

// EXTERNAL MODULE: ./src/shared/utils/resourceToTemplate.ts
var resourceToTemplate = __webpack_require__(310);

// EXTERNAL MODULE: ./src/cloud/utils/limits.ts
var limits = __webpack_require__(100);

// EXTERNAL MODULE: ./src/cloud/actions/limits.ts + 1 modules
var actions_limits = __webpack_require__(72);

// EXTERNAL MODULE: ./src/organizations/selectors/index.ts
var selectors = __webpack_require__(19);

// CONCATENATED MODULE: ./src/tasks/actions/thunks.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return getTasks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addTaskLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return deleteTaskLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return updateTaskStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return updateTaskName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return deleteTask; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return cloneTask; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return selectTaskByID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return setAllTaskOptionsByID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return selectTask; });
/* unused harmony export goToTasks */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return cancel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return updateScript; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return saveNewScript; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return getRuns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return runTask; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return getLogs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return convertToTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return createTaskFromTemplate; });
/* unused harmony export runDuration */
















const getTasks = () => async (dispatch, getState) => {
    try {
        dispatch(Object(actions_creators["D" /* setTasks */])(types["RemoteDataState"].Loading));
        const org = Object(selectors["a" /* getOrg */])(getState());
        const resp = await client["K" /* getTasks */]({ query: { orgID: org.id } });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const tasks = Object(normalizr_es["a" /* normalize */])(resp.data.tasks, schemas_tasks["a" /* arrayOfTasks */]);
        dispatch(Object(actions_creators["D" /* setTasks */])(types["RemoteDataState"].Done, tasks));
    }
    catch (error) {
        dispatch(Object(actions_creators["D" /* setTasks */])(types["RemoteDataState"].Error));
        const message = Object(utils_api["b" /* getErrorMessage */])(error);
        console.error(error);
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["Fc" /* tasksFetchFailed */](message)));
    }
};
const addTaskLabel = (taskID, label) => async (dispatch) => {
    try {
        const postResp = await client["ub" /* postTasksLabel */]({
            taskID,
            data: { labelID: label.id },
        });
        if (postResp.status !== 201) {
            throw new Error(postResp.data.message);
        }
        const resp = await client["J" /* getTask */]({ taskID });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const task = Object(normalizr_es["a" /* normalize */])(resp.data, schemas_tasks["b" /* taskSchema */]);
        dispatch(Object(actions_creators["s" /* editTask */])(task));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["n" /* addTaskLabelFailed */]()));
    }
};
const deleteTaskLabel = (taskID, label) => async (dispatch) => {
    try {
        const deleteResp = await client["q" /* deleteTasksLabel */]({ taskID, labelID: label.id });
        if (deleteResp.status !== 204) {
            throw new Error(deleteResp.data.message);
        }
        const resp = await client["J" /* getTask */]({ taskID });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const task = Object(normalizr_es["a" /* normalize */])(resp.data, schemas_tasks["b" /* taskSchema */]);
        dispatch(Object(actions_creators["s" /* editTask */])(task));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["ac" /* removeTaskLabelFailed */]()));
    }
};
const updateTaskStatus = (task) => async (dispatch) => {
    try {
        const resp = await client["Z" /* patchTask */]({
            taskID: task.id,
            data: { status: task.status },
        });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const normTask = Object(normalizr_es["a" /* normalize */])(resp.data, schemas_tasks["b" /* taskSchema */]);
        dispatch(Object(actions_creators["s" /* editTask */])(normTask));
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["Ec" /* taskUpdateSuccess */]()));
    }
    catch (e) {
        console.error(e);
        const message = Object(utils_api["b" /* getErrorMessage */])(e);
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["Dc" /* taskUpdateFailed */](message)));
    }
};
const updateTaskName = (name, taskID) => async (dispatch) => {
    try {
        const resp = await client["Z" /* patchTask */]({ taskID, data: { name } });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const normTask = Object(normalizr_es["a" /* normalize */])(resp.data, schemas_tasks["b" /* taskSchema */]);
        dispatch(Object(actions_creators["s" /* editTask */])(normTask));
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["Ec" /* taskUpdateSuccess */]()));
    }
    catch (e) {
        console.error(e);
        const message = Object(utils_api["b" /* getErrorMessage */])(e);
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["Dc" /* taskUpdateFailed */](message)));
    }
};
const deleteTask = (taskID) => async (dispatch) => {
    try {
        const resp = await client["p" /* deleteTask */]({ taskID });
        if (resp.status !== 204) {
            throw new Error(resp.data.message);
        }
        dispatch(Object(actions_creators["t" /* removeTask */])(taskID));
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["xc" /* taskDeleteSuccess */]()));
    }
    catch (e) {
        console.error(e);
        const message = Object(utils_api["b" /* getErrorMessage */])(e);
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["wc" /* taskDeleteFailed */](message)));
    }
};
const cloneTask = (task) => async (dispatch) => {
    try {
        const resp = await client["J" /* getTask */]({ taskID: task.id });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const newTask = await client["tb" /* postTask */]({ data: resp.data });
        if (newTask.status !== 201) {
            throw new Error(newTask.data.message);
        }
        const normTask = Object(normalizr_es["a" /* normalize */])(resp.data, schemas_tasks["b" /* taskSchema */]);
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["uc" /* taskCloneSuccess */](task.name)));
        dispatch(Object(actions_creators["p" /* addTask */])(normTask));
        dispatch(Object(actions_limits["h" /* checkTaskLimits */])());
    }
    catch (error) {
        console.error(error);
        if (Object(limits["p" /* isLimitError */])(error)) {
            dispatch(Object(notifications["c" /* notify */])(copy_notifications["fc" /* resourceLimitReached */]('tasks')));
        }
        else {
            const message = Object(utils_api["b" /* getErrorMessage */])(error);
            dispatch(Object(notifications["c" /* notify */])(copy_notifications["tc" /* taskCloneFailed */](task.name, message)));
        }
    }
};
const selectTaskByID = (id) => async (dispatch) => {
    try {
        const resp = await client["J" /* getTask */]({ taskID: id });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const task = Object(normalizr_es["a" /* normalize */])(resp.data, schemas_tasks["b" /* taskSchema */]);
        dispatch(Object(actions_creators["w" /* setCurrentTask */])(task));
    }
    catch (error) {
        console.error(error);
        dispatch(goToTasks());
        const message = Object(utils_api["b" /* getErrorMessage */])(error);
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["Ac" /* taskNotFound */](message)));
    }
};
const setAllTaskOptionsByID = (taskID) => async (dispatch) => {
    try {
        const resp = await client["J" /* getTask */]({ taskID });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const task = Object(normalizr_es["a" /* normalize */])(resp.data, schemas_tasks["b" /* taskSchema */]);
        dispatch(Object(actions_creators["u" /* setAllTaskOptions */])(task));
    }
    catch (error) {
        console.error(error);
        dispatch(goToTasks());
        const message = Object(utils_api["b" /* getErrorMessage */])(error);
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["Ac" /* taskNotFound */](message)));
    }
};
const selectTask = (taskID) => (dispatch, getState) => {
    const org = Object(selectors["a" /* getOrg */])(getState());
    dispatch(Object(lib["push"])(`/orgs/${org.id}/tasks/${taskID}`));
};
const goToTasks = () => (dispatch, getState) => {
    const org = Object(selectors["a" /* getOrg */])(getState());
    dispatch(Object(lib["push"])(`/orgs/${org.id}/tasks`));
};
const cancel = () => (dispatch) => {
    dispatch(Object(actions_creators["q" /* clearCurrentTask */])());
    dispatch(Object(lib["goBack"])());
};
const updateScript = () => async (dispatch, getState) => {
    try {
        const state = getState();
        const { tasks: { currentScript: script, currentTask: task, taskOptions }, } = state.resources;
        const updatedTask = {
            flux: script,
            name: taskOptions.name,
            offset: taskOptions.offset,
            token: null,
        };
        if (taskOptions.taskScheduleType === types["TaskSchedule"].interval) {
            updatedTask.every = taskOptions.interval;
            updatedTask.cron = null;
        }
        else {
            updatedTask.cron = taskOptions.cron;
            updatedTask.every = null;
        }
        const resp = await client["Z" /* patchTask */]({ taskID: task.id, data: updatedTask });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        dispatch(goToTasks());
        dispatch(Object(actions_creators["q" /* clearCurrentTask */])());
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["Ec" /* taskUpdateSuccess */]()));
    }
    catch (error) {
        console.error(error);
        const message = Object(utils_api["b" /* getErrorMessage */])(error);
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["Dc" /* taskUpdateFailed */](message)));
    }
};
const saveNewScript = (script, preamble) => async (dispatch, getState) => {
    try {
        const fluxScript = await insertPreambleInScript(script, preamble);
        const org = Object(selectors["a" /* getOrg */])(getState());
        const resp = await client["tb" /* postTask */]({ data: { orgID: org.id, flux: fluxScript } });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        dispatch(Object(actions_creators["y" /* setNewScript */])(''));
        dispatch(Object(actions_creators["r" /* clearTask */])());
        dispatch(goToTasks());
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["vc" /* taskCreatedSuccess */]()));
        dispatch(Object(actions_limits["h" /* checkTaskLimits */])());
    }
    catch (error) {
        console.error(error);
        if (Object(limits["p" /* isLimitError */])(error)) {
            dispatch(Object(notifications["c" /* notify */])(copy_notifications["fc" /* resourceLimitReached */]('tasks')));
        }
        else {
            const message = Object(utils_api["b" /* getErrorMessage */])(error);
            dispatch(Object(notifications["c" /* notify */])(copy_notifications["zc" /* taskNotCreated */](message)));
        }
    }
};
const getRuns = (taskID) => async (dispatch) => {
    try {
        dispatch(Object(actions_creators["z" /* setRuns */])([], types["RemoteDataState"].Loading));
        dispatch(selectTaskByID(taskID));
        const resp = await client["L" /* getTasksRuns */]({ taskID });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const runsWithDuration = resp.data.runs.map(run => {
            const finished = new Date(run.finishedAt);
            const started = new Date(run.startedAt);
            return Object.assign(Object.assign({}, run), { duration: `${runDuration(finished, started)}` });
        });
        dispatch(Object(actions_creators["z" /* setRuns */])(runsWithDuration, types["RemoteDataState"].Done));
    }
    catch (error) {
        console.error(error);
        const message = Object(utils_api["b" /* getErrorMessage */])(error);
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["yc" /* taskGetFailed */](message)));
        dispatch(Object(actions_creators["z" /* setRuns */])([], types["RemoteDataState"].Error));
    }
};
const runTask = (taskID) => async (dispatch) => {
    try {
        const resp = await client["vb" /* postTasksRun */]({ taskID });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["Cc" /* taskRunSuccess */]()));
    }
    catch (error) {
        const message = Object(utils_api["b" /* getErrorMessage */])(error);
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["Bc" /* taskRunFailed */](message)));
        console.error(error);
    }
};
const getLogs = (taskID, runID) => async (dispatch) => {
    try {
        const resp = await client["M" /* getTasksRunsLogs */]({ taskID, runID });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        dispatch(Object(actions_creators["x" /* setLogs */])(resp.data.events));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(actions_creators["x" /* setLogs */])([]));
    }
};
const convertToTemplate = (taskID) => async (dispatch, getState) => {
    try {
        dispatch(Object(creators["j" /* setExportTemplate */])(types["RemoteDataState"].Loading));
        const resp = await client["J" /* getTask */]({ taskID });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const { entities, result } = Object(normalizr_es["a" /* normalize */])(resp.data, schemas_tasks["b" /* taskSchema */]);
        const taskTemplate = Object(resourceToTemplate["b" /* taskToTemplate */])(getState(), entities.tasks[result]);
        dispatch(Object(creators["j" /* setExportTemplate */])(types["RemoteDataState"].Done, taskTemplate));
    }
    catch (error) {
        dispatch(Object(creators["j" /* setExportTemplate */])(types["RemoteDataState"].Error));
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["U" /* createTemplateFailed */](error)));
    }
};
const createTaskFromTemplate = (template) => async (dispatch, getState) => {
    try {
        const org = Object(selectors["a" /* getOrg */])(getState());
        await Object(api["b" /* createTaskFromTemplate */])(template, org.id);
        dispatch(getTasks());
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["Bb" /* importTaskSucceeded */]()));
        dispatch(Object(actions_limits["h" /* checkTaskLimits */])());
    }
    catch (error) {
        if (Object(limits["p" /* isLimitError */])(error)) {
            dispatch(Object(notifications["c" /* notify */])(copy_notifications["fc" /* resourceLimitReached */]('tasks')));
        }
        else {
            dispatch(Object(notifications["c" /* notify */])(copy_notifications["Ab" /* importTaskFailed */](error)));
        }
    }
};
const runDuration = (finishedAt, startedAt) => {
    let timeTag = 'seconds';
    if (isNaN(finishedAt.getTime()) || isNaN(startedAt.getTime())) {
        return '';
    }
    let diff = (finishedAt.getTime() - startedAt.getTime()) / 1000;
    if (diff > 60) {
        diff = Math.round(diff / 60);
        timeTag = 'minutes';
    }
    return diff + ' ' + timeTag;
};


/***/ }),

/***/ 126:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export DataLoaderStep */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return CollectorsStep; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return LineProtocolStep; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return ConfigurationState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return DataLoaderType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BundleName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return LineProtocolTab; });
/* unused harmony export LineProtocolStatus */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return Precision; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return ConfigFieldType; });
var DataLoaderStep;
(function (DataLoaderStep) {
    DataLoaderStep[DataLoaderStep["Configure"] = 0] = "Configure";
})(DataLoaderStep || (DataLoaderStep = {}));
var CollectorsStep;
(function (CollectorsStep) {
    CollectorsStep[CollectorsStep["Select"] = 0] = "Select";
    CollectorsStep[CollectorsStep["Configure"] = 1] = "Configure";
    CollectorsStep[CollectorsStep["Verify"] = 2] = "Verify";
})(CollectorsStep || (CollectorsStep = {}));
var LineProtocolStep;
(function (LineProtocolStep) {
    LineProtocolStep[LineProtocolStep["Configure"] = 0] = "Configure";
    LineProtocolStep[LineProtocolStep["Verify"] = 1] = "Verify";
})(LineProtocolStep || (LineProtocolStep = {}));
var ConfigurationState;
(function (ConfigurationState) {
    ConfigurationState["Unconfigured"] = "unconfigured";
    ConfigurationState["InvalidConfiguration"] = "invalid";
    ConfigurationState["Configured"] = "configured";
})(ConfigurationState || (ConfigurationState = {}));
var DataLoaderType;
(function (DataLoaderType) {
    DataLoaderType["CSV"] = "CSV";
    DataLoaderType["Streaming"] = "Streaming";
    DataLoaderType["LineProtocol"] = "Line Protocol";
    DataLoaderType["Scraping"] = "Scraping";
    DataLoaderType["Empty"] = "";
})(DataLoaderType || (DataLoaderType = {}));
var BundleName;
(function (BundleName) {
    BundleName["System"] = "System";
    BundleName["Docker"] = "Docker";
    BundleName["Kubernetes"] = "Kubernetes";
    BundleName["Nginx"] = "NGINX";
    BundleName["Redis"] = "Redis";
})(BundleName || (BundleName = {}));
var LineProtocolTab;
(function (LineProtocolTab) {
    LineProtocolTab["UploadFile"] = "Upload File";
    LineProtocolTab["EnterManually"] = "Enter Manually";
    LineProtocolTab["EnterURL"] = "Enter URL";
})(LineProtocolTab || (LineProtocolTab = {}));
var LineProtocolStatus;
(function (LineProtocolStatus) {
    LineProtocolStatus["ImportData"] = "importData";
    LineProtocolStatus["Loading"] = "loading";
    LineProtocolStatus["Success"] = "success";
    LineProtocolStatus["Error"] = "error";
})(LineProtocolStatus || (LineProtocolStatus = {}));
var Precision;
(function (Precision) {
    Precision["Milliseconds"] = "Milliseconds";
    Precision["Seconds"] = "Seconds";
    Precision["Microseconds"] = "Microseconds";
    Precision["Nanoseconds"] = "Nanoseconds";
})(Precision || (Precision = {}));
var ConfigFieldType;
(function (ConfigFieldType) {
    ConfigFieldType["String"] = "string";
    ConfigFieldType["StringArray"] = "string array";
    ConfigFieldType["Uri"] = "uri";
    ConfigFieldType["UriArray"] = "uri array";
})(ConfigFieldType || (ConfigFieldType = {}));


/***/ }),

/***/ 127:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return getVariables; });
/* unused harmony export getVariable */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return createVariable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return createVariableFromTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return updateVariable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return deleteVariable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return refreshVariableValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return convertToTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addVariableLabelAsync; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return removeVariableLabelAsync; });
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(33);
/* harmony import */ var src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(245);
/* harmony import */ var src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(164);
/* harmony import */ var src_schemas_variables__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(215);
/* harmony import */ var src_client__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14);
/* harmony import */ var src_variables_utils_hydrateVars__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(497);
/* harmony import */ var src_templates_api__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(278);
/* harmony import */ var src_variables_selectors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(88);
/* harmony import */ var src_shared_utils_resourceToTemplate__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(310);
/* harmony import */ var src_variables_utils_exportVariables__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(741);
/* harmony import */ var src_organizations_selectors__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(19);
/* harmony import */ var src_resources_selectors__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(24);
/* harmony import */ var src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(35);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(5);















const getVariables = () => async (dispatch, getState) => {
    try {
        dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_3__[/* setVariables */ "s"])(src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Loading));
        const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_11__[/* getOrg */ "a"])(getState());
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_5__[/* getVariables */ "P"]({ query: { orgID: org.id } });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const variables = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data.variables, src_schemas_variables__WEBPACK_IMPORTED_MODULE_4__[/* arrayOfVariables */ "a"]);
        dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_3__[/* setVariables */ "s"])(src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Done, variables));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_3__[/* setVariables */ "s"])(src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Error));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_1__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_13__[/* getVariablesFailed */ "wb"]()));
    }
};
const getVariable = (id) => async (dispatch) => {
    try {
        dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_3__[/* setVariable */ "r"])(id, src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Loading));
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_5__[/* getVariable */ "O"]({ variableID: id });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const variable = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data, src_schemas_variables__WEBPACK_IMPORTED_MODULE_4__[/* variableSchema */ "b"]);
        dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_3__[/* setVariable */ "r"])(id, src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Done, variable));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_3__[/* setVariable */ "r"])(id, src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Error));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_1__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_13__[/* getVariableFailed */ "vb"]()));
    }
};
const createVariable = (variable) => async (dispatch, getState) => {
    try {
        const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_11__[/* getOrg */ "a"])(getState());
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_5__[/* postVariable */ "wb"]({
            data: Object.assign(Object.assign({}, variable), { orgID: org.id }),
        });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        const createdVar = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data, src_schemas_variables__WEBPACK_IMPORTED_MODULE_4__[/* variableSchema */ "b"]);
        dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_3__[/* setVariable */ "r"])(resp.data.id, src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Done, createdVar));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_1__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_13__[/* createVariableSuccess */ "W"](variable.name)));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_1__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_13__[/* createVariableFailed */ "V"](error.message)));
    }
};
const createVariableFromTemplate = (template) => async (dispatch, getState) => {
    try {
        const state = getState();
        const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_11__[/* getOrg */ "a"])(state);
        const resp = await Object(src_templates_api__WEBPACK_IMPORTED_MODULE_7__[/* createVariableFromTemplate */ "c"])(template, org.id);
        const createdVar = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp, src_schemas_variables__WEBPACK_IMPORTED_MODULE_4__[/* variableSchema */ "b"]);
        dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_3__[/* setVariable */ "r"])(resp.id, src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Done, createdVar));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_1__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_13__[/* createVariableSuccess */ "W"](resp.name)));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_1__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_13__[/* createVariableFailed */ "V"](error.message)));
    }
};
const updateVariable = (id, props) => async (dispatch, getState) => {
    try {
        dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_3__[/* setVariable */ "r"])(id, src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Loading));
        const state = getState();
        const labels = Object(src_resources_selectors__WEBPACK_IMPORTED_MODULE_12__[/* getLabels */ "c"])(state, props.labels);
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_5__[/* patchVariable */ "ab"]({
            variableID: id,
            data: Object.assign(Object.assign({}, props), { labels }),
        });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const variable = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data, src_schemas_variables__WEBPACK_IMPORTED_MODULE_4__[/* variableSchema */ "b"]);
        dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_3__[/* setVariable */ "r"])(id, src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Done, variable));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_1__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_13__[/* updateVariableSuccess */ "Qc"](resp.data.name)));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_3__[/* setVariable */ "r"])(id, src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Error));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_1__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_13__[/* updateVariableFailed */ "Pc"](error.message)));
    }
};
const deleteVariable = (id) => async (dispatch) => {
    try {
        dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_3__[/* setVariable */ "r"])(id, src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Loading));
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_5__[/* deleteVariable */ "r"]({ variableID: id });
        if (resp.status !== 204) {
            throw new Error(resp.data.message);
        }
        dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_3__[/* removeVariable */ "o"])(id));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_1__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_13__[/* deleteVariableSuccess */ "kb"]()));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_3__[/* setVariable */ "r"])(id, src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Done));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_1__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_13__[/* deleteVariableFailed */ "jb"](error.message)));
    }
};
const pendingValueRequests = {};
const refreshVariableValues = (contextID, variables) => async (dispatch, getState) => {
    dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_3__[/* setValues */ "q"])(contextID, src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Loading));
    try {
        const state = getState();
        const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_11__[/* getOrg */ "a"])(state);
        const url = state.links.query.self;
        const selections = Object(src_variables_selectors__WEBPACK_IMPORTED_MODULE_8__[/* getValueSelections */ "n"])(state, contextID);
        const allVariables = Object(src_variables_selectors__WEBPACK_IMPORTED_MODULE_8__[/* extractVariablesList */ "f"])(state);
        if (pendingValueRequests[contextID]) {
            pendingValueRequests[contextID].cancel();
        }
        pendingValueRequests[contextID] = Object(src_variables_utils_hydrateVars__WEBPACK_IMPORTED_MODULE_6__[/* hydrateVars */ "c"])(variables, allVariables, {
            url,
            orgID: org.id,
            selections,
        });
        const values = await pendingValueRequests[contextID].promise;
        dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_3__[/* setValues */ "q"])(contextID, src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Done, values));
    }
    catch (error) {
        if (error.name === 'CancellationError') {
            return;
        }
        console.error(error);
        dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_3__[/* setValues */ "q"])(contextID, src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Error));
    }
};
const convertToTemplate = (variableID) => async (dispatch, getState) => {
    try {
        dispatch(Object(src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_2__[/* setExportTemplate */ "j"])(src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Loading));
        const state = getState();
        const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_11__[/* getOrg */ "a"])(state);
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_5__[/* getVariable */ "O"]({ variableID });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const allVariables = await src_client__WEBPACK_IMPORTED_MODULE_5__[/* getVariables */ "P"]({ query: { orgID: org.id } });
        if (allVariables.status !== 200) {
            throw new Error(allVariables.data.message);
        }
        const normVariable = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data, src_schemas_variables__WEBPACK_IMPORTED_MODULE_4__[/* variableSchema */ "b"]);
        const normVariables = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(allVariables.data.variables, src_schemas_variables__WEBPACK_IMPORTED_MODULE_4__[/* arrayOfVariables */ "a"]);
        const variable = normVariable.entities.variables[normVariable.result];
        const variables = Object.values(normVariables.entities.variables);
        const dependencies = Object(src_variables_utils_exportVariables__WEBPACK_IMPORTED_MODULE_10__[/* findDependentVariables */ "b"])(variable, variables);
        const variableTemplate = Object(src_shared_utils_resourceToTemplate__WEBPACK_IMPORTED_MODULE_9__[/* variableToTemplate */ "d"])(state, variable, dependencies);
        dispatch(Object(src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_2__[/* setExportTemplate */ "j"])(src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Done, variableTemplate));
    }
    catch (error) {
        dispatch(Object(src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_2__[/* setExportTemplate */ "j"])(src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Error));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_1__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_13__[/* createTemplateFailed */ "U"](error)));
    }
};
const addVariableLabelAsync = (variableID, label) => async (dispatch) => {
    try {
        const posted = await src_client__WEBPACK_IMPORTED_MODULE_5__[/* postVariablesLabel */ "xb"]({
            variableID,
            data: { labelID: label.id },
        });
        if (posted.status !== 201) {
            throw new Error(posted.data.message);
        }
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_5__[/* getVariable */ "O"]({ variableID });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const variable = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data, src_schemas_variables__WEBPACK_IMPORTED_MODULE_4__[/* variableSchema */ "b"]);
        dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_3__[/* setVariable */ "r"])(variableID, src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Done, variable));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_1__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_13__[/* addVariableLabelFailed */ "q"]()));
    }
};
const removeVariableLabelAsync = (variableID, label) => async (dispatch) => {
    try {
        const deleted = await src_client__WEBPACK_IMPORTED_MODULE_5__[/* deleteVariablesLabel */ "s"]({
            variableID,
            labelID: label.id,
        });
        if (deleted.status !== 204) {
            throw new Error(deleted.data.message);
        }
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_5__[/* getVariable */ "O"]({ variableID });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const variable = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data, src_schemas_variables__WEBPACK_IMPORTED_MODULE_4__[/* variableSchema */ "b"]);
        dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_3__[/* setVariable */ "r"])(variableID, src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Done, variable));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_1__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_13__[/* removeVariableLabelFailed */ "dc"]()));
    }
};


/***/ }),

/***/ 128:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return resetAlertBuilder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return initializeAlertBuilder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return convertCheckToCustom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return setAlertBuilderCheck; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return setAlertBuilderCheckStatus; });
/* unused harmony export changeCheckType */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return setEvery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return setOffset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return setStaleTime; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return setTimeSince; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return setLevel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return setStatusMessageTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return editTagSetByIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return removeTagSet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return updateThreshold; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return updateThresholds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return removeThreshold; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return updateName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return selectCheckEvery; });
/* harmony import */ var src_timeMachine_actions_queries__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(137);

const resetAlertBuilder = () => ({
    type: 'RESET_ALERT_BUILDER',
});
const initializeAlertBuilder = (type) => ({
    type: 'INIT_ALERT_BUILDER',
    payload: { type },
});
const convertCheckToCustom = () => ({
    type: 'CONVERT_CHECK_TO_CUSTOM',
});
const setAlertBuilderCheck = (check) => ({
    type: 'SET_ALERT_BUILDER_CHECK',
    payload: { check },
});
const setAlertBuilderCheckStatus = (status) => ({
    type: 'SET_ALERT_BUILDER_STATUS',
    payload: { status },
});
const changeCheckType = (toType) => ({
    type: 'SET_ALERT_BUILDER_TYPE',
    payload: { toType },
});
const setEvery = (every) => ({
    type: 'SET_ALERT_BUILDER_EVERY',
    payload: { every },
});
const setOffset = (offset) => ({
    type: 'SET_ALERT_BUILDER_OFFSET',
    payload: { offset },
});
const setStaleTime = (staleTime) => ({
    type: 'SET_ALERT_BUILDER_STALETIME',
    payload: { staleTime },
});
const setTimeSince = (timeSince) => ({
    type: 'SET_ALERT_BUILDER_TIMESINCE',
    payload: { timeSince },
});
const setLevel = (level) => ({
    type: 'SET_ALERT_BUILDER_LEVEL',
    payload: { level },
});
const setStatusMessageTemplate = (statusMessageTemplate) => ({
    type: 'SET_ALERT_BUILDER_MESSAGE_TEMPLATE',
    payload: { statusMessageTemplate },
});
const editTagSetByIndex = (index, tagSet) => ({
    type: 'EDIT_ALERT_BUILDER_TAGSET',
    payload: { index, tagSet },
});
const removeTagSet = (index) => ({
    type: 'REMOVE_ALERT_BUILDER_TAGSET',
    payload: { index },
});
const updateThreshold = (threshold) => ({
    type: 'UPDATE_ALERT_BUILDER_THRESHOLD',
    payload: { threshold },
});
const updateThresholds = (thresholds) => ({
    type: 'UPDATE_ALERT_BUILDER_THRESHOLDS',
    payload: { thresholds },
});
const removeThreshold = (level) => ({
    type: 'REMOVE_ALERT_BUILDER_THRESHOLD',
    payload: { level },
});
const updateName = (name) => ({
    type: 'UPDATE_ALERT_BUILDER_NAME',
    payload: { name },
});
const selectCheckEvery = (every) => dispatch => {
    dispatch(setEvery(every));
    dispatch(Object(src_timeMachine_actions_queries__WEBPACK_IMPORTED_MODULE_0__[/* executeQueries */ "c"])());
};


/***/ }),

/***/ 1301:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "1a2551f58d.png";

/***/ }),

/***/ 1332:
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ 134:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return TIME_RANGE_FORMAT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CUSTOM_TIME_RANGE_LABEL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return pastHourTimeRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return pastThirtyDaysTimeRange; });
/* unused harmony export pastFifteenMinTimeRange */
/* unused harmony export CUSTOM_TIME_RANGE */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SELECTABLE_TIME_RANGES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return DEFAULT_TIME_RANGE; });
const TIME_RANGE_FORMAT = 'YYYY-MM-DD HH:mm';
const CUSTOM_TIME_RANGE_LABEL = 'Custom Time Range';
const pastHourTimeRange = {
    seconds: 3600,
    lower: 'now() - 1h',
    upper: null,
    label: 'Past 1h',
    duration: '1h',
    type: 'selectable-duration',
    windowPeriod: 10000,
};
const pastThirtyDaysTimeRange = {
    seconds: 2592000,
    lower: 'now() - 30d',
    upper: null,
    label: 'Past 30d',
    duration: '30d',
    type: 'selectable-duration',
    windowPeriod: 3600000,
};
const pastFifteenMinTimeRange = {
    seconds: 900,
    lower: 'now() - 15m',
    upper: null,
    label: 'Past 15m',
    duration: '15m',
    type: 'selectable-duration',
    windowPeriod: 10000,
};
const CUSTOM_TIME_RANGE = {
    label: 'Custom Time Range',
    type: 'custom',
};
const SELECTABLE_TIME_RANGES = [
    {
        seconds: 300,
        lower: 'now() - 5m',
        upper: null,
        label: 'Past 5m',
        duration: '5m',
        type: 'selectable-duration',
        windowPeriod: 10000,
    },
    pastFifteenMinTimeRange,
    pastHourTimeRange,
    {
        seconds: 21600,
        lower: 'now() - 6h',
        upper: null,
        label: 'Past 6h',
        duration: '6h',
        type: 'selectable-duration',
        windowPeriod: 60000,
    },
    {
        seconds: 43200,
        lower: 'now() - 12h',
        upper: null,
        label: 'Past 12h',
        duration: '12h',
        type: 'selectable-duration',
        windowPeriod: 120000,
    },
    {
        seconds: 86400,
        lower: 'now() - 24h',
        upper: null,
        label: 'Past 24h',
        duration: '24h',
        type: 'selectable-duration',
        windowPeriod: 300000,
    },
    {
        seconds: 172800,
        lower: 'now() - 2d',
        upper: null,
        label: 'Past 2d',
        duration: '2d',
        type: 'selectable-duration',
        windowPeriod: 600000,
    },
    {
        seconds: 604800,
        lower: 'now() - 7d',
        upper: null,
        label: 'Past 7d',
        duration: '7d',
        type: 'selectable-duration',
        windowPeriod: 1800000,
    },
    pastThirtyDaysTimeRange,
];
const DEFAULT_TIME_RANGE = pastHourTimeRange;


/***/ }),

/***/ 135:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SET_LABELS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SET_LABEL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return REMOVE_LABEL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return SET_LABEL_ON_RESOURCE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return setLabels; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return setLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return removeLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return setLabelOnResource; });
const SET_LABELS = 'SET_LABELS';
const SET_LABEL = 'SET_LABEL';
const REMOVE_LABEL = 'REMOVE_LABEL';
const SET_LABEL_ON_RESOURCE = 'SET_LABEL_ON_RESOURCE';
const setLabels = (status, schema) => ({
    type: SET_LABELS,
    status,
    schema,
});
const setLabel = (id, status, schema) => ({
    type: SET_LABEL,
    id,
    status,
    schema,
});
const removeLabel = (id) => ({
    type: REMOVE_LABEL,
    id,
});
const setLabelOnResource = (resourceID, schema) => ({
    type: SET_LABEL_ON_RESOURCE,
    resourceID,
    schema,
});


/***/ }),

/***/ 136:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return viewsFromCells; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return viewSchema; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return arrayOfViews; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return cellSchema; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return arrayOfCells; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return dashboardSchema; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return arrayOfDashboards; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addDashboardDefaults; });
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var src_views_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(150);
/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(76);





const viewsFromCells = (cells, dashboardID) => {
    return cells.map(cell => {
        const { properties, id, name } = cell;
        return Object.assign(Object.assign({ id }, Object(src_views_helpers__WEBPACK_IMPORTED_MODULE_3__[/* defaultView */ "c"])(name)), { cellID: id, properties,
            dashboardID });
    });
};
const viewSchema = new normalizr__WEBPACK_IMPORTED_MODULE_0__[/* schema */ "b"].Entity(src_types__WEBPACK_IMPORTED_MODULE_2__["ResourceType"].Views);
const arrayOfViews = [viewSchema];
const cellSchema = new normalizr__WEBPACK_IMPORTED_MODULE_0__[/* schema */ "b"].Entity(src_types__WEBPACK_IMPORTED_MODULE_2__["ResourceType"].Cells, {}, {
    processStrategy: (cell, parent) => {
        return Object.assign(Object.assign({}, Object(lodash__WEBPACK_IMPORTED_MODULE_1__["omit"])(cell, 'properties')), { dashboardID: cell.dashboardID ? cell.dashboardID : parent.id, status: src_types__WEBPACK_IMPORTED_MODULE_2__["RemoteDataState"].Done });
    },
});
const arrayOfCells = [cellSchema];
const dashboardSchema = new normalizr__WEBPACK_IMPORTED_MODULE_0__[/* schema */ "b"].Entity(src_types__WEBPACK_IMPORTED_MODULE_2__["ResourceType"].Dashboards, {
    labels: _labels__WEBPACK_IMPORTED_MODULE_4__[/* arrayOfLabels */ "a"],
    cells: arrayOfCells,
    views: arrayOfViews,
}, {
    processStrategy: (dashboard) => addDashboardDefaults(dashboard),
});
const arrayOfDashboards = [dashboardSchema];
const addDashboardDefaults = (dashboard) => {
    return Object.assign(Object.assign({}, dashboard), { id: dashboard.id || '', name: dashboard.name || '', orgID: dashboard.orgID || '', meta: addDashboardMetaDefaults(dashboard.meta), status: src_types__WEBPACK_IMPORTED_MODULE_2__["RemoteDataState"].Done });
};
const addDashboardMetaDefaults = (meta) => {
    if (!meta) {
        return {};
    }
    if (!meta.updatedAt) {
        return Object.assign(Object.assign({}, meta), { updatedAt: new Date().toDateString() });
    }
    return meta;
};


/***/ }),

/***/ 137:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return refreshTimeMachineVariableValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return executeQueries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return saveAndExecuteQueries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return executeCheckQuery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addVariableToTimeMachine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return selectVariableValue; });
/* harmony import */ var _influxdata_flux_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(419);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var src_shared_apis_query__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(152);
/* harmony import */ var src_alerting_utils_statusEvents__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(745);
/* harmony import */ var src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(164);
/* harmony import */ var src_variables_actions_thunks__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(127);
/* harmony import */ var src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(33);
/* harmony import */ var src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(35);
/* harmony import */ var src_timeMachine_selectors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(31);
/* harmony import */ var src_shared_utils_filterUnusedVars__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(746);
/* harmony import */ var src_shared_utils_checkQueryResult__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(420);
/* harmony import */ var src_variables_selectors__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(88);
/* harmony import */ var src_variables_utils_getWindowVars__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(279);
/* harmony import */ var src_variables_utils_buildVarsOption__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(251);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(5);
/* harmony import */ var src_organizations_selectors__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(19);
















const setQueryResults = (status, files, fetchDuration, errorMessage, statuses) => ({
    type: 'SET_QUERY_RESULTS',
    payload: {
        status,
        files,
        fetchDuration,
        errorMessage,
        statuses,
    },
});
const refreshTimeMachineVariableValues = (prevContextID) => async (dispatch, getState) => {
    const state = getState();
    const contextID = state.timeMachines.activeTimeMachineID;
    if (prevContextID) {
        const values = Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(state, `resources.variables.values.${prevContextID}.values`, {});
        if (!Object(lodash__WEBPACK_IMPORTED_MODULE_1__["isEmpty"])(values)) {
            dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_4__[/* setValues */ "q"])(contextID, src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Done, values));
            return;
        }
    }
    const { view, draftQueries } = Object(src_timeMachine_selectors__WEBPACK_IMPORTED_MODULE_8__[/* getActiveTimeMachine */ "c"])(getState());
    const draftView = Object.assign(Object.assign({}, view), { properties: Object.assign(Object.assign({}, view.properties), { queries: draftQueries }) });
    const variables = Object(src_variables_selectors__WEBPACK_IMPORTED_MODULE_11__[/* extractVariablesList */ "f"])(getState());
    const variablesInUse = Object(src_shared_utils_filterUnusedVars__WEBPACK_IMPORTED_MODULE_9__[/* filterUnusedVars */ "a"])(variables, [view, draftView]);
    const hydratedVariables = Object(src_variables_selectors__WEBPACK_IMPORTED_MODULE_11__[/* getHydratedVariables */ "j"])(getState(), contextID);
    const variablesToRefresh = variables.filter(v => variablesInUse.includes(v) || hydratedVariables.includes(v));
    await dispatch(Object(src_variables_actions_thunks__WEBPACK_IMPORTED_MODULE_5__[/* refreshVariableValues */ "g"])(contextID, variablesToRefresh));
};
let pendingResults = [];
let pendingCheckStatuses = null;
const executeQueries = (dashboardID) => async (dispatch, getState) => {
    const state = getState();
    const { view } = Object(src_timeMachine_selectors__WEBPACK_IMPORTED_MODULE_8__[/* getActiveTimeMachine */ "c"])(state);
    const queries = view.properties.queries.filter(({ text }) => !!text.trim());
    const { alertBuilder: { id: checkID }, } = state;
    if (!queries.length) {
        dispatch(setQueryResults(src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Done, [], null));
    }
    try {
        dispatch(setQueryResults(src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Loading, [], null));
        await dispatch(refreshTimeMachineVariableValues(dashboardID));
        const variableAssignments = Object(src_timeMachine_selectors__WEBPACK_IMPORTED_MODULE_8__[/* getVariableAssignments */ "o"])(state);
        const orgID = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_15__[/* getOrg */ "a"])(state).id;
        const startTime = Date.now();
        pendingResults.forEach(({ cancel }) => cancel());
        pendingResults = queries.map(({ text }) => {
            const windowVars = Object(src_variables_utils_getWindowVars__WEBPACK_IMPORTED_MODULE_12__[/* getWindowVars */ "b"])(text, variableAssignments);
            const extern = Object(src_variables_utils_buildVarsOption__WEBPACK_IMPORTED_MODULE_13__[/* buildVarsOption */ "a"])([...variableAssignments, ...windowVars]);
            return Object(src_shared_apis_query__WEBPACK_IMPORTED_MODULE_2__[/* runQuery */ "a"])(orgID, text, extern);
        });
        const results = await Promise.all(pendingResults.map(r => r.promise));
        const duration = Date.now() - startTime;
        let statuses = [[]];
        if (checkID) {
            const extern = Object(src_variables_utils_buildVarsOption__WEBPACK_IMPORTED_MODULE_13__[/* buildVarsOption */ "a"])(variableAssignments);
            pendingCheckStatuses = Object(src_alerting_utils_statusEvents__WEBPACK_IMPORTED_MODULE_3__[/* runStatusesQuery */ "a"])(orgID, checkID, extern);
            statuses = await pendingCheckStatuses.promise;
        }
        for (const result of results) {
            if (result.type === 'UNKNOWN_ERROR') {
                throw new Error(result.message);
            }
            if (result.type === 'RATE_LIMIT_ERROR') {
                dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_7__[/* rateLimitReached */ "Wb"])(result.retryAfter)));
                throw new Error(result.message);
            }
            if (result.didTruncate) {
                dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_7__[/* resultTooLarge */ "hc"])(result.bytesRead)));
            }
            Object(src_shared_utils_checkQueryResult__WEBPACK_IMPORTED_MODULE_10__[/* checkQueryResult */ "a"])(result.csv);
        }
        const files = results.map(r => r.csv);
        dispatch(setQueryResults(src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Done, files, duration, null, statuses));
    }
    catch (e) {
        if (e.name === 'CancellationError') {
            return;
        }
        console.error(e);
        dispatch(setQueryResults(src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Error, null, null, e.message));
    }
};
const saveDraftQueries = () => ({
    type: 'SAVE_DRAFT_QUERIES',
});
const saveAndExecuteQueries = () => dispatch => {
    dispatch(saveDraftQueries());
    dispatch(executeQueries());
};
const executeCheckQuery = () => async (dispatch, getState) => {
    const state = getState();
    const { text } = Object(src_timeMachine_selectors__WEBPACK_IMPORTED_MODULE_8__[/* getActiveQuery */ "a"])(state);
    const { id: orgID } = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_15__[/* getOrg */ "a"])(state);
    if (text == '') {
        dispatch(setQueryResults(src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Done, [], null));
    }
    try {
        dispatch(setQueryResults(src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Loading, null, null, null));
        const startTime = Date.now();
        const extern = Object(_influxdata_flux_parser__WEBPACK_IMPORTED_MODULE_0__[/* parse */ "b"])('import "influxdata/influxdb/monitor"\noption monitor.write = yield');
        const result = await Object(src_shared_apis_query__WEBPACK_IMPORTED_MODULE_2__[/* runQuery */ "a"])(orgID, text, extern).promise;
        const duration = Date.now() - startTime;
        if (result.type === 'UNKNOWN_ERROR') {
            throw new Error(result.message);
        }
        if (result.type === 'RATE_LIMIT_ERROR') {
            dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_7__[/* rateLimitReached */ "Wb"])(result.retryAfter)));
            throw new Error(result.message);
        }
        if (result.didTruncate) {
            dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_7__[/* resultTooLarge */ "hc"])(result.bytesRead)));
        }
        Object(src_shared_utils_checkQueryResult__WEBPACK_IMPORTED_MODULE_10__[/* checkQueryResult */ "a"])(result.csv);
        const file = result.csv;
        dispatch(setQueryResults(src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Done, [file], duration, null));
    }
    catch (e) {
        if (e.name === 'CancellationError') {
            return;
        }
        console.error(e);
        dispatch(setQueryResults(src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Error, null, null, e.message));
    }
};
const addVariableToTimeMachine = (variableID) => async (dispatch, getState) => {
    const contextID = getState().timeMachines.activeTimeMachineID;
    const variable = Object(src_variables_selectors__WEBPACK_IMPORTED_MODULE_11__[/* getVariable */ "p"])(getState(), variableID);
    const variables = Object(src_variables_selectors__WEBPACK_IMPORTED_MODULE_11__[/* getHydratedVariables */ "j"])(getState(), contextID);
    if (!variables.includes(variable)) {
        variables.push(variable);
    }
    await dispatch(Object(src_variables_actions_thunks__WEBPACK_IMPORTED_MODULE_5__[/* refreshVariableValues */ "g"])(contextID, variables));
};
const selectVariableValue = (variableID, selectedValue) => (dispatch, getState) => {
    const contextID = getState().timeMachines.activeTimeMachineID;
    dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_4__[/* selectValue */ "p"])(contextID, variableID, selectedValue));
    dispatch(executeQueries());
};


/***/ }),

/***/ 14:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./src/client/generatedRoutes.ts
const RequestContext = function (requestHandler, responseHandler) {
    this.requestHandler = requestHandler;
    this.responseHandler = responseHandler;
};
RequestContext.prototype.request = async function (method, url, params = {}, options = {}) {
    const requestHeaders = new Headers(params.headers);
    const contentType = requestHeaders.get('Content-Type') || '';
    if (params.auth) {
        const credentials = btoa(`${params.auth.username}:${params.auth.password}`);
        requestHeaders.append('Authorization', `Basic ${credentials}`);
    }
    const body = params.data && contentType.includes('json')
        ? JSON.stringify(params.data)
        : params.data;
    const query = params.query ? `?${new URLSearchParams(params.query)}` : '';
    const { url: middlewareUrl, query: middlewareQuery, init, } = this.requestHandler(url, query, {
        method,
        body,
        credentials: 'same-origin',
        signal: options.signal,
        headers: requestHeaders,
    });
    const response = await fetch(`${middlewareUrl}${middlewareQuery}`, init);
    const { status, headers } = response;
    const responseContentType = headers.get('Content-Type') || '';
    let data;
    if (responseContentType.includes('json')) {
        data = await response.json();
    }
    else if (responseContentType.includes('octet-stream')) {
        data = await response.blob();
    }
    else if (responseContentType.includes('text')) {
        data = await response.text();
    }
    return this.responseHandler(status, headers, data);
};
RequestContext.prototype.setRequestHandler = function (requestHandler) {
    this.requestHandler = requestHandler;
};
RequestContext.prototype.setResponseHandler = function (responseHandler) {
    this.responseHandler = responseHandler;
};
const rc = new RequestContext((url, query, init) => {
    return { url, query, init };
}, (status, headers, data) => {
    return { status, headers, data };
});
const request = rc.request.bind(rc);
const setRequestHandler = rc.setRequestHandler.bind(rc);
const setResponseHandler = rc.setResponseHandler.bind(rc);
const postSignin = (params, options = {}) => request('POST', '/api/v2/signin', params, options);
const postSignout = (params, options = {}) => request('POST', '/api/v2/signout', params, options);
const get = (params, options = {}) => request('GET', '/api/v2/', params, options);
const getSetup = (params, options = {}) => request('GET', '/api/v2/setup', params, options);
const postSetup = (params, options = {}) => request('POST', '/api/v2/setup', Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const getDocumentsTemplates = (params, options = {}) => request('GET', '/api/v2/documents/templates', params, options);
const postDocumentsTemplate = (params, options = {}) => request('POST', '/api/v2/documents/templates', Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const getDocumentsTemplate = (params, options = {}) => request('GET', `/api/v2/documents/templates/${params.templateID}`, params, options);
const putDocumentsTemplate = (params, options = {}) => request('PUT', `/api/v2/documents/templates/${params.templateID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteDocumentsTemplate = (params, options = {}) => request('DELETE', `/api/v2/documents/templates/${params.templateID}`, params, options);
const getDocumentsTemplatesLabels = (params, options = {}) => request('GET', `/api/v2/documents/templates/${params.templateID}/labels`, params, options);
const postDocumentsTemplatesLabel = (params, options = {}) => request('POST', `/api/v2/documents/templates/${params.templateID}/labels`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteDocumentsTemplatesLabel = (params, options = {}) => request('DELETE', `/api/v2/documents/templates/${params.templateID}/labels/${params.labelID}`, params, options);
const getTelegrafPlugins = (params, options = {}) => request('GET', '/api/v2/telegraf/plugins', params, options);
const getTelegrafs = (params, options = {}) => request('GET', '/api/v2/telegrafs', params, options);
const postTelegraf = (params, options = {}) => request('POST', '/api/v2/telegrafs', Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const getTelegraf = (params, options = {}) => request('GET', `/api/v2/telegrafs/${params.telegrafID}`, params, options);
const putTelegraf = (params, options = {}) => request('PUT', `/api/v2/telegrafs/${params.telegrafID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteTelegraf = (params, options = {}) => request('DELETE', `/api/v2/telegrafs/${params.telegrafID}`, params, options);
const getTelegrafsLabels = (params, options = {}) => request('GET', `/api/v2/telegrafs/${params.telegrafID}/labels`, params, options);
const postTelegrafsLabel = (params, options = {}) => request('POST', `/api/v2/telegrafs/${params.telegrafID}/labels`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteTelegrafsLabel = (params, options = {}) => request('DELETE', `/api/v2/telegrafs/${params.telegrafID}/labels/${params.labelID}`, params, options);
const getTelegrafsMembers = (params, options = {}) => request('GET', `/api/v2/telegrafs/${params.telegrafID}/members`, params, options);
const postTelegrafsMember = (params, options = {}) => request('POST', `/api/v2/telegrafs/${params.telegrafID}/members`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteTelegrafsMember = (params, options = {}) => request('DELETE', `/api/v2/telegrafs/${params.telegrafID}/members/${params.userID}`, params, options);
const getTelegrafsOwners = (params, options = {}) => request('GET', `/api/v2/telegrafs/${params.telegrafID}/owners`, params, options);
const postTelegrafsOwner = (params, options = {}) => request('POST', `/api/v2/telegrafs/${params.telegrafID}/owners`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteTelegrafsOwner = (params, options = {}) => request('DELETE', `/api/v2/telegrafs/${params.telegrafID}/owners/${params.userID}`, params, options);
const getScrapers = (params, options = {}) => request('GET', '/api/v2/scrapers', params, options);
const postScraper = (params, options = {}) => request('POST', '/api/v2/scrapers', Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const getScraper = (params, options = {}) => request('GET', `/api/v2/scrapers/${params.scraperTargetID}`, params, options);
const patchScraper = (params, options = {}) => request('PATCH', `/api/v2/scrapers/${params.scraperTargetID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteScraper = (params, options = {}) => request('DELETE', `/api/v2/scrapers/${params.scraperTargetID}`, params, options);
const getScrapersLabels = (params, options = {}) => request('GET', `/api/v2/scrapers/${params.scraperTargetID}/labels`, params, options);
const postScrapersLabel = (params, options = {}) => request('POST', `/api/v2/scrapers/${params.scraperTargetID}/labels`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const patchScrapersLabel = (params, options = {}) => request('PATCH', `/api/v2/scrapers/${params.scraperTargetID}/labels/${params.labelID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteScrapersLabel = (params, options = {}) => request('DELETE', `/api/v2/scrapers/${params.scraperTargetID}/labels/${params.labelID}`, params, options);
const getScrapersMembers = (params, options = {}) => request('GET', `/api/v2/scrapers/${params.scraperTargetID}/members`, params, options);
const postScrapersMember = (params, options = {}) => request('POST', `/api/v2/scrapers/${params.scraperTargetID}/members`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteScrapersMember = (params, options = {}) => request('DELETE', `/api/v2/scrapers/${params.scraperTargetID}/members/${params.userID}`, params, options);
const getScrapersOwners = (params, options = {}) => request('GET', `/api/v2/scrapers/${params.scraperTargetID}/owners`, params, options);
const postScrapersOwner = (params, options = {}) => request('POST', `/api/v2/scrapers/${params.scraperTargetID}/owners`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteScrapersOwner = (params, options = {}) => request('DELETE', `/api/v2/scrapers/${params.scraperTargetID}/owners/${params.userID}`, params, options);
const getVariables = (params, options = {}) => request('GET', '/api/v2/variables', params, options);
const postVariable = (params, options = {}) => request('POST', '/api/v2/variables', Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const getVariable = (params, options = {}) => request('GET', `/api/v2/variables/${params.variableID}`, params, options);
const putVariable = (params, options = {}) => request('PUT', `/api/v2/variables/${params.variableID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const patchVariable = (params, options = {}) => request('PATCH', `/api/v2/variables/${params.variableID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteVariable = (params, options = {}) => request('DELETE', `/api/v2/variables/${params.variableID}`, params, options);
const getVariablesLabels = (params, options = {}) => request('GET', `/api/v2/variables/${params.variableID}/labels`, params, options);
const postVariablesLabel = (params, options = {}) => request('POST', `/api/v2/variables/${params.variableID}/labels`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteVariablesLabel = (params, options = {}) => request('DELETE', `/api/v2/variables/${params.variableID}/labels/${params.labelID}`, params, options);
const postWrite = (params, options = {}) => request('POST', '/api/v2/write', Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'text/plain' }) }), options);
const postDelete = (params, options = {}) => request('POST', '/api/v2/delete', Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const getReady = (params, options = {}) => request('GET', '/api/v2/ready', params, options);
const getHealth = (params, options = {}) => request('GET', '/api/v2/health', params, options);
const getSources = (params, options = {}) => request('GET', '/api/v2/sources', params, options);
const postSource = (params, options = {}) => request('POST', '/api/v2/sources', Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const getSource = (params, options = {}) => request('GET', `/api/v2/sources/${params.sourceID}`, params, options);
const patchSource = (params, options = {}) => request('PATCH', `/api/v2/sources/${params.sourceID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteSource = (params, options = {}) => request('DELETE', `/api/v2/sources/${params.sourceID}`, params, options);
const getSourcesHealth = (params, options = {}) => request('GET', `/api/v2/sources/${params.sourceID}/health`, params, options);
const getSourcesBuckets = (params, options = {}) => request('GET', `/api/v2/sources/${params.sourceID}/buckets`, params, options);
const getLabels = (params, options = {}) => request('GET', '/api/v2/labels', params, options);
const postLabel = (params, options = {}) => request('POST', '/api/v2/labels', Object.assign(Object.assign({}, params), { headers: { 'Content-Type': 'application/json' } }), options);
const getLabel = (params, options = {}) => request('GET', `/api/v2/labels/${params.labelID}`, params, options);
const patchLabel = (params, options = {}) => request('PATCH', `/api/v2/labels/${params.labelID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteLabel = (params, options = {}) => request('DELETE', `/api/v2/labels/${params.labelID}`, params, options);
const getDashboards = (params, options = {}) => request('GET', '/api/v2/dashboards', params, options);
const postDashboard = (params, options = {}) => request('POST', '/api/v2/dashboards', Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const getDashboard = (params, options = {}) => request('GET', `/api/v2/dashboards/${params.dashboardID}`, params, options);
const patchDashboard = (params, options = {}) => request('PATCH', `/api/v2/dashboards/${params.dashboardID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteDashboard = (params, options = {}) => request('DELETE', `/api/v2/dashboards/${params.dashboardID}`, params, options);
const postDashboardsCell = (params, options = {}) => request('POST', `/api/v2/dashboards/${params.dashboardID}/cells`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const putDashboardsCells = (params, options = {}) => request('PUT', `/api/v2/dashboards/${params.dashboardID}/cells`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const patchDashboardsCell = (params, options = {}) => request('PATCH', `/api/v2/dashboards/${params.dashboardID}/cells/${params.cellID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteDashboardsCell = (params, options = {}) => request('DELETE', `/api/v2/dashboards/${params.dashboardID}/cells/${params.cellID}`, params, options);
const getDashboardsCellsView = (params, options = {}) => request('GET', `/api/v2/dashboards/${params.dashboardID}/cells/${params.cellID}/view`, params, options);
const patchDashboardsCellsView = (params, options = {}) => request('PATCH', `/api/v2/dashboards/${params.dashboardID}/cells/${params.cellID}/view`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const getDashboardsLabels = (params, options = {}) => request('GET', `/api/v2/dashboards/${params.dashboardID}/labels`, params, options);
const postDashboardsLabel = (params, options = {}) => request('POST', `/api/v2/dashboards/${params.dashboardID}/labels`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteDashboardsLabel = (params, options = {}) => request('DELETE', `/api/v2/dashboards/${params.dashboardID}/labels/${params.labelID}`, params, options);
const getDashboardsMembers = (params, options = {}) => request('GET', `/api/v2/dashboards/${params.dashboardID}/members`, params, options);
const postDashboardsMember = (params, options = {}) => request('POST', `/api/v2/dashboards/${params.dashboardID}/members`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteDashboardsMember = (params, options = {}) => request('DELETE', `/api/v2/dashboards/${params.dashboardID}/members/${params.userID}`, params, options);
const getDashboardsOwners = (params, options = {}) => request('GET', `/api/v2/dashboards/${params.dashboardID}/owners`, params, options);
const postDashboardsOwner = (params, options = {}) => request('POST', `/api/v2/dashboards/${params.dashboardID}/owners`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteDashboardsOwner = (params, options = {}) => request('DELETE', `/api/v2/dashboards/${params.dashboardID}/owners/${params.userID}`, params, options);
const getDashboardsLogs = (params, options = {}) => request('GET', `/api/v2/dashboards/${params.dashboardID}/logs`, params, options);
const postQueryAst = (params, options = {}) => request('POST', '/api/v2/query/ast', Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const getQuerySuggestions = (params, options = {}) => request('GET', '/api/v2/query/suggestions', params, options);
const getQuerySuggestion = (params, options = {}) => request('GET', `/api/v2/query/suggestions/${params.name}`, params, options);
const getAuthorizations = (params, options = {}) => request('GET', '/api/v2/authorizations', params, options);
const postAuthorization = (params, options = {}) => request('POST', '/api/v2/authorizations', Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const getAuthorization = (params, options = {}) => request('GET', `/api/v2/authorizations/${params.authID}`, params, options);
const patchAuthorization = (params, options = {}) => request('PATCH', `/api/v2/authorizations/${params.authID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteAuthorization = (params, options = {}) => request('DELETE', `/api/v2/authorizations/${params.authID}`, params, options);
const postQueryAnalyze = (params, options = {}) => request('POST', '/api/v2/query/analyze', Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const postQuery = (params, options = {}) => request('POST', '/api/v2/query', Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const getBuckets = (params, options = {}) => request('GET', '/api/v2/buckets', params, options);
const postBucket = (params, options = {}) => request('POST', '/api/v2/buckets', Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const getBucket = (params, options = {}) => request('GET', `/api/v2/buckets/${params.bucketID}`, params, options);
const patchBucket = (params, options = {}) => request('PATCH', `/api/v2/buckets/${params.bucketID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteBucket = (params, options = {}) => request('DELETE', `/api/v2/buckets/${params.bucketID}`, params, options);
const getBucketsLabels = (params, options = {}) => request('GET', `/api/v2/buckets/${params.bucketID}/labels`, params, options);
const postBucketsLabel = (params, options = {}) => request('POST', `/api/v2/buckets/${params.bucketID}/labels`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteBucketsLabel = (params, options = {}) => request('DELETE', `/api/v2/buckets/${params.bucketID}/labels/${params.labelID}`, params, options);
const getBucketsMembers = (params, options = {}) => request('GET', `/api/v2/buckets/${params.bucketID}/members`, params, options);
const postBucketsMember = (params, options = {}) => request('POST', `/api/v2/buckets/${params.bucketID}/members`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteBucketsMember = (params, options = {}) => request('DELETE', `/api/v2/buckets/${params.bucketID}/members/${params.userID}`, params, options);
const getBucketsOwners = (params, options = {}) => request('GET', `/api/v2/buckets/${params.bucketID}/owners`, params, options);
const postBucketsOwner = (params, options = {}) => request('POST', `/api/v2/buckets/${params.bucketID}/owners`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteBucketsOwner = (params, options = {}) => request('DELETE', `/api/v2/buckets/${params.bucketID}/owners/${params.userID}`, params, options);
const getBucketsLogs = (params, options = {}) => request('GET', `/api/v2/buckets/${params.bucketID}/logs`, params, options);
const getOrgs = (params, options = {}) => request('GET', '/api/v2/orgs', params, options);
const postOrg = (params, options = {}) => request('POST', '/api/v2/orgs', Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const getOrg = (params, options = {}) => request('GET', `/api/v2/orgs/${params.orgID}`, params, options);
const patchOrg = (params, options = {}) => request('PATCH', `/api/v2/orgs/${params.orgID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteOrg = (params, options = {}) => request('DELETE', `/api/v2/orgs/${params.orgID}`, params, options);
const getOrgsLabels = (params, options = {}) => request('GET', `/api/v2/orgs/${params.orgID}/labels`, params, options);
const postOrgsLabel = (params, options = {}) => request('POST', `/api/v2/orgs/${params.orgID}/labels`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteOrgsLabel = (params, options = {}) => request('DELETE', `/api/v2/orgs/${params.orgID}/labels/${params.labelID}`, params, options);
const getOrgsSecrets = (params, options = {}) => request('GET', `/api/v2/orgs/${params.orgID}/secrets`, params, options);
const patchOrgsSecrets = (params, options = {}) => request('PATCH', `/api/v2/orgs/${params.orgID}/secrets`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const postOrgsSecretsDelete = (params, options = {}) => request('POST', `/api/v2/orgs/${params.orgID}/secrets/delete`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const getOrgsMembers = (params, options = {}) => request('GET', `/api/v2/orgs/${params.orgID}/members`, params, options);
const postOrgsMember = (params, options = {}) => request('POST', `/api/v2/orgs/${params.orgID}/members`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteOrgsMember = (params, options = {}) => request('DELETE', `/api/v2/orgs/${params.orgID}/members/${params.userID}`, params, options);
const getOrgsOwners = (params, options = {}) => request('GET', `/api/v2/orgs/${params.orgID}/owners`, params, options);
const postOrgsOwner = (params, options = {}) => request('POST', `/api/v2/orgs/${params.orgID}/owners`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteOrgsOwner = (params, options = {}) => request('DELETE', `/api/v2/orgs/${params.orgID}/owners/${params.userID}`, params, options);
const getOrgsLogs = (params, options = {}) => request('GET', `/api/v2/orgs/${params.orgID}/logs`, params, options);
const postPackage = (params, options = {}) => request('POST', '/api/v2/packages', Object.assign(Object.assign({}, params), { headers: { 'Content-Type': 'application/json' } }), options);
const postPackagesApply = (params, options = {}) => request('POST', '/api/v2/packages/apply', Object.assign(Object.assign({}, params), { headers: { 'Content-Type': 'application/json' } }), options);
const getTasks = (params, options = {}) => request('GET', '/api/v2/tasks', params, options);
const postTask = (params, options = {}) => request('POST', '/api/v2/tasks', Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const getTask = (params, options = {}) => request('GET', `/api/v2/tasks/${params.taskID}`, params, options);
const patchTask = (params, options = {}) => request('PATCH', `/api/v2/tasks/${params.taskID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteTask = (params, options = {}) => request('DELETE', `/api/v2/tasks/${params.taskID}`, params, options);
const getTasksRuns = (params, options = {}) => request('GET', `/api/v2/tasks/${params.taskID}/runs`, params, options);
const postTasksRun = (params, options = {}) => request('POST', `/api/v2/tasks/${params.taskID}/runs`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const getTasksRun = (params, options = {}) => request('GET', `/api/v2/tasks/${params.taskID}/runs/${params.runID}`, params, options);
const deleteTasksRun = (params, options = {}) => request('DELETE', `/api/v2/tasks/${params.taskID}/runs/${params.runID}`, params, options);
const postTasksRunsRetry = (params, options = {}) => request('POST', `/api/v2/tasks/${params.taskID}/runs/${params.runID}/retry`, params, options);
const getTasksLogs = (params, options = {}) => request('GET', `/api/v2/tasks/${params.taskID}/logs`, params, options);
const getTasksRunsLogs = (params, options = {}) => request('GET', `/api/v2/tasks/${params.taskID}/runs/${params.runID}/logs`, params, options);
const getTasksLabels = (params, options = {}) => request('GET', `/api/v2/tasks/${params.taskID}/labels`, params, options);
const postTasksLabel = (params, options = {}) => request('POST', `/api/v2/tasks/${params.taskID}/labels`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteTasksLabel = (params, options = {}) => request('DELETE', `/api/v2/tasks/${params.taskID}/labels/${params.labelID}`, params, options);
const getMe = (params, options = {}) => request('GET', '/api/v2/me', params, options);
const putMePassword = (params, options = {}) => request('PUT', '/api/v2/me/password', Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const getTasksMembers = (params, options = {}) => request('GET', `/api/v2/tasks/${params.taskID}/members`, params, options);
const postTasksMember = (params, options = {}) => request('POST', `/api/v2/tasks/${params.taskID}/members`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteTasksMember = (params, options = {}) => request('DELETE', `/api/v2/tasks/${params.taskID}/members/${params.userID}`, params, options);
const getTasksOwners = (params, options = {}) => request('GET', `/api/v2/tasks/${params.taskID}/owners`, params, options);
const postTasksOwner = (params, options = {}) => request('POST', `/api/v2/tasks/${params.taskID}/owners`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteTasksOwner = (params, options = {}) => request('DELETE', `/api/v2/tasks/${params.taskID}/owners/${params.userID}`, params, options);
const getUsers = (params, options = {}) => request('GET', '/api/v2/users', params, options);
const postUser = (params, options = {}) => request('POST', '/api/v2/users', Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const getUser = (params, options = {}) => request('GET', `/api/v2/users/${params.userID}`, params, options);
const patchUser = (params, options = {}) => request('PATCH', `/api/v2/users/${params.userID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteUser = (params, options = {}) => request('DELETE', `/api/v2/users/${params.userID}`, params, options);
const putUsersPassword = (params, options = {}) => request('PUT', `/api/v2/users/${params.userID}/password`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const getUsersLogs = (params, options = {}) => request('GET', `/api/v2/users/${params.userID}/logs`, params, options);
const getChecks = (params, options = {}) => request('GET', '/api/v2/checks', params, options);
const postCheck = (params, options = {}) => request('POST', '/api/v2/checks', Object.assign(Object.assign({}, params), { headers: { 'Content-Type': 'application/json' } }), options);
const getCheck = (params, options = {}) => request('GET', `/api/v2/checks/${params.checkID}`, params, options);
const putCheck = (params, options = {}) => request('PUT', `/api/v2/checks/${params.checkID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const patchCheck = (params, options = {}) => request('PATCH', `/api/v2/checks/${params.checkID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteCheck = (params, options = {}) => request('DELETE', `/api/v2/checks/${params.checkID}`, params, options);
const getChecksLabels = (params, options = {}) => request('GET', `/api/v2/checks/${params.checkID}/labels`, params, options);
const postChecksLabel = (params, options = {}) => request('POST', `/api/v2/checks/${params.checkID}/labels`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteChecksLabel = (params, options = {}) => request('DELETE', `/api/v2/checks/${params.checkID}/labels/${params.labelID}`, params, options);
const getNotificationRules = (params, options = {}) => request('GET', '/api/v2/notificationRules', params, options);
const postNotificationRule = (params, options = {}) => request('POST', '/api/v2/notificationRules', Object.assign(Object.assign({}, params), { headers: { 'Content-Type': 'application/json' } }), options);
const getChecksQuery = (params, options = {}) => request('GET', `/api/v2/checks/${params.checkID}/query`, params, options);
const getNotificationRule = (params, options = {}) => request('GET', `/api/v2/notificationRules/${params.ruleID}`, params, options);
const putNotificationRule = (params, options = {}) => request('PUT', `/api/v2/notificationRules/${params.ruleID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const patchNotificationRule = (params, options = {}) => request('PATCH', `/api/v2/notificationRules/${params.ruleID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteNotificationRule = (params, options = {}) => request('DELETE', `/api/v2/notificationRules/${params.ruleID}`, params, options);
const getNotificationRulesLabels = (params, options = {}) => request('GET', `/api/v2/notificationRules/${params.ruleID}/labels`, params, options);
const postNotificationRulesLabel = (params, options = {}) => request('POST', `/api/v2/notificationRules/${params.ruleID}/labels`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteNotificationRulesLabel = (params, options = {}) => request('DELETE', `/api/v2/notificationRules/${params.ruleID}/labels/${params.labelID}`, params, options);
const getNotificationRulesQuery = (params, options = {}) => request('GET', `/api/v2/notificationRules/${params.ruleID}/query`, params, options);
const getNotificationEndpoints = (params, options = {}) => request('GET', '/api/v2/notificationEndpoints', params, options);
const postNotificationEndpoint = (params, options = {}) => request('POST', '/api/v2/notificationEndpoints', Object.assign(Object.assign({}, params), { headers: { 'Content-Type': 'application/json' } }), options);
const getNotificationEndpoint = (params, options = {}) => request('GET', `/api/v2/notificationEndpoints/${params.endpointID}`, params, options);
const putNotificationEndpoint = (params, options = {}) => request('PUT', `/api/v2/notificationEndpoints/${params.endpointID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const patchNotificationEndpoint = (params, options = {}) => request('PATCH', `/api/v2/notificationEndpoints/${params.endpointID}`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteNotificationEndpoint = (params, options = {}) => request('DELETE', `/api/v2/notificationEndpoints/${params.endpointID}`, params, options);
const getNotificationEndpointsLabels = (params, options = {}) => request('GET', `/api/v2/notificationEndpoints/${params.endpointID}/labels`, params, options);
const postNotificationEndpointsLabel = (params, options = {}) => request('POST', `/api/v2/notificationEndpoints/${params.endpointID}/labels`, Object.assign(Object.assign({}, params), { headers: Object.assign(Object.assign({}, params.headers), { 'Content-Type': 'application/json' }) }), options);
const deleteNotificationEndpointsLabel = (params, options = {}) => request('DELETE', `/api/v2/notificationEndpoints/${params.endpointID}/labels/${params.labelID}`, params, options);

// EXTERNAL MODULE: ./src/utils/basepath.ts
var basepath = __webpack_require__(239);

// CONCATENATED MODULE: ./src/client/index.ts
/* unused concated harmony import setRequestHandler */
/* unused concated harmony import setResponseHandler */
/* concated harmony reexport postSignin */__webpack_require__.d(__webpack_exports__, "rb", function() { return postSignin; });
/* concated harmony reexport postSignout */__webpack_require__.d(__webpack_exports__, "sb", function() { return postSignout; });
/* unused concated harmony import get */
/* unused concated harmony import getSetup */
/* unused concated harmony import postSetup */
/* unused concated harmony import getDocumentsTemplates */
/* unused concated harmony import postDocumentsTemplate */
/* unused concated harmony import getDocumentsTemplate */
/* unused concated harmony import putDocumentsTemplate */
/* unused concated harmony import deleteDocumentsTemplate */
/* unused concated harmony import getDocumentsTemplatesLabels */
/* unused concated harmony import postDocumentsTemplatesLabel */
/* unused concated harmony import deleteDocumentsTemplatesLabel */
/* concated harmony reexport getTelegrafPlugins */__webpack_require__.d(__webpack_exports__, "N", function() { return getTelegrafPlugins; });
/* unused concated harmony import getTelegrafs */
/* unused concated harmony import postTelegraf */
/* unused concated harmony import getTelegraf */
/* unused concated harmony import putTelegraf */
/* unused concated harmony import deleteTelegraf */
/* unused concated harmony import getTelegrafsLabels */
/* unused concated harmony import postTelegrafsLabel */
/* unused concated harmony import deleteTelegrafsLabel */
/* unused concated harmony import getTelegrafsMembers */
/* unused concated harmony import postTelegrafsMember */
/* unused concated harmony import deleteTelegrafsMember */
/* unused concated harmony import getTelegrafsOwners */
/* unused concated harmony import postTelegrafsOwner */
/* unused concated harmony import deleteTelegrafsOwner */
/* unused concated harmony import getScrapers */
/* unused concated harmony import postScraper */
/* unused concated harmony import getScraper */
/* unused concated harmony import patchScraper */
/* unused concated harmony import deleteScraper */
/* unused concated harmony import getScrapersLabels */
/* unused concated harmony import postScrapersLabel */
/* unused concated harmony import patchScrapersLabel */
/* unused concated harmony import deleteScrapersLabel */
/* unused concated harmony import getScrapersMembers */
/* unused concated harmony import postScrapersMember */
/* unused concated harmony import deleteScrapersMember */
/* unused concated harmony import getScrapersOwners */
/* unused concated harmony import postScrapersOwner */
/* unused concated harmony import deleteScrapersOwner */
/* concated harmony reexport getVariables */__webpack_require__.d(__webpack_exports__, "P", function() { return getVariables; });
/* concated harmony reexport postVariable */__webpack_require__.d(__webpack_exports__, "wb", function() { return postVariable; });
/* concated harmony reexport getVariable */__webpack_require__.d(__webpack_exports__, "O", function() { return getVariable; });
/* unused concated harmony import putVariable */
/* concated harmony reexport patchVariable */__webpack_require__.d(__webpack_exports__, "ab", function() { return patchVariable; });
/* concated harmony reexport deleteVariable */__webpack_require__.d(__webpack_exports__, "r", function() { return deleteVariable; });
/* unused concated harmony import getVariablesLabels */
/* concated harmony reexport postVariablesLabel */__webpack_require__.d(__webpack_exports__, "xb", function() { return postVariablesLabel; });
/* concated harmony reexport deleteVariablesLabel */__webpack_require__.d(__webpack_exports__, "s", function() { return deleteVariablesLabel; });
/* concated harmony reexport postWrite */__webpack_require__.d(__webpack_exports__, "yb", function() { return postWrite; });
/* concated harmony reexport postDelete */__webpack_require__.d(__webpack_exports__, "ib", function() { return postDelete; });
/* unused concated harmony import getReady */
/* unused concated harmony import getHealth */
/* unused concated harmony import getSources */
/* unused concated harmony import postSource */
/* unused concated harmony import getSource */
/* unused concated harmony import patchSource */
/* unused concated harmony import deleteSource */
/* unused concated harmony import getSourcesHealth */
/* unused concated harmony import getSourcesBuckets */
/* concated harmony reexport getLabels */__webpack_require__.d(__webpack_exports__, "C", function() { return getLabels; });
/* concated harmony reexport postLabel */__webpack_require__.d(__webpack_exports__, "jb", function() { return postLabel; });
/* unused concated harmony import getLabel */
/* concated harmony reexport patchLabel */__webpack_require__.d(__webpack_exports__, "V", function() { return patchLabel; });
/* concated harmony reexport deleteLabel */__webpack_require__.d(__webpack_exports__, "i", function() { return deleteLabel; });
/* concated harmony reexport getDashboards */__webpack_require__.d(__webpack_exports__, "A", function() { return getDashboards; });
/* concated harmony reexport postDashboard */__webpack_require__.d(__webpack_exports__, "fb", function() { return postDashboard; });
/* concated harmony reexport getDashboard */__webpack_require__.d(__webpack_exports__, "z", function() { return getDashboard; });
/* concated harmony reexport patchDashboard */__webpack_require__.d(__webpack_exports__, "T", function() { return patchDashboard; });
/* concated harmony reexport deleteDashboard */__webpack_require__.d(__webpack_exports__, "f", function() { return deleteDashboard; });
/* concated harmony reexport postDashboardsCell */__webpack_require__.d(__webpack_exports__, "gb", function() { return postDashboardsCell; });
/* concated harmony reexport putDashboardsCells */__webpack_require__.d(__webpack_exports__, "Ab", function() { return putDashboardsCells; });
/* unused concated harmony import patchDashboardsCell */
/* concated harmony reexport deleteDashboardsCell */__webpack_require__.d(__webpack_exports__, "g", function() { return deleteDashboardsCell; });
/* concated harmony reexport getDashboardsCellsView */__webpack_require__.d(__webpack_exports__, "B", function() { return getDashboardsCellsView; });
/* concated harmony reexport patchDashboardsCellsView */__webpack_require__.d(__webpack_exports__, "U", function() { return patchDashboardsCellsView; });
/* unused concated harmony import getDashboardsLabels */
/* concated harmony reexport postDashboardsLabel */__webpack_require__.d(__webpack_exports__, "hb", function() { return postDashboardsLabel; });
/* concated harmony reexport deleteDashboardsLabel */__webpack_require__.d(__webpack_exports__, "h", function() { return deleteDashboardsLabel; });
/* unused concated harmony import getDashboardsMembers */
/* unused concated harmony import postDashboardsMember */
/* unused concated harmony import deleteDashboardsMember */
/* unused concated harmony import getDashboardsOwners */
/* unused concated harmony import postDashboardsOwner */
/* unused concated harmony import deleteDashboardsOwner */
/* unused concated harmony import getDashboardsLogs */
/* concated harmony reexport postQueryAst */__webpack_require__.d(__webpack_exports__, "qb", function() { return postQueryAst; });
/* unused concated harmony import getQuerySuggestions */
/* unused concated harmony import getQuerySuggestion */
/* concated harmony reexport getAuthorizations */__webpack_require__.d(__webpack_exports__, "u", function() { return getAuthorizations; });
/* unused concated harmony import postAuthorization */
/* concated harmony reexport getAuthorization */__webpack_require__.d(__webpack_exports__, "t", function() { return getAuthorization; });
/* concated harmony reexport patchAuthorization */__webpack_require__.d(__webpack_exports__, "Q", function() { return patchAuthorization; });
/* concated harmony reexport deleteAuthorization */__webpack_require__.d(__webpack_exports__, "a", function() { return deleteAuthorization; });
/* unused concated harmony import postQueryAnalyze */
/* unused concated harmony import postQuery */
/* concated harmony reexport getBuckets */__webpack_require__.d(__webpack_exports__, "w", function() { return getBuckets; });
/* concated harmony reexport postBucket */__webpack_require__.d(__webpack_exports__, "bb", function() { return postBucket; });
/* concated harmony reexport getBucket */__webpack_require__.d(__webpack_exports__, "v", function() { return getBucket; });
/* concated harmony reexport patchBucket */__webpack_require__.d(__webpack_exports__, "R", function() { return patchBucket; });
/* concated harmony reexport deleteBucket */__webpack_require__.d(__webpack_exports__, "b", function() { return deleteBucket; });
/* unused concated harmony import getBucketsLabels */
/* concated harmony reexport postBucketsLabel */__webpack_require__.d(__webpack_exports__, "cb", function() { return postBucketsLabel; });
/* concated harmony reexport deleteBucketsLabel */__webpack_require__.d(__webpack_exports__, "c", function() { return deleteBucketsLabel; });
/* unused concated harmony import getBucketsMembers */
/* unused concated harmony import postBucketsMember */
/* unused concated harmony import deleteBucketsMember */
/* unused concated harmony import getBucketsOwners */
/* unused concated harmony import postBucketsOwner */
/* unused concated harmony import deleteBucketsOwner */
/* unused concated harmony import getBucketsLogs */
/* concated harmony reexport getOrgs */__webpack_require__.d(__webpack_exports__, "G", function() { return getOrgs; });
/* concated harmony reexport postOrg */__webpack_require__.d(__webpack_exports__, "ob", function() { return postOrg; });
/* unused concated harmony import getOrg */
/* concated harmony reexport patchOrg */__webpack_require__.d(__webpack_exports__, "Y", function() { return patchOrg; });
/* concated harmony reexport deleteOrg */__webpack_require__.d(__webpack_exports__, "n", function() { return deleteOrg; });
/* unused concated harmony import getOrgsLabels */
/* unused concated harmony import postOrgsLabel */
/* unused concated harmony import deleteOrgsLabel */
/* unused concated harmony import getOrgsSecrets */
/* unused concated harmony import patchOrgsSecrets */
/* unused concated harmony import postOrgsSecretsDelete */
/* concated harmony reexport getOrgsMembers */__webpack_require__.d(__webpack_exports__, "H", function() { return getOrgsMembers; });
/* concated harmony reexport postOrgsMember */__webpack_require__.d(__webpack_exports__, "pb", function() { return postOrgsMember; });
/* concated harmony reexport deleteOrgsMember */__webpack_require__.d(__webpack_exports__, "o", function() { return deleteOrgsMember; });
/* concated harmony reexport getOrgsOwners */__webpack_require__.d(__webpack_exports__, "I", function() { return getOrgsOwners; });
/* unused concated harmony import postOrgsOwner */
/* unused concated harmony import deleteOrgsOwner */
/* unused concated harmony import getOrgsLogs */
/* unused concated harmony import postPackage */
/* unused concated harmony import postPackagesApply */
/* concated harmony reexport getTasks */__webpack_require__.d(__webpack_exports__, "K", function() { return getTasks; });
/* concated harmony reexport postTask */__webpack_require__.d(__webpack_exports__, "tb", function() { return postTask; });
/* concated harmony reexport getTask */__webpack_require__.d(__webpack_exports__, "J", function() { return getTask; });
/* concated harmony reexport patchTask */__webpack_require__.d(__webpack_exports__, "Z", function() { return patchTask; });
/* concated harmony reexport deleteTask */__webpack_require__.d(__webpack_exports__, "p", function() { return deleteTask; });
/* concated harmony reexport getTasksRuns */__webpack_require__.d(__webpack_exports__, "L", function() { return getTasksRuns; });
/* concated harmony reexport postTasksRun */__webpack_require__.d(__webpack_exports__, "vb", function() { return postTasksRun; });
/* unused concated harmony import getTasksRun */
/* unused concated harmony import deleteTasksRun */
/* unused concated harmony import postTasksRunsRetry */
/* unused concated harmony import getTasksLogs */
/* concated harmony reexport getTasksRunsLogs */__webpack_require__.d(__webpack_exports__, "M", function() { return getTasksRunsLogs; });
/* unused concated harmony import getTasksLabels */
/* concated harmony reexport postTasksLabel */__webpack_require__.d(__webpack_exports__, "ub", function() { return postTasksLabel; });
/* concated harmony reexport deleteTasksLabel */__webpack_require__.d(__webpack_exports__, "q", function() { return deleteTasksLabel; });
/* unused concated harmony import getMe */
/* unused concated harmony import putMePassword */
/* unused concated harmony import getTasksMembers */
/* unused concated harmony import postTasksMember */
/* unused concated harmony import deleteTasksMember */
/* unused concated harmony import getTasksOwners */
/* unused concated harmony import postTasksOwner */
/* unused concated harmony import deleteTasksOwner */
/* unused concated harmony import getUsers */
/* unused concated harmony import postUser */
/* unused concated harmony import getUser */
/* unused concated harmony import patchUser */
/* unused concated harmony import deleteUser */
/* unused concated harmony import putUsersPassword */
/* unused concated harmony import getUsersLogs */
/* concated harmony reexport getChecks */__webpack_require__.d(__webpack_exports__, "y", function() { return getChecks; });
/* concated harmony reexport postCheck */__webpack_require__.d(__webpack_exports__, "db", function() { return postCheck; });
/* concated harmony reexport getCheck */__webpack_require__.d(__webpack_exports__, "x", function() { return getCheck; });
/* concated harmony reexport putCheck */__webpack_require__.d(__webpack_exports__, "zb", function() { return putCheck; });
/* concated harmony reexport patchCheck */__webpack_require__.d(__webpack_exports__, "S", function() { return patchCheck; });
/* concated harmony reexport deleteCheck */__webpack_require__.d(__webpack_exports__, "d", function() { return deleteCheck; });
/* unused concated harmony import getChecksLabels */
/* concated harmony reexport postChecksLabel */__webpack_require__.d(__webpack_exports__, "eb", function() { return postChecksLabel; });
/* concated harmony reexport deleteChecksLabel */__webpack_require__.d(__webpack_exports__, "e", function() { return deleteChecksLabel; });
/* concated harmony reexport getNotificationRules */__webpack_require__.d(__webpack_exports__, "F", function() { return getNotificationRules; });
/* concated harmony reexport postNotificationRule */__webpack_require__.d(__webpack_exports__, "mb", function() { return postNotificationRule; });
/* unused concated harmony import getChecksQuery */
/* concated harmony reexport getNotificationRule */__webpack_require__.d(__webpack_exports__, "E", function() { return getNotificationRule; });
/* concated harmony reexport putNotificationRule */__webpack_require__.d(__webpack_exports__, "Cb", function() { return putNotificationRule; });
/* concated harmony reexport patchNotificationRule */__webpack_require__.d(__webpack_exports__, "X", function() { return patchNotificationRule; });
/* concated harmony reexport deleteNotificationRule */__webpack_require__.d(__webpack_exports__, "l", function() { return deleteNotificationRule; });
/* unused concated harmony import getNotificationRulesLabels */
/* concated harmony reexport postNotificationRulesLabel */__webpack_require__.d(__webpack_exports__, "nb", function() { return postNotificationRulesLabel; });
/* concated harmony reexport deleteNotificationRulesLabel */__webpack_require__.d(__webpack_exports__, "m", function() { return deleteNotificationRulesLabel; });
/* unused concated harmony import getNotificationRulesQuery */
/* concated harmony reexport getNotificationEndpoints */__webpack_require__.d(__webpack_exports__, "D", function() { return getNotificationEndpoints; });
/* concated harmony reexport postNotificationEndpoint */__webpack_require__.d(__webpack_exports__, "kb", function() { return postNotificationEndpoint; });
/* unused concated harmony import getNotificationEndpoint */
/* concated harmony reexport putNotificationEndpoint */__webpack_require__.d(__webpack_exports__, "Bb", function() { return putNotificationEndpoint; });
/* concated harmony reexport patchNotificationEndpoint */__webpack_require__.d(__webpack_exports__, "W", function() { return patchNotificationEndpoint; });
/* concated harmony reexport deleteNotificationEndpoint */__webpack_require__.d(__webpack_exports__, "j", function() { return deleteNotificationEndpoint; });
/* unused concated harmony import getNotificationEndpointsLabels */
/* concated harmony reexport postNotificationEndpointsLabel */__webpack_require__.d(__webpack_exports__, "lb", function() { return postNotificationEndpointsLabel; });
/* concated harmony reexport deleteNotificationEndpointsLabel */__webpack_require__.d(__webpack_exports__, "k", function() { return deleteNotificationEndpointsLabel; });


setRequestHandler((url, query, init) => {
    return {
        url: `${Object(basepath["a" /* getAPIBasepath */])()}${url}`,
        query,
        init,
    };
});
setResponseHandler((status, headers, data) => {
    if (status === 403) {
        postSignout({});
        window.location.href = '/signin';
    }
    return { status, headers, data };
});



/***/ }),

/***/ 144:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return setDataLoadersType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return clearDataLoaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return setTelegrafConfigName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return setTelegrafConfigDescription; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return updateTelegrafPluginConfig; });
/* unused harmony export updateTelegrafPlugin */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addConfigValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return removeConfigValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return setConfigArrayValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return setTelegrafConfigID; });
/* unused harmony export addPluginBundle */
/* unused harmony export removePluginBundle */
/* unused harmony export addTelegrafPlugins */
/* unused harmony export removeBundlePlugins */
/* unused harmony export setScraperTargetBucket */
/* unused harmony export setScraperTargetURL */
/* unused harmony export setScraperTargetName */
/* unused harmony export setScraperTargetID */
/* unused harmony export setToken */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return addPluginBundleWithPlugins; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return removePluginBundleWithPlugins; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return createOrUpdateTelegrafConfigAsync; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return setActiveTelegrafPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return setPluginConfiguration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return setLineProtocolBody; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return setActiveLPTab; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return setLPStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return setPrecision; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return writeLineProtocolAction; });
/* unused harmony export saveScraperTarget */
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(41);
/* harmony import */ var src_utils_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(87);
/* harmony import */ var _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(98);
/* harmony import */ var src_authorizations_apis__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(748);
/* harmony import */ var src_client__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14);
/* harmony import */ var src_schemas__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(175);
/* harmony import */ var src_schemas_telegrafs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(249);
/* harmony import */ var src_dataLoaders_utils_pluginConfigs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(403);
/* harmony import */ var src_labels_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(189);
/* harmony import */ var src_dataLoaders_selectors__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(841);
/* harmony import */ var src_organizations_selectors__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(19);
/* harmony import */ var src_dataLoaders_constants_pluginConfigs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(233);
/* harmony import */ var src_types_dataLoaders__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(126);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(5);
/* harmony import */ var src_telegrafs_actions_creators__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(405);
/* harmony import */ var src_authorizations_actions_creators__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(406);
/* harmony import */ var src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(33);
/* harmony import */ var src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(35);




















const DEFAULT_COLLECTION_INTERVAL = 10000;
const setDataLoadersType = (type) => ({
    type: 'SET_DATA_LOADERS_TYPE',
    payload: { type },
});
const clearDataLoaders = () => ({
    type: 'CLEAR_DATA_LOADERS',
});
const setTelegrafConfigName = (name) => ({
    type: 'SET_TELEGRAF_CONFIG_NAME',
    payload: { name },
});
const setTelegrafConfigDescription = (description) => ({
    type: 'SET_TELEGRAF_CONFIG_DESCRIPTION',
    payload: { description },
});
const updateTelegrafPluginConfig = (name, field, value) => ({
    type: 'UPDATE_TELEGRAF_PLUGIN_CONFIG',
    payload: { name, field, value },
});
const updateTelegrafPlugin = (plugin) => ({
    type: 'UPDATE_TELEGRAF_PLUGIN',
    payload: { plugin },
});
const addConfigValue = (pluginName, fieldName, value) => ({
    type: 'ADD_TELEGRAF_PLUGIN_CONFIG_VALUE',
    payload: { pluginName, fieldName, value },
});
const removeConfigValue = (pluginName, fieldName, value) => ({
    type: 'REMOVE_TELEGRAF_PLUGIN_CONFIG_VALUE',
    payload: { pluginName, fieldName, value },
});
const setConfigArrayValue = (pluginName, field, valueIndex, value) => ({
    type: 'SET_TELEGRAF_PLUGIN_CONFIG_VALUE',
    payload: { pluginName, field, valueIndex, value },
});
const setTelegrafConfigID = (id) => ({
    type: 'SET_TELEGRAF_CONFIG_ID',
    payload: { id },
});
const addPluginBundle = (bundle) => ({
    type: 'ADD_PLUGIN_BUNDLE',
    payload: { bundle },
});
const removePluginBundle = (bundle) => ({
    type: 'REMOVE_PLUGIN_BUNDLE',
    payload: { bundle },
});
const addTelegrafPlugins = (telegrafPlugins) => ({
    type: 'ADD_TELEGRAF_PLUGINS',
    payload: { telegrafPlugins },
});
const removeBundlePlugins = (bundle) => ({
    type: 'REMOVE_BUNDLE_PLUGINS',
    payload: { bundle },
});
const setScraperTargetBucket = (bucket) => ({
    type: 'SET_SCRAPER_TARGET_BUCKET',
    payload: { bucket },
});
const setScraperTargetURL = (url) => ({
    type: 'SET_SCRAPER_TARGET_URL',
    payload: { url },
});
const setScraperTargetName = (name) => ({
    type: 'SET_SCRAPER_TARGET_NAME',
    payload: { name },
});
const setScraperTargetID = (id) => ({
    type: 'SET_SCRAPER_TARGET_ID',
    payload: { id },
});
const setToken = (token) => ({
    type: 'SET_TOKEN',
    payload: { token },
});
const addPluginBundleWithPlugins = (bundle) => dispatch => {
    dispatch(addPluginBundle(bundle));
    const plugins = src_dataLoaders_constants_pluginConfigs__WEBPACK_IMPORTED_MODULE_12__[/* pluginsByBundle */ "d"][bundle];
    dispatch(addTelegrafPlugins(plugins.map(p => {
        const isConfigured = !!src_dataLoaders_constants_pluginConfigs__WEBPACK_IMPORTED_MODULE_12__[/* telegrafPluginsInfo */ "e"][p].fields
            ? src_types_dataLoaders__WEBPACK_IMPORTED_MODULE_13__[/* ConfigurationState */ "d"].Unconfigured
            : src_types_dataLoaders__WEBPACK_IMPORTED_MODULE_13__[/* ConfigurationState */ "d"].Configured;
        return {
            name: p,
            active: false,
            configured: isConfigured,
            templateID: src_dataLoaders_constants_pluginConfigs__WEBPACK_IMPORTED_MODULE_12__[/* telegrafPluginsInfo */ "e"][p].templateID,
        };
    })));
};
const removePluginBundleWithPlugins = (bundle) => dispatch => {
    dispatch(removePluginBundle(bundle));
    dispatch(removeBundlePlugins(bundle));
};
const createOrUpdateTelegrafConfigAsync = () => async (dispatch, getState) => {
    const { telegrafPlugins, telegrafConfigID, telegrafConfigName, telegrafConfigDescription, } = Object(src_dataLoaders_selectors__WEBPACK_IMPORTED_MODULE_10__[/* getDataLoaders */ "a"])(getState());
    const { name } = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_11__[/* getOrg */ "a"])(getState());
    const { bucket } = Object(src_dataLoaders_selectors__WEBPACK_IMPORTED_MODULE_10__[/* getSteps */ "b"])(getState());
    const influxDB2Out = {
        name: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TelegrafPluginOutputInfluxDBV2 */ "y"].NameEnum.InfluxdbV2,
        type: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TelegrafPluginOutputInfluxDBV2 */ "y"].TypeEnum.Output,
        config: {
            urls: [`${window.location.origin}`],
            token: '$INFLUX_TOKEN',
            organization: name,
            bucket,
        },
    };
    const plugins = telegrafPlugins.reduce((acc, tp) => {
        if (tp.configured === src_types_dataLoaders__WEBPACK_IMPORTED_MODULE_13__[/* ConfigurationState */ "d"].Configured) {
            return [...acc, tp.plugin || Object(src_dataLoaders_utils_pluginConfigs__WEBPACK_IMPORTED_MODULE_8__[/* createNewPlugin */ "a"])(tp.name)];
        }
        return acc;
    }, [influxDB2Out]);
    if (telegrafConfigID) {
        const telegraf = await src_utils_api__WEBPACK_IMPORTED_MODULE_2__[/* client */ "a"].telegrafConfigs.update(telegrafConfigID, {
            name: telegrafConfigName,
            description: telegrafConfigDescription,
            plugins,
        });
        const normTelegraf = Object(normalizr__WEBPACK_IMPORTED_MODULE_1__[/* normalize */ "a"])(telegraf, src_schemas_telegrafs__WEBPACK_IMPORTED_MODULE_7__[/* telegrafSchema */ "b"]);
        dispatch(Object(src_telegrafs_actions_creators__WEBPACK_IMPORTED_MODULE_15__[/* editTelegraf */ "g"])(normTelegraf));
        dispatch(setTelegrafConfigID(telegrafConfigID));
        return;
    }
    createTelegraf(dispatch, getState, plugins);
};
const createTelegraf = async (dispatch, getState, plugins) => {
    try {
        const state = getState();
        const { telegrafConfigName, telegrafConfigDescription } = Object(src_dataLoaders_selectors__WEBPACK_IMPORTED_MODULE_10__[/* getDataLoaders */ "a"])(state);
        const { bucket, bucketID } = Object(src_dataLoaders_selectors__WEBPACK_IMPORTED_MODULE_10__[/* getSteps */ "b"])(state);
        const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_11__[/* getOrg */ "a"])(getState());
        const telegrafRequest = {
            name: telegrafConfigName,
            description: telegrafConfigDescription,
            agent: { collectionInterval: DEFAULT_COLLECTION_INTERVAL },
            orgID: org.id,
            plugins,
        };
        const tc = await src_utils_api__WEBPACK_IMPORTED_MODULE_2__[/* client */ "a"].telegrafConfigs.create(telegrafRequest);
        const permissions = [
            {
                action: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* Permission */ "b"].ActionEnum.Write,
                resource: {
                    type: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* PermissionResource */ "c"].TypeEnum.Buckets,
                    id: bucketID,
                    orgID: org.id,
                },
            },
            {
                action: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* Permission */ "b"].ActionEnum.Read,
                resource: {
                    type: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* PermissionResource */ "c"].TypeEnum.Telegrafs,
                    id: tc.id,
                    orgID: org.id,
                },
            },
        ];
        const token = {
            name: `${telegrafConfigName} token`,
            orgID: org.id,
            description: `WRITE ${bucket} bucket / READ ${telegrafConfigName} telegraf config`,
            permissions,
        };
        const createdToken = await Object(src_authorizations_apis__WEBPACK_IMPORTED_MODULE_4__[/* createAuthorization */ "a"])(token);
        dispatch(setToken(createdToken.token));
        const normAuth = Object(normalizr__WEBPACK_IMPORTED_MODULE_1__[/* normalize */ "a"])(createdToken, src_schemas__WEBPACK_IMPORTED_MODULE_6__[/* authSchema */ "h"]);
        dispatch(Object(src_authorizations_actions_creators__WEBPACK_IMPORTED_MODULE_16__[/* addAuthorization */ "e"])(normAuth));
        const properties = {
            color: '#FFFFFF',
            description: `token for telegraf config: ${telegrafConfigName}`,
            tokenID: createdToken.id,
        };
        const resp = await Object(src_client__WEBPACK_IMPORTED_MODULE_5__[/* postLabel */ "jb"])({
            data: {
                orgID: org.id,
                name: `@influxdata.token-${new Date().getTime()}`,
                properties,
            },
        });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        const createdLabel = Object(src_labels_utils__WEBPACK_IMPORTED_MODULE_9__[/* addLabelDefaults */ "a"])(resp.data.label);
        const label = await src_utils_api__WEBPACK_IMPORTED_MODULE_2__[/* client */ "a"].telegrafConfigs.addLabel(tc.id, createdLabel);
        const config = Object.assign(Object.assign({}, tc), { labels: [label] });
        const normTelegraf = Object(normalizr__WEBPACK_IMPORTED_MODULE_1__[/* normalize */ "a"])(config, src_schemas_telegrafs__WEBPACK_IMPORTED_MODULE_7__[/* telegrafSchema */ "b"]);
        dispatch(setTelegrafConfigID(tc.id));
        dispatch(Object(src_telegrafs_actions_creators__WEBPACK_IMPORTED_MODULE_15__[/* addTelegraf */ "f"])(normTelegraf));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_17__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_18__[/* TelegrafConfigCreationSuccess */ "i"]));
    }
    catch (error) {
        console.error(error.message);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_17__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_18__[/* TelegrafConfigCreationError */ "h"]));
    }
};
const setActiveTelegrafPlugin = (telegrafPlugin) => ({
    type: 'SET_ACTIVE_TELEGRAF_PLUGIN',
    payload: { telegrafPlugin },
});
const setPluginConfiguration = (telegrafPlugin) => ({
    type: 'SET_PLUGIN_CONFIGURATION_STATE',
    payload: { telegrafPlugin },
});
const setLineProtocolBody = (lineProtocolBody) => ({
    type: 'SET_LINE_PROTOCOL_BODY',
    payload: { lineProtocolBody },
});
const setActiveLPTab = (activeLPTab) => ({
    type: 'SET_ACTIVE_LP_TAB',
    payload: { activeLPTab },
});
const setLPStatus = (lpStatus, lpError = '') => ({
    type: 'SET_LP_STATUS',
    payload: { lpStatus, lpError },
});
const setPrecision = (precision) => ({
    type: 'SET_PRECISION',
    payload: { precision },
});
const writeLineProtocolAction = (org, bucket, body, precision) => async (dispatch) => {
    try {
        dispatch(setLPStatus(src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Loading));
        const resp = await Object(src_client__WEBPACK_IMPORTED_MODULE_5__[/* postWrite */ "yb"])({
            data: body,
            query: { org, bucket, precision },
        });
        if (resp.status === 204) {
            dispatch(setLPStatus(src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Done));
        }
        else if (resp.status === 429) {
            dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_17__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_18__[/* readWriteCardinalityLimitReached */ "Yb"])(resp.data.message)));
            dispatch(setLPStatus(src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Error));
        }
        else {
            throw new Error(Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(resp, 'data.message', 'Failed to write data'));
        }
    }
    catch (error) {
        console.error(error);
        dispatch(setLPStatus(src_types__WEBPACK_IMPORTED_MODULE_14__["RemoteDataState"].Error, error.message));
    }
};
const saveScraperTarget = () => async (dispatch, getState) => {
    const { dataLoading: { dataLoaders: { scraperTarget: { url, id, name }, }, steps: { bucketID, orgID }, }, } = getState();
    try {
        if (id) {
            await src_utils_api__WEBPACK_IMPORTED_MODULE_2__[/* client */ "a"].scrapers.update(id, { url, bucketID });
        }
        else {
            const newTarget = await src_utils_api__WEBPACK_IMPORTED_MODULE_2__[/* client */ "a"].scrapers.create({
                name,
                type: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* ScraperTargetRequest */ "d"].TypeEnum.Prometheus,
                url,
                bucketID,
                orgID,
            });
            dispatch(setScraperTargetID(newTarget.id));
        }
    }
    catch (error) {
        console.error();
    }
};


/***/ }),

/***/ 149:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return OPTION_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return TIME_RANGE_START; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return TIME_RANGE_STOP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return WINDOW_PERIOD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BOUNDARY_GROUP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return variableItemTypes; });
const OPTION_NAME = 'v';
const TIME_RANGE_START = 'timeRangeStart';
const TIME_RANGE_STOP = 'timeRangeStop';
const WINDOW_PERIOD = 'windowPeriod';
const START = '^';
const QUOTE = '"';
const SPACE = '\\s';
const NEWLINE = '\\n';
const COMMENT = '\\/\\/';
const ADD = '\\+';
const SUB = '\\-';
const MUL = '\\*';
const DIV = '\\/';
const MOD = '\\%';
const EQ = '\\=\\=';
const LT = '\\<';
const GT = '\\>';
const LTE = '\\<=';
const GTE = '\\>\\=';
const NEQ = '\\!\\=';
const REGEXEQ = '\\=\\~';
const REGEXNEQ = '\\!\\~';
const ASSIGN = '\\=';
const ARROW = '\\=\\>';
const LPAREN = '\\(';
const RPAREN = '\\)';
const LBRACK = '\\[';
const RBRACK = '\\]';
const LBRACE = '\\{';
const RBRACE = '\\}';
const COLON = '\\:';
const COMMA = '\\,';
const EOF = '$';
const FLUX_BOUNDARY = [
    START,
    QUOTE,
    SPACE,
    NEWLINE,
    COMMENT,
    ADD,
    SUB,
    MUL,
    DIV,
    MOD,
    EQ,
    LT,
    GT,
    LTE,
    GTE,
    NEQ,
    REGEXEQ,
    REGEXNEQ,
    ASSIGN,
    ARROW,
    LPAREN,
    RPAREN,
    LBRACK,
    RBRACK,
    LBRACE,
    RBRACE,
    COLON,
    COMMA,
    EOF,
].join('|');
const BOUNDARY_GROUP = `(${FLUX_BOUNDARY})`;
const variableItemTypes = [
    {
        type: 'map',
        label: 'Map',
    },
    {
        type: 'query',
        label: 'Query',
    },
    {
        type: 'constant',
        label: 'CSV',
    },
];


/***/ }),

/***/ 150:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return defaultView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return defaultViewQuery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return defaultBuilderConfig; });
/* unused harmony export defaultLineViewProperties */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createView; });
/* harmony import */ var _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85);
/* harmony import */ var _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_influxdata_giraffe__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_shared_constants_graphColorPalettes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(212);
/* harmony import */ var src_dashboards_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(70);
/* harmony import */ var src_shared_constants_thresholds__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(213);
/* harmony import */ var src_alerting_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(75);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5);






const defaultView = (name = src_dashboards_constants__WEBPACK_IMPORTED_MODULE_2__[/* DEFAULT_CELL_NAME */ "c"]) => {
    return {
        name,
        status: src_types__WEBPACK_IMPORTED_MODULE_5__["RemoteDataState"].Done,
    };
};
function defaultViewQuery() {
    return {
        name: '',
        text: '',
        editMode: 'builder',
        builderConfig: defaultBuilderConfig(),
    };
}
function defaultBuilderConfig() {
    return {
        buckets: [],
        tags: [{ key: '_measurement', values: [] }],
        functions: [],
        aggregateWindow: { period: 'auto' },
    };
}
function defaultLineViewProperties() {
    return {
        queries: [defaultViewQuery()],
        colors: src_shared_constants_graphColorPalettes__WEBPACK_IMPORTED_MODULE_1__[/* DEFAULT_LINE_COLORS */ "a"],
        legend: {},
        note: '',
        showNoteWhenEmpty: false,
        axes: {
            x: {
                bounds: ['', ''],
                label: '',
                prefix: '',
                suffix: '',
                base: '10',
                scale: 'linear',
            },
            y: {
                bounds: ['', ''],
                label: '',
                prefix: '',
                suffix: '',
                base: '10',
                scale: 'linear',
            },
        },
    };
}
function defaultGaugeViewProperties() {
    return {
        queries: [defaultViewQuery()],
        colors: src_shared_constants_thresholds__WEBPACK_IMPORTED_MODULE_3__[/* DEFAULT_GAUGE_COLORS */ "e"],
        prefix: '',
        tickPrefix: '',
        suffix: '',
        tickSuffix: '',
        note: '',
        showNoteWhenEmpty: false,
        decimalPlaces: {
            isEnforced: true,
            digits: 2,
        },
    };
}
function defaultSingleStatViewProperties() {
    return {
        queries: [defaultViewQuery()],
        colors: src_shared_constants_thresholds__WEBPACK_IMPORTED_MODULE_3__[/* DEFAULT_THRESHOLDS_LIST_COLORS */ "f"],
        prefix: '',
        tickPrefix: '',
        suffix: '',
        tickSuffix: '',
        note: '',
        showNoteWhenEmpty: false,
        decimalPlaces: {
            isEnforced: true,
            digits: 2,
        },
    };
}
const NEW_VIEW_CREATORS = {
    xy: () => (Object.assign(Object.assign({}, defaultView()), { properties: Object.assign(Object.assign({}, defaultLineViewProperties()), { type: 'xy', shape: 'chronograf-v2', geom: 'line', xColumn: null, yColumn: null, position: 'overlaid' }) })),
    histogram: () => (Object.assign(Object.assign({}, defaultView()), { properties: {
            queries: [],
            type: 'histogram',
            shape: 'chronograf-v2',
            xColumn: '_value',
            xDomain: null,
            xAxisLabel: '',
            fillColumns: null,
            position: 'stacked',
            binCount: 30,
            colors: src_shared_constants_graphColorPalettes__WEBPACK_IMPORTED_MODULE_1__[/* DEFAULT_LINE_COLORS */ "a"],
            note: '',
            showNoteWhenEmpty: false,
        } })),
    heatmap: () => (Object.assign(Object.assign({}, defaultView()), { properties: {
            queries: [],
            type: 'heatmap',
            shape: 'chronograf-v2',
            xColumn: null,
            yColumn: null,
            xDomain: null,
            yDomain: null,
            xAxisLabel: '',
            yAxisLabel: '',
            xPrefix: '',
            xSuffix: '',
            yPrefix: '',
            ySuffix: '',
            colors: _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_0__["INFERNO"],
            binSize: 10,
            note: '',
            showNoteWhenEmpty: false,
        } })),
    'single-stat': () => (Object.assign(Object.assign({}, defaultView()), { properties: Object.assign(Object.assign({}, defaultSingleStatViewProperties()), { type: 'single-stat', shape: 'chronograf-v2', legend: {} }) })),
    gauge: () => (Object.assign(Object.assign({}, defaultView()), { properties: Object.assign(Object.assign({}, defaultGaugeViewProperties()), { type: 'gauge', shape: 'chronograf-v2', legend: {} }) })),
    'line-plus-single-stat': () => (Object.assign(Object.assign({}, defaultView()), { properties: Object.assign(Object.assign(Object.assign({}, defaultLineViewProperties()), defaultSingleStatViewProperties()), { type: 'line-plus-single-stat', shape: 'chronograf-v2', xColumn: null, yColumn: null, position: 'overlaid' }) })),
    table: () => (Object.assign(Object.assign({}, defaultView()), { properties: {
            type: 'table',
            shape: 'chronograf-v2',
            queries: [defaultViewQuery()],
            colors: src_shared_constants_thresholds__WEBPACK_IMPORTED_MODULE_3__[/* DEFAULT_THRESHOLDS_TABLE_COLORS */ "g"],
            tableOptions: {
                verticalTimeAxis: true,
                sortBy: null,
                fixFirstColumn: false,
            },
            fieldOptions: [],
            decimalPlaces: {
                isEnforced: false,
                digits: 2,
            },
            timeFormat: 'YYYY-MM-DD HH:mm:ss',
            note: '',
            showNoteWhenEmpty: false,
        } })),
    markdown: () => (Object.assign(Object.assign({}, defaultView()), { properties: {
            type: 'markdown',
            shape: 'chronograf-v2',
            note: '',
        } })),
    scatter: () => (Object.assign(Object.assign({}, defaultView()), { properties: {
            type: 'scatter',
            shape: 'chronograf-v2',
            queries: [defaultViewQuery()],
            colors: _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_0__["NINETEEN_EIGHTY_FOUR"],
            note: '',
            showNoteWhenEmpty: false,
            fillColumns: null,
            symbolColumns: null,
            xColumn: null,
            xDomain: null,
            yColumn: null,
            yDomain: null,
            xAxisLabel: '',
            yAxisLabel: '',
            xPrefix: '',
            xSuffix: '',
            yPrefix: '',
            ySuffix: '',
        } })),
    threshold: () => (Object.assign(Object.assign({}, defaultView('check')), { properties: {
            type: 'check',
            shape: 'chronograf-v2',
            checkID: '',
            queries: [
                {
                    name: '',
                    text: '',
                    editMode: 'builder',
                    builderConfig: {
                        buckets: [],
                        tags: [{ key: '_measurement', values: [] }],
                        functions: [{ name: 'mean' }],
                        aggregateWindow: { period: src_alerting_constants__WEBPACK_IMPORTED_MODULE_4__[/* DEFAULT_CHECK_EVERY */ "c"] },
                    },
                },
            ],
            colors: _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_0__["NINETEEN_EIGHTY_FOUR"],
        } })),
    deadman: () => (Object.assign(Object.assign({}, defaultView('check')), { properties: {
            type: 'check',
            shape: 'chronograf-v2',
            checkID: '',
            queries: [
                {
                    name: '',
                    text: '',
                    editMode: 'builder',
                    builderConfig: {
                        buckets: [],
                        tags: [{ key: '_measurement', values: [] }],
                        functions: [],
                    },
                },
            ],
            colors: _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_0__["NINETEEN_EIGHTY_FOUR"],
        } })),
    custom: () => (Object.assign(Object.assign({}, defaultView()), { properties: {
            type: 'table',
            shape: 'chronograf-v2',
            queries: [],
            colors: src_shared_constants_thresholds__WEBPACK_IMPORTED_MODULE_3__[/* DEFAULT_THRESHOLDS_LIST_COLORS */ "f"],
            tableOptions: {
                verticalTimeAxis: true,
                sortBy: null,
                fixFirstColumn: false,
            },
            fieldOptions: [],
            decimalPlaces: {
                isEnforced: false,
                digits: 2,
            },
            timeFormat: 'YYYY-MM-DD HH:mm:ss',
            note: '',
            showNoteWhenEmpty: false,
        } })),
};
function createView(viewType = 'xy') {
    const creator = NEW_VIEW_CREATORS[viewType];
    if (!creator) {
        throw new Error(`no view creator implemented for view of type ${viewType}`);
    }
    return creator();
}


/***/ }),

/***/ 152:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return runQuery; });
/* harmony import */ var src_shared_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(32);
/* harmony import */ var src_cloud_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(726);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);



const runQuery = (orgID, query, extern) => {
    const url = `${src_shared_constants__WEBPACK_IMPORTED_MODULE_0__[/* API_BASE_PATH */ "a"]}api/v2/query?${new URLSearchParams({ orgID })}`;
    const headers = {
        'Content-Type': 'application/json',
        'Accept-Encoding': 'gzip',
    };
    const body = {
        query,
        extern,
        dialect: { annotations: ['group', 'datatype', 'default'] },
    };
    const controller = new AbortController();
    const request = fetch(url, {
        method: 'POST',
        headers,
        body: JSON.stringify(body),
        signal: controller.signal,
    });
    const promise = request
        .then(processResponse)
        .catch(e => e.name === 'AbortError'
        ? Promise.reject(new src_types__WEBPACK_IMPORTED_MODULE_2__["CancellationError"]())
        : Promise.reject(e));
    return {
        promise,
        cancel: () => controller.abort(),
    };
};
const processResponse = async (response) => {
    switch (response.status) {
        case 200:
            return processSuccessResponse(response);
        case src_cloud_constants__WEBPACK_IMPORTED_MODULE_1__[/* RATE_LIMIT_ERROR_STATUS */ "b"]:
            return processRateLimitResponse(response);
        default:
            return processErrorResponse(response);
    }
};
const processSuccessResponse = async (response) => {
    const reader = response.body.getReader();
    const decoder = new TextDecoder();
    let csv = '';
    let bytesRead = 0;
    let didTruncate = false;
    let read = await reader.read();
    while (!read.done) {
        const text = decoder.decode(read.value);
        bytesRead += read.value.byteLength;
        if (bytesRead > src_shared_constants__WEBPACK_IMPORTED_MODULE_0__[/* FLUX_RESPONSE_BYTES_LIMIT */ "q"]) {
            csv += trimPartialLines(text);
            didTruncate = true;
            break;
        }
        else {
            csv += text;
            read = await reader.read();
        }
    }
    reader.cancel();
    return {
        type: 'SUCCESS',
        csv,
        bytesRead,
        didTruncate,
    };
};
const processRateLimitResponse = (response) => {
    const retryAfter = response.headers.get('Retry-After');
    return {
        type: 'RATE_LIMIT_ERROR',
        retryAfter: retryAfter ? parseInt(retryAfter) : null,
        message: src_cloud_constants__WEBPACK_IMPORTED_MODULE_1__[/* RATE_LIMIT_ERROR_TEXT */ "c"],
    };
};
const processErrorResponse = async (response) => {
    try {
        const body = await response.text();
        const json = JSON.parse(body);
        const message = json.message || json.error;
        return { type: 'UNKNOWN_ERROR', message };
    }
    catch (_a) {
        return { type: 'UNKNOWN_ERROR', message: 'Failed to execute Flux query' };
    }
};
const trimPartialLines = (partialResp) => {
    let i = partialResp.length - 1;
    while (partialResp[i] !== '\n') {
        if (i <= 0) {
            return partialResp;
        }
        i -= 1;
    }
    return partialResp.slice(0, i + 1);
};


/***/ }),

/***/ 1524:
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ 164:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return SET_VARIABLES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return SET_VARIABLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return REMOVE_VARIABLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return MOVE_VARIABLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return SET_VARIABLE_VALUES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return SELECT_VARIABLE_VALUE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return setVariables; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return setVariable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return removeVariable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return moveVariable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return setValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return selectValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return CLEAR_VARIABLE_EDITOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CHANGE_VARIABLE_EDITOR_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return UPDATE_VARIABLE_EDITOR_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return UPDATE_VARIABLE_EDITOR_QUERY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return UPDATE_VARIABLE_EDITOR_MAP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return UPDATE_VARIABLE_EDITOR_CONSTANT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return clearEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "x", function() { return updateType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return updateName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "w", function() { return updateQuery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return updateMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return updateConstant; });
const SET_VARIABLES = 'SET_VARIABLES';
const SET_VARIABLE = 'SET_VARIABLE';
const REMOVE_VARIABLE = 'REMOVE_VARIABLE';
const MOVE_VARIABLE = 'MOVE_VARIABLE';
const SET_VARIABLE_VALUES = 'SET_VARIABLE_VALUES';
const SELECT_VARIABLE_VALUE = 'SELECT_VARIABLE_VALUE';
const setVariables = (status, schema) => ({
    type: SET_VARIABLES,
    status,
    schema,
});
const setVariable = (id, status, schema) => ({
    type: SET_VARIABLE,
    id,
    status,
    schema,
});
const removeVariable = (id) => ({
    type: REMOVE_VARIABLE,
    id,
});
const moveVariable = (originalIndex, newIndex, contextID) => ({
    type: MOVE_VARIABLE,
    originalIndex,
    newIndex,
    contextID,
});
const setValues = (contextID, status, values) => ({
    type: SET_VARIABLE_VALUES,
    contextID,
    status,
    values,
});
const selectValue = (contextID, variableID, selectedValue) => ({
    type: SELECT_VARIABLE_VALUE,
    contextID,
    variableID,
    selectedValue,
});
const CLEAR_VARIABLE_EDITOR = 'CLEAR_VARIABLE_EDITOR';
const CHANGE_VARIABLE_EDITOR_TYPE = 'CHANCE_VARIABLE_EDITOR_TYPE';
const UPDATE_VARIABLE_EDITOR_NAME = 'UPDATE_VARIABLE_EDITOR_NAME';
const UPDATE_VARIABLE_EDITOR_QUERY = 'UPDATE_VARIABLE_EDITOR_QUERY';
const UPDATE_VARIABLE_EDITOR_MAP = 'UPDATE_VARIABLE_EDITOR_MAP';
const UPDATE_VARIABLE_EDITOR_CONSTANT = 'UPDATE_VARIABLE_EDITOR_CONSTANT';
const clearEditor = () => ({
    type: CLEAR_VARIABLE_EDITOR,
});
const updateType = (editorType) => ({
    type: CHANGE_VARIABLE_EDITOR_TYPE,
    editorType,
});
const updateName = (name) => ({
    type: UPDATE_VARIABLE_EDITOR_NAME,
    name,
});
const updateQuery = (arg) => ({
    type: UPDATE_VARIABLE_EDITOR_QUERY,
    payload: arg,
});
const updateMap = (arg) => ({
    type: UPDATE_VARIABLE_EDITOR_MAP,
    payload: arg,
});
const updateConstant = (arg) => ({
    type: UPDATE_VARIABLE_EDITOR_CONSTANT,
    payload: arg,
});


/***/ }),

/***/ 165:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ossMetricsTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return staticTemplates; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return influxdbTemplateList; });
/* harmony import */ var _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1192);
/* harmony import */ var _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__);

const ossMetricsTemplate = () => {
    return _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["ossMetrics"];
};
const staticTemplates = {
    Apache: _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["apache"],
    Docker: _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["docker"],
    'getting-started': _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["gettingStarted"],
    Github: _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["github"],
    JMeter: _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["jmeter"],
    Kubernetes: _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["kubernetes"],
    Nginx: _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["nginx"],
    'oss-metrics': _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["ossMetrics"],
    Redis: _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["redis"],
    System: _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["system"],
};
const influxdbTemplateList = [
    _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["apache"],
    _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["docker"],
    _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["gettingStarted"],
    _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["github"],
    _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["jmeter"],
    _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["kubernetes"],
    _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["nginx"],
    _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["ossMetrics"],
    _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["redis"],
    _influxdata_influxdb_templates__WEBPACK_IMPORTED_MODULE_0__["system"],
].map((t, i) => (Object.assign(Object.assign({}, t), { id: `influxdb-template-${i}` })));


/***/ }),

/***/ 175:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./src/schemas/authorizations.ts
var authorizations = __webpack_require__(304);

// EXTERNAL MODULE: ./node_modules/normalizr/dist/normalizr.es.js
var normalizr_es = __webpack_require__(41);

// EXTERNAL MODULE: ./src/types/index.ts
var types = __webpack_require__(5);

// EXTERNAL MODULE: ./src/schemas/labels.ts
var labels = __webpack_require__(76);

// CONCATENATED MODULE: ./src/schemas/buckets.ts



const bucketSchema = new normalizr_es["b" /* schema */].Entity(types["ResourceType"].Buckets, {
    labels: [labels["b" /* labelSchema */]],
});
const arrayOfBuckets = [bucketSchema];

// EXTERNAL MODULE: ./src/schemas/checks.ts
var checks = __webpack_require__(305);

// EXTERNAL MODULE: ./src/schemas/dashboards.ts
var dashboards = __webpack_require__(136);

// EXTERNAL MODULE: ./src/schemas/endpoints.ts
var endpoints = __webpack_require__(306);

// CONCATENATED MODULE: ./src/schemas/members.ts


const memberSchema = new normalizr_es["b" /* schema */].Entity(types["ResourceType"].Members);
const arrayOfMembers = [memberSchema];

// CONCATENATED MODULE: ./src/schemas/orgs.ts


const orgSchema = new normalizr_es["b" /* schema */].Entity(types["ResourceType"].Orgs);
const arrayOfOrgs = [orgSchema];

// EXTERNAL MODULE: ./src/schemas/rules.ts
var rules = __webpack_require__(307);

// CONCATENATED MODULE: ./src/schemas/scrapers.ts


const scraperSchema = new normalizr_es["b" /* schema */].Entity(types["ResourceType"].Scrapers);
const arrayOfScrapers = [scraperSchema];

// EXTERNAL MODULE: ./src/schemas/tasks.ts
var tasks = __webpack_require__(248);

// EXTERNAL MODULE: ./src/schemas/telegrafs.ts
var telegrafs = __webpack_require__(249);

// EXTERNAL MODULE: ./src/schemas/templates.ts
var templates = __webpack_require__(308);

// EXTERNAL MODULE: ./src/schemas/variables.ts
var variables = __webpack_require__(215);

// CONCATENATED MODULE: ./src/schemas/index.ts
/* concated harmony reexport authSchema */__webpack_require__.d(__webpack_exports__, "h", function() { return authorizations["b" /* authSchema */]; });
/* unused concated harmony import arrayOfAuths */
/* concated harmony reexport bucketSchema */__webpack_require__.d(__webpack_exports__, "i", function() { return bucketSchema; });
/* concated harmony reexport arrayOfBuckets */__webpack_require__.d(__webpack_exports__, "a", function() { return arrayOfBuckets; });
/* unused concated harmony import checkSchema */
/* unused concated harmony import arrayOfChecks */
/* concated harmony reexport dashboardSchema */__webpack_require__.d(__webpack_exports__, "k", function() { return dashboards["f" /* dashboardSchema */]; });
/* concated harmony reexport arrayOfDashboards */__webpack_require__.d(__webpack_exports__, "c", function() { return dashboards["c" /* arrayOfDashboards */]; });
/* concated harmony reexport cellSchema */__webpack_require__.d(__webpack_exports__, "j", function() { return dashboards["e" /* cellSchema */]; });
/* concated harmony reexport arrayOfCells */__webpack_require__.d(__webpack_exports__, "b", function() { return dashboards["b" /* arrayOfCells */]; });
/* concated harmony reexport viewSchema */__webpack_require__.d(__webpack_exports__, "p", function() { return dashboards["g" /* viewSchema */]; });
/* concated harmony reexport arrayOfViews */__webpack_require__.d(__webpack_exports__, "g", function() { return dashboards["d" /* arrayOfViews */]; });
/* unused concated harmony import endpointSchema */
/* unused concated harmony import arrayOfEndpoints */
/* concated harmony reexport labelSchema */__webpack_require__.d(__webpack_exports__, "l", function() { return labels["b" /* labelSchema */]; });
/* unused concated harmony import arrayOfLabels */
/* concated harmony reexport memberSchema */__webpack_require__.d(__webpack_exports__, "m", function() { return memberSchema; });
/* concated harmony reexport arrayOfMembers */__webpack_require__.d(__webpack_exports__, "d", function() { return arrayOfMembers; });
/* concated harmony reexport orgSchema */__webpack_require__.d(__webpack_exports__, "n", function() { return orgSchema; });
/* concated harmony reexport arrayOfOrgs */__webpack_require__.d(__webpack_exports__, "e", function() { return arrayOfOrgs; });
/* unused concated harmony import ruleSchema */
/* unused concated harmony import arrayOfRules */
/* concated harmony reexport scraperSchema */__webpack_require__.d(__webpack_exports__, "o", function() { return scraperSchema; });
/* concated harmony reexport arrayOfScrapers */__webpack_require__.d(__webpack_exports__, "f", function() { return arrayOfScrapers; });
/* unused concated harmony import taskSchema */
/* unused concated harmony import arrayOfTasks */
/* unused concated harmony import telegrafSchema */
/* unused concated harmony import arrayOfTelegrafs */
/* unused concated harmony import templateSchema */
/* unused concated harmony import arrayOfTemplates */
/* unused concated harmony import variableSchema */
/* unused concated harmony import arrayOfVariables */
















/***/ }),

/***/ 189:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export randomPresetColor */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return validateLabelUniqueness; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return validateHexCode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addLabelDefaults; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var src_labels_constants___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(247);



const randomPresetColor = () => Object(lodash__WEBPACK_IMPORTED_MODULE_0__["sample"])(src_labels_constants___WEBPACK_IMPORTED_MODULE_2__[/* PRESET_LABEL_COLORS */ "e"].slice(1)).colorHex;
const validateLabelUniqueness = (labelNames, name) => {
    if (typeof name !== 'string') {
        return null;
    }
    if (name.trim() === '') {
        return 'Label name is required';
    }
    const isNameUnique = !labelNames.find(labelName => labelName.toLowerCase() === name.toLowerCase());
    if (!isNameUnique) {
        return 'There is already a label with that name';
    }
    return null;
};
const validateHexCode = (colorHex) => {
    const isValidLength = colorHex.length === src_labels_constants___WEBPACK_IMPORTED_MODULE_2__[/* HEX_CODE_CHAR_LENGTH */ "b"];
    const beginsWithHash = colorHex.substring(0, 1) === '#';
    const errorMessage = [];
    if (!beginsWithHash) {
        errorMessage.push('Hexcodes must begin with #');
    }
    if (!isValidLength) {
        if (errorMessage.length) {
            errorMessage.push(`and must be ${src_labels_constants___WEBPACK_IMPORTED_MODULE_2__[/* HEX_CODE_CHAR_LENGTH */ "b"]} characters`);
        }
        else {
            errorMessage.push(`Hexcodes must be ${src_labels_constants___WEBPACK_IMPORTED_MODULE_2__[/* HEX_CODE_CHAR_LENGTH */ "b"]} characters`);
        }
    }
    if (!errorMessage.length) {
        return null;
    }
    return errorMessage.join(', ');
};
const DEFAULT_LABEL_COLOR = '#326BBA';
const addLabelDefaults = (l) => {
    const out = Object.assign(Object.assign({}, l), { status: src_types__WEBPACK_IMPORTED_MODULE_1__["RemoteDataState"].Done, properties: Object.assign(Object.assign({}, l.properties), { color: (l.properties || {}).color || DEFAULT_LABEL_COLOR, description: (l.properties || {}).description || '' }) });
    return out;
};


/***/ }),

/***/ 19:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getOrg; });
/* unused harmony export getOrgByID */
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

const getOrg = (state) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(state, 'resources.orgs.org', null);
};
const getOrgByID = (state, id) => {
    const orgs = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(state, 'resources.orgs.byID');
    if (!orgs) {
        throw new Error('No orgs have been set');
    }
    if (!orgs[id]) {
        throw new Error(`No org with id "${id}" found in orgs state: ${JSON.stringify(orgs, null, 2)}"`);
    }
    return orgs[id];
};


/***/ }),

/***/ 190:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return getRuleVariantDefaults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CHANGES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return activeChange; });
/* unused harmony export previousLevel */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return changeStatusRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return initRuleDraft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return draftRuleToPostRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return newTagRuleDraft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return ruleToDraftRule; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(109);
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(uuid__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _influxdata_clockface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var _influxdata_clockface__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_influxdata_clockface__WEBPACK_IMPORTED_MODULE_2__);



const defaultMessage = 'Notification Rule: ${ r._notification_rule_name } triggered by check: ${ r._check_name }: ${ r._message }';
const getRuleVariantDefaults = (endpoints, id) => {
    const endpoint = endpoints.find(e => e.id === id);
    switch (endpoint.type) {
        case 'slack': {
            return { messageTemplate: defaultMessage, channel: '', type: 'slack' };
        }
        case 'pagerduty': {
            return { messageTemplate: defaultMessage, type: 'pagerduty' };
        }
        case 'http': {
            return { type: 'http', url: '' };
        }
        default: {
            throw new Error(`Could not find NotificationEndpoint with id "${id}"`);
        }
    }
};
const CHANGES = ['changes from', 'is equal to'];
const activeChange = (status) => {
    const { previousLevel } = status.value;
    if (!!previousLevel) {
        return 'changes from';
    }
    return 'is equal to';
};
const previousLevel = 'OK';
const changeStatusRule = (status, changeType) => {
    if (changeType === 'is equal to') {
        return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["omit"])(status, 'value.previousLevel');
    }
    const { value } = status;
    const newValue = Object.assign(Object.assign({}, value), { previousLevel });
    return Object.assign(Object.assign({}, status), { value: newValue });
};
const initRuleDraft = (orgID) => ({
    type: 'http',
    every: '10m',
    offset: '0s',
    url: '',
    orgID,
    name: '',
    activeStatus: 'active',
    status: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_2__["RemoteDataState"].NotStarted,
    endpointID: '',
    tagRules: [],
    labels: [],
    statusRules: [
        {
            cid: uuid__WEBPACK_IMPORTED_MODULE_1___default.a.v4(),
            value: {
                currentLevel: 'CRIT',
                period: '1h',
                count: 1,
            },
        },
    ],
    description: '',
});
const draftRuleToPostRule = (draftRule) => {
    return Object.assign(Object.assign({}, draftRule), { status: draftRule.activeStatus, statusRules: draftRule.statusRules.map(r => r.value), tagRules: draftRule.tagRules
            .map(r => r.value)
            .filter(tr => tr.key && tr.value) });
};
const newTagRuleDraft = () => ({
    cid: uuid__WEBPACK_IMPORTED_MODULE_1___default.a.v4(),
    value: {
        key: '',
        value: '',
        operator: 'equal',
    },
});
const ruleToDraftRule = (rule) => {
    const statusRules = rule.statusRules || [];
    const tagRules = rule.tagRules || [];
    return Object.assign(Object.assign({}, rule), { labels: rule.labels.map(l => l.id), status: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_2__["RemoteDataState"].Done, activeStatus: rule.status, offset: rule.offset || '', statusRules: statusRules.map(value => ({ cid: uuid__WEBPACK_IMPORTED_MODULE_1___default.a.v4(), value })), tagRules: tagRules.map(value => ({ cid: uuid__WEBPACK_IMPORTED_MODULE_1___default.a.v4(), value })) });
};


/***/ }),

/***/ 202:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__);


class OnboardingButtons extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
    constructor() {
        super(...arguments);
        this.submitRef = react__WEBPACK_IMPORTED_MODULE_0___default.a.createRef();
    }
    componentDidMount() {
        if (this.props.autoFocusNext) {
            const buttonRef = this.submitRef.current;
            if (buttonRef) {
                buttonRef.focus();
            }
        }
    }
    componentDidUpdate() {
        if (this.props.autoFocusNext) {
            const buttonRef = this.submitRef.current;
            if (buttonRef) {
                buttonRef.focus();
            }
        }
    }
    render() {
        const { nextButtonText, nextButtonStatus, className } = this.props;
        return (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["Overlay"].Footer, { className: className },
            this.backButton,
            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["Button"], { color: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["ComponentColor"].Primary, text: nextButtonText, type: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["ButtonType"].Submit, testID: "next", ref: this.submitRef, status: nextButtonStatus, tabIndex: 0 }),
            this.skipButton));
    }
    get backButton() {
        const { backButtonText, onClickBack } = this.props;
        if (!onClickBack || !backButtonText) {
            return;
        }
        return (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["Button"], { color: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["ComponentColor"].Default, text: backButtonText, onClick: onClickBack, testID: "back", tabIndex: 1 }));
    }
    get skipButton() {
        const { skipButtonText, onClickSkip, showSkip } = this.props;
        if (!showSkip) {
            return;
        }
        return (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", { className: "wizard--skip-container" },
            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["Button"], { className: "wizard--skip-button", size: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["ComponentSize"].Medium, color: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["ComponentColor"].Default, text: skipButtonText, onClick: onClickSkip, testID: "skip" })));
    }
}
OnboardingButtons.defaultProps = {
    nextButtonStatus: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["ComponentStatus"].Default,
    showSkip: false,
    autoFocusNext: true,
    skipButtonText: 'Skip',
    backButtonText: 'Previous',
    nextButtonText: 'Continue',
};
/* harmony default export */ __webpack_exports__["a"] = (OnboardingButtons);


/***/ }),

/***/ 210:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getTimeRangeVars; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return isDateParseable; });
/* harmony import */ var src_shared_utils_duration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(86);
/* harmony import */ var src_variables_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(149);


const getTimeRangeVars = (timeRange) => {
    let startValue;
    if (isDateParseable(timeRange.lower)) {
        startValue = generateDateTimeLiteral(src_variables_constants__WEBPACK_IMPORTED_MODULE_1__[/* TIME_RANGE_START */ "c"], timeRange.lower);
    }
    else {
        startValue = {
            type: 'VariableAssignment',
            id: {
                type: 'Identifier',
                name: src_variables_constants__WEBPACK_IMPORTED_MODULE_1__[/* TIME_RANGE_START */ "c"],
            },
            init: {
                type: 'UnaryExpression',
                operator: '-',
                argument: {
                    type: 'DurationLiteral',
                    values: Object(src_shared_utils_duration__WEBPACK_IMPORTED_MODULE_0__[/* parseDuration */ "h"])(Object(src_shared_utils_duration__WEBPACK_IMPORTED_MODULE_0__[/* timeRangeToDuration */ "i"])(timeRange)),
                },
            },
        };
    }
    let stopValue;
    if (timeRange.upper && isDateParseable(timeRange.upper)) {
        stopValue = generateDateTimeLiteral(src_variables_constants__WEBPACK_IMPORTED_MODULE_1__[/* TIME_RANGE_STOP */ "d"], timeRange.upper);
    }
    else {
        stopValue = {
            type: 'VariableAssignment',
            id: {
                type: 'Identifier',
                name: src_variables_constants__WEBPACK_IMPORTED_MODULE_1__[/* TIME_RANGE_STOP */ "d"],
            },
            init: {
                type: 'CallExpression',
                callee: {
                    type: 'Identifier',
                    name: 'now',
                },
            },
        };
    }
    return [startValue, stopValue];
};
const generateDateTimeLiteral = (name, value) => {
    return {
        type: 'VariableAssignment',
        id: {
            type: 'Identifier',
            name,
        },
        init: {
            type: 'DateTimeLiteral',
            value: new Date(value).toISOString(),
        },
    };
};
const isDateParseable = (ambiguousString) => !isNaN(Date.parse(ambiguousString));


/***/ }),

/***/ 211:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return SET_TASKS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return EDIT_TASK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return SET_TASK_OPTION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return SET_ALL_TASK_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return CLEAR_TASK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return CLEAR_CURRENT_TASK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return SET_NEW_SCRIPT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return SET_CURRENT_SCRIPT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return SET_CURRENT_TASK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return SET_SEARCH_TERM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return SET_SHOW_INACTIVE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return SET_RUNS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return SET_LOGS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return REMOVE_TASK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ADD_TASK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "D", function() { return setTasks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return addTask; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return editTask; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return removeTask; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "w", function() { return setCurrentTask; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return clearCurrentTask; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "C", function() { return setTaskOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return setAllTaskOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return clearTask; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "y", function() { return setNewScript; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return setCurrentScript; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "A", function() { return setSearchTerm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "B", function() { return setShowInactive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "z", function() { return setRuns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "x", function() { return setLogs; });
const SET_TASKS = 'SET_TASKS';
const EDIT_TASK = 'EDIT_TASK';
const SET_TASK_OPTION = 'SET_TASK_OPTION';
const SET_ALL_TASK_OPTIONS = 'SET_ALL_TASK_OPTIONS';
const CLEAR_TASK = 'CLEAR_TASK';
const CLEAR_CURRENT_TASK = 'CLEAR_CURRENT_TASK';
const SET_NEW_SCRIPT = 'SET_NEW_SCRIPT';
const SET_CURRENT_SCRIPT = 'SET_CURRENT_SCRIPT';
const SET_CURRENT_TASK = 'SET_CURRENT_TASK';
const SET_SEARCH_TERM = 'SET_SEARCH_TERM';
const SET_SHOW_INACTIVE = 'SET_SHOW_INACTIVE';
const SET_RUNS = 'SET_RUNS';
const SET_LOGS = 'SET_LOGS';
const REMOVE_TASK = 'REMOVE_TASK';
const ADD_TASK = 'ADD_TASK';
const setTasks = (status, schema) => ({
    type: SET_TASKS,
    status,
    schema,
});
const addTask = (schema) => ({
    type: ADD_TASK,
    schema,
});
const editTask = (schema) => ({
    type: EDIT_TASK,
    schema,
});
const removeTask = (id) => ({
    type: REMOVE_TASK,
    id,
});
const setCurrentTask = (schema) => ({
    type: SET_CURRENT_TASK,
    schema,
});
const clearCurrentTask = () => ({
    type: CLEAR_CURRENT_TASK,
});
const setTaskOption = (taskOption) => (Object.assign({ type: SET_TASK_OPTION }, taskOption));
const setAllTaskOptions = (schema) => ({
    type: SET_ALL_TASK_OPTIONS,
    schema,
});
const clearTask = () => ({
    type: CLEAR_TASK,
});
const setNewScript = (script) => ({
    type: SET_NEW_SCRIPT,
    script,
});
const setCurrentScript = (script) => ({
    type: SET_CURRENT_SCRIPT,
    script,
});
const setSearchTerm = (searchTerm) => ({
    type: SET_SEARCH_TERM,
    searchTerm,
});
const setShowInactive = () => ({
    type: SET_SHOW_INACTIVE,
});
const setRuns = (runs, runStatus) => ({
    type: SET_RUNS,
    runs,
    runStatus,
});
const setLogs = (logs) => ({
    type: SET_LOGS,
    logs,
});


/***/ }),

/***/ 212:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export LINE_COLORS_A */
/* unused harmony export LINE_COLORS_B */
/* unused harmony export LINE_COLORS_C */
/* unused harmony export LINE_COLORS_D */
/* unused harmony export LINE_COLORS_E */
/* unused harmony export LINE_COLORS_F */
/* unused harmony export LINE_COLORS_G */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DEFAULT_LINE_COLORS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return LINE_COLOR_SCALES; });
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(109);
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(uuid__WEBPACK_IMPORTED_MODULE_0__);

const COLOR_TYPE_SCALE = 'scale';
const LINE_COLORS_A = [
    {
        type: COLOR_TYPE_SCALE,
        hex: '#31C0F6',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'Nineteen Eighty Four',
        value: 0,
    },
    {
        type: COLOR_TYPE_SCALE,
        hex: '#A500A5',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'Nineteen Eighty Four',
        value: 0,
    },
    {
        type: COLOR_TYPE_SCALE,
        hex: '#FF7E27',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'Nineteen Eighty Four',
        value: 0,
    },
];
const LINE_COLORS_B = [
    {
        type: COLOR_TYPE_SCALE,
        hex: '#74D495',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'Atlantis',
        value: 0,
    },
    {
        type: COLOR_TYPE_SCALE,
        hex: '#3F3FBA',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'Atlantis',
        value: 0,
    },
    {
        type: COLOR_TYPE_SCALE,
        hex: '#FF4D9E',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'Atlantis',
        value: 0,
    },
];
const LINE_COLORS_C = [
    {
        type: COLOR_TYPE_SCALE,
        hex: '#8F8AF4',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'Do Androids Dream of Electric Sheep?',
        value: 0,
    },
    {
        type: COLOR_TYPE_SCALE,
        hex: '#A51414',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'Do Androids Dream of Electric Sheep?',
        value: 0,
    },
    {
        type: COLOR_TYPE_SCALE,
        hex: '#F4CF31',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'Do Androids Dream of Electric Sheep?',
        value: 0,
    },
];
const LINE_COLORS_D = [
    {
        type: COLOR_TYPE_SCALE,
        hex: '#FD7A5D',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'Delorean',
        value: 0,
    },
    {
        type: COLOR_TYPE_SCALE,
        hex: '#5F1CF2',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'Delorean',
        value: 0,
    },
    {
        type: COLOR_TYPE_SCALE,
        hex: '#4CE09A',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'Delorean',
        value: 0,
    },
];
const LINE_COLORS_E = [
    {
        type: COLOR_TYPE_SCALE,
        hex: '#FDC44F',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'Cthulhu',
        value: 0,
    },
    {
        type: COLOR_TYPE_SCALE,
        hex: '#007C76',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'Cthulhu',
        value: 0,
    },
    {
        type: COLOR_TYPE_SCALE,
        hex: '#8983FF',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'Cthulhu',
        value: 0,
    },
];
const LINE_COLORS_F = [
    {
        type: COLOR_TYPE_SCALE,
        hex: '#DA6FF1',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'Ectoplasm',
        value: 0,
    },
    {
        type: COLOR_TYPE_SCALE,
        hex: '#00717A',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'Ectoplasm',
        value: 0,
    },
    {
        type: COLOR_TYPE_SCALE,
        hex: '#ACFF76',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'Ectoplasm',
        value: 0,
    },
];
const LINE_COLORS_G = [
    {
        type: COLOR_TYPE_SCALE,
        hex: '#F6F6F8',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'T-Max 400 Film',
        value: 0,
    },
    {
        type: COLOR_TYPE_SCALE,
        hex: '#A4A8B6',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'T-Max 400 Film',
        value: 0,
    },
    {
        type: COLOR_TYPE_SCALE,
        hex: '#545667',
        id: uuid__WEBPACK_IMPORTED_MODULE_0___default.a.v4(),
        name: 'T-Max 400 Film',
        value: 0,
    },
];
const DEFAULT_LINE_COLORS = LINE_COLORS_A;
const LINE_COLOR_SCALES = [
    LINE_COLORS_A,
    LINE_COLORS_B,
    LINE_COLORS_C,
    LINE_COLORS_D,
    LINE_COLORS_E,
    LINE_COLORS_F,
    LINE_COLORS_G,
].map(colorScale => {
    const name = colorScale[0].name;
    const colors = colorScale;
    const id = colorScale[0].id;
    return { name, colors, id };
});


/***/ }),

/***/ 213:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export MAX_THRESHOLDS */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return MIN_THRESHOLDS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return COLOR_TYPE_MIN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return DEFAULT_VALUE_MIN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return COLOR_TYPE_MAX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return DEFAULT_VALUE_MAX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return COLOR_TYPE_THRESHOLD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return THRESHOLD_TYPE_TEXT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return THRESHOLD_TYPE_BG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BASE_THRESHOLD_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return THRESHOLD_COLORS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return DEFAULT_GAUGE_COLORS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return DEFAULT_THRESHOLDS_LIST_COLORS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return DEFAULT_THRESHOLDS_TABLE_COLORS; });
const MAX_THRESHOLDS = 5;
const MIN_THRESHOLDS = 2;
const COLOR_TYPE_MIN = 'min';
const DEFAULT_VALUE_MIN = 0;
const COLOR_TYPE_MAX = 'max';
const DEFAULT_VALUE_MAX = 100;
const COLOR_TYPE_THRESHOLD = 'threshold';
const THRESHOLD_TYPE_TEXT = 'text';
const THRESHOLD_TYPE_BG = 'background';
const BASE_THRESHOLD_ID = 'base';
const THRESHOLD_COLORS = [
    {
        hex: '#BF3D5E',
        name: 'ruby',
    },
    {
        hex: '#DC4E58',
        name: 'fire',
    },
    {
        hex: '#F95F53',
        name: 'curacao',
    },
    {
        hex: '#F48D38',
        name: 'tiger',
    },
    {
        hex: '#FFB94A',
        name: 'pineapple',
    },
    {
        hex: '#FFD255',
        name: 'thunder',
    },
    {
        hex: '#7CE490',
        name: 'honeydew',
    },
    {
        hex: '#4ED8A0',
        name: 'rainforest',
    },
    {
        hex: '#32B08C',
        name: 'viridian',
    },
    {
        hex: '#4591ED',
        name: 'ocean',
    },
    {
        hex: '#22ADF6',
        name: 'pool',
    },
    {
        hex: '#00C9FF',
        name: 'laser',
    },
    {
        hex: '#513CC6',
        name: 'planet',
    },
    {
        hex: '#7A65F2',
        name: 'star',
    },
    {
        hex: '#9394FF',
        name: 'comet',
    },
    {
        hex: '#383846',
        name: 'pepper',
    },
    {
        hex: '#545667',
        name: 'graphite',
    },
    {
        hex: '#ffffff',
        name: 'white',
    },
    {
        hex: '#292933',
        name: 'castle',
    },
];
const DEFAULT_GAUGE_COLORS = [
    {
        type: COLOR_TYPE_MIN,
        hex: THRESHOLD_COLORS[11].hex,
        id: '0',
        name: THRESHOLD_COLORS[11].name,
        value: DEFAULT_VALUE_MIN,
    },
    {
        type: COLOR_TYPE_MAX,
        hex: THRESHOLD_COLORS[14].hex,
        id: '1',
        name: THRESHOLD_COLORS[14].name,
        value: DEFAULT_VALUE_MAX,
    },
];
const DEFAULT_THRESHOLDS_LIST_COLORS = [
    {
        type: THRESHOLD_TYPE_TEXT,
        hex: THRESHOLD_COLORS[11].hex,
        id: BASE_THRESHOLD_ID,
        name: THRESHOLD_COLORS[11].name,
        value: 0,
    },
];
const DEFAULT_THRESHOLDS_TABLE_COLORS = [
    {
        type: THRESHOLD_TYPE_TEXT,
        hex: THRESHOLD_COLORS[17].hex,
        id: BASE_THRESHOLD_ID,
        name: THRESHOLD_COLORS[17].name,
        value: 0,
    },
];


/***/ }),

/***/ 215:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return variableSchema; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return arrayOfVariables; });
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(76);



const variableSchema = new normalizr__WEBPACK_IMPORTED_MODULE_0__[/* schema */ "b"].Entity(src_types__WEBPACK_IMPORTED_MODULE_1__["ResourceType"].Variables, {
    labels: [_labels__WEBPACK_IMPORTED_MODULE_2__[/* labelSchema */ "b"]],
}, {
    processStrategy: (v) => {
        return Object.assign(Object.assign({}, v), { status: src_types__WEBPACK_IMPORTED_MODULE_1__["RemoteDataState"].Done });
    },
});
const arrayOfVariables = [variableSchema];


/***/ }),

/***/ 216:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return setBuilderAggregateFunctionType; });
/* unused harmony export setBuilderBuckets */
/* unused harmony export setBuilderTagsStatus */
/* unused harmony export setFunctions */
/* unused harmony export setAggregateWindow */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return setValuesSearchTerm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return setKeysSearchTerm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return selectAggregateWindow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return loadBuckets; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return selectBucket; });
/* unused harmony export loadTagSelector */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return selectTagValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return selectBuilderFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return selectTagKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return searchTagValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return searchTagKeys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addTagSelector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return removeTagSelector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return reloadTagSelectors; });
/* harmony import */ var src_timeMachine_apis_QueryBuilderFetcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(742);
/* harmony import */ var src_timeMachine_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(31);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var src_alerting_actions_alertBuilder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(128);
/* harmony import */ var src_organizations_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(19);





const setBuilderAggregateFunctionType = (builderAggregateFunctionType, index) => ({
    type: 'SET_BUILDER_AGGREGATE_FUNCTION_TYPE',
    payload: { builderAggregateFunctionType, index },
});
const setBuilderBucketsStatus = (bucketsStatus) => ({
    type: 'SET_BUILDER_BUCKETS_STATUS',
    payload: { bucketsStatus },
});
const setBuilderBuckets = (buckets) => ({
    type: 'SET_BUILDER_BUCKETS',
    payload: { buckets },
});
const setBuilderBucket = (bucket, resetSelections) => ({
    type: 'SET_BUILDER_BUCKET_SELECTION',
    payload: { bucket, resetSelections },
});
const setBuilderTagsStatus = (status) => ({
    type: 'SET_BUILDER_TAGS_STATUS',
    payload: { status },
});
const setBuilderTagKeys = (index, keys) => ({
    type: 'SET_BUILDER_TAG_KEYS',
    payload: { index, keys },
});
const setBuilderTagKeysStatus = (index, status) => ({
    type: 'SET_BUILDER_TAG_KEYS_STATUS',
    payload: { index, status },
});
const setBuilderTagValues = (index, values) => ({
    type: 'SET_BUILDER_TAG_VALUES',
    payload: { index, values },
});
const setBuilderTagValuesStatus = (index, status) => ({
    type: 'SET_BUILDER_TAG_VALUES_STATUS',
    payload: { index, status },
});
const setBuilderTagKeySelection = (index, key) => ({
    type: 'SET_BUILDER_TAG_KEY_SELECTION',
    payload: { index, key },
});
const setBuilderTagValuesSelection = (index, values) => ({
    type: 'SET_BUILDER_TAG_VALUES_SELECTION',
    payload: { index, values },
});
const addTagSelectorSync = () => ({
    type: 'ADD_TAG_SELECTOR',
});
const removeTagSelectorSync = (index) => ({
    type: 'REMOVE_TAG_SELECTOR',
    payload: { index },
});
const setFunctions = (functions) => ({
    type: 'SELECT_BUILDER_FUNCTION',
    payload: { functions },
});
const setAggregateWindow = (period) => ({
    type: 'SET_AGGREGATE_WINDOW',
    payload: { period },
});
const setValuesSearchTerm = (index, searchTerm) => ({
    type: 'SET_BUILDER_VALUES_SEARCH_TERM',
    payload: { index, searchTerm },
});
const setKeysSearchTerm = (index, searchTerm) => ({
    type: 'SET_BUILDER_KEYS_SEARCH_TERM',
    payload: { index, searchTerm },
});
const selectAggregateWindow = (period) => (dispatch) => {
    dispatch(setAggregateWindow(period));
    dispatch(Object(src_alerting_actions_alertBuilder__WEBPACK_IMPORTED_MODULE_3__[/* setEvery */ "j"])(period));
};
const loadBuckets = () => async (dispatch, getState) => {
    const queryURL = getState().links.query.self;
    const orgID = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_4__[/* getOrg */ "a"])(getState()).id;
    dispatch(setBuilderBucketsStatus(src_types__WEBPACK_IMPORTED_MODULE_2__["RemoteDataState"].Loading));
    try {
        let buckets = await src_timeMachine_apis_QueryBuilderFetcher__WEBPACK_IMPORTED_MODULE_0__[/* queryBuilderFetcher */ "a"].findBuckets({
            url: queryURL,
            orgID,
        });
        const systemBuckets = buckets.filter(b => b.startsWith('_'));
        const userBuckets = buckets.filter(b => !b.startsWith('_'));
        buckets = [...userBuckets, ...systemBuckets];
        const selectedBucket = Object(src_timeMachine_selectors__WEBPACK_IMPORTED_MODULE_1__[/* getActiveQuery */ "a"])(getState()).builderConfig.buckets[0];
        dispatch(setBuilderBuckets(buckets));
        if (selectedBucket && buckets.includes(selectedBucket)) {
            dispatch(selectBucket(selectedBucket));
        }
        else {
            dispatch(selectBucket(buckets[0], true));
        }
    }
    catch (e) {
        if (e.name === 'CancellationError') {
            return;
        }
        console.error(e);
        dispatch(setBuilderBucketsStatus(src_types__WEBPACK_IMPORTED_MODULE_2__["RemoteDataState"].Error));
    }
};
const selectBucket = (bucket, resetSelections = false) => (dispatch) => {
    dispatch(setBuilderBucket(bucket, resetSelections));
    dispatch(loadTagSelector(0));
};
const loadTagSelector = (index) => async (dispatch, getState) => {
    const { buckets, tags } = Object(src_timeMachine_selectors__WEBPACK_IMPORTED_MODULE_1__[/* getActiveQuery */ "a"])(getState()).builderConfig;
    if (!tags[index] || !buckets[0]) {
        return;
    }
    const tagsSelections = tags.slice(0, index);
    const queryURL = getState().links.query.self;
    const orgID = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_4__[/* getOrg */ "a"])(getState()).id;
    dispatch(setBuilderTagKeysStatus(index, src_types__WEBPACK_IMPORTED_MODULE_2__["RemoteDataState"].Loading));
    try {
        const timeRange = Object(src_timeMachine_selectors__WEBPACK_IMPORTED_MODULE_1__[/* getTimeRange */ "n"])(getState());
        const searchTerm = Object(src_timeMachine_selectors__WEBPACK_IMPORTED_MODULE_1__[/* getActiveTimeMachine */ "c"])(getState()).queryBuilder.tags[index]
            .keysSearchTerm;
        const keys = await src_timeMachine_apis_QueryBuilderFetcher__WEBPACK_IMPORTED_MODULE_0__[/* queryBuilderFetcher */ "a"].findKeys(index, {
            url: queryURL,
            orgID,
            bucket: buckets[0],
            tagsSelections,
            searchTerm,
            timeRange,
        });
        const { key } = tags[index];
        if (!key) {
            let defaultKey;
            if (index === 0 && keys.includes('_measurement')) {
                defaultKey = '_measurement';
            }
            else {
                defaultKey = keys[0];
            }
            dispatch(setBuilderTagKeySelection(index, defaultKey));
        }
        else if (!keys.includes(key)) {
            keys.unshift(key);
        }
        dispatch(setBuilderTagKeys(index, keys));
        dispatch(loadTagSelectorValues(index));
    }
    catch (e) {
        if (e.name === 'CancellationError') {
            return;
        }
        console.error(e);
        dispatch(setBuilderTagKeysStatus(index, src_types__WEBPACK_IMPORTED_MODULE_2__["RemoteDataState"].Error));
    }
};
const loadTagSelectorValues = (index) => async (dispatch, getState) => {
    const state = getState();
    const { buckets, tags } = Object(src_timeMachine_selectors__WEBPACK_IMPORTED_MODULE_1__[/* getActiveQuery */ "a"])(state).builderConfig;
    const tagsSelections = tags.slice(0, index);
    const queryURL = state.links.query.self;
    const orgID = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_4__[/* getOrg */ "a"])(getState()).id;
    dispatch(setBuilderTagValuesStatus(index, src_types__WEBPACK_IMPORTED_MODULE_2__["RemoteDataState"].Loading));
    try {
        const timeRange = Object(src_timeMachine_selectors__WEBPACK_IMPORTED_MODULE_1__[/* getTimeRange */ "n"])(getState());
        const key = Object(src_timeMachine_selectors__WEBPACK_IMPORTED_MODULE_1__[/* getActiveQuery */ "a"])(getState()).builderConfig.tags[index].key;
        const searchTerm = Object(src_timeMachine_selectors__WEBPACK_IMPORTED_MODULE_1__[/* getActiveTimeMachine */ "c"])(getState()).queryBuilder.tags[index]
            .valuesSearchTerm;
        const values = await src_timeMachine_apis_QueryBuilderFetcher__WEBPACK_IMPORTED_MODULE_0__[/* queryBuilderFetcher */ "a"].findValues(index, {
            url: queryURL,
            orgID,
            bucket: buckets[0],
            tagsSelections,
            key,
            searchTerm,
            timeRange,
        });
        const { values: selectedValues } = tags[index];
        for (const selectedValue of selectedValues) {
            if (!values.includes(selectedValue)) {
                values.unshift(selectedValue);
            }
        }
        dispatch(setBuilderTagValues(index, values));
        dispatch(loadTagSelector(index + 1));
    }
    catch (e) {
        if (e.name === 'CancellationError') {
            return;
        }
        console.error(e);
        dispatch(setBuilderTagValuesStatus(index, src_types__WEBPACK_IMPORTED_MODULE_2__["RemoteDataState"].Error));
    }
};
const selectTagValue = (index, value) => (dispatch, getState) => {
    const state = getState();
    const { timeMachines: { activeTimeMachineID }, } = state;
    const tags = Object(src_timeMachine_selectors__WEBPACK_IMPORTED_MODULE_1__[/* getActiveQuery */ "a"])(state).builderConfig.tags;
    const currentTag = tags[index];
    const values = currentTag.values;
    let newValues;
    if (values.includes(value)) {
        newValues = values.filter(v => v !== value);
    }
    else if (activeTimeMachineID === 'alerting' &&
        currentTag.key === '_field') {
        newValues = [value];
    }
    else {
        newValues = [...values, value];
    }
    dispatch(setBuilderTagValuesSelection(index, newValues));
    if (currentTag.aggregateFunctionType === 'group') {
        return;
    }
    if (index === tags.length - 1 && newValues.length) {
        dispatch(addTagSelector());
    }
    else {
        dispatch(loadTagSelector(index + 1));
    }
};
const selectBuilderFunction = (name) => (dispatch, getState) => {
    const state = getState();
    const { timeMachines: { activeTimeMachineID }, } = state;
    const { draftQueries, activeQueryIndex } = Object(src_timeMachine_selectors__WEBPACK_IMPORTED_MODULE_1__[/* getActiveTimeMachine */ "c"])(state);
    const functions = draftQueries[activeQueryIndex].builderConfig.functions;
    let newFunctions;
    if (functions.find(f => f.name === name)) {
        newFunctions = functions.filter(f => f.name !== name);
    }
    else if (activeTimeMachineID === 'alerting') {
        newFunctions = [{ name }];
    }
    else {
        newFunctions = [...functions, { name }];
    }
    dispatch(setFunctions(newFunctions));
};
const selectTagKey = (index, key) => (dispatch) => {
    dispatch(setBuilderTagKeySelection(index, key));
    dispatch(loadTagSelectorValues(index));
};
const searchTagValues = (index) => (dispatch) => {
    dispatch(loadTagSelectorValues(index));
};
const searchTagKeys = (index) => (dispatch) => {
    dispatch(loadTagSelector(index));
};
const addTagSelector = () => (dispatch, getState) => {
    dispatch(addTagSelectorSync());
    const newIndex = Object(src_timeMachine_selectors__WEBPACK_IMPORTED_MODULE_1__[/* getActiveQuery */ "a"])(getState()).builderConfig.tags.length - 1;
    dispatch(loadTagSelector(newIndex));
};
const removeTagSelector = (index) => (dispatch) => {
    src_timeMachine_apis_QueryBuilderFetcher__WEBPACK_IMPORTED_MODULE_0__[/* queryBuilderFetcher */ "a"].cancelFindValues(index);
    src_timeMachine_apis_QueryBuilderFetcher__WEBPACK_IMPORTED_MODULE_0__[/* queryBuilderFetcher */ "a"].cancelFindKeys(index);
    dispatch(removeTagSelectorSync(index));
    dispatch(loadTagSelector(index));
};
const reloadTagSelectors = () => (dispatch) => {
    dispatch(setBuilderTagsStatus(src_types__WEBPACK_IMPORTED_MODULE_2__["RemoteDataState"].Loading));
    dispatch(loadTagSelector(0));
};


/***/ }),

/***/ 217:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getTimeRangeByDashboardID; });
/* unused harmony export getCheckForView */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getVariableValuesForDropdown; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_variables_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(88);
/* harmony import */ var src_shared_constants_timeRanges__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(134);



const getTimeRangeByDashboardID = (state, dashboardID) => state.ranges[dashboardID] || src_shared_constants_timeRanges__WEBPACK_IMPORTED_MODULE_2__[/* DEFAULT_TIME_RANGE */ "b"];
const getCheckForView = (state, view) => {
    const viewType = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(view, 'properties.type');
    const checkID = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(view, 'properties.checkID');
    return viewType === 'check' ? state.resources.checks.byID[checkID] : null;
};
const getVariableValuesForDropdown = (state, variableID, contextID) => {
    const { selectedValue, values } = Object(src_variables_selectors__WEBPACK_IMPORTED_MODULE_1__[/* getValuesForVariable */ "o"])(state, variableID, contextID);
    if (!values) {
        return { list: null, selectedKey: null };
    }
    const type = Object(src_variables_selectors__WEBPACK_IMPORTED_MODULE_1__[/* getTypeForVariable */ "m"])(state, variableID);
    switch (type) {
        case 'map': {
            const mapValues = Object(src_variables_selectors__WEBPACK_IMPORTED_MODULE_1__[/* getArgumentValuesForVariable */ "g"])(state, variableID);
            const list = Object.entries(mapValues).map(([name, value]) => ({
                name,
                value,
            }));
            return {
                selectedKey: selectedValue,
                list,
            };
        }
        default:
            const list = values.map(v => ({ name: v, value: v }));
            return { selectedKey: selectedValue, list };
    }
};


/***/ }),

/***/ 218:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MIN_RETENTION_SECONDS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return isSystemBucket; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

const MIN_RETENTION_SECONDS = 3600;
const isSystemBucket = (bucketName) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["startsWith"])(bucketName, '_');
};


/***/ }),

/***/ 233:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./src/types/index.ts
var types = __webpack_require__(5);

// EXTERNAL MODULE: ./node_modules/@influxdata/influx/dist/index.mjs
var dist = __webpack_require__(98);

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(2);
var react_default = /*#__PURE__*/__webpack_require__.n(react);

// CONCATENATED MODULE: ./src/dataLoaders/graphics/LogoApache.tsx

const LogoApache = () => {
    return (react_default.a.createElement("svg", { width: "100%", height: "100%", viewBox: "0 0 49.92 100" },
        react_default.a.createElement("defs", null,
            react_default.a.createElement("linearGradient", { id: "apache_c", x1: -1886.65, y1: 4996.93, x2: -1872.53, y2: 4980.42, gradientTransform: "scale(1 -1) rotate(65.2 2995.766 3977.41)", gradientUnits: "userSpaceOnUse" },
                react_default.a.createElement("stop", { offset: 0, stopColor: "#f69923" }),
                react_default.a.createElement("stop", { offset: 0.31, stopColor: "#f79a23" }),
                react_default.a.createElement("stop", { offset: 0.84, stopColor: "#e97826" })),
            react_default.a.createElement("linearGradient", { id: "apache_a", x1: -1991.78, y1: 4989.78, x2: -1891.01, y2: 4989.78, gradientTransform: "scale(1 -1) rotate(65.2 2995.766 3977.41)", gradientUnits: "userSpaceOnUse" },
                react_default.a.createElement("stop", { offset: 0.32, stopColor: "#9e2064" }),
                react_default.a.createElement("stop", { offset: 0.63, stopColor: "#c92037" }),
                react_default.a.createElement("stop", { offset: 0.75, stopColor: "#cd2335" }),
                react_default.a.createElement("stop", { offset: 1, stopColor: "#e97826" })),
            react_default.a.createElement("linearGradient", { id: "apache_d", x1: -1991.19, y1: 4998.76, x2: -1890.42, y2: 4998.76, xlinkHref: "#apache_a" }),
            react_default.a.createElement("linearGradient", { id: "apache_e", x1: -1985.53, y1: 4989.27, x2: -1884.76, y2: 4989.27, xlinkHref: "#apache_a" }),
            react_default.a.createElement("linearGradient", { id: "apache_f", x1: -1985.53, y1: 4999.7, x2: -1884.76, y2: 4999.7, xlinkHref: "#apache_a" }),
            react_default.a.createElement("linearGradient", { id: "apache_b", x1: -1979.02, y1: 4988.65, x2: -1918.97, y2: 4988.65, gradientTransform: "scale(1 -1) rotate(65.2 2995.766 3977.41)", gradientUnits: "userSpaceOnUse" },
                react_default.a.createElement("stop", { offset: 0, stopColor: "#282662" }),
                react_default.a.createElement("stop", { offset: 0.1, stopColor: "#662e8d" }),
                react_default.a.createElement("stop", { offset: 0.79, stopColor: "#9f2064" }),
                react_default.a.createElement("stop", { offset: 0.95, stopColor: "#cd2032" })),
            react_default.a.createElement("linearGradient", { id: "apache_g", x1: -1978.18, y1: 4998.33, x2: -1925.22, y2: 4998.33, xlinkHref: "#apache_b" })),
        react_default.a.createElement("title", null, "logo_apache"),
        react_default.a.createElement("path", { d: "M42.56.48C41 1.4 38.39 4 35.28 7.82l2.85 5.39a71.05 71.05 0 0 1 6.1-7.65 3.45 3.45 0 0 1 .25-.26l-.25.26a64.18 64.18 0 0 0-5.72 7.76A108.36 108.36 0 0 0 49.62 12c1.09-6.18-1.08-9-1.08-9S45.79-1.43 42.56.48z", fill: "url(#apache_c)" }),
        react_default.a.createElement("path", { d: "M38.51 13.32q-1.26 1.93-2.75 4.42l-.15.26c-.85 1.43-1.76 3-2.71 4.74q-1.23 2.26-2.57 4.81-1.17 2.23-2.4 4.77l9.45-1a11.45 11.45 0 0 0 5.17-4.07c.32-.45.64-.93 1-1.43 1-1.51 1.92-3.18 2.77-4.84s1.54-3.19 2.1-4.62a22.75 22.75 0 0 0 .83-2.5c.17-.65.31-1.28.41-1.87a105.64 105.64 0 0 1-11.15 1.33z", fill: "url(#apache_a)" }),
        react_default.a.createElement("path", { d: "M29.71 27.15c.87-1.62 1.75-3.21 2.64-4.75s1.85-3.16 2.8-4.66l.16-.27q1.41-2.22 2.83-4.26l-2.86-5.39c-.22.26-.43.53-.65.8-.83 1-1.68 2.13-2.56 3.3-1 1.32-2 2.74-3 4.21s-1.92 2.8-2.89 4.28c-.82 1.26-1.65 2.56-2.47 3.9l-.09.14 3.68 7.35c.79-1.57 1.6-3.12 2.41-4.65z", fill: "url(#apache_d)" }),
        react_default.a.createElement("path", { d: "M27.87 32.42c-.1.22-.21.44-.32.66-.32.67-.65 1.34-1 2s-.71 1.51-1.08 2.3c-.18.39-.37.79-.55 1.2-.56 1.2-1.12 2.45-1.69 3.74-.71 1.59-1.42 3.23-2.15 5s-1.38 3.3-2.08 5.05-1.36 3.37-2 5.13c-.62 1.57-1.24 3.18-1.87 4.85l-.09.24q-.95 2.47-1.89 5.08v.12l3-.33a1.35 1.35 0 0 0-.18 0c3.5-.46 8.28-3.17 11.37-6.46a27.81 27.81 0 0 0 3.91-5.44 45.77 45.77 0 0 0 2.52-5.24c.7-1.68 1.36-3.51 2-5.49a10.65 10.65 0 0 1-2.82 1l-.56.11-.57.09a13.11 13.11 0 0 0 7-6.83 11.73 11.73 0 0 1-4 1.76 6 6 0 0 1-.72.13h-.18a13.55 13.55 0 0 0 3-1.67c.18-.14.36-.28.53-.43a9.88 9.88 0 0 0 .74-.71c.15-.16.3-.32.44-.49a11.23 11.23 0 0 0 .94-1.29l.27-.44.32-.63a35.043 35.043 0 0 0 1.53-3.52l.13-.37c.11-.35.21-.67.29-.94s.18-.75.22-1a3.77 3.77 0 0 1-.39.26 14.18 14.18 0 0 1-4.15 1.42h-.07l-.42.07h.07l-9.44 1z", fill: "url(#apache_e)" }),
        react_default.a.createElement("path", { d: "M14.17 61.81q1-2.52 2-5.1t2-5q1-2.49 2.12-5c.74-1.69 1.49-3.39 2.25-5.07s1.52-3.32 2.3-5c.28-.59.57-1.18.85-1.76.49-1 1-2 1.49-3l.09-.16-3.72-7.35c-.06.1-.12.2-.19.3-.86 1.42-1.72 2.86-2.57 4.34s-1.7 3-2.52 4.56c-.69 1.3-1.37 2.61-2 3.94l-.39.8q-1.22 2.51-2.2 4.83c-.75 1.75-1.41 3.43-2 5q-.57 1.57-1 3c-.26.83-.5 1.66-.74 2.48q-.83 2.93-1.43 5.83l3.7 7.55c.5-1.32 1-2.66 1.52-4 .15-.43.27-.81.44-1.19z", fill: "url(#apache_f)" }),
        react_default.a.createElement("path", { d: "M12.77 68.54c-.49 1.36-1 2.73-1.48 4.14v.06l-.21.6-1.32 3.75c1.1.49 2 1.81 2.81 3.3a6 6 0 0 0-1.94-4.12c5.4.25 10.06-1.12 12.46-5.07a9.11 9.11 0 0 0 .59-1.12c-1.09 1.39-2.45 2-5 1.84 3.76-1.69 5.64-3.3 7.31-6 .39-.63.78-1.32 1.17-2.09a11.77 11.77 0 0 1-11.1 3.6l-3 .33c-.06.24-.2.53-.29.78z", fill: "url(#apache_b)" }),
        react_default.a.createElement("path", { d: "M8.43 59.84a55.52 55.52 0 0 0-1 7 2 2 0 0 0 0 .25 14.73 14.73 0 0 0-4.29-3.68c2.24 3.24 3.94 6.46 4.19 9.62a9.47 9.47 0 0 1-4.73-.81 9.38 9.38 0 0 0 4 2.45c-1.81.12-3.7 1.36-5.61 2.8 2.79-1.14 5-1.59 6.65-1.22C5.12 83.53 2.56 91.52 0 100a2.24 2.24 0 0 0 1.52-1.47C2 97 5 86.92 9.75 73.67c.14-.37.27-.75.41-1.13l.12-.32c.5-1.39 1-2.8 1.56-4.25.12-.33.24-.66.37-1l-3.73-7.39a2.38 2.38 0 0 0-.05.26z", fill: "url(#apache_g)" })));
};
/* harmony default export */ var graphics_LogoApache = (LogoApache);

// CONCATENATED MODULE: ./src/dataLoaders/graphics/LogoConsul.tsx

const LogoConsul = () => {
    return (react_default.a.createElement("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 100 96.81" },
        react_default.a.createElement("style", null, `    .consul_a { fill: #8c1c59; }
                .consul_a, .consul_b {
                    fill-rule: evenodd;
                }
                .consul_b, .consul_c {
                    fill: #c62a71;
                }`),
        react_default.a.createElement("defs", null),
        react_default.a.createElement("path", { className: "consul_a", d: "M48.23,58.73A10.45,10.45,0,1,1,58.65,48.27,10.42,10.42,0,0,1,48.23,58.73" }),
        react_default.a.createElement("path", { className: "consul_b", d: "M68.55,53.1a4.82,4.82,0,1,1,4.81-4.81,4.8,4.8,0,0,1-4.81,4.81" }),
        react_default.a.createElement("path", { className: "consul_b", d: "M86.17,57.64h0a4.69,4.69,0,1,1,.09-.38c0,.12,0,.24-.09.38" }),
        react_default.a.createElement("path", { className: "consul_b", d: "M82.76,45.23a4.82,4.82,0,1,1,3.57-5.79,5,5,0,0,1,0,1.89,4.62,4.62,0,0,1-3.62,3.9" }),
        react_default.a.createElement("path", { className: "consul_b", d: "M99.89,57.11a4.47,4.47,0,1,1,.09-.43,1.18,1.18,0,0,0-.09.43" }),
        react_default.a.createElement("path", { className: "consul_b", d: "M96,45a4.8,4.8,0,1,1,4-5.53,5.16,5.16,0,0,1,0,1.24A4.79,4.79,0,0,1,96,45" }),
        react_default.a.createElement("path", { className: "consul_b", d: "M92.61,73.78h0a4.85,4.85,0,1,1,.6-2,4.34,4.34,0,0,1-.6,2" }),
        react_default.a.createElement("path", { className: "consul_b", d: "M90.87,29.53A4.83,4.83,0,1,1,92.71,23a4.52,4.52,0,0,1,.59,2.79,4.83,4.83,0,0,1-2.43,3.79" }),
        react_default.a.createElement("path", { className: "consul_c", d: "M48.4,96.81A48.35,48.35,0,0,1,0,48.4,48.41,48.41,0,0,1,77.8,9.94l-5.91,7.72A38.7,38.7,0,0,0,21,75.78a38.72,38.72,0,0,0,50.85,3.36l5.91,7.73A48,48,0,0,1,48.4,96.81Z" })));
};
/* harmony default export */ var graphics_LogoConsul = (LogoConsul);

// CONCATENATED MODULE: ./src/dataLoaders/graphics/LogoCpu.tsx

const LogoCpu = () => {
    return (react_default.a.createElement("svg", { width: "100%", height: "100%", id: "Layer_1", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 100 100" },
        react_default.a.createElement("g", { id: "cpu_icon" },
            react_default.a.createElement("style", null, `
          .cpu_a{fill:#7A65F1;}
          .cpu_b{fill:none;stroke:#2C323D;stroke-width:7;stroke-linejoin:round;stroke-miterlimit:10;}
          .cpu_c{fill:#2C323D;}
          `),
            react_default.a.createElement("path", { className: "cpu_a", d: "M96,100H4c-2.2,0-4-1.8-4-4V4c0-2.2,1.8-4,4-4h92c2.2,0,4,1.8,4,4v92C100,98.2,98.2,100,96,100z" }),
            react_default.a.createElement("line", { className: "cpu_b", x1: "22.2", y1: "100", x2: "22.2" }),
            react_default.a.createElement("line", { className: "cpu_b", x1: "40.7", y1: "100", x2: "40.7" }),
            react_default.a.createElement("line", { className: "cpu_b", x1: "59.3", y1: "100", x2: "59.3" }),
            react_default.a.createElement("line", { className: "cpu_b", x1: "77.8", y1: "100", x2: "77.8" }),
            react_default.a.createElement("line", { className: "cpu_b", y1: "22.2", x2: "100", y2: "22.2" }),
            react_default.a.createElement("line", { className: "cpu_b", y1: "40.7", x2: "100", y2: "40.7" }),
            react_default.a.createElement("line", { className: "cpu_b", y1: "59.3", x2: "100", y2: "59.3" }),
            react_default.a.createElement("line", { className: "cpu_b", y1: "77.8", x2: "100", y2: "77.8" }),
            react_default.a.createElement("g", null,
                react_default.a.createElement("rect", { x: "17", y: "17", className: "cpu_a", width: "66", height: "66" }),
                react_default.a.createElement("path", { className: "cpu_c", d: "M76,24v52H24V24H76 M88,10H12c-1.1,0-2,0.9-2,2v76c0,1.1,0.9,2,2,2h76c1.1,0,2-0.9,2-2V12 C90,10.9,89.1,10,88,10L88,10z" })))));
};
/* harmony default export */ var graphics_LogoCpu = (LogoCpu);

// CONCATENATED MODULE: ./src/dataLoaders/graphics/LogoDocker.tsx

const LogoDocker = () => {
    return (react_default.a.createElement("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 100 69.46" },
        react_default.a.createElement("style", null, `   
            .docker_a, .docker_b {
                fill: #066da5;
            }
            .docker_a {
                fill-rule: evenodd;
            }`),
        react_default.a.createElement("defs", null),
        react_default.a.createElement("path", { className: "docker_a", d: "M97.92,26.44c-2.26-1.51-7.44-2.06-11.43-1.31-.51-3.75-2.61-7-6.41-9.95l-2.19-1.46-1.46,2.19a17,17,0,0,0-2.5,10.47,13.29,13.29,0,0,0,1.93,5.75,15.74,15.74,0,0,1-7.57,1.66H.39l-.14.78c-.64,3.77-.62,15.52,7,24.55C13.05,66,21.75,69.46,33.09,69.46c24.6,0,42.8-11.32,51.32-31.9,3.35.07,10.56,0,14.27-7.06.1-.17.32-.59,1-1.93l.35-.74Z" }),
        react_default.a.createElement("rect", { className: "docker_b", x: "44.36", width: "10.33", height: "9.39" }),
        react_default.a.createElement("rect", { className: "docker_b", x: "44.36", y: "11.26", width: "10.33", height: "9.39" }),
        react_default.a.createElement("rect", { className: "docker_b", x: "32.15", y: "11.26", width: "10.33", height: "9.39" }),
        react_default.a.createElement("rect", { className: "docker_b", x: "19.95", y: "11.26", width: "10.33", height: "9.39" }),
        react_default.a.createElement("rect", { className: "docker_b", x: "7.75", y: "22.53", width: "10.33", height: "9.39" }),
        react_default.a.createElement("rect", { className: "docker_b", x: "19.95", y: "22.53", width: "10.33", height: "9.39" }),
        react_default.a.createElement("rect", { className: "docker_b", x: "32.15", y: "22.53", width: "10.33", height: "9.39" }),
        react_default.a.createElement("rect", { className: "docker_b", x: "44.36", y: "22.53", width: "10.33", height: "9.39" }),
        react_default.a.createElement("rect", { className: "docker_b", x: "56.56", y: "22.53", width: "10.33", height: "9.39" })));
};
/* harmony default export */ var graphics_LogoDocker = (LogoDocker);

// CONCATENATED MODULE: ./src/dataLoaders/graphics/LogoElastic.tsx

const LogoElastic = () => {
    return (react_default.a.createElement("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 100 99.61" },
        react_default.a.createElement("style", null, ` 
     .elastic_a {
        fill: #fff;
      }

      .elastic_b {
        fill: #ffd00a;
      }

      .elastic_c {
        fill: #20b9af;
      }

      .elastic_d {
        fill: #ee5096;
      }

      .elastic_e {
        fill: #12a5df;
      }

      .elastic_f {
        fill: #90c640;
      }

      .elastic_g {
        fill: #05799f;
      }`),
        react_default.a.createElement("defs", null),
        react_default.a.createElement("path", { className: "elastic_a", d: "M100,52.19A19.68,19.68,0,0,0,87,33.63a27.49,27.49,0,0,0,.53-5.38A28.24,28.24,0,0,0,36.36,11.72,15,15,0,0,0,13.12,28.8,20,20,0,0,0,0,47.44,19.69,19.69,0,0,0,13.08,66.05,28.17,28.17,0,0,0,63.63,87.84a14.84,14.84,0,0,0,9.19,3.21A15,15,0,0,0,86.88,70.82,19.94,19.94,0,0,0,100,52.19" }),
        react_default.a.createElement("path", { className: "elastic_b", d: "M39.32,42.9l21.88,10L83.27,33.53a24.32,24.32,0,0,0,.48-4.85,24.67,24.67,0,0,0-45-13.95L35,33.78Z" }),
        react_default.a.createElement("path", { className: "elastic_c", d: "M16.67,66.07A25.13,25.13,0,0,0,16.18,71a24.74,24.74,0,0,0,45.2,13.91l3.65-19-4.87-9.29-22-10Z" }),
        react_default.a.createElement("path", { className: "elastic_d", d: "M16.53,28.2l15,3.55,3.29-17A11.84,11.84,0,0,0,16.53,28.2" }),
        react_default.a.createElement("path", { className: "elastic_e", d: "M15.23,31.78A16.69,16.69,0,0,0,3.87,47.48,16.52,16.52,0,0,0,14.51,62.93l21-19-3.87-8.26Z" }),
        react_default.a.createElement("path", { className: "elastic_f", d: "M65.23,84.91A11.82,11.82,0,0,0,83.47,71.42l-15-3.5Z" }),
        react_default.a.createElement("path", { className: "elastic_g", d: "M68.28,64l16.49,3.86A16.7,16.7,0,0,0,96.13,52.14,16.49,16.49,0,0,0,85.47,36.72L63.9,55.62Z" })));
};
/* harmony default export */ var graphics_LogoElastic = (LogoElastic);

// CONCATENATED MODULE: ./src/dataLoaders/graphics/LogoEtcd.tsx

const LogoEtcd = () => {
    return (react_default.a.createElement("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 100 96.61" },
        react_default.a.createElement("style", null, `      
      .etcd_a {
        fill: #419eda;
      }`),
        react_default.a.createElement("defs", null),
        react_default.a.createElement("path", { className: "etcd_a", d: "M45.77,43a6.52,6.52,0,1,1-6.52-6.52A6.52,6.52,0,0,1,45.77,43Z" }),
        react_default.a.createElement("path", { className: "etcd_a", d: "M54.2,43a6.52,6.52,0,1,0,6.52-6.52A6.52,6.52,0,0,0,54.2,43Z" }),
        react_default.a.createElement("path", { className: "etcd_a", d: "M98.59,50c-.47,0-.94.06-1.44.06a18.79,18.79,0,0,1-8.28-1.93A75.91,75.91,0,0,0,90,33.51a76.15,76.15,0,0,0-9.47-11.23,18.71,18.71,0,0,1,6.68-7.15l1.22-.76-1-1.08A49.92,49.92,0,0,0,70,.58L68.7,0l-.34,1.4A18.74,18.74,0,0,1,63.64,10,76.58,76.58,0,0,0,50,4.35,75.82,75.82,0,0,0,36.35,10a18.71,18.71,0,0,1-4.71-8.56L31.3,0,30,.58A50.43,50.43,0,0,0,12.55,13.29l-1,1.08,1.22.75a18.8,18.8,0,0,1,6.66,7.12A76.39,76.39,0,0,0,10,33.43a76.53,76.53,0,0,0,1.09,14.74,18.73,18.73,0,0,1-8.23,1.91c-.51,0-1,0-1.44,0L0,49.92l.13,1.43A49.62,49.62,0,0,0,6.84,71.87l.73,1.24,1.09-.93A18.73,18.73,0,0,1,17.55,68a75.64,75.64,0,0,0,7.6,12.38,77.51,77.51,0,0,0,14.4,3.54,18.65,18.65,0,0,1-1.2,9.83l-.54,1.33,1.4.31A50.56,50.56,0,0,0,50,96.61l10.79-1.2,1.4-.31-.55-1.33a18.79,18.79,0,0,1-1.19-9.84A77,77,0,0,0,74.81,80.4,76.56,76.56,0,0,0,82.42,68a18.9,18.9,0,0,1,8.92,4.17l1.1.93.73-1.24a49.56,49.56,0,0,0,6.7-20.51l.13-1.43ZM65.43,67.56a58.15,58.15,0,0,1-30.9,0,59.69,59.69,0,0,1-6.61-13.93,59.09,59.09,0,0,1-2.79-15.29,58.8,58.8,0,0,1,11.2-10.66A60,60,0,0,1,50,20.25a60.26,60.26,0,0,1,13.64,7.41A59.14,59.14,0,0,1,74.86,38.4a59.17,59.17,0,0,1-2.81,15.21A59.67,59.67,0,0,1,65.43,67.56Z" })));
};
/* harmony default export */ var graphics_LogoEtcd = (LogoEtcd);

// CONCATENATED MODULE: ./src/dataLoaders/graphics/LogoIis.tsx

const LogoIis = () => {
    return (react_default.a.createElement("svg", { width: "100%", height: "100%", viewBox: "0 0 100 100" },
        react_default.a.createElement("defs", null,
            react_default.a.createElement("linearGradient", { id: "iis_b", x1: -514.77, y1: 316.77, x2: -514.77, y2: 316.81, gradientTransform: "matrix(2493.7 0 0 -2493.7 1283740.92 790028.16)", gradientUnits: "userSpaceOnUse" },
                react_default.a.createElement("stop", { offset: 0, stopColor: "#574c4a" }),
                react_default.a.createElement("stop", { offset: 1, stopColor: "#80716d" })),
            react_default.a.createElement("linearGradient", { id: "iis_c", x1: -514.92, y1: 316.94, x2: -514.95, y2: 316.99, gradientTransform: "matrix(1567.75 0 0 -1504.18 807337.55 476821.08)", gradientUnits: "userSpaceOnUse" },
                react_default.a.createElement("stop", { offset: 0, stopColor: "#268d83" }),
                react_default.a.createElement("stop", { offset: 1, stopColor: "#2ea19e" })),
            react_default.a.createElement("radialGradient", { id: "iis_a", cx: -517.38, cy: 323.85, r: 0.02, gradientTransform: "matrix(181.37 0 0 -181.37 93879.52 58811.53)", gradientUnits: "userSpaceOnUse" },
                react_default.a.createElement("stop", { offset: 0, stopColor: "#db7c7c" }),
                react_default.a.createElement("stop", { offset: 1, stopColor: "#c83737" })),
            react_default.a.createElement("radialGradient", { id: "iis_d", cx: -519.14, cy: 323.85, r: 0.02, gradientTransform: "matrix(181.36 0 0 -181.36 94206.95 58808.39)", xlinkHref: "#iis_a" })),
        react_default.a.createElement("title", null, "logo_iis"),
        react_default.a.createElement("path", { d: "M0 67.57V32.43C0 4.05 4.05 0 32.4 0h35.2C96 0 100 4.05 100 32.43v35.14C100 96 96 100 67.6 100H32.4C4.05 100 0 96 0 67.57z", fill: "url(#iis_b)" }),
        react_default.a.createElement("path", { d: "M21.58 18.85a279.62 279.62 0 0 0-2.34 60.32H34.6c-1.46-7.78-6.7-43.31-2.34-43.43 2.34.37 13 30.15 13 30.15a42.66 42.66 0 0 1 4.72-.3 42.66 42.66 0 0 1 4.72.3s10.68-29.78 13-30.15c4.36.12-.88 35.65-2.34 43.43h15.4a279.62 279.62 0 0 0-2.34-60.32H64.19c-2.7 0-13 18.1-14.19 18.1s-11.48-18.07-14.19-18.1z", fill: "url(#iis_c)" }),
        react_default.a.createElement("path", { d: "M47 75.53a3.64 3.64 0 1 1-3.64-3.64A3.64 3.64 0 0 1 47 75.53z", fill: "url(#iis_a)" }),
        react_default.a.createElement("path", { d: "M60.3 75.53a3.64 3.64 0 1 1-3.63-3.64 3.63 3.63 0 0 1 3.63 3.64z", fill: "url(#iis_d)" }),
        react_default.a.createElement("path", { d: "M77.69 19.88A272.7 272.7 0 0 1 80.39 60c0 11-.67 18.11-.67 18.11H66.79l-1.39 1h15.36a279.62 279.62 0 0 0-2.34-60.32l-.73 1zM37 19.5c4 4.5 11 16.41 12 16.41-2.6-3.28-8.89-13.72-12-16.41zm-5.78 15.2c-4.36.12.88 35.65 2.34 43.43H20.15l-.91 1H34.6c-1.45-7.74-6.65-43-2.41-43.43-.39-.59-.73-1-1-1zm35.48 0c-2.34.37-13 30.14-13 30.14a44.1 44.1 0 0 0-4.7-.29c-1.4 0-2.61.09-3.42.16l-.26 1.18a42.66 42.66 0 0 1 4.72-.3 42.66 42.66 0 0 1 4.72.3s10.6-29.58 13-30.15c-.26-.65-.58-1-1-1z", style: {
                isolation: 'isolate',
            }, opacity: 0.1 }),
        react_default.a.createElement("path", { d: "M21.58 18.85a279.62 279.62 0 0 0-2.34 60.32l.9-1a279.63 279.63 0 0 1 2.48-58.26h14.23a2.21 2.21 0 0 1 1.17.65c-.93-1-1.7-1.69-2.21-1.69zm42.61 0c-2.7 0-13 18.1-14.19 18.1.48.61.88 1 1 1 1.19 0 11.49-18.07 14.19-18.1h12.6l.63-1zM33.24 36.78c3.45 5.19 12 29.11 12 29.11l.25-1.17c-2.12-5.81-10.2-27.61-12.23-27.94zm35.54 0c2.32 5.92-2.07 35.39-3.38 42.39l1.39-1.09c1.78-10.44 6.06-41.19 1.99-41.3z", style: {
                isolation: 'isolate',
            }, fill: "#fff", opacity: 0.3 })));
};
/* harmony default export */ var graphics_LogoIis = (LogoIis);

// CONCATENATED MODULE: ./src/dataLoaders/graphics/LogoKubernetes.tsx

const LogoKubernetes = () => {
    return (react_default.a.createElement("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 100 97.03" },
        react_default.a.createElement("style", null, `      
        .kubernetes_a {
          fill: #326ce5;
        }
        .kubernetes_b {
          fill: #fff;
          stroke: #fff;
          stroke-width: 0.25px;
        }`),
        react_default.a.createElement("defs", null),
        react_default.a.createElement("path", { className: "kubernetes_a", d: "M49.65,0a6.57,6.57,0,0,0-2.54.64L12.34,17.26a6.62,6.62,0,0,0-3.6,4.48L.17,59.05a6.55,6.55,0,0,0,.9,5.06,6.28,6.28,0,0,0,.38.52L25.51,94.55A6.67,6.67,0,0,0,30.71,97H69.3a6.65,6.65,0,0,0,5.19-2.48L98.55,64.62A6.56,6.56,0,0,0,99.83,59L91.24,21.73a6.59,6.59,0,0,0-3.59-4.47L52.88.65A6.66,6.66,0,0,0,49.65,0Z" }),
        react_default.a.createElement("path", { className: "kubernetes_b", d: "M50,12.71A2.2,2.2,0,0,0,47.92,15v.06c0,.17,0,.38,0,.53a15.23,15.23,0,0,0,.28,2,19,19,0,0,1,.23,3.77,2.31,2.31,0,0,1-.67,1.08l0,.88A25.73,25.73,0,0,0,44,23.9a26.68,26.68,0,0,0-13.6,7.77l-.75-.54A1.63,1.63,0,0,1,28.36,31a19.42,19.42,0,0,1-2.8-2.53A16.86,16.86,0,0,0,24.19,27l-.46-.37a2.5,2.5,0,0,0-1.45-.54,2,2,0,0,0-1.66.73,2.2,2.2,0,0,0,.51,3.07l0,0,.43.35a17.22,17.22,0,0,0,1.73,1,19.64,19.64,0,0,1,3.09,2.17,2.29,2.29,0,0,1,.42,1.2l.67.6A26.91,26.91,0,0,0,23.25,54l-.87.25a2.9,2.9,0,0,1-.9.91,19.74,19.74,0,0,1-3.73.61,17.37,17.37,0,0,0-2,.16l-.56.13h0a2.09,2.09,0,1,0,.93,4.06h.07l.54-.12a16.34,16.34,0,0,0,1.86-.72,19.72,19.72,0,0,1,3.63-1.06,2.22,2.22,0,0,1,1.2.42l.91-.16a27.09,27.09,0,0,0,12,15l-.38.9a2.14,2.14,0,0,1,.18,1.18A20.07,20.07,0,0,1,34.21,79a17.78,17.78,0,0,0-1.12,1.66c-.08.15-.18.39-.26.56A2.09,2.09,0,1,0,36.58,83h0c.08-.16.19-.37.26-.53a18.84,18.84,0,0,0,.6-1.9c.55-1.39.85-2.84,1.61-3.74a1.6,1.6,0,0,1,.89-.44l.48-.85a26.86,26.86,0,0,0,15.63,1.12,27.81,27.81,0,0,0,3.57-1.07c.13.23.38.68.44.8a1.62,1.62,0,0,1,1.07.64,20,20,0,0,1,1.42,3.5,17.5,17.5,0,0,0,.61,1.91c.06.15.18.37.26.53a2.09,2.09,0,1,0,3.76-1.78l-.27-.56a19.21,19.21,0,0,0-1.12-1.66A19.55,19.55,0,0,1,64,75.62a1.69,1.69,0,0,1,.16-1.23c-.07-.09-.24-.6-.34-.84a27.07,27.07,0,0,0,12-15.09l.89.16a1.62,1.62,0,0,1,1.17-.43,19.72,19.72,0,0,1,3.63,1.06,16.34,16.34,0,0,0,1.86.72l.54.12h.07a2.09,2.09,0,1,0,.93-4.06c-.18,0-.43-.11-.61-.14a17.37,17.37,0,0,0-2-.16,19.74,19.74,0,0,1-3.73-.61,2.29,2.29,0,0,1-.9-.91L76.78,54a27.05,27.05,0,0,0-4.34-18.73l.74-.66a1.66,1.66,0,0,1,.39-1.18,19.31,19.31,0,0,1,3.1-2.17,18.41,18.41,0,0,0,1.73-1l.45-.37a2.09,2.09,0,1,0-2.59-3.26L75.8,27a16.86,16.86,0,0,0-1.37,1.46A20.12,20.12,0,0,1,71.62,31a2.3,2.3,0,0,1-1.26.13l-.79.57a27.32,27.32,0,0,0-17.28-8.35c0-.27,0-.78,0-.93a1.68,1.68,0,0,1-.68-1,19.1,19.1,0,0,1,.24-3.77,15.23,15.23,0,0,0,.28-2c0-.17,0-.41,0-.59A2.2,2.2,0,0,0,50,12.71ZM47.39,28.85l-.62,10.91,0,0a1.84,1.84,0,0,1-1.83,1.76,1.81,1.81,0,0,1-1.08-.35h0l-8.95-6.35a21.5,21.5,0,0,1,12.54-6Zm5.22,0a21.55,21.55,0,0,1,12.46,6l-8.89,6.3h0a1.84,1.84,0,0,1-2.92-1.4h0Zm-21,10.08,8.18,7.31v0A1.85,1.85,0,0,1,40,48.81a1.82,1.82,0,0,1-1,.63v0l-10.48,3A21.49,21.49,0,0,1,31.6,38.93Zm36.73,0a21.73,21.73,0,0,1,3.14,13.53l-10.53-3v0a1.83,1.83,0,0,1-1.3-2.18,1.86,1.86,0,0,1,.58-1v0l8.12-7.28Zm-20,7.87h3.35l2.08,2.61L53,52.65,50,54.1l-3-1.45-.74-3.25Zm10.73,8.91a1.53,1.53,0,0,1,.43,0v0l10.84,1.84a21.49,21.49,0,0,1-8.67,10.89L57.45,58.28h0a1.84,1.84,0,0,1,.89-2.38,1.81,1.81,0,0,1,.7-.18Zm-18.19,0a1.85,1.85,0,0,1,1.76,1.43,1.82,1.82,0,0,1-.11,1.13l0,0L38.38,68.4a21.45,21.45,0,0,1-8.64-10.82l10.74-1.82,0,0a2.19,2.19,0,0,1,.36,0Zm9.07,4.41a1.76,1.76,0,0,1,.86.18,1.82,1.82,0,0,1,.82.78h0L57,70.69a21.87,21.87,0,0,1-13.86,0l5.28-9.55h0A1.82,1.82,0,0,1,49.93,60.16Z" })));
};
/* harmony default export */ var graphics_LogoKubernetes = (LogoKubernetes);

// CONCATENATED MODULE: ./src/dataLoaders/graphics/LogoMesos.tsx

const LogoMesos = () => {
    return (react_default.a.createElement("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 87.83 100" },
        react_default.a.createElement("style", null, `   
        .mesos_a {
            fill: #00445e;
        }
        .mesos_b {
            fill: #00aede;
        }`),
        react_default.a.createElement("defs", null),
        react_default.a.createElement("polyline", { className: "mesos_a", points: "65.28 60.91 65.28 39.09 46.46 50.02 65.28 60.91" }),
        react_default.a.createElement("polyline", { className: "mesos_b", points: "64.06 36.96 45.21 26.06 45.21 47.89 64.06 36.96" }),
        react_default.a.createElement("polyline", { className: "mesos_b", points: "42.76 47.89 42.76 26.06 23.89 36.96 42.76 47.89" }),
        react_default.a.createElement("polyline", { className: "mesos_b", points: "41.54 23.96 22.69 13 22.69 34.86 41.54 23.96" }),
        react_default.a.createElement("polyline", { className: "mesos_a", points: "64.06 63.01 45.21 52.12 45.21 73.95 64.06 63.01" }),
        react_default.a.createElement("polyline", { className: "mesos_a", points: "42.76 73.95 42.76 52.12 23.89 63.01 42.76 73.95" }),
        react_default.a.createElement("polyline", { className: "mesos_b", points: "86.61 50.02 67.73 39.09 67.73 60.91 86.61 50.02" }),
        react_default.a.createElement("polyline", { className: "mesos_b", points: "20.23 34.86 20.23 13 1.24 23.96 20.23 34.86" }),
        react_default.a.createElement("polyline", { className: "mesos_a", points: "41.54 76.05 22.69 65.12 22.69 86.97 41.54 76.05" }),
        react_default.a.createElement("polyline", { className: "mesos_b", points: "20.23 86.97 20.23 65.12 1.24 76.05 20.23 86.97" }),
        react_default.a.createElement("polyline", { className: "mesos_a", points: "41.54 50.02 22.69 39.09 22.69 60.91 41.54 50.02" }),
        react_default.a.createElement("polyline", { className: "mesos_b", points: "65.28 34.86 65.28 13 46.46 23.96 65.28 34.86" }),
        react_default.a.createElement("polyline", { className: "mesos_a", points: "45.21 0 45.21 21.82 64.06 10.9 45.21 0" }),
        react_default.a.createElement("polyline", { className: "mesos_a", points: "23.89 10.9 42.76 21.82 42.76 0 23.89 10.9" }),
        react_default.a.createElement("polyline", { className: "mesos_a", points: "64.06 89.07 45.21 78.18 45.21 100 64.06 89.07" }),
        react_default.a.createElement("polyline", { className: "mesos_a", points: "42.76 100 42.76 78.18 23.89 89.07 42.76 100" }),
        react_default.a.createElement("polyline", { className: "mesos_b", points: "87.83 73.95 87.83 52.12 69 63.01 87.83 73.95" }),
        react_default.a.createElement("polyline", { className: "mesos_b", points: "20.23 60.91 20.23 39.05 1.24 50.02 20.23 60.91" }),
        react_default.a.createElement("polyline", { className: "mesos_b", points: "19.02 63.01 0 52.12 0 73.95 19.02 63.01" }),
        react_default.a.createElement("polyline", { className: "mesos_b", points: "87.83 47.89 87.83 26.06 69 36.96 87.83 47.89" }),
        react_default.a.createElement("polyline", { className: "mesos_b", points: "86.61 23.96 67.73 13 67.73 34.86 86.61 23.96" }),
        react_default.a.createElement("polyline", { className: "mesos_b", points: "86.61 76.05 67.73 65.12 67.73 86.97 86.61 76.05" }),
        react_default.a.createElement("polyline", { className: "mesos_a", points: "65.28 86.97 65.28 65.12 46.46 76.05 65.28 86.97" }),
        react_default.a.createElement("polyline", { className: "mesos_b", points: "19.02 36.96 0 26.06 0 47.89 19.02 36.96" })));
};
/* harmony default export */ var graphics_LogoMesos = (LogoMesos);

// CONCATENATED MODULE: ./src/dataLoaders/graphics/LogoMongodb.tsx

const LogoMongodb = () => {
    return (react_default.a.createElement("svg", { width: "100%", height: "100%", viewBox: "0 0 44.83 100" },
        react_default.a.createElement("defs", null,
            react_default.a.createElement("linearGradient", { id: "mongodb_a", x1: -960.8, y1: -1260.14, x2: -992.42, y2: -1260.35, gradientTransform: "matrix(-.98 -.32 .29 -.88 -566.27 -1364.86)", gradientUnits: "userSpaceOnUse" },
                react_default.a.createElement("stop", { offset: 0.23, stopColor: "#999875" }),
                react_default.a.createElement("stop", { offset: 0.56, stopColor: "#9b9977" }),
                react_default.a.createElement("stop", { offset: 0.68, stopColor: "#a09f7e" }),
                react_default.a.createElement("stop", { offset: 0.77, stopColor: "#a9a889" }),
                react_default.a.createElement("stop", { offset: 0.84, stopColor: "#b7b69a" }),
                react_default.a.createElement("stop", { offset: 0.9, stopColor: "#c9c7b0" }),
                react_default.a.createElement("stop", { offset: 0.95, stopColor: "#deddcb" }),
                react_default.a.createElement("stop", { offset: 0.99, stopColor: "#f8f6eb" }),
                react_default.a.createElement("stop", { offset: 1, stopColor: "#fbf9ef" })),
            react_default.a.createElement("linearGradient", { id: "mongodb_b", x1: -955.93, y1: -1204.8, x2: -1001.42, y2: -1283.59, gradientTransform: "matrix(-.98 -.32 .29 -.88 -566.27 -1364.86)", gradientUnits: "userSpaceOnUse" },
                react_default.a.createElement("stop", { offset: 0, stopColor: "#48a547" }),
                react_default.a.createElement("stop", { offset: 1, stopColor: "#3f9143" })),
            react_default.a.createElement("linearGradient", { id: "mongodb_c", x1: -951.77, y1: -1261.44, x2: -984.01, y2: -1239.78, gradientTransform: "matrix(-.98 -.32 .29 -.88 -566.27 -1364.86)", gradientUnits: "userSpaceOnUse" },
                react_default.a.createElement("stop", { offset: 0, stopColor: "#41a247" }),
                react_default.a.createElement("stop", { offset: 0.35, stopColor: "#4ba74b" }),
                react_default.a.createElement("stop", { offset: 0.96, stopColor: "#67b554" }),
                react_default.a.createElement("stop", { offset: 1, stopColor: "#69b655" }))),
        react_default.a.createElement("title", null, "logo_mongodb"),
        react_default.a.createElement("path", { d: "M24.7 100l-2.7-.89s.34-13.57-4.55-14.52c-3.23-3.74.49-159.8 12.22-.54 0 0-4 2-4.77 5.44S24.7 100 24.7 100z", fill: "url(#mongodb_a)" }),
        react_default.a.createElement("path", { d: "M26.15 86.89S49.46 71.54 44 39.66C38.74 16.5 26.32 8.88 25 6a35 35 0 0 1-3-5.73l1 64.54s-2 19.7 3.15 22.08z", fill: "url(#mongodb_b)" }),
        react_default.a.createElement("path", { d: "M20.66 87.75S-1.21 72.83.05 46.52s16.7-39.26 19.71-41.6C21.7 2.84 21.78 2 21.93 0c1.37 2.93 1.14 43.73 1.29 48.49.56 18.57-1.03 35.75-2.56 39.26z", fill: "url(#mongodb_c)" })));
};
/* harmony default export */ var graphics_LogoMongodb = (LogoMongodb);

// CONCATENATED MODULE: ./src/dataLoaders/graphics/LogoMysql.tsx

const LogoMysql = () => {
    return (react_default.a.createElement("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 100 98.16" },
        react_default.a.createElement("style", null, `  .mysql_a {
        fill: #687e91;
      }

      .mysql_a, .mysql_b {
        fill-rule: evenodd;
      }

      .mysql_b {
        fill: #00758f;
      }`),
        react_default.a.createElement("defs", null),
        react_default.a.createElement("path", { className: "mysql_a", d: "M22.74,16.82a11,11,0,0,0-2.79.34v.14h.13a22.93,22.93,0,0,0,2.18,2.79c.55,1.09,1,2.17,1.56,3.26l.14-.14a3.81,3.81,0,0,0,1.43-3.4c-.41-.48-.47-.95-.82-1.43-.4-.68-1.29-1-1.83-1.56" }),
        react_default.a.createElement("path", { className: "mysql_b", d: "M92.11,75.92c-5.44-.13-9.66.41-13.19,1.91-1,.41-2.65.41-2.79,1.7.54.54.61,1.43,1.09,2.18a16,16,0,0,0,3.53,4.15C82.18,86.94,83.61,88,85.11,89c2.65,1.64,5.64,2.59,8.22,4.22,1.5,1,3,2.18,4.5,3.2.74.54,1.21,1.43,2.17,1.76V98c-.48-.61-.61-1.5-1.09-2.18-.68-.68-1.36-1.29-2-2a32.43,32.43,0,0,0-7.07-6.87c-2.18-1.5-6.94-3.54-7.82-6l-.14-.13a27.9,27.9,0,0,0,4.7-1.1c2.3-.61,4.41-.47,6.79-1.08,1.09-.28,2.18-.62,3.27-1V77c-1.23-1.22-2.11-2.86-3.4-4A91.89,91.89,0,0,0,82,64.63c-2.11-1.36-4.83-2.24-7.08-3.4-.81-.41-2.17-.61-2.65-1.29a27.59,27.59,0,0,1-2.79-5.24c-2-3.73-3.88-7.88-5.57-11.83-1.23-2.65-2-5.3-3.47-7.75-7-11.57-14.63-18.57-26.32-25.44-2.52-1.43-5.51-2-8.71-2.79-1.7-.07-3.4-.2-5.1-.27-1.09-.48-2.18-1.77-3.13-2.38C13.28,1.79,3.29-3.52.43,3.49c-1.84,4.42,2.72,8.77,4.28,11a31.2,31.2,0,0,1,3.47,5.1c.48,1.15.61,2.38,1.09,3.6a82,82,0,0,0,3.54,9.12,31.18,31.18,0,0,0,2.51,4.21c.55.75,1.5,1.09,1.7,2.32-.95,1.36-1,3.4-1.56,5.1-2.45,7.68-1.5,17.21,2,22.85,1.09,1.7,3.67,5.44,7.14,4,3.06-1.22,2.38-5.1,3.27-8.5.2-.82.07-1.36.47-1.9v.14c1,1.9,1.91,3.73,2.79,5.64A38.69,38.69,0,0,0,40,75.31c1.62,1.23,2.92,3.33,5,4.08v-.2h-.14a7.51,7.51,0,0,0-1.56-1.36,33.69,33.69,0,0,1-3.54-4.08,87.87,87.87,0,0,1-7.61-12.38C31,59.26,30,57,29.13,54.84c-.41-.81-.41-2-1.09-2.45-1,1.5-2.51,2.79-3.26,4.62-1.29,2.93-1.43,6.53-1.91,10.28-.27.07-.13,0-.27.13-2.17-.54-2.92-2.79-3.74-4.69-2-4.83-2.38-12.58-.61-18.16.47-1.43,2.52-5.92,1.7-7.28-.41-1.29-1.77-2-2.52-3.06A26.58,26.58,0,0,1,15,29.88c-1.64-3.81-2.46-8-4.22-11.84a36.81,36.81,0,0,0-3.4-5.23C6.07,11,4.65,9.68,3.62,7.5c-.33-.75-.81-2-.27-2.78a1.09,1.09,0,0,1,1-.89c.88-.75,3.4.2,4.28.61a34.22,34.22,0,0,1,6.73,3.4c1,.68,2,2,3.2,2.32H20c2.17.47,4.62.13,6.67.74a43.68,43.68,0,0,1,9.79,4.7A60.31,60.31,0,0,1,57.62,38.86c.82,1.56,1.17,3,1.91,4.62,1.43,3.34,3.2,6.74,4.63,10A44.15,44.15,0,0,0,69,62.59c1,1.43,5.1,2.18,6.94,2.93a48.85,48.85,0,0,1,4.69,1.9c2.31,1.43,4.62,3.06,6.8,4.63,1.08.81,4.49,2.51,4.69,3.87" })));
};
/* harmony default export */ var graphics_LogoMysql = (LogoMysql);

// CONCATENATED MODULE: ./src/dataLoaders/graphics/LogoNginx.tsx

const LogoNginx = () => {
    return (react_default.a.createElement("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 87.14 100" },
        react_default.a.createElement("style", null, `
          .nginx_a {
            fill: #009438;
            }
          .nginx_b {
            fill: #fefefe;
            }`),
        react_default.a.createElement("defs", null),
        react_default.a.createElement("path", { className: "nginx_a", d: "M0,50.07V26.21a2.14,2.14,0,0,1,1.2-2C15,16.21,28.68,8.35,42.37.4A2.09,2.09,0,0,1,44.68.3L86,24.17a2.22,2.22,0,0,1,1.11,2V73.84a2.22,2.22,0,0,1-1.11,2L50.51,96.42c-1.85,1.11-3.8,2.22-5.65,3.23a2.37,2.37,0,0,1-2.49,0C32,93.73,21.74,87.72,11.38,81.8c-3.42-1.94-6.85-4-10.27-5.92A2.08,2.08,0,0,1,0,73.94Z" }),
        react_default.a.createElement("path", { className: "nginx_b", d: "M29.14,41.19V69a5.75,5.75,0,0,1-5.83,5.83,5.51,5.51,0,0,1-4.72-2.68,4.86,4.86,0,0,1-.74-2.78V30.74a5.59,5.59,0,0,1,3.61-5.27,8.63,8.63,0,0,1,6.11,0,9.8,9.8,0,0,1,4.71,3.23c4,4.81,8,9.62,12,14.43,4.16,5,8.42,10,12.58,15.08a5.25,5.25,0,0,0,.37.46V30.55A5.39,5.39,0,0,1,62.16,25a5.61,5.61,0,0,1,6.39,4.81V69.22A5.16,5.16,0,0,1,65.68,74a8.17,8.17,0,0,1-4.44.83,10.08,10.08,0,0,1-6.11-2.59,35.29,35.29,0,0,1-2.4-2.77C48.19,64,43.66,58.67,39.13,53.22L29.32,41.47C29.32,41.38,29.23,41.28,29.14,41.19Z" })));
};
/* harmony default export */ var graphics_LogoNginx = (LogoNginx);

// CONCATENATED MODULE: ./src/dataLoaders/graphics/LogoRedis.tsx

const LogoRedis = () => {
    return (react_default.a.createElement("svg", { width: "100%", height: "100%", id: "redis_Layer_1", viewBox: "0 0 100 100", xmlSpace: "preserve" },
        react_default.a.createElement("style", null, '.redis_st0{fill:#912626}.redis_st1{fill:#c6302b}'),
        react_default.a.createElement("path", { className: "redis_st0", d: "M96.1 73.1c-5.3 2.8-33 14.1-38.9 17.2-5.9 3.1-9.2 3-13.8.8C38.8 88.9 9.3 77 4 74.5c-2.6-1.3-4-2.3-4-3.3V61s38.3-8.3 44.5-10.6c6.2-2.2 8.3-2.3 13.6-.4 5.3 1.9 36.7 7.6 41.9 9.5v10c0 1.1-1.2 2.2-3.9 3.6" }),
        react_default.a.createElement("path", { className: "redis_st1", d: "M96.1 63c-5.3 2.8-33 14.1-38.9 17.2-5.9 3.1-9.2 3-13.8.8C38.8 78.8 9.3 66.9 4 64.4c-5.3-2.5-5.4-4.3-.2-6.3s34.5-13.5 40.6-15.7c6.2-2.2 8.3-2.3 13.6-.4 5.3 1.9 32.7 12.9 37.9 14.8 5.3 1.9 5.5 3.4.2 6.2" }),
        react_default.a.createElement("path", { className: "redis_st0", d: "M96.1 56.7c-5.3 2.8-33 14.1-38.9 17.2-5.9 3.1-9.2 3-13.8.8C38.8 72.5 9.3 60.6 4 58.1c-2.6-1.3-4-2.3-4-3.3V44.7s38.3-8.3 44.5-10.6c6.2-2.2 8.3-2.3 13.6-.4 5.3 1.9 36.7 7.6 41.9 9.5v10c0 1-1.2 2.1-3.9 3.5" }),
        react_default.a.createElement("path", { className: "redis_st1", d: "M96.1 46.7c-5.3 2.8-33 14.1-38.9 17.2-5.9 3.1-9.2 3-13.8.8C38.8 62.5 9.3 50.6 4 48.1c-5.3-2.5-5.4-4.3-.2-6.3C9 39.7 38.3 28.2 44.5 26c6.2-2.2 8.3-2.3 13.6-.4 5.3 1.9 32.7 12.9 37.9 14.8 5.2 1.9 5.4 3.5.1 6.3" }),
        react_default.a.createElement("path", { className: "redis_st0", d: "M96.1 39.8c-5.3 2.8-33 14.1-38.9 17.2-5.9 3.1-9.2 3-13.8.8C38.8 55.6 9.3 43.7 4 41.2c-2.6-1.3-4-2.3-4-3.3V27.7s38.3-8.3 44.5-10.6c6.2-2.2 8.3-2.3 13.6-.4 5.3 1.9 36.7 7.6 41.9 9.5v10c0 1-1.2 2.1-3.9 3.6" }),
        react_default.a.createElement("path", { className: "redis_st1", d: "M96.1 29.7c-5.3 2.8-33 14.1-38.9 17.2-5.9 3.1-9.2 3-13.8.8C38.8 45.5 9.3 33.6 4 31.1c-5.3-2.5-5.4-4.3-.2-6.3S38.3 11.3 44.4 9.1c6.2-2.2 8.3-2.3 13.6-.4 5.3 1.9 32.7 12.9 37.9 14.8 5.3 1.9 5.5 3.4.2 6.2" }),
        react_default.a.createElement("path", { d: "M62.2 19.9l-8.6.9-1.9 4.6-3.1-5.2-9.9-.9 7.4-2.7-2.2-4.1 6.9 2.7 6.5-2.1-1.8 4.2 6.7 2.6m-11 22.4l-16-6.7 23-3.5-7 10.2M28.9 22.4c6.8 0 12.3 2.1 12.3 4.8 0 2.6-5.5 4.8-12.3 4.8s-12.3-2.1-12.3-4.8c0-2.6 5.6-4.8 12.3-4.8", fill: "#fff" }),
        react_default.a.createElement("path", { d: "M72.4 21.1L86 26.5l-13.6 5.4V21.1", fill: "#621b1c" }),
        react_default.a.createElement("path", { d: "M57.3 27.1l15.1-6v10.7l-1.5.6-13.6-5.3", fill: "#9a2928" })));
};
/* harmony default export */ var graphics_LogoRedis = (LogoRedis);

// CONCATENATED MODULE: ./src/dataLoaders/graphics/LogoPrometheus.tsx

const LogoPrometheus = () => {
    return (react_default.a.createElement("svg", { width: "100%", height: "100%", viewBox: "0 0 100 100" },
        react_default.a.createElement("path", { d: "M50 93.9c-7.9 0-14.2-5.2-14.2-11.7h28.5c-.1 6.4-6.4 11.7-14.3 11.7zm23.4-15.6H26.6v-8.6h46.9l-.1 8.6zm-.1-12.9H26.6c-.2-.2-.3-.4-.5-.5-4.8-5.8-5.9-8.9-7-12 0-.1 5.8 1.2 10 2.1 0 0 2.1.5 5.3 1.1-3-3.5-4.8-8-4.8-12.5 0-10 7.7-18.8 4.9-25.9 2.7.2 5.6 5.7 5.8 14.3 2.9-4 4.1-11.2 4.1-15.6 0-4.6 3-9.9 6.1-10.1-2.7 4.5.7 8.3 3.7 17.7 1.1 3.6 1 9.5 1.9 13.3.3-7.9 1.6-19.4 6.6-23.4-2.2 5 .3 11.3 2.1 14.3 2.8 4.9 4.5 8.5 4.5 15.5 0 4.7-1.7 9.1-4.6 12.5 3.3-.6 5.6-1.2 5.6-1.2L81 52.9c-.1-.1-1.7 6.3-7.7 12.5zM50 0C22.4 0 0 22.4 0 50s22.4 50 50 50 50-22.4 50-50S77.6 0 50 0z", fill: "#da4e31" })));
};
/* harmony default export */ var graphics_LogoPrometheus = (LogoPrometheus);

// CONCATENATED MODULE: ./src/dataLoaders/graphics/IconStreaming.tsx

const IconLineProtocol = () => {
    return (react_default.a.createElement("svg", { height: "100%", width: "100%", id: "icon_stream_Layer_1", viewBox: "0 0 100 100", xmlSpace: "preserve" },
        react_default.a.createElement("style", null, '.icon_stream_st2,.icon_stream_st3,.icon_stream_st4,.icon_stream_st5{fill:none;stroke:#21adf6;stroke-width:1.012;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}.icon_stream_st3,.icon_stream_st4,.icon_stream_st5{stroke:#bef0ff}.icon_stream_st4,.icon_stream_st5{stroke:#513cc6}.icon_stream_st5{stroke:#6bdfff}'),
        react_default.a.createElement("path", { d: "M81.7 25.9l-.7-3-2.9-.9-2.2 2.1.7 3 2.9.9 2.2-2.1z", fill: "#b1b6ff" }),
        react_default.a.createElement("path", { d: "M67.1 80.5l-.3-1.5-1.5-.4-1.1 1 .3 1.5 1.5.4 1.1-1z", fill: "#7a65f1" }),
        react_default.a.createElement("path", { className: "icon_stream_st2", d: "M9.3 36.6v6M12.3 39.6H6.4" }),
        react_default.a.createElement("path", { className: "icon_stream_st3", d: "M64.6.5v2.9M66.1 2h-3" }),
        react_default.a.createElement("path", { className: "icon_stream_st4", d: "M75.8 94.1l-2.1 2.1M75.8 96.2l-2.1-2.1" }),
        react_default.a.createElement("path", { className: "icon_stream_st5", d: "M28.1 14.5L26 16.6M28.1 16.6L26 14.5" }),
        react_default.a.createElement("circle", { cx: 92.4, cy: 65.1, r: 1.5, fill: "#9394ff" }),
        react_default.a.createElement("g", null,
            react_default.a.createElement("path", { d: "M46 20.5c.3 0 .5.2.5.5s-.2.5-.5.5-.5-.2-.5-.5.3-.5.5-.5m0-1c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5z", fill: "#01c9ff" })),
        react_default.a.createElement("g", null,
            react_default.a.createElement("path", { d: "M37.6 94.5c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2m0-1c-1.6 0-3 1.3-3 3s1.3 3 3 3 3-1.3 3-3-1.4-3-3-3z", fill: "#326bba" })),
        react_default.a.createElement("g", null,
            react_default.a.createElement("path", { d: "M18.2 71.7l3.4 1 .8 3.4-2.6 2.4-3.4-1-.8-3.4 2.6-2.4m-.2-1.2c-.1 0-.1 0 0 0-.1 0-.1 0 0 0l-3.5 3.2 1 4.5 4.4 1.3 3.4-3.2-1-4.5-4.3-1.3zm5.5 6zm0 0z", fill: "#4591ed" })),
        react_default.a.createElement("g", null,
            react_default.a.createElement("linearGradient", { id: "icon_stream_SVGID_1_", gradientUnits: "userSpaceOnUse", x1: 30.384, y1: 31.71, x2: 81.544, y2: 75.479 },
                react_default.a.createElement("stop", { offset: 0, stopColor: "#6bdfff" }),
                react_default.a.createElement("stop", { offset: 1, stopColor: "#b1b6ff" })),
            react_default.a.createElement("path", { d: "M31.6 33.7l4.5 32.6c0 2.5 6.2 4.5 13.9 4.5s13.9-2 13.9-4.5l4.4-32.6", fill: "url(#icon_stream_SVGID_1_)" }),
            react_default.a.createElement("linearGradient", { id: "icon_stream_SVGID_2_", gradientUnits: "userSpaceOnUse", x1: 37.712, y1: 23.145, x2: 88.872, y2: 66.913 },
                react_default.a.createElement("stop", { offset: 0, stopColor: "#6bdfff" }),
                react_default.a.createElement("stop", { offset: 1, stopColor: "#b1b6ff" })),
            react_default.a.createElement("ellipse", { cx: 50.1, cy: 33.7, rx: 18.3, ry: 4.5, fill: "url(#icon_stream_SVGID_2_)" }),
            react_default.a.createElement("g", null,
                react_default.a.createElement("ellipse", { cx: 50, cy: 33.7, rx: 16.9, ry: 3.7, fill: "#21adf6" })))));
};
/* harmony default export */ var IconStreaming = (IconLineProtocol);

// CONCATENATED MODULE: ./src/dataLoaders/graphics/IconCSV.tsx

const IconCSV = () => {
    return (react_default.a.createElement("svg", { id: "icon_csv_Layer_1", height: "100%", width: "100%", x: 0, y: 0, viewBox: "0 0 100 100", xmlSpace: "preserve" },
        react_default.a.createElement("style", null, '.icon_csv_st3,.icon_csv_st4,.icon_csv_st5,.icon_csv_st6,.icon_csv_st7{fill:none;stroke:#9394ff;stroke-width:1.01;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}.icon_csv_st4,.icon_csv_st5,.icon_csv_st6,.icon_csv_st7{stroke:#7a65f1}.icon_csv_st5,.icon_csv_st6,.icon_csv_st7{stroke:#b1b6ff}.icon_csv_st6,.icon_csv_st7{stroke:#7ce490}.icon_csv_st7{stroke:#311f94}.icon_csv_st11{fill:#9394ff}'),
        react_default.a.createElement("path", { d: "M77.9 10.1l.3 1.5 1.5.5 1.1-1-.3-1.5-1.5-.5-1.1 1z", fill: "#c6ffd0" }),
        react_default.a.createElement("path", { d: "M3.4 86.7l.7 3 2.9.9 2.2-2.1-.7-3-2.9-.9-2.2 2.1z", fill: "#118174" }),
        react_default.a.createElement("path", { d: "M23.1 41.3l.3 1.5 1.5.4 1.1-1-.3-1.5-1.5-.4-1.1 1c.1 0 .1 0 0 0z", fill: "#4ed8a0" }),
        react_default.a.createElement("path", { className: "icon_csv_st3", d: "M89.4 80.8v-5.9M86.5 77.8h5.9" }),
        react_default.a.createElement("path", { className: "icon_csv_st4", d: "M56.8 86.2v-3M55.3 84.7h2.9" }),
        react_default.a.createElement("path", { className: "icon_csv_st5", d: "M95.5 22.4v-3M94 20.9h3" }),
        react_default.a.createElement("path", { className: "icon_csv_st6", d: "M23.1 23.4l2.1-2.1M23.1 21.3l2.1 2.1" }),
        react_default.a.createElement("path", { className: "icon_csv_st7", d: "M59.9 99.4l2.1-2.1M59.9 97.3l2.1 2.1" }),
        react_default.a.createElement("path", { d: "M6.5 51.7c.4 0 .7.3.7.7s-.3.7-.7.7c-.4 0-.7-.3-.7-.7s.3-.7.7-.7m0-1.5c-1.2 0-2.2 1-2.2 2.2s1 2.2 2.2 2.2 2.2-1 2.2-2.2-1-2.2-2.2-2.2z", fill: "#31b08c" }),
        react_default.a.createElement("path", { d: "M31.7 79.8c.3 0 .5.2.5.5s-.2.5-.5.5-.5-.2-.5-.5.3-.5.5-.5m0-1c-.8 0-1.5.7-1.5 1.5s.7 1.5 1.5 1.5 1.5-.7 1.5-1.5-.7-1.5-1.5-1.5z", fill: "#7a65f1" }),
        react_default.a.createElement("path", { d: "M57 19.1c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2m0-1c-1.6 0-3 1.3-3 3 0 1.6 1.3 3 3 3 1.6 0 3-1.3 3-3-.1-1.7-1.4-3-3-3z", fill: "#a5f3b4" }),
        react_default.a.createElement("circle", { className: "icon_csv_st11", cx: 92.6, cy: 1, r: 0.6 }),
        react_default.a.createElement("path", { className: "icon_csv_st11", d: "M83.5 39l3.4 1 .8 3.4-2.6 2.4-3.4-1-.8-3.4 2.6-2.4m-.2-1.1s-.1 0 0 0c-.1 0-.1 0 0 0l-3.4 3.2 1 4.5 4.4 1.4 3.4-3.1-1-4.5-4.4-1.5z" }),
        react_default.a.createElement("g", null,
            react_default.a.createElement("linearGradient", { id: "icon_csv_SVGID_1_", gradientUnits: "userSpaceOnUse", x1: 36.607, y1: 40.433, x2: 81.644, y2: 77.479 },
                react_default.a.createElement("stop", { offset: 0, stopColor: "#4ed8a0" }),
                react_default.a.createElement("stop", { offset: 1, stopColor: "#7a65f1" })),
            react_default.a.createElement("path", { d: "M45.5 70.9c-.1 0-.2 0-.3-.1-.1 0-.2-.1-.3-.1-.1-.1-.2-.1-.2-.2-.1-.1-.1-.2-.1-.3l-9.8-27.5V42.4s0-.1.1-.1l4.5-5.8.1-.1.1-.1s.1 0 .1-.1h.1l18.1-2.6h.4c.1 0 .1 0 .2.1.1 0 .1.1.2.1l.1.1.1.1L74 60.9c.1.1.1.2.1.3v.3c0 .1-.1.2-.1.2-.1.1-.1.1-.2.1l-27.9 9h-.2c-.1.1-.1.1-.2.1 0 .1 0 .1 0 0m12.6-38.5h-.8L39 35c-.2 0-.3.1-.4.1-.1 0-.3.1-.4.2-.1.1-.2.1-.3.2l-.3.3-4.6 5.7c-.1.1-.2.2-.2.3-.1.1-.1.2-.1.4v.4c0 .1 0 .3.1.4l9.5 27.8c.1.3.2.5.4.7s.3.4.5.6.4.3.7.4c.2.1.5.2.7.2h1.3c.1 0 .2 0 .3-.1l28.6-9.5c.3-.1.5-.3.7-.4.2-.2.3-.4.4-.7s.1-.6 0-.9c0-.3-.2-.6-.3-.9L60.1 33.7c-.1-.2-.2-.3-.4-.5-.1-.1-.3-.3-.5-.4l-.6-.3c-.1 0-.3-.1-.5-.1", fill: "url(#icon_csv_SVGID_1_)" }),
            react_default.a.createElement("linearGradient", { id: "icon_csv_SVGID_2_", gradientUnits: "userSpaceOnUse", x1: 37.564, y1: 39.269, x2: 82.601, y2: 76.315 },
                react_default.a.createElement("stop", { offset: 0, stopColor: "#4ed8a0" }),
                react_default.a.createElement("stop", { offset: 1, stopColor: "#7a65f1" })),
            react_default.a.createElement("path", { d: "M41.8 36.6l-1.7.3 1.7 4.2V41.4s0 .1-.1.1l-.1.1-.1.1s-.1 0-.1.1h-.1l-5.6 1 .5 1.5 5.8-1.1c.2 0 .4-.1.6-.2.2-.1.3-.2.5-.3.1-.1.3-.2.4-.4.1-.1.2-.3.2-.5v-.2-.2c0-.1 0-.2-.1-.2 0-.1-.1-.2-.1-.2l-1.7-4.4", fill: "url(#icon_csv_SVGID_2_)" }),
            react_default.a.createElement("linearGradient", { id: "icon_csv_SVGID_3_", gradientUnits: "userSpaceOnUse", x1: 39.966, y1: 36.349, x2: 85.003, y2: 73.395 },
                react_default.a.createElement("stop", { offset: 0, stopColor: "#4ed8a0" }),
                react_default.a.createElement("stop", { offset: 1, stopColor: "#7a65f1" })),
            react_default.a.createElement("path", { d: "M52.9 43.1h-.4l-4.4.9c-.2 0-.4.1-.5.2-.1.1-.3.2-.3.4-.1.1-.1.3-.1.5s0 .3.1.5l.8 1.7c.1.1.1.3.2.4.1.1.2.2.4.3.1.1.3.2.4.2.2.1.3.1.5.1h.4l4.4-.9c.2 0 .4-.1.5-.2.1-.1.2-.2.3-.4.1-.1.1-.3.1-.5s0-.3-.1-.5l-.8-1.8c-.1-.1-.1-.2-.2-.4l-.3-.3c-.1-.1-.3-.1-.4-.2-.3.1-.4 0-.6 0", fill: "url(#icon_csv_SVGID_3_)" }),
            react_default.a.createElement("linearGradient", { id: "icon_csv_SVGID_4_", gradientUnits: "userSpaceOnUse", x1: 43.729, y1: 31.775, x2: 88.765, y2: 68.821 },
                react_default.a.createElement("stop", { offset: 0, stopColor: "#4ed8a0" }),
                react_default.a.createElement("stop", { offset: 1, stopColor: "#7a65f1" })),
            react_default.a.createElement("path", { d: "M60.2 41.7h-.4l-4 .8c-.2 0-.3.1-.5.2s-.3.2-.3.3c-.1.1-.1.3-.1.4 0 .2 0 .3.1.5l.8 1.6c.1.1.2.3.3.4.1.1.2.2.4.3.1.1.3.2.4.2.1.1.3.1.5.1h.4l4-.9c.2 0 .3-.1.5-.2l.3-.3c.1-.1.1-.3.1-.4 0-.2-.1-.3-.1-.5l-.9-1.5-.3-.3-.3-.3c-.1-.1-.3-.1-.4-.2-.2-.1-.4-.2-.5-.2", fill: "url(#icon_csv_SVGID_4_)" }),
            react_default.a.createElement("linearGradient", { id: "icon_csv_SVGID_5_", gradientUnits: "userSpaceOnUse", x1: 34.341, y1: 43.188, x2: 79.378, y2: 80.234 },
                react_default.a.createElement("stop", { offset: 0, stopColor: "#4ed8a0" }),
                react_default.a.createElement("stop", { offset: 1, stopColor: "#7a65f1" })),
            react_default.a.createElement("path", { d: "M47.2 49.5h-.4l-4.7 1c-.2 0-.4.1-.6.2-.2.1-.3.3-.4.4-.1.2-.2.3-.2.5s0 .4.1.6l.7 1.9c.1.2.1.3.3.4.1.1.2.2.4.3.1.1.3.2.5.2.2.1.3.1.5.1h.4l4.9-1.2c.2-.1.4-.1.6-.3.2-.1.3-.3.4-.4.1-.2.1-.3.1-.5s0-.4-.1-.6l-.8-1.8c-.1-.1-.1-.3-.3-.4-.1-.1-.2-.2-.4-.3-.1-.1-.3-.2-.4-.2-.3.1-.5.1-.6.1", fill: "url(#icon_csv_SVGID_5_)" }),
            react_default.a.createElement("linearGradient", { id: "icon_csv_SVGID_6_", gradientUnits: "userSpaceOnUse", x1: 42.416, y1: 33.372, x2: 87.452, y2: 70.418 },
                react_default.a.createElement("stop", { offset: 0, stopColor: "#4ed8a0" }),
                react_default.a.createElement("stop", { offset: 1, stopColor: "#7a65f1" })),
            react_default.a.createElement("path", { d: "M62.6 46.1h-.4L58 47c-.2 0-.4.1-.5.2-.1.1-.2.2-.3.4-.1.1-.1.3-.1.5s0 .3.1.5l.9 1.7c.1.1.2.3.3.4.1.1.2.2.4.3.1.1.3.2.4.2.2.1.3.1.5.1h.4l4.1-1c.2 0 .3-.1.5-.2.1-.1.2-.2.3-.4.1-.1.1-.3.1-.5s-.1-.3-.2-.5l-.9-1.6c-.1-.1-.2-.2-.3-.4-.1-.1-.2-.2-.4-.3-.1-.1-.3-.1-.4-.2 0 0-.2-.1-.3-.1", fill: "url(#icon_csv_SVGID_6_)" }),
            react_default.a.createElement("linearGradient", { id: "icon_csv_SVGID_7_", gradientUnits: "userSpaceOnUse", x1: 36.948, y1: 40.019, x2: 81.984, y2: 77.065 },
                react_default.a.createElement("stop", { offset: 0, stopColor: "#4ed8a0" }),
                react_default.a.createElement("stop", { offset: 1, stopColor: "#7a65f1" })),
            react_default.a.createElement("path", { d: "M57.6 52.7h-.4l-4.5 1.1c-.2.1-.4.1-.5.3-.2.1-.3.3-.4.4-.1.2-.1.3-.1.5s0 .4.1.6l.9 2c.1.2.2.3.3.4.1.1.2.2.4.3.1.1.3.2.5.2.2.1.3.1.5.1h.4l4.6-1.2c.2-.1.4-.1.5-.3.1-.1.2-.3.3-.4.1-.2.1-.3.1-.5s-.1-.4-.2-.6l-.9-1.9c-.1-.1-.2-.3-.3-.4-.1-.1-.2-.2-.4-.3-.1-.1-.3-.2-.4-.2-.2-.1-.4-.1-.5-.1", fill: "url(#icon_csv_SVGID_7_)" }),
            react_default.a.createElement("linearGradient", { id: "icon_csv_SVGID_8_", gradientUnits: "userSpaceOnUse", x1: 41.13, y1: 34.934, x2: 86.166, y2: 71.98 },
                react_default.a.createElement("stop", { offset: 0, stopColor: "#4ed8a0" }),
                react_default.a.createElement("stop", { offset: 1, stopColor: "#7a65f1" })),
            react_default.a.createElement("path", { d: "M65.1 50.8h-.4l-4.1 1c-.2 0-.4.1-.5.2-.1.1-.2.2-.3.4s-.1.3-.1.5.1.4.1.5l.9 1.9c.1.1.2.3.3.4.1.1.2.2.4.3.1.1.3.2.5.2.2.1.3.1.5.1h.4l4.2-1.1c.2-.1.3-.1.5-.3.1-.1.2-.3.3-.4.1-.2.1-.3.1-.5s-.1-.4-.2-.5l-1-1.8c-.1-.1-.2-.3-.3-.4-.1-.1-.2-.2-.4-.3-.1-.1-.3-.2-.4-.2h-.5", fill: "url(#icon_csv_SVGID_8_)" }),
            react_default.a.createElement("linearGradient", { id: "icon_csv_SVGID_9_", gradientUnits: "userSpaceOnUse", x1: 30.492, y1: 47.867, x2: 75.529, y2: 84.912 },
                react_default.a.createElement("stop", { offset: 0, stopColor: "#4ed8a0" }),
                react_default.a.createElement("stop", { offset: 1, stopColor: "#7a65f1" })),
            react_default.a.createElement("path", { d: "M51.8 60.3h-.4l-5 1.4-.6.3c-.2.1-.3.3-.4.5-.4.2-.4.4-.4.6 0 .2 0 .4.1.7l.8 2.2c.1.2.2.3.3.5l.4.4c.2.1.3.2.5.3.2.1.4.1.6.1h.8l5.1-1.6.6-.3c.2-.1.3-.3.4-.5.1-.2.1-.4.1-.6s0-.4-.1-.7l-.9-2.1c-.1-.2-.2-.3-.3-.5l-.4-.4c-.1-.1-.3-.2-.5-.2-.4-.1-.6-.1-.7-.1", fill: "url(#icon_csv_SVGID_9_)" }),
            react_default.a.createElement("linearGradient", { id: "icon_csv_SVGID_10_", gradientUnits: "userSpaceOnUse", x1: 35.18, y1: 42.168, x2: 80.216, y2: 79.214 },
                react_default.a.createElement("stop", { offset: 0, stopColor: "#4ed8a0" }),
                react_default.a.createElement("stop", { offset: 1, stopColor: "#7a65f1" })),
            react_default.a.createElement("path", { d: "M60.1 57.9h-.4L55 59.3l-.6.3c-.2.1-.3.3-.4.5v.5c0 .2 0 .4.1.6l.9 2.1c.1.2.2.3.3.5l.4.4c.2.1.3.2.5.2.2.1.3.1.5.1h.4L62 63c.2-.1.4-.2.5-.3s.2-.3.3-.5.1-.4.1-.6c0-.2-.1-.4-.2-.6l-1-2c-.1-.2-.2-.3-.3-.4-.1-.1-.2-.2-.4-.3-.1-.1-.3-.2-.5-.2 0-.1-.2-.2-.4-.2", fill: "url(#icon_csv_SVGID_10_)" }),
            react_default.a.createElement("linearGradient", { id: "icon_csv_SVGID_11_", gradientUnits: "userSpaceOnUse", x1: 39.623, y1: 36.767, x2: 84.659, y2: 73.813 },
                react_default.a.createElement("stop", { offset: 0, stopColor: "#4ed8a0" }),
                react_default.a.createElement("stop", { offset: 1, stopColor: "#7a65f1" })),
            react_default.a.createElement("path", { d: "M67.8 55.8h-.4L63.1 57c-.2.1-.4.1-.5.3-.1.1-.2.3-.3.4-.1.2-.1.3-.1.5s.1.4.2.6l1 2c.1.2.2.3.3.4.1.1.3.2.4.3s.3.2.5.2c.2.1.3.1.5.1h.4l4.3-1.3c.2-.1.3-.2.5-.3.1-.1.2-.3.3-.4.1-.2.1-.4 0-.5 0-.2-.1-.4-.2-.6l-1-1.9c-.1-.1-.2-.3-.3-.4-.1-.1-.2-.2-.4-.3-.1-.1-.3-.2-.4-.2-.2-.1-.3-.1-.5-.1", fill: "url(#icon_csv_SVGID_11_)" }))));
};
/* harmony default export */ var graphics_IconCSV = (IconCSV);

// CONCATENATED MODULE: ./src/dataLoaders/graphics/IconLineProtocol.tsx

const IconLineProtocol_IconLineProtocol = () => {
    return (react_default.a.createElement("svg", { width: "100%", height: "100%", id: "icon_lp_Layer_1", x: 0, y: 0, viewBox: "0 0 100 100", xmlSpace: "preserve" },
        react_default.a.createElement("style", null, '.icon_lp_st2,.icon_lp_st3,.icon_lp_st4,.icon_lp_st5,.icon_lp_st6{fill:none;stroke:#ff8564;stroke-width:.9329;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}.icon_lp_st3,.icon_lp_st4,.icon_lp_st5,.icon_lp_st6{stroke:#ffb6a0}.icon_lp_st4,.icon_lp_st5,.icon_lp_st6{stroke:#f85f53}.icon_lp_st5,.icon_lp_st6{stroke:#9394ff}.icon_lp_st6{fill:#b1b6ff;stroke:#ffb6a0}.icon_lp_st8{fill:#dc4e58}'),
        react_default.a.createElement("path", { d: "M79.7 24.6l-.7-2.8-2.7-.8-2.1 1.9.6 2.8 2.7.8 2.2-1.9z", fill: "#9394ff" }),
        react_default.a.createElement("path", { d: "M66.2 74.9l-.3-1.4-1.4-.4-1 .9.3 1.4 1.4.4 1-.9z", fill: "#311f94" }),
        react_default.a.createElement("path", { className: "icon_lp_st2", d: "M12.9 34.4v5.5M15.7 37.2h-5.5" }),
        react_default.a.createElement("path", { className: "icon_lp_st3", d: "M63.9 1.1v2.8M65.3 2.5h-2.8" }),
        react_default.a.createElement("path", { className: "icon_lp_st4", d: "M11.3 96.4v2.7M12.7 97.8H10" }),
        react_default.a.createElement("path", { className: "icon_lp_st5", d: "M74.2 87.4l-2 2M74.2 89.4l-2-2" }),
        react_default.a.createElement("path", { className: "icon_lp_st6", d: "M30.2 14.1L28.3 16M30.2 16l-1.9-1.9" }),
        react_default.a.createElement("circle", { cx: 89.5, cy: 60.7, r: 1.4, fill: "#c9d0ff" }),
        react_default.a.createElement("g", null,
            react_default.a.createElement("path", { className: "icon_lp_st8", d: "M37.5 23.3c.2 0 .4.2.4.4s-.2.4-.4.4-.4-.2-.4-.4.2-.4.4-.4m0-.9c-.8 0-1.4.6-1.4 1.4s.6 1.4 1.4 1.4 1.4-.6 1.4-1.4-.6-1.4-1.4-1.4z" })),
        react_default.a.createElement("g", null,
            react_default.a.createElement("path", { d: "M38.9 87.8c1 0 1.8.8 1.8 1.8s-.8 1.8-1.8 1.8-1.8-.8-1.8-1.8.8-1.8 1.8-1.8m0-.9c-1.5 0-2.8 1.2-2.8 2.8 0 1.5 1.2 2.8 2.8 2.8s2.8-1.2 2.8-2.8c0-1.6-1.2-2.8-2.8-2.8z", fill: "#7a65f1" })),
        react_default.a.createElement("g", null,
            react_default.a.createElement("path", { className: "icon_lp_st8", d: "M17 66.7l3.1 1 .7 3.2-2.4 2.1-3.1-.9-.7-3.2 2.4-2.2m-.3-1.1l-3.2 2.9 1 4.1 4.1 1.2 3.1-2.9-1-4.1-4-1.2zm5.1 5.5zm0 0z" })),
        react_default.a.createElement("linearGradient", { id: "icon_lp_influxdb_x5F_logo_1_", gradientUnits: "userSpaceOnUse", x1: 38.005, y1: 37.41, x2: 63.326, y2: 71.448 },
            react_default.a.createElement("stop", { offset: 0.002, stopColor: "#ff8564" }),
            react_default.a.createElement("stop", { offset: 1, stopColor: "#9394ff" })),
        react_default.a.createElement("path", { id: "icon_lp_influxdb_x5F_logo_4_", d: "M67.5 54.5l-3.9-16.8c-.2-.9-1.1-1.8-2-2.1L44 30.2c-.2-.1-.5-.1-.7-.1-.7 0-1.5.3-2.1.7L28.6 42.6c-.7.6-1.1 1.8-.8 2.7l4.1 18c.2.9 1.1 1.8 2 2.1l16.5 5.1c.2.1.5.1.7.1.7 0 1.5-.3 2.1-.7l13.5-12.6c.7-.6 1-1.8.8-2.8zM45.9 34.2L58 37.9c.5.1.5.4 0 .5l-6.4 1.4c-.5.1-1.1-.1-1.5-.4l-4.4-4.8c-.4-.4-.3-.6.2-.4zm7.5 21.7c.1.5-.2.7-.7.6l-13.1-4c-.5-.1-.6-.5-.2-.9l10-9.3c.4-.4.7-.2.9.3l3.1 13.3zM31.9 44.1l10.6-9.9c.4-.4.9-.3 1.3 0l5.3 5.8c.4.4.3.9 0 1.3l-10.6 9.9c-.4.4-.9.3-1.3 0l-5.3-5.8c-.4-.5-.4-1 0-1.3zm2.6 15.6l-2.8-12.3c-.1-.5.1-.6.4-.2l4.4 4.8c.4.4.5 1.1.4 1.5L35 59.7c-.2.5-.5.5-.5 0zM50 66.9l-13.9-4.3c-.5-.1-.7-.7-.6-1.1l2.3-7.5c.1-.5.7-.7 1.1-.6l13.9 4.3c.5.1.7.7.6 1.1l-2.3 7.5c-.1.5-.6.8-1.1.6zm12.3-10.1L53 65.4c-.4.4-.5.2-.4-.3l1.9-6.2c.1-.5.7-1 1.1-1.1l6.4-1.4c.6-.1.6.1.3.4zm1-1.8l-7.6 1.8c-.5.1-1-.2-1.1-.7L51.4 42c-.1-.5.2-1 .7-1.1l7.6-1.8c.5-.1 1 .2 1.1.7L64 53.9c.1.5-.2 1-.7 1.1z", fill: "url(#icon_lp_influxdb_x5F_logo_1_)" })));
};
/* harmony default export */ var graphics_IconLineProtocol = (IconLineProtocol_IconLineProtocol);

// CONCATENATED MODULE: ./src/dataLoaders/graphics/index.ts



















// CONCATENATED MODULE: ./src/dataLoaders/constants/pluginConfigs.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return QUICKSTART_SCRAPER_TARGET_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return pluginsByBundle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return telegrafPluginsInfo; });
/* unused harmony export PLUGIN_OPTIONS */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BUNDLE_LOGOS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return PLUGIN_BUNDLE_OPTIONS; });


const QUICKSTART_SCRAPER_TARGET_URL = `${window.location.origin}/metrics`;
const pluginsByBundle = {
    [types["BundleName"].System]: [
        dist["e" /* TelegrafPluginInputCpu */].NameEnum.Cpu,
        dist["f" /* TelegrafPluginInputDisk */].NameEnum.Disk,
        dist["g" /* TelegrafPluginInputDiskio */].NameEnum.Diskio,
        dist["w" /* TelegrafPluginInputSystem */].NameEnum.System,
        dist["m" /* TelegrafPluginInputMem */].NameEnum.Mem,
        dist["n" /* TelegrafPluginInputNet */].NameEnum.Net,
        dist["q" /* TelegrafPluginInputProcesses */].NameEnum.Processes,
        dist["u" /* TelegrafPluginInputSwap */].NameEnum.Swap,
    ],
    [types["BundleName"].Docker]: [dist["h" /* TelegrafPluginInputDocker */].NameEnum.Docker],
    [types["BundleName"].Kubernetes]: [dist["k" /* TelegrafPluginInputKubernetes */].NameEnum.Kubernetes],
    [types["BundleName"].Nginx]: [dist["p" /* TelegrafPluginInputNginx */].NameEnum.Nginx],
    [types["BundleName"].Redis]: [dist["t" /* TelegrafPluginInputRedis */].NameEnum.Redis],
};
const telegrafPluginsInfo = {
    [dist["e" /* TelegrafPluginInputCpu */].NameEnum.Cpu]: {
        fields: null,
        defaults: {
            name: dist["e" /* TelegrafPluginInputCpu */].NameEnum.Cpu,
            type: dist["e" /* TelegrafPluginInputCpu */].TypeEnum.Input,
        },
        templateID: '0000000000000009',
    },
    [dist["f" /* TelegrafPluginInputDisk */].NameEnum.Disk]: {
        fields: null,
        defaults: {
            name: dist["f" /* TelegrafPluginInputDisk */].NameEnum.Disk,
            type: dist["f" /* TelegrafPluginInputDisk */].TypeEnum.Input,
        },
        templateID: '0000000000000009',
    },
    [dist["g" /* TelegrafPluginInputDiskio */].NameEnum.Diskio]: {
        fields: null,
        defaults: {
            name: dist["g" /* TelegrafPluginInputDiskio */].NameEnum.Diskio,
            type: dist["g" /* TelegrafPluginInputDiskio */].TypeEnum.Input,
        },
        templateID: '0000000000000009',
    },
    [dist["h" /* TelegrafPluginInputDocker */].NameEnum.Docker]: {
        fields: {
            endpoint: {
                type: types["ConfigFieldType"].String,
                isRequired: true,
            },
        },
        defaults: {
            name: dist["h" /* TelegrafPluginInputDocker */].NameEnum.Docker,
            type: dist["h" /* TelegrafPluginInputDocker */].TypeEnum.Input,
            config: { endpoint: '' },
        },
        templateID: '0000000000000002',
    },
    [dist["i" /* TelegrafPluginInputFile */].NameEnum.File]: {
        fields: {
            files: {
                type: types["ConfigFieldType"].StringArray,
                isRequired: true,
            },
        },
        defaults: {
            name: dist["i" /* TelegrafPluginInputFile */].NameEnum.File,
            type: dist["i" /* TelegrafPluginInputFile */].TypeEnum.Input,
            config: { files: [] },
        },
    },
    [dist["j" /* TelegrafPluginInputKernel */].NameEnum.Kernel]: {
        fields: null,
        defaults: {
            name: dist["j" /* TelegrafPluginInputKernel */].NameEnum.Kernel,
            type: dist["g" /* TelegrafPluginInputDiskio */].TypeEnum.Input,
        },
    },
    [dist["k" /* TelegrafPluginInputKubernetes */].NameEnum.Kubernetes]: {
        fields: {
            url: {
                type: types["ConfigFieldType"].Uri,
                isRequired: true,
            },
        },
        defaults: {
            name: dist["k" /* TelegrafPluginInputKubernetes */].NameEnum.Kubernetes,
            type: dist["k" /* TelegrafPluginInputKubernetes */].TypeEnum.Input,
            config: { url: '' },
        },
        templateID: '0000000000000005',
    },
    [dist["l" /* TelegrafPluginInputLogParser */].NameEnum.Logparser]: {
        fields: { files: { type: types["ConfigFieldType"].StringArray, isRequired: true } },
        defaults: {
            name: dist["l" /* TelegrafPluginInputLogParser */].NameEnum.Logparser,
            type: dist["l" /* TelegrafPluginInputLogParser */].TypeEnum.Input,
            config: { files: [] },
        },
    },
    [dist["m" /* TelegrafPluginInputMem */].NameEnum.Mem]: {
        fields: null,
        defaults: {
            name: dist["m" /* TelegrafPluginInputMem */].NameEnum.Mem,
            type: dist["m" /* TelegrafPluginInputMem */].TypeEnum.Input,
        },
        templateID: '0000000000000009',
    },
    [dist["n" /* TelegrafPluginInputNet */].NameEnum.Net]: {
        fields: null,
        defaults: {
            name: dist["n" /* TelegrafPluginInputNet */].NameEnum.Net,
            type: dist["n" /* TelegrafPluginInputNet */].TypeEnum.Input,
        },
        templateID: '0000000000000009',
    },
    [dist["o" /* TelegrafPluginInputNetResponse */].NameEnum.NetResponse]: {
        fields: null,
        defaults: {
            name: dist["o" /* TelegrafPluginInputNetResponse */].NameEnum.NetResponse,
            type: dist["o" /* TelegrafPluginInputNetResponse */].TypeEnum.Input,
        },
    },
    [dist["p" /* TelegrafPluginInputNginx */].NameEnum.Nginx]: {
        fields: { urls: { type: types["ConfigFieldType"].UriArray, isRequired: true } },
        defaults: {
            name: dist["p" /* TelegrafPluginInputNginx */].NameEnum.Nginx,
            type: dist["p" /* TelegrafPluginInputNginx */].TypeEnum.Input,
        },
        templateID: '0000000000000006',
    },
    [dist["q" /* TelegrafPluginInputProcesses */].NameEnum.Processes]: {
        fields: null,
        defaults: {
            name: dist["q" /* TelegrafPluginInputProcesses */].NameEnum.Processes,
            type: dist["q" /* TelegrafPluginInputProcesses */].TypeEnum.Input,
        },
        templateID: '0000000000000009',
    },
    [dist["r" /* TelegrafPluginInputProcstat */].NameEnum.Procstat]: {
        fields: { exe: { type: types["ConfigFieldType"].String, isRequired: true } },
        defaults: {
            name: dist["r" /* TelegrafPluginInputProcstat */].NameEnum.Procstat,
            type: dist["r" /* TelegrafPluginInputProcstat */].TypeEnum.Input,
            config: { exe: '' },
        },
    },
    [dist["s" /* TelegrafPluginInputPrometheus */].NameEnum.Prometheus]: {
        fields: { urls: { type: types["ConfigFieldType"].UriArray, isRequired: true } },
        defaults: {
            name: dist["s" /* TelegrafPluginInputPrometheus */].NameEnum.Prometheus,
            type: dist["s" /* TelegrafPluginInputPrometheus */].TypeEnum.Input,
            config: { urls: [] },
        },
    },
    [dist["t" /* TelegrafPluginInputRedis */].NameEnum.Redis]: {
        fields: {
            servers: { type: types["ConfigFieldType"].StringArray, isRequired: true },
            password: { type: types["ConfigFieldType"].String, isRequired: false },
        },
        defaults: {
            name: dist["t" /* TelegrafPluginInputRedis */].NameEnum.Redis,
            type: dist["t" /* TelegrafPluginInputRedis */].TypeEnum.Input,
            config: { servers: [], password: '' },
        },
        templateID: '0000000000000008',
    },
    [dist["v" /* TelegrafPluginInputSyslog */].NameEnum.Syslog]: {
        fields: { server: { type: types["ConfigFieldType"].String, isRequired: true } },
        defaults: {
            name: dist["v" /* TelegrafPluginInputSyslog */].NameEnum.Syslog,
            type: dist["v" /* TelegrafPluginInputSyslog */].TypeEnum.Input,
            config: { server: '' },
        },
    },
    [dist["u" /* TelegrafPluginInputSwap */].NameEnum.Swap]: {
        fields: null,
        defaults: {
            name: dist["u" /* TelegrafPluginInputSwap */].NameEnum.Swap,
            type: dist["u" /* TelegrafPluginInputSwap */].TypeEnum.Input,
        },
        templateID: '0000000000000009',
    },
    [dist["w" /* TelegrafPluginInputSystem */].NameEnum.System]: {
        fields: null,
        defaults: {
            name: dist["w" /* TelegrafPluginInputSystem */].NameEnum.System,
            type: dist["w" /* TelegrafPluginInputSystem */].TypeEnum.Input,
        },
        templateID: '0000000000000009',
    },
    [dist["x" /* TelegrafPluginInputTail */].NameEnum.Tail]: {
        fields: null,
        defaults: {
            name: dist["x" /* TelegrafPluginInputTail */].NameEnum.Tail,
            type: dist["x" /* TelegrafPluginInputTail */].TypeEnum.Input,
        },
    },
};
const PLUGIN_OPTIONS = [
    dist["e" /* TelegrafPluginInputCpu */].NameEnum.Cpu,
    dist["f" /* TelegrafPluginInputDisk */].NameEnum.Disk,
    dist["g" /* TelegrafPluginInputDiskio */].NameEnum.Diskio,
    dist["h" /* TelegrafPluginInputDocker */].NameEnum.Docker,
    dist["i" /* TelegrafPluginInputFile */].NameEnum.File,
    dist["j" /* TelegrafPluginInputKernel */].NameEnum.Kernel,
    dist["k" /* TelegrafPluginInputKubernetes */].NameEnum.Kubernetes,
    dist["l" /* TelegrafPluginInputLogParser */].NameEnum.Logparser,
    dist["m" /* TelegrafPluginInputMem */].NameEnum.Mem,
    dist["n" /* TelegrafPluginInputNet */].NameEnum.Net,
    dist["o" /* TelegrafPluginInputNetResponse */].NameEnum.NetResponse,
    dist["p" /* TelegrafPluginInputNginx */].NameEnum.Nginx,
    dist["q" /* TelegrafPluginInputProcesses */].NameEnum.Processes,
    dist["r" /* TelegrafPluginInputProcstat */].NameEnum.Procstat,
    dist["s" /* TelegrafPluginInputPrometheus */].NameEnum.Prometheus,
    dist["t" /* TelegrafPluginInputRedis */].NameEnum.Redis,
    dist["v" /* TelegrafPluginInputSyslog */].NameEnum.Syslog,
    dist["u" /* TelegrafPluginInputSwap */].NameEnum.Swap,
    dist["w" /* TelegrafPluginInputSystem */].NameEnum.System,
    dist["x" /* TelegrafPluginInputTail */].NameEnum.Tail,
];

const BUNDLE_LOGOS = {
    [types["BundleName"].System]: graphics_LogoCpu,
    [types["BundleName"].Docker]: graphics_LogoDocker,
    [types["BundleName"].Kubernetes]: graphics_LogoKubernetes,
    [types["BundleName"].Nginx]: graphics_LogoNginx,
    [types["BundleName"].Redis]: graphics_LogoRedis,
};
const PLUGIN_BUNDLE_OPTIONS = [
    types["BundleName"].System,
    types["BundleName"].Docker,
    types["BundleName"].Kubernetes,
    types["BundleName"].Nginx,
    types["BundleName"].Redis,
];


/***/ }),

/***/ 239:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getBrowserBasepath; });
/* unused harmony export getBasepath */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getAPIBasepath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return stripPrefix; });
/* harmony import */ var src_utils_nodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(549);
/* harmony import */ var src_shared_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32);


const getBrowserBasepath = () => {
    const rootNode = Object(src_utils_nodes__WEBPACK_IMPORTED_MODULE_0__[/* getRootNode */ "a"])();
    return rootNode.getAttribute('data-basepath') || '';
};
const getBasepath = () => {
    if (src_shared_constants__WEBPACK_IMPORTED_MODULE_1__[/* BASE_PATH */ "d"] === '/') {
        return '';
    }
    return src_shared_constants__WEBPACK_IMPORTED_MODULE_1__[/* BASE_PATH */ "d"].slice(0, -1);
};
const getAPIBasepath = () => {
    if (src_shared_constants__WEBPACK_IMPORTED_MODULE_1__[/* API_BASE_PATH */ "a"] === '/') {
        return '';
    }
    return src_shared_constants__WEBPACK_IMPORTED_MODULE_1__[/* API_BASE_PATH */ "a"].slice(0, -1);
};
const stripPrefix = (pathname, basepath = getBasepath()) => {
    if (basepath === '') {
        return pathname;
    }
    const expr = new RegExp(`^${basepath}`);
    const matches = pathname.match(expr);
    if (matches) {
        return pathname.replace(expr, '');
    }
};


/***/ }),

/***/ 24:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return getStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getByID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getLabels; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);


const getStatus = ({ resources }, resource) => {
    return resources[resource].status;
};
const getAll = ({ resources }, resource) => {
    const allIDs = resources[resource].allIDs;
    const byID = resources[resource].byID;
    return allIDs.map(id => byID[id]);
};
const getByID = ({ resources }, type, id) => {
    const byID = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(resources, `${type}.byID`);
    if (!byID) {
        throw new Error(`"${type}" resource has yet not been set`);
    }
    const resource = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(byID, `${id}`, null);
    return resource;
};
const getLabels = (state, labelIDs) => {
    return labelIDs
        .map(labelID => getByID(state, src_types__WEBPACK_IMPORTED_MODULE_1__["ResourceType"].Labels, labelID))
        .filter(label => !!label);
};


/***/ }),

/***/ 240:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ActionTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return deleteTimeRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return setDashboardTimeRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return retainRangesDashTimeV1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return updateQueryParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return updateTimeRangeFromQueryParams; });
/* harmony import */ var qs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(399);
/* harmony import */ var qs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(qs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_router_redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(209);
/* harmony import */ var react_router_redux__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_router_redux__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(33);
/* harmony import */ var src_utils_basepath__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(239);
/* harmony import */ var src_dashboards_utils_time__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(599);
/* harmony import */ var src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(35);
/* harmony import */ var src_shared_constants_timeRanges__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(134);








var ActionTypes;
(function (ActionTypes) {
    ActionTypes["DeleteTimeRange"] = "DELETE_TIME_RANGE";
    ActionTypes["SetDashboardTimeRange"] = "SET_DASHBOARD_TIME_RANGE";
    ActionTypes["RetainRangesDashboardTimeV1"] = "RETAIN_RANGES_DASHBOARD_TIME_V1";
})(ActionTypes || (ActionTypes = {}));
const deleteTimeRange = (dashboardID) => ({
    type: ActionTypes.DeleteTimeRange,
    payload: { dashboardID },
});
const setDashboardTimeRange = (dashboardID, timeRange) => ({
    type: ActionTypes.SetDashboardTimeRange,
    payload: { dashboardID, timeRange },
});
const retainRangesDashTimeV1 = (dashboardIDs) => ({
    type: ActionTypes.RetainRangesDashboardTimeV1,
    payload: { dashboardIDs },
});
const updateQueryParams = (updatedQueryParams) => {
    const { search, pathname } = window.location;
    const strippedPathname = Object(src_utils_basepath__WEBPACK_IMPORTED_MODULE_4__[/* stripPrefix */ "c"])(pathname);
    const newQueryParams = Object(lodash__WEBPACK_IMPORTED_MODULE_2__["pickBy"])(Object.assign(Object.assign({}, qs__WEBPACK_IMPORTED_MODULE_0___default.a.parse(search, { ignoreQueryPrefix: true })), updatedQueryParams), v => !!v);
    const newSearch = qs__WEBPACK_IMPORTED_MODULE_0___default.a.stringify(newQueryParams);
    const newLocation = { pathname: strippedPathname, search: `?${newSearch}` };
    return Object(react_router_redux__WEBPACK_IMPORTED_MODULE_1__["replace"])(newLocation);
};
const updateTimeRangeFromQueryParams = (dashboardID) => (dispatch, getState) => {
    const { ranges } = getState();
    const queryParams = qs__WEBPACK_IMPORTED_MODULE_0___default.a.parse(window.location.search, {
        ignoreQueryPrefix: true,
    });
    const validatedTimeRangeFromQuery = Object(src_dashboards_utils_time__WEBPACK_IMPORTED_MODULE_5__[/* validateAndTypeRange */ "a"])({
        lower: Object(lodash__WEBPACK_IMPORTED_MODULE_2__["get"])(queryParams, 'lower', null),
        upper: Object(lodash__WEBPACK_IMPORTED_MODULE_2__["get"])(queryParams, 'upper', null),
    });
    const validatedTimeRange = validatedTimeRangeFromQuery || ranges[dashboardID] || src_shared_constants_timeRanges__WEBPACK_IMPORTED_MODULE_7__[/* DEFAULT_TIME_RANGE */ "b"];
    if ((queryParams.lower || queryParams.upper) &&
        !validatedTimeRangeFromQuery) {
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_3__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* invalidTimeRangeValueInURLQuery */ "Gb"]()));
    }
    dispatch(setDashboardTimeRange(dashboardID, validatedTimeRange));
    dispatch(updateQueryParams({
        lower: validatedTimeRange.lower,
        upper: validatedTimeRange.upper,
    }));
};


/***/ }),

/***/ 241:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RESET_VIEWS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SET_VIEW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SET_VIEWS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return resetViews; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return setViews; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return setView; });
const RESET_VIEWS = 'RESET_VIEWS';
const SET_VIEW = 'SET_VIEW';
const SET_VIEWS = 'SET_VIEWS';
const resetViews = () => ({
    type: RESET_VIEWS,
});
const setViews = (status, schema) => ({
    type: SET_VIEWS,
    status,
    schema,
});
const setView = (id, status, schema) => ({
    type: SET_VIEW,
    id,
    status,
    schema,
});


/***/ }),

/***/ 242:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return NULL_ARRAY_INDEX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ASCENDING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return DESCENDING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return DEFAULT_SORT_DIRECTION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return DEFAULT_FIX_FIRST_COLUMN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return DEFAULT_VERTICAL_TIME_AXIS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return CELL_HORIZONTAL_PADDING; });
/* unused harmony export DEFAULT_TIME_FIELD */
const NULL_ARRAY_INDEX = -1;
const ASCENDING = 'asc';
const DESCENDING = 'desc';
const DEFAULT_SORT_DIRECTION = ASCENDING;
const DEFAULT_FIX_FIRST_COLUMN = true;
const DEFAULT_VERTICAL_TIME_AXIS = true;
const CELL_HORIZONTAL_PADDING = 30;
const DEFAULT_TIME_FIELD = {
    internalName: '_time',
    displayName: 'time',
    visible: true,
};


/***/ }),

/***/ 243:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AGG_WINDOW_AUTO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return AGG_WINDOW_NONE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return DURATIONS; });
/* unused harmony export genFlux */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return FUNCTIONS; });
const AGG_WINDOW_AUTO = 'auto';
const AGG_WINDOW_NONE = 'none';
const DURATIONS = [
    '5s',
    '15s',
    '1m',
    '5m',
    '15m',
    '1h',
    '6h',
    '12h',
    '24h',
    '2d',
    '7d',
    '30d',
];
const genFlux = (func, period) => {
    if (period === AGG_WINDOW_NONE) {
        return `|> ${func}()`;
    }
    switch (func) {
        case 'derivative': {
            return `|> derivative(unit: ${period}, nonNegative: false)`;
        }
        case 'nonnegative derivative': {
            return `|> derivative(unit: ${period}, nonNegative: true)`;
        }
        case 'median':
        case 'mean':
        case 'max':
        case 'min':
        case 'sum':
        case 'stddev':
        case 'first':
        case 'last': {
            return `|> aggregateWindow(every: ${period}, fn: ${func})`;
        }
        default:
            return `|> ${func}()`;
    }
};
const FUNCTIONS = [
    {
        name: 'mean',
        flux: period => genFlux('mean', period),
    },
    {
        name: 'median',
        flux: period => genFlux('median', period),
    },
    {
        name: 'max',
        flux: period => genFlux('max', period),
    },
    {
        name: 'min',
        flux: period => genFlux('min', period),
    },
    {
        name: 'sum',
        flux: period => genFlux('sum', period),
    },
    {
        name: 'derivative',
        flux: period => genFlux('derivative', period),
    },
    {
        name: 'nonnegative derivative',
        flux: period => genFlux('nonnegative derivative', period),
    },
    {
        name: 'distinct',
        flux: period => genFlux('distinct', period),
    },
    {
        name: 'count',
        flux: period => genFlux('count', period),
    },
    {
        name: 'increase',
        flux: period => genFlux('increase', period),
    },
    {
        name: 'skew',
        flux: period => genFlux('skew', period),
    },
    {
        name: 'spread',
        flux: period => genFlux('spread', period),
    },
    {
        name: 'stddev',
        flux: period => genFlux('stddev', period),
    },
    {
        name: 'first',
        flux: period => genFlux('first', period),
    },
    {
        name: 'last',
        flux: period => genFlux('last', period),
    },
    {
        name: 'unique',
        flux: period => genFlux('unique', period),
    },
    {
        name: 'sort',
        flux: period => genFlux('sort', period),
    },
];


/***/ }),

/***/ 244:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ConnectorState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return StepStatus; });
var ConnectorState;
(function (ConnectorState) {
    ConnectorState["None"] = "none";
    ConnectorState["Some"] = "some";
    ConnectorState["Full"] = "full";
})(ConnectorState || (ConnectorState = {}));
var StepStatus;
(function (StepStatus) {
    StepStatus["Incomplete"] = "circle-thick";
    StepStatus["Complete"] = "checkmark";
    StepStatus["Error"] = "remove";
})(StepStatus || (StepStatus = {}));


/***/ }),

/***/ 245:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ADD_TEMPLATE_SUMMARY; });
/* unused harmony export GET_TEMPLATE_SUMMARIES_FOR_ORG */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return POPULATE_TEMPLATE_SUMMARIES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return REMOVE_TEMPLATE_SUMMARY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return SET_EXPORT_TEMPLATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return SET_TEMPLATE_SUMMARY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return SET_TEMPLATES_STATUS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return addTemplateSummary; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return populateTemplateSummaries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return setExportTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return setTemplatesStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return removeTemplateSummary; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return setTemplateSummary; });
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);

const ADD_TEMPLATE_SUMMARY = 'ADD_TEMPLATE_SUMMARY';
const GET_TEMPLATE_SUMMARIES_FOR_ORG = 'GET_TEMPLATE_SUMMARIES_FOR_ORG';
const POPULATE_TEMPLATE_SUMMARIES = 'POPULATE_TEMPLATE_SUMMARIES';
const REMOVE_TEMPLATE_SUMMARY = 'REMOVE_TEMPLATE_SUMMARY';
const SET_EXPORT_TEMPLATE = 'SET_EXPORT_TEMPLATE';
const SET_TEMPLATE_SUMMARY = 'SET_TEMPLATE_SUMMARY';
const SET_TEMPLATES_STATUS = 'SET_TEMPLATES_STATUS';
const addTemplateSummary = (schema) => ({
    type: ADD_TEMPLATE_SUMMARY,
    schema,
});
const populateTemplateSummaries = (schema) => ({
    type: POPULATE_TEMPLATE_SUMMARIES,
    status: src_types__WEBPACK_IMPORTED_MODULE_0__["RemoteDataState"].Done,
    schema,
});
const setExportTemplate = (status, item) => ({
    type: SET_EXPORT_TEMPLATE,
    status,
    item,
});
const setTemplatesStatus = (status) => ({
    type: SET_TEMPLATES_STATUS,
    status,
});
const removeTemplateSummary = (id) => ({
    type: REMOVE_TEMPLATE_SUMMARY,
    id,
});
const setTemplateSummary = (id, status, schema) => ({
    type: SET_TEMPLATE_SUMMARY,
    id,
    status,
    schema,
});


/***/ }),

/***/ 247:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return INFLUX_LABEL_PREFIX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return TOKEN_LABEL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return HEX_CODE_CHAR_LENGTH; });
/* unused harmony export DEFAULT_LABEL_COLOR_HEX */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EMPTY_LABEL; });
/* unused harmony export CUSTOM_LABEL */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return PRESET_LABEL_COLORS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return INPUT_ERROR_COLOR; });
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var src_types_colors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(393);


const INFLUX_LABEL_PREFIX = '@influxdata';
const TOKEN_LABEL = `${INFLUX_LABEL_PREFIX}.token`;
const HEX_CODE_CHAR_LENGTH = 7;
const DEFAULT_LABEL_COLOR_HEX = '#326BBA';
const EMPTY_LABEL = {
    name: '',
    status: src_types__WEBPACK_IMPORTED_MODULE_0__["RemoteDataState"].Done,
    properties: {
        description: '',
        color: DEFAULT_LABEL_COLOR_HEX,
    },
};
const CUSTOM_LABEL = {
    id: 'custom',
    colorHex: '#RRRRRR',
    name: 'Custom Hexcode',
    type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Custom,
};
const PRESET_LABEL_COLORS = [
    CUSTOM_LABEL,
    {
        id: 'label-preset-sapphire',
        colorHex: '#326BBA',
        name: 'Sapphire',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-ocean',
        colorHex: '#4591ED',
        name: 'Ocean',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-pool',
        colorHex: '#22ADF6',
        name: 'Pool',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-laser',
        colorHex: '#00C9FF',
        name: 'Laser',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-hydrogen',
        colorHex: '#6BDFFF',
        name: 'Hydrogen',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-neutrino',
        colorHex: '#BEF0FF',
        name: 'Neutrino',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-void',
        colorHex: '#311F94',
        name: 'Void',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-amethyst',
        colorHex: '#513CC6',
        name: 'Amethyst',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-star',
        colorHex: '#7A65F2',
        name: 'Star',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-comet',
        colorHex: '#9394FF',
        name: 'Comet',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-potassium',
        colorHex: '#B1B6FF',
        name: 'Potassium',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-moonstone',
        colorHex: '#C9D0FF',
        name: 'Moonstone',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-emerald',
        colorHex: '#108174',
        name: 'Emerald',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-viridian',
        colorHex: '#32B08C',
        name: 'Viridian',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-rainforest',
        colorHex: '#4ED8A0',
        name: 'Rainforest',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-honeydew',
        colorHex: '#7CE490',
        name: 'Honeydew',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-krypton',
        colorHex: '#A5F3B4',
        name: 'Krypton',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-wasabi',
        colorHex: '#C6FFD0',
        name: 'Wasabi',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-ruby',
        colorHex: '#BF3D5E',
        name: 'Ruby',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-fire',
        colorHex: '#DC4E58',
        name: 'Fire',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-curacao',
        colorHex: '#F95F53',
        name: 'Curacao',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-dreamsicle',
        colorHex: '#FF8564',
        name: 'Dreamsicle',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-tungsten',
        colorHex: '#FFB6A0',
        name: 'Tungsten',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-marmelade',
        colorHex: '#FFDCCF',
        name: 'Marmelade',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-topaz',
        colorHex: '#E85B1C',
        name: 'Topaz',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-tiger',
        colorHex: '#F48D38',
        name: 'Tiger',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-pineapple',
        colorHex: '#FFB94A',
        name: 'Pineapple',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-thunder',
        colorHex: '#FFD255',
        name: 'Thunder',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-sulfur',
        colorHex: '#FFE480',
        name: 'Sulfur',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
    {
        id: 'label-preset-daisy',
        colorHex: '#FFF6B8',
        name: 'Daisy',
        type: src_types_colors__WEBPACK_IMPORTED_MODULE_1__[/* LabelColorType */ "a"].Preset,
    },
];
const INPUT_ERROR_COLOR = '#0F0E15';


/***/ }),

/***/ 248:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return taskSchema; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return arrayOfTasks; });
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(76);



const taskSchema = new normalizr__WEBPACK_IMPORTED_MODULE_0__[/* schema */ "b"].Entity(src_types__WEBPACK_IMPORTED_MODULE_1__["ResourceType"].Tasks, {
    labels: [_labels__WEBPACK_IMPORTED_MODULE_2__[/* labelSchema */ "b"]],
});
const arrayOfTasks = [taskSchema];


/***/ }),

/***/ 249:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return telegrafSchema; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return arrayOfTelegrafs; });
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(76);



const telegrafSchema = new normalizr__WEBPACK_IMPORTED_MODULE_0__[/* schema */ "b"].Entity(src_types__WEBPACK_IMPORTED_MODULE_1__["ResourceType"].Telegrafs, {
    labels: [_labels__WEBPACK_IMPORTED_MODULE_2__[/* labelSchema */ "b"]],
}, {
    processStrategy: (t) => {
        if (!t.metadata) {
            return Object.assign(Object.assign({}, t), { metadata: {
                    buckets: [],
                } });
        }
        if (!t.metadata.buckets) {
            return Object.assign(Object.assign({}, t), { metadata: Object.assign(Object.assign({}, t.metadata), { buckets: [] }) });
        }
        return t;
    },
});
const arrayOfTelegrafs = [telegrafSchema];


/***/ }),

/***/ 250:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export parseResponseError */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return parseChunks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return parseResponse; });
/* unused harmony export parseTables */
/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(309);
/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(papaparse__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(109);
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(uuid__WEBPACK_IMPORTED_MODULE_2__);



const parseResponseError = (response) => {
    const data = papaparse__WEBPACK_IMPORTED_MODULE_0___default.a.parse(response.trim()).data;
    return [
        {
            id: uuid__WEBPACK_IMPORTED_MODULE_2___default.a.v4(),
            name: 'Error',
            result: '',
            groupKey: {},
            dataTypes: {},
            data,
        },
    ];
};
const parseChunks = (response) => {
    const trimmedResponse = response.trim();
    if (trimmedResponse === '') {
        return [];
    }
    const chunks = trimmedResponse
        .split(/\n\s*\n#/)
        .map((s, i) => (i === 0 ? s : `#${s}`));
    return chunks;
};
const parseResponse = (response) => {
    const chunks = parseChunks(response);
    const tables = chunks.reduce((acc, chunk) => {
        return [...acc, ...parseTables(chunk)];
    }, []);
    return tables;
};
const parseTables = (responseChunk) => {
    const lines = responseChunk.split('\n');
    const annotationLines = lines
        .filter(line => line.startsWith('#'))
        .join('\n')
        .trim();
    const nonAnnotationLines = lines
        .filter(line => !line.startsWith('#'))
        .join('\n')
        .trim();
    if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isEmpty(annotationLines)) {
        throw new Error('Unable to extract annotation data');
    }
    if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isEmpty(nonAnnotationLines)) {
        return [];
    }
    const nonAnnotationData = papaparse__WEBPACK_IMPORTED_MODULE_0___default.a.parse(nonAnnotationLines).data;
    const annotationData = papaparse__WEBPACK_IMPORTED_MODULE_0___default.a.parse(annotationLines).data;
    const headerRow = nonAnnotationData[0];
    const tableColIndex = headerRow.findIndex(h => h === 'table');
    const resultColIndex = headerRow.findIndex(h => h === 'result');
    const tablesData = Object.values(lodash__WEBPACK_IMPORTED_MODULE_1___default.a.groupBy(nonAnnotationData.slice(1), row => row[tableColIndex]));
    const groupRow = annotationData.find(row => row[0] === '#group');
    const defaultsRow = annotationData.find(row => row[0] === '#default');
    const dataTypeRow = annotationData.find(row => row[0] === '#datatype');
    const groupKeyIndices = groupRow.reduce((acc, value, i) => {
        if (value === 'true') {
            return [...acc, i];
        }
        return acc;
    }, []);
    const tables = tablesData.map(tableData => {
        const dataRow = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.get(tableData, '0', defaultsRow);
        const result = lodash__WEBPACK_IMPORTED_MODULE_1___default.a.get(dataRow, resultColIndex, '') ||
            lodash__WEBPACK_IMPORTED_MODULE_1___default.a.get(defaultsRow, resultColIndex, '');
        const groupKey = groupKeyIndices.reduce((acc, i) => {
            return Object.assign(Object.assign({}, acc), { [headerRow[i]]: lodash__WEBPACK_IMPORTED_MODULE_1___default.a.get(dataRow, i, '') });
        }, {});
        const name = Object.entries(groupKey)
            .filter(([k]) => !['_start', '_stop'].includes(k))
            .map(([k, v]) => `${k}=${v}`)
            .join(' ');
        const dataTypes = dataTypeRow.reduce((acc, dataType, i) => (Object.assign(Object.assign({}, acc), { [headerRow[i]]: dataType })), {});
        return {
            id: uuid__WEBPACK_IMPORTED_MODULE_2___default.a.v4(),
            data: [[...headerRow], ...tableData],
            name,
            result,
            groupKey,
            dataTypes,
        };
    });
    return tables;
};


/***/ }),

/***/ 251:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return buildVarsOption; });
/* harmony import */ var src_variables_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(149);

const buildVarsOption = (variables) => ({
    type: 'File',
    package: null,
    imports: null,
    body: [
        {
            type: 'OptionStatement',
            assignment: {
                type: 'VariableAssignment',
                id: {
                    type: 'Identifier',
                    name: src_variables_constants__WEBPACK_IMPORTED_MODULE_0__[/* OPTION_NAME */ "b"],
                },
                init: {
                    type: 'ObjectExpression',
                    properties: variables.map(assignmentToProperty),
                },
            },
        },
    ],
});
const assignmentToProperty = (variable) => {
    return {
        type: 'Property',
        key: variable.id,
        value: variable.init,
    };
};


/***/ }),

/***/ 252:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return getBuckets; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return createBucket; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return updateBucket; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return renameBucket; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return deleteBucket; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addBucketLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return deleteBucketLabel; });
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var src_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(14);
/* harmony import */ var src_schemas__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(175);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var src_utils_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(87);
/* harmony import */ var src_organizations_selectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(19);
/* harmony import */ var src_buckets_actions_creators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(723);
/* harmony import */ var src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(33);
/* harmony import */ var src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(72);
/* harmony import */ var src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(35);
/* harmony import */ var src_resources_selectors__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(24);











const getBuckets = () => async (dispatch, getState) => {
    try {
        dispatch(Object(src_buckets_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* setBuckets */ "h"])(src_types__WEBPACK_IMPORTED_MODULE_3__["RemoteDataState"].Loading));
        const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_5__[/* getOrg */ "a"])(getState());
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_1__[/* getBuckets */ "w"]({ query: { orgID: org.id } });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const buckets = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data.buckets, src_schemas__WEBPACK_IMPORTED_MODULE_2__[/* arrayOfBuckets */ "a"]);
        dispatch(Object(src_buckets_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* setBuckets */ "h"])(src_types__WEBPACK_IMPORTED_MODULE_3__["RemoteDataState"].Done, buckets));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_buckets_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* setBuckets */ "h"])(src_types__WEBPACK_IMPORTED_MODULE_3__["RemoteDataState"].Error));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_7__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_9__[/* getBucketsFailed */ "mb"])()));
    }
};
const createBucket = (bucket) => async (dispatch, getState) => {
    try {
        const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_5__[/* getOrg */ "a"])(getState());
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_1__[/* postBucket */ "bb"]({ data: Object.assign(Object.assign({}, bucket), { orgID: org.id }) });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        const newBucket = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data, src_schemas__WEBPACK_IMPORTED_MODULE_2__[/* bucketSchema */ "i"]);
        dispatch(Object(src_buckets_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* addBucket */ "e"])(newBucket));
        dispatch(Object(src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_8__[/* checkBucketLimits */ "c"])());
    }
    catch (error) {
        console.error(error);
        const message = Object(src_utils_api__WEBPACK_IMPORTED_MODULE_4__[/* getErrorMessage */ "b"])(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_7__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_9__[/* bucketCreateFailed */ "A"])(message)));
    }
};
const updateBucket = (bucket) => async (dispatch, getState) => {
    try {
        const state = getState();
        const data = denormalizeBucket(state, bucket);
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_1__[/* patchBucket */ "R"]({
            bucketID: bucket.id,
            data,
        });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const newBucket = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data, src_schemas__WEBPACK_IMPORTED_MODULE_2__[/* bucketSchema */ "i"]);
        dispatch(Object(src_buckets_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* editBucket */ "f"])(newBucket));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_7__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_9__[/* bucketUpdateSuccess */ "G"])(bucket.name)));
    }
    catch (error) {
        console.error(error);
        const message = Object(src_utils_api__WEBPACK_IMPORTED_MODULE_4__[/* getErrorMessage */ "b"])(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_7__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_9__[/* bucketUpdateFailed */ "F"])(message)));
    }
};
const renameBucket = (originalName, bucket) => async (dispatch, getState) => {
    try {
        const state = getState();
        const data = denormalizeBucket(state, bucket);
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_1__[/* patchBucket */ "R"]({
            bucketID: bucket.id,
            data,
        });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const newBucket = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data, src_schemas__WEBPACK_IMPORTED_MODULE_2__[/* bucketSchema */ "i"]);
        dispatch(Object(src_buckets_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* editBucket */ "f"])(newBucket));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_7__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_9__[/* bucketRenameSuccess */ "E"])(bucket.name)));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_7__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_9__[/* bucketRenameFailed */ "D"])(originalName)));
    }
};
const deleteBucket = (id, name) => async (dispatch) => {
    try {
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_1__[/* deleteBucket */ "b"]({ bucketID: id });
        if (resp.status !== 204) {
            throw new Error(resp.data.message);
        }
        dispatch(Object(src_buckets_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* removeBucket */ "g"])(id));
        dispatch(Object(src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_8__[/* checkBucketLimits */ "c"])());
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_7__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_9__[/* bucketDeleteFailed */ "C"])(name)));
    }
};
const addBucketLabel = (bucketID, label) => async (dispatch) => {
    try {
        const postResp = await src_client__WEBPACK_IMPORTED_MODULE_1__[/* postBucketsLabel */ "cb"]({
            bucketID,
            data: { labelID: label.id },
        });
        if (postResp.status !== 201) {
            throw new Error(postResp.data.message);
        }
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_1__[/* getBucket */ "v"]({ bucketID });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const newBucket = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data, src_schemas__WEBPACK_IMPORTED_MODULE_2__[/* bucketSchema */ "i"]);
        dispatch(Object(src_buckets_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* editBucket */ "f"])(newBucket));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_7__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_9__[/* addBucketLabelFailed */ "l"])()));
    }
};
const deleteBucketLabel = (bucketID, label) => async (dispatch) => {
    try {
        const deleteResp = await src_client__WEBPACK_IMPORTED_MODULE_1__[/* deleteBucketsLabel */ "c"]({
            bucketID,
            labelID: label.id,
        });
        if (deleteResp.status !== 204) {
            throw new Error(deleteResp.data.message);
        }
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_1__[/* getBucket */ "v"]({ bucketID });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const newBucket = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data, src_schemas__WEBPACK_IMPORTED_MODULE_2__[/* bucketSchema */ "i"]);
        dispatch(Object(src_buckets_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* editBucket */ "f"])(newBucket));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_7__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_9__[/* removeBucketLabelFailed */ "Zb"])()));
    }
};
const denormalizeBucket = (state, bucket) => {
    const labels = Object(src_resources_selectors__WEBPACK_IMPORTED_MODULE_10__[/* getLabels */ "c"])(state, bucket.labels);
    return Object.assign(Object.assign({}, bucket), { labels });
};


/***/ }),

/***/ 253:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getPlugins; });
/* unused harmony export setPluginLoadingState */
/* unused harmony export setPlugins */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return setActivePlugins; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return setLookup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return setList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return setText; });
/* unused harmony export setBucket */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return setFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return reset; });
/* harmony import */ var src_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);


const getPlugins = () => async (dispatch) => {
    dispatch(setPluginLoadingState(src_types__WEBPACK_IMPORTED_MODULE_1__["RemoteDataState"].Loading));
    const result = await Object(src_client__WEBPACK_IMPORTED_MODULE_0__[/* getTelegrafPlugins */ "N"])({}, {});
    if (result.status === 200) {
        const plugins = result.data.plugins;
        dispatch(setPlugins(plugins));
    }
    dispatch(setPluginLoadingState(src_types__WEBPACK_IMPORTED_MODULE_1__["RemoteDataState"].Done));
};
const setPluginLoadingState = (state) => ({
    type: 'SET_TELEGRAF_EDITOR_PLUGINS_LOADING_STATE',
    payload: state,
});
const setPlugins = (plugins) => ({
    type: 'SET_TELEGRAF_EDITOR_PLUGINS',
    payload: plugins,
});
const setActivePlugins = (plugins) => ({
    type: 'SET_TELEGRAF_EDITOR_ACTIVE_PLUGINS',
    payload: plugins,
});
const setLookup = (show) => ({
    type: 'SET_TELEGRAF_EDITOR_LOOKUP',
    payload: show,
});
const setList = (show) => ({
    type: 'SET_TELEGRAF_EDITOR_LIST',
    payload: show,
});
const setText = (text) => ({
    type: 'SET_TELEGRAF_EDITOR_TEXT',
    payload: text,
});
const setBucket = (bucket) => ({
    type: 'SET_TELEGRAF_EDITOR_ACTIVE_BUCKET',
    payload: bucket,
});
const setFilter = (filter) => ({
    type: 'SET_TELEGRAF_EDITOR_FILTER',
    payload: filter,
});
const reset = () => ({
    type: 'RESET_TELEGRAF_EDITOR',
});


/***/ }),

/***/ 254:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return getTelegrafs; });
/* unused harmony export createTelegraf */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return updateTelegraf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return deleteTelegraf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addTelegrafLabelsAsync; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return removeTelegrafLabelsAsync; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getTelegrafConfigToml; });
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var src_utils_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(87);
/* harmony import */ var src_schemas_telegrafs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(249);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(33);
/* harmony import */ var src_telegrafs_actions_creators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(405);
/* harmony import */ var src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(35);
/* harmony import */ var src_organizations_selectors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(19);
/* harmony import */ var src_resources_selectors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(24);









const getTelegrafs = () => async (dispatch, getState) => {
    const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_7__[/* getOrg */ "a"])(getState());
    try {
        dispatch(Object(src_telegrafs_actions_creators__WEBPACK_IMPORTED_MODULE_5__[/* setTelegrafs */ "j"])(src_types__WEBPACK_IMPORTED_MODULE_3__["RemoteDataState"].Loading));
        const telegrafs = await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].telegrafConfigs.getAll(org.id);
        const normTelegrafs = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(telegrafs, src_schemas_telegrafs__WEBPACK_IMPORTED_MODULE_2__[/* arrayOfTelegrafs */ "a"]);
        dispatch(Object(src_telegrafs_actions_creators__WEBPACK_IMPORTED_MODULE_5__[/* setTelegrafs */ "j"])(src_types__WEBPACK_IMPORTED_MODULE_3__["RemoteDataState"].Done, normTelegrafs));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_telegrafs_actions_creators__WEBPACK_IMPORTED_MODULE_5__[/* setTelegrafs */ "j"])(src_types__WEBPACK_IMPORTED_MODULE_3__["RemoteDataState"].Error));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_4__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* telegrafGetFailed */ "Ic"])()));
    }
};
const createTelegraf = (telegraf) => async (dispatch, getState) => {
    try {
        const state = getState();
        const labels = Object(src_resources_selectors__WEBPACK_IMPORTED_MODULE_8__[/* getLabels */ "c"])(state, telegraf.labels);
        const createdTelegraf = await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].telegrafConfigs.create(Object.assign(Object.assign({}, telegraf), { labels }));
        const normTelegraf = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(createdTelegraf, src_schemas_telegrafs__WEBPACK_IMPORTED_MODULE_2__[/* telegrafSchema */ "b"]);
        dispatch(Object(src_telegrafs_actions_creators__WEBPACK_IMPORTED_MODULE_5__[/* addTelegraf */ "f"])(normTelegraf));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_4__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* telegrafCreateFailed */ "Gc"])()));
    }
};
const updateTelegraf = (telegraf) => async (dispatch, getState) => {
    try {
        const state = getState();
        const labels = Object(src_resources_selectors__WEBPACK_IMPORTED_MODULE_8__[/* getLabels */ "c"])(state, telegraf.labels);
        const t = await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].telegrafConfigs.update(telegraf.id, Object.assign(Object.assign({}, telegraf), { labels }));
        const normTelegraf = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(t, src_schemas_telegrafs__WEBPACK_IMPORTED_MODULE_2__[/* telegrafSchema */ "b"]);
        dispatch(Object(src_telegrafs_actions_creators__WEBPACK_IMPORTED_MODULE_5__[/* editTelegraf */ "g"])(normTelegraf));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_4__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* telegrafUpdateFailed */ "Jc"])(telegraf.name)));
    }
};
const deleteTelegraf = (id, name) => async (dispatch) => {
    try {
        await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].telegrafConfigs.delete(id);
        dispatch(Object(src_telegrafs_actions_creators__WEBPACK_IMPORTED_MODULE_5__[/* removeTelegraf */ "h"])(id));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_4__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* telegrafDeleteFailed */ "Hc"])(name)));
    }
};
const addTelegrafLabelsAsync = (telegrafID, labels) => async (dispatch) => {
    try {
        await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].telegrafConfigs.addLabels(telegrafID, labels);
        const telegraf = await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].telegrafConfigs.get(telegrafID);
        const normTelegraf = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(telegraf, src_schemas_telegrafs__WEBPACK_IMPORTED_MODULE_2__[/* telegrafSchema */ "b"]);
        dispatch(Object(src_telegrafs_actions_creators__WEBPACK_IMPORTED_MODULE_5__[/* editTelegraf */ "g"])(normTelegraf));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_4__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* addTelegrafLabelFailed */ "o"])()));
    }
};
const removeTelegrafLabelsAsync = (telegrafID, labels) => async (dispatch) => {
    try {
        await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].telegrafConfigs.removeLabels(telegrafID, labels);
        const telegraf = await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].telegrafConfigs.get(telegrafID);
        const normTelegraf = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(telegraf, src_schemas_telegrafs__WEBPACK_IMPORTED_MODULE_2__[/* telegrafSchema */ "b"]);
        dispatch(Object(src_telegrafs_actions_creators__WEBPACK_IMPORTED_MODULE_5__[/* editTelegraf */ "g"])(normTelegraf));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_4__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* removeTelegrafLabelFailed */ "bc"])()));
    }
};
const getTelegrafConfigToml = (telegrafConfigID) => async (dispatch) => {
    try {
        dispatch(Object(src_telegrafs_actions_creators__WEBPACK_IMPORTED_MODULE_5__[/* setCurrentConfig */ "i"])(src_types__WEBPACK_IMPORTED_MODULE_3__["RemoteDataState"].Loading));
        const config = await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].telegrafConfigs.getTOML(telegrafConfigID);
        dispatch(Object(src_telegrafs_actions_creators__WEBPACK_IMPORTED_MODULE_5__[/* setCurrentConfig */ "i"])(src_types__WEBPACK_IMPORTED_MODULE_3__["RemoteDataState"].Done, config));
    }
    catch (error) {
        dispatch(Object(src_telegrafs_actions_creators__WEBPACK_IMPORTED_MODULE_5__[/* setCurrentConfig */ "i"])(src_types__WEBPACK_IMPORTED_MODULE_3__["RemoteDataState"].Error));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_4__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* getTelegrafConfigFailed */ "ub"])()));
    }
};


/***/ }),

/***/ 265:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ClickOutside; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(108);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var src_shared_decorators_errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(11);




let ClickOutside = class ClickOutside extends react__WEBPACK_IMPORTED_MODULE_1__["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleClickOutside = e => {
            const domNode = react_dom__WEBPACK_IMPORTED_MODULE_2___default.a.findDOMNode(this);
            if (!domNode || !domNode.contains(e.target)) {
                this.props.onClickOutside(e);
            }
        };
    }
    componentDidMount() {
        document.addEventListener('mousedown', this.handleClickOutside, true);
    }
    componentWillUnmount() {
        document.removeEventListener('mousedown', this.handleClickOutside, true);
    }
    render() {
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.Children.only(this.props.children);
    }
};
ClickOutside = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __decorate */ "a"])([
    src_shared_decorators_errors__WEBPACK_IMPORTED_MODULE_3__[/* ErrorHandling */ "a"]
], ClickOutside);



/***/ }),

/***/ 275:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return clearSteps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return incrementCurrentStepIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return decrementCurrentStepIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return setCurrentStepIndex; });
/* unused harmony export setSubstepIndex */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return setBucketInfo; });
/* unused harmony export setBucketID */
const clearSteps = () => ({ type: 'CLEAR_STEPS' });
const incrementCurrentStepIndex = () => ({
    type: 'INCREMENT_CURRENT_STEP_INDEX',
});
const decrementCurrentStepIndex = () => ({
    type: 'DECREMENT_CURRENT_STEP_INDEX',
});
const setCurrentStepIndex = (index) => ({
    type: 'SET_CURRENT_STEP_INDEX',
    payload: { index },
});
const setSubstepIndex = (stepIndex, substep) => ({
    type: 'SET_SUBSTEP_INDEX',
    payload: { stepIndex, substep },
});
const setBucketInfo = (orgID, bucket, bucketID) => ({
    type: 'SET_BUCKET_INFO',
    payload: { orgID, bucket, bucketID },
});
const setBucketID = (bucketID) => ({
    type: 'SET_BUCKET_ID',
    payload: { bucketID },
});


/***/ }),

/***/ 276:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/react-router-redux/lib/index.js
var lib = __webpack_require__(209);

// EXTERNAL MODULE: ./node_modules/normalizr/dist/normalizr.es.js
var normalizr_es = __webpack_require__(41);

// EXTERNAL MODULE: ./src/shared/copy/notifications.ts + 1 modules
var notifications = __webpack_require__(35);

// EXTERNAL MODULE: ./src/client/index.ts + 1 modules
var client = __webpack_require__(14);

// EXTERNAL MODULE: ./src/schemas/checks.ts
var schemas_checks = __webpack_require__(305);

// EXTERNAL MODULE: ./src/utils/naming.ts
var naming = __webpack_require__(312);

// EXTERNAL MODULE: ./src/shared/utils/errors.ts
var errors = __webpack_require__(301);

// EXTERNAL MODULE: ./src/views/helpers/index.ts
var helpers = __webpack_require__(150);

// EXTERNAL MODULE: ./src/organizations/selectors/index.ts
var selectors = __webpack_require__(19);

// CONCATENATED MODULE: ./src/checks/utils/checkValidate.ts
const checkThresholdsValid = (thresholds) => {
    thresholds.forEach(t => {
        if (t.type === 'greater' && isNaN(t.value)) {
            throw new Error('Threshold must have defined value');
        }
        if (t.type === 'lesser' && isNaN(t.value)) {
            throw new Error('Threshold must have defined value');
        }
        if (t.type === 'range' && (isNaN(t.min) || isNaN(t.min))) {
            throw new Error('Threshold must have defined min and max values');
        }
    });
};

// EXTERNAL MODULE: ./src/shared/utils/duration.ts
var duration = __webpack_require__(86);

// EXTERNAL MODULE: ./src/timeMachine/selectors/index.ts
var timeMachine_selectors = __webpack_require__(31);

// CONCATENATED MODULE: ./src/checks/utils/index.ts




const toPostCheck = (check) => {
    const status = check.activeStatus;
    delete check.activeStatus;
    return Object.assign(Object.assign({}, check), { status });
};
const builderToPostCheck = (state) => {
    const { alertBuilder } = state;
    const check = genCheckBase(state);
    validateBuilder(alertBuilder);
    if (check.type === 'threshold') {
        return toThresholdPostCheck(alertBuilder, check);
    }
    if (check.type === 'deadman') {
        return toDeadManPostCheck(alertBuilder, check);
    }
};
const toDeadManPostCheck = (alertBuilder, check) => {
    const { every, level, offset, reportZero, staleTime, statusMessageTemplate, tags, timeSince, activeStatus, } = alertBuilder;
    if (!Object(duration["e" /* isDurationParseable */])(timeSince) || !Object(duration["e" /* isDurationParseable */])(staleTime)) {
        throw new Error('Duration fields must contain valid duration');
    }
    return Object.assign(Object.assign({}, check), { every,
        level,
        offset,
        reportZero,
        staleTime,
        statusMessageTemplate,
        tags,
        timeSince, status: activeStatus });
};
const toThresholdPostCheck = (alertBuilder, check) => {
    const { activeStatus, every, offset, statusMessageTemplate, tags, thresholds, } = alertBuilder;
    checkThresholdsValid(thresholds);
    return Object.assign(Object.assign({}, check), { every,
        offset,
        statusMessageTemplate,
        tags,
        thresholds, status: activeStatus });
};
const validateBuilder = (alertBuilder) => {
    if (!Object(duration["e" /* isDurationParseable */])(alertBuilder.offset)) {
        throw new Error('Check offset must be a valid duration');
    }
    if (!Object(duration["e" /* isDurationParseable */])(alertBuilder.every)) {
        throw new Error('Check every must be a valid duration');
    }
};
const genCheckBase = (state) => {
    const { type, id, status, activeStatus, name } = state.alertBuilder;
    const { draftQueries } = Object(timeMachine_selectors["c" /* getActiveTimeMachine */])(state);
    const { id: orgID } = Object(selectors["a" /* getOrg */])(state);
    return {
        id,
        type,
        status,
        activeStatus,
        name,
        query: draftQueries[0],
        orgID,
        labels: [],
    };
};

// EXTERNAL MODULE: ./src/resources/selectors/index.ts
var resources_selectors = __webpack_require__(24);

// EXTERNAL MODULE: ./src/shared/actions/notifications.ts
var actions_notifications = __webpack_require__(33);

// EXTERNAL MODULE: ./src/timeMachine/actions/index.ts + 1 modules
var actions = __webpack_require__(42);

// EXTERNAL MODULE: ./src/alerting/actions/alertBuilder.ts
var actions_alertBuilder = __webpack_require__(128);

// EXTERNAL MODULE: ./src/checks/actions/creators.ts
var creators = __webpack_require__(727);

// EXTERNAL MODULE: ./src/cloud/actions/limits.ts + 1 modules
var limits = __webpack_require__(72);

// EXTERNAL MODULE: ./src/labels/actions/creators.ts
var actions_creators = __webpack_require__(135);

// EXTERNAL MODULE: ./src/types/index.ts
var types = __webpack_require__(5);

// EXTERNAL MODULE: ./src/schemas/labels.ts
var labels = __webpack_require__(76);

// CONCATENATED MODULE: ./src/checks/actions/thunks.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return getChecks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return getCheckForTimeMachine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return createCheckFromTimeMachine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return updateCheckFromTimeMachine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return updateCheckDisplayProperties; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return deleteCheck; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addCheckLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return deleteCheckLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return cloneCheck; });



















const getChecks = () => async (dispatch, getState) => {
    try {
        dispatch(Object(creators["h" /* setChecks */])(types["RemoteDataState"].Loading));
        const { id: orgID } = Object(selectors["a" /* getOrg */])(getState());
        const resp = await client["y" /* getChecks */]({ query: { orgID } });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const checks = Object(normalizr_es["a" /* normalize */])(resp.data.checks, schemas_checks["a" /* arrayOfChecks */]);
        dispatch(Object(creators["h" /* setChecks */])(types["RemoteDataState"].Done, checks));
        dispatch(Object(limits["d" /* checkChecksLimits */])());
    }
    catch (e) {
        console.error(e);
        dispatch(Object(creators["h" /* setChecks */])(types["RemoteDataState"].Error));
        dispatch(Object(actions_notifications["c" /* notify */])(notifications["ob" /* getChecksFailed */](e.message)));
    }
};
const getCheckForTimeMachine = (checkID) => async (dispatch, getState) => {
    const org = Object(selectors["a" /* getOrg */])(getState());
    try {
        dispatch(Object(actions_alertBuilder["i" /* setAlertBuilderCheckStatus */])(types["RemoteDataState"].Loading));
        const resp = await client["x" /* getCheck */]({ checkID });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const check = resp.data;
        const view = Object(helpers["a" /* createView */])(check.type);
        view.properties.queries = [check.query];
        dispatch(Object(actions["j" /* setActiveTimeMachine */])('alerting', {
            view,
            activeTab: check.type === 'custom' ? 'customCheckQuery' : 'alerting',
        }));
        const normCheck = Object(normalizr_es["a" /* normalize */])(resp.data, schemas_checks["b" /* checkSchema */]);
        const builderCheck = normCheck.entities.checks[normCheck.result];
        dispatch(Object(actions_alertBuilder["h" /* setAlertBuilderCheck */])(builderCheck));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(lib["push"])(`/orgs/${org.id}/alerting`));
        dispatch(Object(actions_alertBuilder["i" /* setAlertBuilderCheckStatus */])(types["RemoteDataState"].Error));
        dispatch(Object(actions_notifications["c" /* notify */])(notifications["nb" /* getCheckFailed */](error.message)));
    }
};
const createCheckFromTimeMachine = () => async (dispatch, getState) => {
    try {
        const state = getState();
        const check = builderToPostCheck(state);
        const resp = await client["db" /* postCheck */]({ data: check });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        const normCheck = Object(normalizr_es["a" /* normalize */])(resp.data, schemas_checks["b" /* checkSchema */]);
        dispatch(Object(creators["g" /* setCheck */])(resp.data.id, types["RemoteDataState"].Done, normCheck));
        dispatch(Object(limits["d" /* checkChecksLimits */])());
        dispatch(Object(lib["push"])(`/orgs/${check.orgID}/alerting`));
        dispatch(Object(actions_alertBuilder["f" /* resetAlertBuilder */])());
    }
    catch (error) {
        console.error(error);
        dispatch(Object(actions_notifications["c" /* notify */])(notifications["P" /* createCheckFailed */](error.message)));
        Object(errors["b" /* reportError */])(error, {
            context: { state: getState() },
            name: 'saveCheckFromTimeMachine function',
        });
    }
};
const updateCheckFromTimeMachine = () => async (dispatch, getState) => {
    const state = getState();
    const check = builderToPostCheck(state);
    try {
        const getCheckResponse = await client["x" /* getCheck */]({ checkID: check.id });
        if (getCheckResponse.status !== 200) {
            throw new Error(getCheckResponse.data.message);
        }
        const resp = await client["zb" /* putCheck */]({
            checkID: check.id,
            data: Object.assign(Object.assign({}, check), { ownerID: getCheckResponse.data.ownerID }),
        });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const normCheck = Object(normalizr_es["a" /* normalize */])(resp.data, schemas_checks["b" /* checkSchema */]);
        dispatch(Object(creators["g" /* setCheck */])(resp.data.id, types["RemoteDataState"].Done, normCheck));
        dispatch(Object(limits["d" /* checkChecksLimits */])());
        dispatch(Object(lib["push"])(`/orgs/${check.orgID}/alerting`));
        dispatch(Object(actions_alertBuilder["f" /* resetAlertBuilder */])());
    }
    catch (error) {
        console.error(error);
        dispatch(Object(actions_notifications["c" /* notify */])(notifications["Kc" /* updateCheckFailed */](error.message)));
        Object(errors["b" /* reportError */])(error, {
            context: { state: getState() },
            name: 'saveCheckFromTimeMachine function',
        });
    }
};
const updateCheckDisplayProperties = (checkID, update) => async (dispatch) => {
    try {
        const resp = await client["S" /* patchCheck */]({ checkID, data: update });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const check = Object(normalizr_es["a" /* normalize */])(resp.data, schemas_checks["b" /* checkSchema */]);
        dispatch(Object(creators["g" /* setCheck */])(checkID, types["RemoteDataState"].Done, check));
    }
    catch (error) {
        console.error(error);
    }
};
const deleteCheck = (checkID) => async (dispatch) => {
    try {
        const resp = await client["d" /* deleteCheck */]({ checkID });
        if (resp.status !== 204) {
            throw new Error(resp.data.message);
        }
        dispatch(Object(creators["e" /* removeCheck */])(checkID));
        dispatch(Object(limits["d" /* checkChecksLimits */])());
    }
    catch (error) {
        console.error(error);
        dispatch(Object(actions_notifications["c" /* notify */])(notifications["eb" /* deleteCheckFailed */](error.message)));
    }
};
const addCheckLabel = (checkID, label) => async (dispatch) => {
    try {
        const resp = await client["eb" /* postChecksLabel */]({ checkID, data: { labelID: label.id } });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        const normLabel = Object(normalizr_es["a" /* normalize */])(resp.data.label, labels["b" /* labelSchema */]);
        dispatch(Object(actions_creators["g" /* setLabelOnResource */])(checkID, normLabel));
    }
    catch (error) {
        console.error(error);
    }
};
const deleteCheckLabel = (checkID, labelID) => async (dispatch) => {
    try {
        const resp = await client["e" /* deleteChecksLabel */]({
            checkID,
            labelID,
        });
        if (resp.status !== 204) {
            throw new Error(resp.data.message);
        }
        dispatch(Object(creators["f" /* removeLabelFromCheck */])(checkID, labelID));
    }
    catch (error) {
        console.error(error);
    }
};
const cloneCheck = (check) => async (dispatch, getState) => {
    try {
        const state = getState();
        const checks = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Checks);
        const allCheckNames = checks.map(c => c.name);
        const clonedName = Object(naming["a" /* incrementCloneName */])(allCheckNames, check.name);
        const data = toPostCheck(Object.assign(Object.assign({}, check), { name: clonedName }));
        const resp = await client["db" /* postCheck */]({ data });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        const normCheck = Object(normalizr_es["a" /* normalize */])(resp.data, schemas_checks["b" /* checkSchema */]);
        dispatch(Object(creators["g" /* setCheck */])(resp.data.id, types["RemoteDataState"].Done, normCheck));
        dispatch(Object(limits["d" /* checkChecksLimits */])());
    }
    catch (error) {
        console.error(error);
        dispatch(Object(actions_notifications["c" /* notify */])(notifications["P" /* createCheckFailed */](error.message)));
    }
};


/***/ }),

/***/ 277:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/normalizr/dist/normalizr.es.js
var normalizr_es = __webpack_require__(41);

// EXTERNAL MODULE: ./src/client/index.ts + 1 modules
var client = __webpack_require__(14);

// EXTERNAL MODULE: ./src/dashboards/apis/index.ts
var apis = __webpack_require__(414);

// EXTERNAL MODULE: ./src/schemas/index.ts + 4 modules
var schemas = __webpack_require__(175);

// EXTERNAL MODULE: ./src/dashboards/actions/thunks.ts
var thunks = __webpack_require__(77);

// EXTERNAL MODULE: ./src/views/actions/creators.ts
var creators = __webpack_require__(241);

// EXTERNAL MODULE: ./src/shared/actions/notifications.ts
var notifications = __webpack_require__(33);

// EXTERNAL MODULE: ./src/cells/actions/creators.ts
var actions_creators = __webpack_require__(402);

// EXTERNAL MODULE: ./node_modules/uuid/index.js
var uuid = __webpack_require__(109);
var uuid_default = /*#__PURE__*/__webpack_require__.n(uuid);

// EXTERNAL MODULE: ./src/types/index.ts
var types = __webpack_require__(5);

// EXTERNAL MODULE: ./src/dashboards/constants/index.ts
var constants = __webpack_require__(70);

// CONCATENATED MODULE: ./src/dashboards/utils/cellGetters.ts



const getMostCommonValue = (values) => {
    const results = values.reduce((acc, value) => {
        const { distribution, mostCommonCount } = acc;
        distribution[value] = (distribution[value] || 0) + 1;
        if (distribution[value] > mostCommonCount) {
            return {
                distribution,
                mostCommonCount: distribution[value],
                mostCommonValue: value,
            };
        }
        return acc;
    }, { distribution: {}, mostCommonCount: 0, mostCommonValue: null });
    return results.mostCommonValue;
};
const isCellUntitled = (cellName) => {
    return cellName === constants["n" /* UNTITLED_GRAPH */];
};
const numColumns = 12;
const getNextAvailablePosition = (dashboard, newCell) => {
    const farthestY = dashboard.cells
        .map(cell => cell.y)
        .reduce((a, b) => (a > b ? a : b));
    const bottomCells = dashboard.cells.filter(cell => cell.y === farthestY);
    const farthestX = bottomCells
        .map(cell => cell.x)
        .reduce((a, b) => (a > b ? a : b));
    const lastCell = bottomCells.find(cell => cell.x === farthestX);
    const availableSpace = numColumns - (lastCell.x + lastCell.w);
    const newCellFits = availableSpace >= newCell.w;
    return newCellFits
        ? {
            x: lastCell.x + lastCell.w,
            y: farthestY,
        }
        : {
            x: 0,
            y: lastCell.y + lastCell.h,
        };
};
const getNewDashboardCell = (state, dashboard, clonedCell) => {
    const defaultCell = {
        id: uuid_default.a.v4(),
        x: 0,
        y: 0,
        h: 4,
        w: 4,
        links: {
            self: '',
            view: '',
            copy: '',
        },
        status: types["RemoteDataState"].Done,
    };
    const cells = dashboard.cells.map(cellID => state.resources.cells.byID[cellID]);
    if (!cells.length) {
        return defaultCell;
    }
    const existingCellWidths = cells.map(cell => cell.w);
    const existingCellHeights = cells.map(cell => cell.h);
    const mostCommonCellWidth = getMostCommonValue(existingCellWidths);
    const mostCommonCellHeight = getMostCommonValue(existingCellHeights);
    let newCell = Object.assign(Object.assign({}, defaultCell), { w: mostCommonCellWidth, h: mostCommonCellHeight });
    if (clonedCell) {
        newCell = Object.assign(Object.assign({}, defaultCell), { w: clonedCell.w, h: clonedCell.h });
    }
    const { x, y } = getNextAvailablePosition(dashboard, newCell);
    return Object.assign(Object.assign({}, newCell), { x,
        y });
};
const getClonedDashboardCell = (dashboard, cloneCell) => {
    const { x, y } = getNextAvailablePosition(dashboard, cloneCell);
    return Object.assign(Object.assign({}, cloneCell), { x, y });
};

// EXTERNAL MODULE: ./src/shared/copy/notifications.ts + 1 modules
var copy_notifications = __webpack_require__(35);

// EXTERNAL MODULE: ./src/views/selectors/index.ts
var selectors = __webpack_require__(747);

// EXTERNAL MODULE: ./src/resources/selectors/index.ts
var resources_selectors = __webpack_require__(24);

// CONCATENATED MODULE: ./src/cells/actions/thunks.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return deleteCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createCellWithView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return createDashboardWithView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return updateCells; });
/* unused harmony export copyCell */














const deleteCell = (dashboardID, cellID) => async (dispatch, getState) => {
    try {
        const views = Object(selectors["a" /* getViewsForDashboard */])(getState(), dashboardID).filter(view => view.cellID !== cellID);
        await Promise.all([
            Object(client["g" /* deleteDashboardsCell */])({ dashboardID: dashboardID, cellID: cellID }),
            dispatch(Object(thunks["i" /* refreshDashboardVariableValues */])(dashboardID, views)),
        ]);
        dispatch(Object(actions_creators["d" /* removeCell */])({ dashboardID, id: cellID }));
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["J" /* cellDeleted */]()));
    }
    catch (error) {
        console.error(error);
    }
};
const createCellWithView = (dashboardID, view, clonedCell) => async (dispatch, getState) => {
    const state = getState();
    let dashboard = Object(resources_selectors["b" /* getByID */])(state, types["ResourceType"].Dashboards, dashboardID);
    try {
        if (!dashboard) {
            const resp = await Object(client["z" /* getDashboard */])({ dashboardID });
            if (resp.status !== 200) {
                throw new Error(resp.data.message);
            }
            const { entities, result } = Object(normalizr_es["a" /* normalize */])(resp.data, schemas["k" /* dashboardSchema */]);
            dashboard = entities.dashboards[result];
        }
        const cell = getNewDashboardCell(state, dashboard, clonedCell);
        const cellResp = await Object(client["gb" /* postDashboardsCell */])({ dashboardID, data: cell });
        if (cellResp.status !== 201) {
            throw new Error(cellResp.data.message);
        }
        const cellID = cellResp.data.id;
        const newView = await Object(apis["c" /* updateView */])(dashboardID, cellID, view);
        const normCell = Object(normalizr_es["a" /* normalize */])(Object.assign(Object.assign({}, cellResp.data), { dashboardID }), schemas["j" /* cellSchema */]);
        const views = [...Object(selectors["a" /* getViewsForDashboard */])(state, dashboardID), newView];
        await dispatch(Object(thunks["i" /* refreshDashboardVariableValues */])(dashboardID, views));
        const normView = Object(normalizr_es["a" /* normalize */])(newView, schemas["p" /* viewSchema */]);
        dispatch(Object(creators["e" /* setView */])(cellID, types["RemoteDataState"].Done, normView));
        dispatch(Object(actions_creators["e" /* setCell */])(cellID, types["RemoteDataState"].Done, normCell));
    }
    catch (err) {
        Object(notifications["c" /* notify */])(copy_notifications["H" /* cellAddFailed */]());
        throw err;
    }
};
const createDashboardWithView = (orgID, dashboardName, view) => async (dispatch) => {
    try {
        const newDashboard = {
            orgID,
            name: dashboardName,
            cells: [],
        };
        const resp = await Object(client["fb" /* postDashboard */])({ data: newDashboard });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        await dispatch(createCellWithView(resp.data.id, view));
    }
    catch (error) {
        console.error(error);
        Object(notifications["c" /* notify */])(copy_notifications["H" /* cellAddFailed */]());
        throw error;
    }
};
const updateCells = (dashboardID, cells) => async (dispatch) => {
    try {
        const resp = await Object(client["Ab" /* putDashboardsCells */])({
            dashboardID,
            data: cells,
        });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        const updatedCells = cells.map(c => (Object.assign(Object.assign({}, c), { dashboardID })));
        const normCells = Object(normalizr_es["a" /* normalize */])(updatedCells, schemas["b" /* arrayOfCells */]);
        dispatch(Object(actions_creators["f" /* setCells */])(dashboardID, types["RemoteDataState"].Done, normCells));
    }
    catch (error) {
        console.error(error);
    }
};
const copyCell = (dashboard, cell) => dispatch => {
    try {
        const clonedCell = getClonedDashboardCell(dashboard, cell);
        const normCell = Object(normalizr_es["a" /* normalize */])(clonedCell, schemas["j" /* cellSchema */]);
        dispatch(Object(actions_creators["e" /* setCell */])(cell.id, types["RemoteDataState"].Done, normCell));
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["I" /* cellAdded */]()));
    }
    catch (error) {
        console.error(error);
    }
};


/***/ }),

/***/ 278:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/lodash/lodash.js
var lodash = __webpack_require__(6);

// EXTERNAL MODULE: ./node_modules/normalizr/dist/normalizr.es.js
var normalizr_es = __webpack_require__(41);

// EXTERNAL MODULE: ./src/schemas/variables.ts
var schemas_variables = __webpack_require__(215);

// EXTERNAL MODULE: ./src/schemas/tasks.ts
var tasks = __webpack_require__(248);

// EXTERNAL MODULE: ./src/types/index.ts
var types = __webpack_require__(5);

// CONCATENATED MODULE: ./src/templates/utils/index.ts

function findIncludedsFromRelationships(includeds, relationships) {
    let intersection = [];
    relationships.forEach(r => {
        const included = findIncludedFromRelationship(includeds, r);
        if (included) {
            intersection = [...intersection, included];
        }
    });
    return intersection;
}
function findIncludedFromRelationship(included, r) {
    return included.find((i) => i.id === r.id && i.type === r.type);
}
const findLabelsToCreate = (currentLabels, labels) => {
    return labels.filter(l => !currentLabels.find(el => el.name === l.attributes.name));
};
const findIncludedVariables = (included) => {
    return included.filter((r) => r.type === types["TemplateType"].Variable);
};
const findVariablesToCreate = (existingVariables, incomingVariables) => {
    return incomingVariables.filter(v => !existingVariables.find(ev => ev.name === v.attributes.name));
};
const hasLabelsRelationships = (resource) => !!resource.relationships && !!resource.relationships[types["TemplateType"].Label];
const getLabelRelationships = (resource) => {
    if (!hasLabelsRelationships(resource)) {
        return [];
    }
    return [].concat(resource.relationships[types["TemplateType"].Label].data);
};
const getIncludedLabels = (included) => included.filter((i) => i.type === types["TemplateType"].Label);

// EXTERNAL MODULE: ./src/labels/utils/index.ts
var utils = __webpack_require__(189);

// EXTERNAL MODULE: ./src/client/index.ts + 1 modules
var client = __webpack_require__(14);

// EXTERNAL MODULE: ./src/schemas/dashboards.ts
var dashboards = __webpack_require__(136);

// CONCATENATED MODULE: ./src/templates/api/index.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createDashboardFromTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return createTaskFromTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return createVariableFromTemplate; });









const createDashboardFromTemplate = async (template, orgID) => {
    try {
        const { content } = template;
        if (content.data.type !== types["TemplateType"].Dashboard ||
            template.meta.version !== '1') {
            throw new Error('Cannot create dashboard from this template');
        }
        const resp = await Object(client["fb" /* postDashboard */])({
            data: Object.assign({ orgID }, content.data.attributes),
        });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        const createdDashboard = Object(dashboards["a" /* addDashboardDefaults */])(resp.data);
        const labelMap = await createLabelsFromTemplate(template, orgID);
        await Promise.all([
            await addDashboardLabelsFromTemplate(template, labelMap, createdDashboard),
            await createCellsFromTemplate(template, createdDashboard),
        ]);
        await createVariablesFromTemplate(template, labelMap, orgID);
        const getResp = await Object(client["z" /* getDashboard */])({ dashboardID: resp.data.id });
        if (getResp.status !== 200) {
            throw new Error(getResp.data.message);
        }
    }
    catch (error) {
        console.error(error);
    }
};
const addDashboardLabelsFromTemplate = async (template, labelMap, dashboard) => {
    try {
        const labelRelationships = getLabelRelationships(template.content.data);
        const labelIDs = labelRelationships.map(l => labelMap[l.id] || '');
        const pending = labelIDs.map(labelID => Object(client["hb" /* postDashboardsLabel */])({ dashboardID: dashboard.id, data: { labelID } }));
        const resolved = await Promise.all(pending);
        if (resolved.length > 0 && resolved.some(r => r.status !== 201)) {
            throw new Error('An error occurred adding dashboard labels from the template');
        }
    }
    catch (e) {
        console.error(e);
    }
};
const createLabelsFromTemplate = async (template, orgID) => {
    const { content: { data, included }, } = template;
    const labeledResources = [data, ...included].filter(r => hasLabelsRelationships(r));
    if (Object(lodash["isEmpty"])(labeledResources)) {
        return {};
    }
    const labelRelationships = Object(lodash["flatMap"])(labeledResources, r => getLabelRelationships(r));
    const includedLabels = findIncludedsFromRelationships(included, labelRelationships);
    const resp = await Object(client["C" /* getLabels */])({ query: { orgID } });
    if (resp.status !== 200) {
        throw new Error(resp.data.message);
    }
    const existingLabels = resp.data.labels.map(l => Object(utils["a" /* addLabelDefaults */])(l));
    const foundLabelsToCreate = findLabelsToCreate(existingLabels, includedLabels).map(l => ({
        orgID,
        name: Object(lodash["get"])(l, 'attributes.name', ''),
        properties: Object(lodash["get"])(l, 'attributes.properties', {}),
    }));
    const promisedLabels = foundLabelsToCreate.map(lab => {
        return Object(client["jb" /* postLabel */])({
            data: lab,
        })
            .then(res => {
            const out = Object(lodash["get"])(res, 'data.label', '');
            return out;
        })
            .then(lab => Object(utils["a" /* addLabelDefaults */])(lab));
    });
    const createdLabels = await Promise.all(promisedLabels);
    const allLabels = [...createdLabels, ...existingLabels];
    const labelMap = {};
    includedLabels.forEach(label => {
        const createdLabel = allLabels.find(l => l.name === label.attributes.name);
        labelMap[label.id] = createdLabel.id;
    });
    return labelMap;
};
const createCellsFromTemplate = async (template, createdDashboard) => {
    const { content: { data, included }, } = template;
    if (!data.relationships || !data.relationships[types["TemplateType"].Cell]) {
        return;
    }
    const cellRelationships = data.relationships[types["TemplateType"].Cell].data;
    const cellsToCreate = findIncludedsFromRelationships(included, cellRelationships);
    const pendingCells = cellsToCreate.map(c => {
        const { attributes: { x, y, w, h }, } = c;
        return Object(client["gb" /* postDashboardsCell */])({
            dashboardID: createdDashboard.id,
            data: { x, y, w, h },
        });
    });
    const cellResponses = await Promise.all(pendingCells);
    if (cellResponses.length > 0 && cellResponses.some(r => r.status !== 201)) {
        throw new Error('An error occurred creating cells from the templates');
    }
    const responses = cellResponses.map(resp => resp.data);
    createViewsFromTemplate(template, responses, cellsToCreate, createdDashboard.id);
};
const createViewsFromTemplate = async (template, cellResponses, cellsToCreate, dashboardID) => {
    const viewsToCreate = cellsToCreate.map(c => {
        const { content: { included }, } = template;
        const viewRelationship = c.relationships[types["TemplateType"].View].data;
        return findIncludedFromRelationship(included, viewRelationship);
    });
    const pendingViews = viewsToCreate.map((v, i) => {
        return Object(client["U" /* patchDashboardsCellsView */])({
            dashboardID,
            cellID: cellResponses[i].id,
            data: v.attributes,
        });
    });
    await Promise.all(pendingViews);
};
const createVariablesFromTemplate = async (template, labelMap, orgID) => {
    const { content: { data, included }, } = template;
    if (!data.relationships || !data.relationships[types["TemplateType"].Variable]) {
        return;
    }
    const variablesIncluded = findIncludedVariables(included);
    const resp = await Object(client["P" /* getVariables */])({ query: { orgID } });
    if (resp.status !== 200) {
        throw new Error(resp.data.message);
    }
    const normVariables = Object(normalizr_es["a" /* normalize */])(resp.data.variables, schemas_variables["a" /* arrayOfVariables */]);
    const variables = Object.values(Object(lodash["get"])(normVariables, 'entities.variables', {}));
    const variablesToCreate = findVariablesToCreate(variables, variablesIncluded).map(v => (Object.assign(Object.assign({}, v.attributes), { orgID })));
    const pendingVariables = variablesToCreate.map(vars => Object(client["wb" /* postVariable */])({ data: vars }));
    const resolvedVariables = await Promise.all(pendingVariables);
    if (resolvedVariables.length > 0 &&
        resolvedVariables.every(r => r.status !== 201)) {
        throw new Error('An error occurred creating the variables from templates');
    }
    const createdVariables = await Promise.all(pendingVariables);
    const normCreated = createdVariables.map(v => {
        const normVar = Object(normalizr_es["a" /* normalize */])(v.data, schemas_variables["b" /* variableSchema */]);
        return normVar.entities.variables[normVar.result];
    });
    const allVars = [...variables, ...normCreated];
    const addLabelsToVars = variablesIncluded.map(async (includedVar) => {
        const variable = allVars.find(v => v.name === includedVar.attributes.name);
        const labelRelationships = getLabelRelationships(includedVar);
        const labelIDs = labelRelationships.map(l => labelMap[l.id] || '');
        const pending = labelIDs.map(async (labelID) => {
            await Object(client["xb" /* postVariablesLabel */])({ variableID: variable.id, data: { labelID } });
        });
        await Promise.all(pending);
    });
    await Promise.all(addLabelsToVars);
};
const createTaskFromTemplate = async (template, orgID) => {
    const { content } = template;
    try {
        if (content.data.type !== types["TemplateType"].Task ||
            template.meta.version !== '1') {
            throw new Error('Cannot create task from this template');
        }
        const flux = content.data.attributes.flux;
        const postResp = await Object(client["tb" /* postTask */])({ data: { orgID, flux } });
        if (postResp.status !== 201) {
            throw new Error(postResp.data.message);
        }
        const { entities, result } = Object(normalizr_es["a" /* normalize */])(postResp.data, tasks["b" /* taskSchema */]);
        const postedTask = entities.tasks[result];
        const labelMap = await createLabelsFromTemplate(template, orgID);
        await addTaskLabelsFromTemplate(template, labelMap, postedTask);
        const resp = await Object(client["J" /* getTask */])({ taskID: postedTask.id });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        return postedTask;
    }
    catch (e) {
        console.error(e);
    }
};
const addTaskLabelsFromTemplate = async (template, labelMap, task) => {
    try {
        const relationships = getLabelRelationships(template.content.data);
        const labelIDs = relationships.map(l => labelMap[l.id] || '');
        const pending = labelIDs.map(labelID => Object(client["ub" /* postTasksLabel */])({ taskID: task.id, data: { labelID } }));
        const resolved = await Promise.all(pending);
        if (resolved.length > 0 && resolved.some(r => r.status !== 201)) {
            throw new Error('An error occurred adding task labels from the templates');
        }
    }
    catch (error) {
        console.error(error);
    }
};
const createVariableFromTemplate = async (template, orgID) => {
    const { content } = template;
    try {
        if (content.data.type !== types["TemplateType"].Variable ||
            template.meta.version !== '1') {
            throw new Error('Cannot create variable from this template');
        }
        const resp = await Object(client["wb" /* postVariable */])({
            data: Object.assign(Object.assign({}, content.data.attributes), { orgID }),
        });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        const labelsMap = await createLabelsFromTemplate(template, orgID);
        await createVariablesFromTemplate(template, labelsMap, orgID);
        const variable = await Object(client["O" /* getVariable */])({ variableID: resp.data.id });
        if (variable.status !== 200) {
            throw new Error(variable.data.message);
        }
        return variable.data;
    }
    catch (error) {
        console.error(error);
    }
};


/***/ }),

/***/ 279:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/@influxdata/flux-parser/flux_parser.js
var flux_parser = __webpack_require__(419);

// EXTERNAL MODULE: ./node_modules/lodash/lodash.js
var lodash = __webpack_require__(6);

// EXTERNAL MODULE: ./src/shared/utils/ast.ts
var utils_ast = __webpack_require__(744);

// EXTERNAL MODULE: ./src/shared/utils/duration.ts
var duration = __webpack_require__(86);

// CONCATENATED MODULE: ./src/shared/utils/getMinDurationFromAST.ts



function getMinDurationFromAST(ast) {
    const times = allRangeTimes(ast);
    if (!times.length) {
        throw new Error('no time ranges found in query');
    }
    const starts = times.map(t => t[0]);
    const stops = times.map(t => t[1]);
    const cartesianProduct = starts.map(start => stops.map(stop => [start, stop]));
    const durations = []
        .concat(...cartesianProduct)
        .map(([start, stop]) => stop - start)
        .filter(d => d > 0);
    const result = Math.min(...durations);
    return result;
}
function allRangeTimes(ast) {
    return Object(utils_ast["a" /* findNodes */])(ast, isRangeNode).map(node => rangeTimes(ast, node));
}
function rangeTimes(ast, rangeNode) {
    const now = Date.now();
    const properties = rangeNode.arguments[0]
        .properties;
    const startProperty = properties.find(p => p.key.name === 'start');
    const start = propertyTime(ast, startProperty.value, now);
    const endProperty = properties.find(p => p.key.name === 'stop');
    const end = endProperty ? propertyTime(ast, endProperty.value, now) : now;
    if (isNaN(start) || isNaN(end)) {
        throw new Error('failed to analyze query');
    }
    return [start, end];
}
function propertyTime(ast, value, now) {
    switch (value.type) {
        case 'UnaryExpression':
            return (now - Object(duration["c" /* durationToMilliseconds */])(value.argument.values));
        case 'DurationLiteral':
            return now + Object(duration["c" /* durationToMilliseconds */])(value.values);
        case 'DateTimeLiteral':
            return Date.parse(value.value);
        case 'Identifier':
            return propertyTime(ast, lookupVariable(ast, value.name), now);
        case 'BinaryExpression':
            const leftTime = Date.parse(value.left.value);
            const rightDuration = Object(duration["c" /* durationToMilliseconds */])(value.right.values);
            switch (value.operator) {
                case '+':
                    return leftTime + rightDuration;
                case '-':
                    return leftTime - rightDuration;
                default:
                    throw new Error(`unexpected operator ${value.operator}`);
            }
        case 'MemberExpression':
            const objName = Object(lodash["get"])(value, 'object.name');
            const propertyName = Object(lodash["get"])(value, 'property.name');
            const objExpr = lookupVariable(ast, objName);
            const property = objExpr.properties.find(p => Object(lodash["get"])(p, 'key.name') === propertyName);
            return propertyTime(ast, property.value, now);
        case 'CallExpression':
            if (isNowCall(value)) {
                return now;
            }
            throw new Error('unexpected CallExpression');
        default:
            throw new Error(`unexpected expression type ${value.type}`);
    }
}
function lookupVariable(ast, name) {
    const isDeclarator = node => {
        return (Object(lodash["get"])(node, 'type') === 'VariableAssignment' &&
            Object(lodash["get"])(node, 'id.name') === name);
    };
    const declarator = Object(utils_ast["a" /* findNodes */])(ast, isDeclarator);
    if (!declarator.length) {
        throw new Error(`unable to lookup variable "${name}"`);
    }
    if (declarator.length > 1) {
        throw new Error('cannot lookup variable with duplicate declarations');
    }
    const init = declarator[0].init;
    return init;
}
function isNowCall(node) {
    return Object(lodash["get"])(node, 'callee.name') === 'now';
}
function isRangeNode(node) {
    return (Object(lodash["get"])(node, 'type') === 'CallExpression' &&
        Object(lodash["get"])(node, 'callee.type') === 'Identifier' &&
        Object(lodash["get"])(node, 'callee.name') === 'range');
}

// EXTERNAL MODULE: ./src/variables/utils/buildVarsOption.ts
var buildVarsOption = __webpack_require__(251);

// EXTERNAL MODULE: ./src/shared/utils/errors.ts
var errors = __webpack_require__(301);

// EXTERNAL MODULE: ./src/variables/constants/index.ts
var constants = __webpack_require__(149);

// EXTERNAL MODULE: ./src/shared/constants/timeRanges.ts
var timeRanges = __webpack_require__(134);

// CONCATENATED MODULE: ./src/variables/utils/getWindowVars.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getWindowVars; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getWindowPeriod; });






const DESIRED_POINTS_PER_GRAPH = 360;
const FALLBACK_WINDOW_PERIOD = 15000;
const getWindowVars = (query, variables) => {
    if (!query.includes(constants["e" /* WINDOW_PERIOD */])) {
        return [];
    }
    const windowPeriod = getWindowPeriod(query, variables) || FALLBACK_WINDOW_PERIOD;
    return [
        {
            type: 'VariableAssignment',
            id: {
                type: 'Identifier',
                name: constants["e" /* WINDOW_PERIOD */],
            },
            init: {
                type: 'DurationLiteral',
                values: [{ magnitude: windowPeriod, unit: 'ms' }],
            },
        },
    ];
};
const getWindowPeriod = (query, variables) => {
    if (query.length === 0) {
        return null;
    }
    try {
        const ast = Object(flux_parser["b" /* parse */])(query);
        const substitutedAST = {
            package: '',
            type: 'Package',
            files: [ast, Object(buildVarsOption["a" /* buildVarsOption */])(variables)],
        };
        const queryDuration = getMinDurationFromAST(substitutedAST);
        const foundDuration = timeRanges["c" /* SELECTABLE_TIME_RANGES */].find(tr => tr.seconds * 1000 === queryDuration);
        if (foundDuration) {
            return foundDuration.windowPeriod;
        }
        return Math.round(queryDuration / DESIRED_POINTS_PER_GRAPH);
    }
    catch (error) {
        console.error(error);
        Object(errors["b" /* reportError */])(error, {
            context: { query },
            name: 'getWindowPeriod function',
        });
        return null;
    }
};


/***/ }),

/***/ 298:
/***/ (function(module, exports) {



/***/ }),

/***/ 299:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ADD_DASHBOARD_LABEL", function() { return ADD_DASHBOARD_LABEL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DELETE_DASHBOARD_FAILED", function() { return DELETE_DASHBOARD_FAILED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EDIT_DASHBOARD", function() { return EDIT_DASHBOARD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "REMOVE_DASHBOARD", function() { return REMOVE_DASHBOARD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "REMOVE_DASHBOARD_LABEL", function() { return REMOVE_DASHBOARD_LABEL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SET_DASHBOARD", function() { return SET_DASHBOARD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SET_DASHBOARDS", function() { return SET_DASHBOARDS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "editDashboard", function() { return editDashboard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setDashboards", function() { return setDashboards; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setDashboard", function() { return setDashboard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeDashboard", function() { return removeDashboard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeDashboardLabel", function() { return removeDashboardLabel; });
const ADD_DASHBOARD_LABEL = 'ADD_DASHBOARD_LABEL';
const DELETE_DASHBOARD_FAILED = 'DELETE_DASHBOARD_FAILED';
const EDIT_DASHBOARD = 'EDIT_DASHBOARD';
const REMOVE_DASHBOARD = 'REMOVE_DASHBOARD';
const REMOVE_DASHBOARD_LABEL = 'REMOVE_DASHBOARD_LABEL';
const SET_DASHBOARD = 'SET_DASHBOARD';
const SET_DASHBOARDS = 'SET_DASHBOARDS';
const editDashboard = (schema) => ({
    type: EDIT_DASHBOARD,
    schema,
});
const setDashboards = (status, schema) => ({
    type: SET_DASHBOARDS,
    status,
    schema,
});
const setDashboard = (id, status, schema) => ({
    type: SET_DASHBOARD,
    id,
    status,
    schema,
});
const removeDashboard = (id) => ({
    type: REMOVE_DASHBOARD,
    id,
});
const removeDashboardLabel = (dashboardID, labelID) => ({
    type: REMOVE_DASHBOARD_LABEL,
    dashboardID,
    labelID,
});


/***/ }),

/***/ 300:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return isConfigValid; });
/* unused harmony export isConfigEmpty */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return isDraftQueryAlertable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return isCheckSaveable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return buildQuery; });
/* unused harmony export formatFunctionCall */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return tagToFlux; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ConfirmationState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return confirmationState; });
/* unused harmony export hasQueryBeenEdited */
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_timeMachine_constants_queryBuilder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(243);
/* harmony import */ var src_variables_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(149);




function isConfigValid(builderConfig) {
    const { buckets, tags } = builderConfig;
    const isConfigValid = buckets.length >= 1 &&
        tags.length >= 1 &&
        tags.some(({ key, values }) => key && values.length > 0);
    return isConfigValid;
}
const isConfigEmpty = (builderConfig) => {
    const { buckets, tags } = builderConfig;
    const isConfigEmpty = buckets.length <= 1 &&
        !tags.some(({ key, values }) => key && values.length > 0);
    return isConfigEmpty;
};
const isDraftQueryAlertable = (draftQueries) => {
    const tags = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(draftQueries, '[0].builderConfig.tags', []);
    const fieldSelection = tags.find(t => Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(t, 'key') === '_field');
    const fieldValues = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(fieldSelection, 'values', []);
    const functions = draftQueries[0].builderConfig.functions;
    return {
        oneQuery: draftQueries.length === 1,
        builderMode: draftQueries[0].editMode == 'builder',
        singleAggregateFunc: functions.length === 1,
        singleField: fieldValues.length === 1,
    };
};
const isCheckSaveable = (draftQueries, checkType, thresholds) => {
    const { oneQuery, builderMode, singleAggregateFunc, singleField, } = isDraftQueryAlertable(draftQueries);
    if (checkType === 'custom') {
        return true;
    }
    if (checkType === 'deadman') {
        return oneQuery && builderMode && singleField;
    }
    return (oneQuery &&
        builderMode &&
        singleAggregateFunc &&
        singleField &&
        !!thresholds.length);
};
function buildQuery(builderConfig) {
    const { functions } = builderConfig;
    let query;
    if (functions.length) {
        query = functions
            .map(f => buildQueryFromConfig(builderConfig, f))
            .join('\n\n');
    }
    else {
        query = buildQueryFromConfig(builderConfig, null);
    }
    return query;
}
function buildQueryFromConfig(builderConfig, fn) {
    const [bucket] = builderConfig.buckets;
    const tags = Array.from(builderConfig.tags);
    let tagsFunctionCalls = '';
    tags.forEach(tag => {
        tagsFunctionCalls += convertTagsToFluxFunctionString(tag);
    });
    const { aggregateWindow } = builderConfig;
    const fnCall = fn ? formatFunctionCall(fn, aggregateWindow.period) : '';
    const query = `from(bucket: "${bucket}")
  |> range(start: ${src_variables_constants__WEBPACK_IMPORTED_MODULE_2__[/* OPTION_NAME */ "b"]}.${src_variables_constants__WEBPACK_IMPORTED_MODULE_2__[/* TIME_RANGE_START */ "c"]}, stop: ${src_variables_constants__WEBPACK_IMPORTED_MODULE_2__[/* OPTION_NAME */ "b"]}.${src_variables_constants__WEBPACK_IMPORTED_MODULE_2__[/* TIME_RANGE_STOP */ "d"]})${tagsFunctionCalls}${fnCall}`;
    return query;
}
function formatFunctionCall(fn, period) {
    const fnSpec = src_timeMachine_constants_queryBuilder__WEBPACK_IMPORTED_MODULE_1__[/* FUNCTIONS */ "d"].find(spec => spec.name === fn.name);
    if (!fnSpec) {
        return;
    }
    const formattedPeriod = formatPeriod(period);
    return `\n  ${fnSpec.flux(formattedPeriod)}\n  |> yield(name: "${fn.name}")`;
}
const convertTagsToFluxFunctionString = function convertTagsToFluxFunctionString(tag) {
    if (!tag.key) {
        return '';
    }
    if (tag.aggregateFunctionType === 'filter') {
        if (!tag.values.length) {
            return '';
        }
        return `\n  |> filter(fn: (r) => ${tagToFlux(tag)})`;
    }
    if (tag.aggregateFunctionType === 'group') {
        const quotedValues = tag.values.map(value => `"${value}"`);
        if (quotedValues.length) {
            return `\n  |> group(columns: [${quotedValues.join(', ')}])`;
        }
        return '\n  |> group()';
    }
    return '';
};
const tagToFlux = function tagToFlux(tag) {
    return tag.values
        .map(value => `r.${tag.key} == "${value.replace(/\\/g, '\\\\')}"`)
        .join(' or ');
};
const formatPeriod = (period) => {
    if (period === src_timeMachine_constants_queryBuilder__WEBPACK_IMPORTED_MODULE_1__[/* AGG_WINDOW_AUTO */ "a"] || !period) {
        return `${src_variables_constants__WEBPACK_IMPORTED_MODULE_2__[/* OPTION_NAME */ "b"]}.${src_variables_constants__WEBPACK_IMPORTED_MODULE_2__[/* WINDOW_PERIOD */ "e"]}`;
    }
    return period;
};
var ConfirmationState;
(function (ConfirmationState) {
    ConfirmationState["NotRequired"] = "no confirmation required";
    ConfirmationState["Required"] = "confirmation required";
    ConfirmationState["Unknown"] = "unknown confirmation state";
})(ConfirmationState || (ConfirmationState = {}));
const confirmationState = (query, builderConfig) => {
    if (!isConfigValid(builderConfig) ||
        !hasQueryBeenEdited(query, builderConfig)) {
        ConfirmationState.NotRequired;
    }
    if (hasQueryBeenEdited(query, builderConfig) || Object(lodash__WEBPACK_IMPORTED_MODULE_0__["isEmpty"])(query)) {
        return ConfirmationState.Required;
    }
    return ConfirmationState.NotRequired;
};
function hasQueryBeenEdited(query, builderConfig) {
    const _isQueryDifferent = query !== buildQuery(builderConfig);
    return _isQueryDifferent;
}


/***/ }),

/***/ 301:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return reportError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return parseComponentName; });
/* harmony import */ var honeybadger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(401);
/* harmony import */ var honeybadger_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(honeybadger_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_shared_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32);
/* harmony import */ var src_shared_utils_featureFlag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(110);



if (src_shared_constants__WEBPACK_IMPORTED_MODULE_1__[/* CLOUD */ "e"]) {
    honeybadger_js__WEBPACK_IMPORTED_MODULE_0___default.a.configure({
        apiKey: process.env.HONEYBADGER_KEY,
        revision: src_shared_constants__WEBPACK_IMPORTED_MODULE_1__[/* GIT_SHA */ "s"],
        environment: process.env.HONEYBADGER_ENV,
    });
}
const reportError = (error, additionalOptions) => {
    let additionalContext = {};
    if (additionalOptions && additionalOptions.context) {
        additionalContext = Object.assign({}, additionalOptions.context);
    }
    const context = Object.assign(Object.assign({}, additionalContext), Object(src_shared_utils_featureFlag__WEBPACK_IMPORTED_MODULE_2__[/* getUserFlags */ "b"])());
    let options = {};
    if (additionalOptions) {
        options = Object.assign({}, additionalOptions);
        delete options.context;
    }
    if (src_shared_constants__WEBPACK_IMPORTED_MODULE_1__[/* CLOUD */ "e"]) {
        honeybadger_js__WEBPACK_IMPORTED_MODULE_0___default.a.notify(error, Object.assign({ context }, options));
    }
    else {
        const honeyBadgerContext = honeybadger_js__WEBPACK_IMPORTED_MODULE_0___default.a.context;
        console.log('Context that would have been sent to HoneyBadger:');
        console.table(Object.assign(Object.assign(Object.assign({}, honeyBadgerContext), context), options));
    }
};
const parseComponentName = (errorInfo) => {
    const componentName = errorInfo.componentStack
        .trim()
        .split('\n')
        .map(s => s.split(' ')[1])[0];
    return componentName;
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(80)))

/***/ }),

/***/ 304:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return authSchema; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return arrayOfAuths; });
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);


const authSchema = new normalizr__WEBPACK_IMPORTED_MODULE_0__[/* schema */ "b"].Entity(src_types__WEBPACK_IMPORTED_MODULE_1__["ResourceType"].Authorizations);
const arrayOfAuths = [authSchema];


/***/ }),

/***/ 305:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return checkSchema; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return arrayOfChecks; });
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(76);



const checkSchema = new normalizr__WEBPACK_IMPORTED_MODULE_0__[/* schema */ "b"].Entity(src_types__WEBPACK_IMPORTED_MODULE_1__["ResourceType"].Checks, {
    labels: _labels__WEBPACK_IMPORTED_MODULE_2__[/* arrayOfLabels */ "a"],
}, {
    processStrategy: (check) => {
        return Object.assign(Object.assign({}, check), { status: src_types__WEBPACK_IMPORTED_MODULE_1__["RemoteDataState"].Done, activeStatus: check.status });
    },
});
const arrayOfChecks = [checkSchema];


/***/ }),

/***/ 306:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return endpointSchema; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return arrayOfEndpoints; });
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(76);



const endpointSchema = new normalizr__WEBPACK_IMPORTED_MODULE_0__[/* schema */ "b"].Entity(src_types__WEBPACK_IMPORTED_MODULE_1__["ResourceType"].NotificationEndpoints, {
    labels: _labels__WEBPACK_IMPORTED_MODULE_2__[/* arrayOfLabels */ "a"],
}, {
    processStrategy: point => addEndpointDefaults(point),
});
const arrayOfEndpoints = [endpointSchema];
const addEndpointDefaults = (point) => {
    return Object.assign(Object.assign({}, point), { status: src_types__WEBPACK_IMPORTED_MODULE_1__["RemoteDataState"].Done, activeStatus: point.status });
};


/***/ }),

/***/ 307:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ruleSchema; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return arrayOfRules; });
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(76);
/* harmony import */ var src_notifications_rules_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(190);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);




const ruleSchema = new normalizr__WEBPACK_IMPORTED_MODULE_0__[/* schema */ "b"].Entity(src_types__WEBPACK_IMPORTED_MODULE_3__["ResourceType"].NotificationRules, {
    labels: [_labels__WEBPACK_IMPORTED_MODULE_1__[/* labelSchema */ "b"]],
}, {
    processStrategy: (rule) => (Object.assign({}, Object(src_notifications_rules_utils__WEBPACK_IMPORTED_MODULE_2__[/* ruleToDraftRule */ "h"])(rule))),
});
const arrayOfRules = [ruleSchema];


/***/ }),

/***/ 308:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return templateSchema; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return arrayOfTemplates; });
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(76);



const templateSchema = new normalizr__WEBPACK_IMPORTED_MODULE_0__[/* schema */ "b"].Entity(src_types__WEBPACK_IMPORTED_MODULE_1__["ResourceType"].Templates, {
    labels: [_labels__WEBPACK_IMPORTED_MODULE_2__[/* labelSchema */ "b"]],
});
const arrayOfTemplates = [templateSchema];


/***/ }),

/***/ 31:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getActiveTimeMachine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return getIsInCheckOverlay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return getTimeRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getActiveQuery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return getVariableAssignments; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return getActiveWindowPeriod; });
/* unused harmony export getTables */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return getVisTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return getNumericColumns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return getGroupableColumns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return getXColumnSelection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return getYColumnSelection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return getFillColumnsSelection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return getSymbolColumnsSelection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return getStartTime; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return getEndTime; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return getActiveTimeRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getActiveTagValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return getSaveableView; });
/* harmony import */ var memoize_one__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(78);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(85);
/* harmony import */ var _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_influxdata_giraffe__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var src_shared_parsing_flux_response__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(250);
/* harmony import */ var src_alerting_utils_vis__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(417);
/* harmony import */ var src_shared_utils_vis__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(71);
/* harmony import */ var src_variables_selectors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(88);
/* harmony import */ var src_variables_utils_getTimeRangeVars__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(210);
/* harmony import */ var src_variables_utils_getWindowVars__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(279);
/* harmony import */ var src_shared_utils_duration__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(86);











const getActiveTimeMachine = (state) => {
    const { activeTimeMachineID, timeMachines } = state.timeMachines;
    const timeMachine = timeMachines[activeTimeMachineID];
    return timeMachine;
};
const getIsInCheckOverlay = (state) => {
    return state.timeMachines.activeTimeMachineID === 'alerting';
};
const getTimeRange = (state) => {
    const { timeRange } = getActiveTimeMachine(state);
    const { alertBuilder: { every }, } = state;
    if (!getIsInCheckOverlay(state)) {
        return timeRange;
    }
    return Object(src_alerting_utils_vis__WEBPACK_IMPORTED_MODULE_5__[/* getCheckVisTimeRange */ "a"])(every);
};
const getActiveQuery = (state) => {
    const { draftQueries, activeQueryIndex } = getActiveTimeMachine(state);
    return draftQueries[activeQueryIndex];
};
const getVariableAssignments = (state) => {
    return [
        ...Object(src_variables_utils_getTimeRangeVars__WEBPACK_IMPORTED_MODULE_8__[/* getTimeRangeVars */ "a"])(getTimeRange(state)),
        ...Object(src_variables_selectors__WEBPACK_IMPORTED_MODULE_7__[/* getVariableAssignments */ "q"])(state, state.timeMachines.activeTimeMachineID),
    ];
};
const getActiveWindowPeriod = (state) => {
    const { text } = getActiveQuery(state);
    const variables = getVariableAssignments(state);
    return Object(src_variables_utils_getWindowVars__WEBPACK_IMPORTED_MODULE_9__[/* getWindowPeriod */ "a"])(text, variables);
};
const getTablesMemoized = Object(memoize_one__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])((files) => (files ? Object(lodash__WEBPACK_IMPORTED_MODULE_2__["flatMap"])(files, src_shared_parsing_flux_response__WEBPACK_IMPORTED_MODULE_4__[/* parseResponse */ "b"]) : []));
const getTables = (state) => getTablesMemoized(getActiveTimeMachine(state).queryResults.files);
const getVisTableMemoized = Object(memoize_one__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(_influxdata_giraffe__WEBPACK_IMPORTED_MODULE_3__["fromFlux"]);
const getVisTable = (state) => {
    const files = getActiveTimeMachine(state).queryResults.files || [];
    const { table, fluxGroupKeyUnion } = getVisTableMemoized(files.join('\n\n'));
    return { table, fluxGroupKeyUnion };
};
const getNumericColumnsMemoized = Object(memoize_one__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(src_shared_utils_vis__WEBPACK_IMPORTED_MODULE_6__[/* getNumericColumns */ "j"]);
const getNumericColumns = (state) => {
    const { table } = getVisTable(state);
    return getNumericColumnsMemoized(table);
};
const getGroupableColumnsMemoized = Object(memoize_one__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(src_shared_utils_vis__WEBPACK_IMPORTED_MODULE_6__[/* getGroupableColumns */ "i"]);
const getGroupableColumns = (state) => {
    const { table } = getVisTable(state);
    return getGroupableColumnsMemoized(table);
};
const getXColumnSelection = (state) => {
    const { table } = getVisTable(state);
    const preferredXColumnKey = Object(lodash__WEBPACK_IMPORTED_MODULE_2__["get"])(getActiveTimeMachine(state), 'view.properties.xColumn');
    return Object(src_shared_utils_vis__WEBPACK_IMPORTED_MODULE_6__[/* defaultXColumn */ "c"])(table, preferredXColumnKey);
};
const getYColumnSelection = (state) => {
    const { table } = getVisTable(state);
    const preferredYColumnKey = Object(lodash__WEBPACK_IMPORTED_MODULE_2__["get"])(getActiveTimeMachine(state), 'view.properties.yColumn');
    return Object(src_shared_utils_vis__WEBPACK_IMPORTED_MODULE_6__[/* defaultYColumn */ "d"])(table, preferredYColumnKey);
};
const getGroupableColumnSelection = (validColumns, preference, fluxGroupKeyUnion) => {
    if (preference && preference.every(col => validColumns.includes(col))) {
        return preference;
    }
    return fluxGroupKeyUnion;
};
const getFillColumnsSelectionMemoized = Object(memoize_one__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(getGroupableColumnSelection);
const getSymbolColumnsSelectionMemoized = Object(memoize_one__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(getGroupableColumnSelection);
const getFillColumnsSelection = (state) => {
    const validFillColumns = getGroupableColumns(state);
    const preference = Object(lodash__WEBPACK_IMPORTED_MODULE_2__["get"])(getActiveTimeMachine(state), 'view.properties.fillColumns');
    const { fluxGroupKeyUnion } = getVisTable(state);
    return getFillColumnsSelectionMemoized(validFillColumns, preference, fluxGroupKeyUnion);
};
const getSymbolColumnsSelection = (state) => {
    const validSymbolColumns = getGroupableColumns(state);
    const preference = Object(lodash__WEBPACK_IMPORTED_MODULE_2__["get"])(getActiveTimeMachine(state), 'view.properties.symbolColumns');
    const { fluxGroupKeyUnion } = getVisTable(state);
    return getSymbolColumnsSelectionMemoized(validSymbolColumns, preference, fluxGroupKeyUnion);
};
const getStartTime = (timeRange) => {
    if (!timeRange) {
        return Infinity;
    }
    switch (timeRange.type) {
        case 'custom':
            return moment__WEBPACK_IMPORTED_MODULE_1___default()(timeRange.lower).valueOf();
        case 'selectable-duration':
            return moment__WEBPACK_IMPORTED_MODULE_1___default()()
                .subtract(timeRange.seconds, 'seconds')
                .valueOf();
        case 'duration':
            const millisecondDuration = Object(src_shared_utils_duration__WEBPACK_IMPORTED_MODULE_10__[/* durationToMilliseconds */ "c"])(Object(src_shared_utils_duration__WEBPACK_IMPORTED_MODULE_10__[/* parseDuration */ "h"])(Object(src_shared_utils_duration__WEBPACK_IMPORTED_MODULE_10__[/* timeRangeToDuration */ "i"])(timeRange)));
            return moment__WEBPACK_IMPORTED_MODULE_1___default()()
                .subtract(millisecondDuration, 'milliseconds')
                .valueOf();
        default:
            throw new Error('unknown timeRange type ${timeRange.type} provided to getStartTime');
    }
};
const getEndTime = (timeRange) => {
    if (!timeRange) {
        return null;
    }
    if (timeRange.type === 'custom') {
        return moment__WEBPACK_IMPORTED_MODULE_1___default()(timeRange.upper).valueOf();
    }
    return moment__WEBPACK_IMPORTED_MODULE_1___default()().valueOf();
};
const getActiveTimeRange = (timeRange, queries) => {
    if (!queries) {
        return timeRange;
    }
    const hasVariableTimes = queries.some(query => query.text.includes('v.timeRangeStart') ||
        query.text.includes('v.timeRangeStop'));
    if (hasVariableTimes) {
        return timeRange;
    }
    return null;
};
const getActiveTagValues = (activeQueryBuilderTags, aggregateFunctionType, index) => {
    if (aggregateFunctionType === 'group') {
        const values = [];
        activeQueryBuilderTags.forEach(tag => {
            tag.values.forEach(value => {
                values.push(value);
            });
        });
        return values;
    }
    return activeQueryBuilderTags[index].values;
};
const getSaveableView = (state) => {
    const { view, draftQueries } = getActiveTimeMachine(state);
    let saveableView = Object.assign(Object.assign({}, view), { properties: Object.assign(Object.assign({}, view.properties), { queries: draftQueries }) });
    if (saveableView.properties.type === 'histogram') {
        saveableView = Object.assign(Object.assign({}, saveableView), { properties: Object.assign(Object.assign({}, saveableView.properties), { xColumn: getXColumnSelection(state), fillColumns: getFillColumnsSelection(state) }) });
    }
    if (saveableView.properties.type === 'heatmap') {
        saveableView = Object.assign(Object.assign({}, saveableView), { properties: Object.assign(Object.assign({}, saveableView.properties), { xColumn: getXColumnSelection(state), yColumn: getYColumnSelection(state) }) });
    }
    if (saveableView.properties.type === 'scatter') {
        saveableView = Object.assign(Object.assign({}, saveableView), { properties: Object.assign(Object.assign({}, saveableView.properties), { xColumn: getXColumnSelection(state), yColumn: getYColumnSelection(state), fillColumns: getFillColumnsSelection(state), symbolColumns: getSymbolColumnsSelection(state) }) });
    }
    if (saveableView.properties.type === 'xy') {
        saveableView = Object.assign(Object.assign({}, saveableView), { properties: Object.assign(Object.assign({}, saveableView.properties), { xColumn: getXColumnSelection(state), yColumn: getYColumnSelection(state) }) });
    }
    if (saveableView.properties.type === 'line-plus-single-stat') {
        saveableView = Object.assign(Object.assign({}, saveableView), { properties: Object.assign(Object.assign({}, saveableView.properties), { xColumn: getXColumnSelection(state), yColumn: getYColumnSelection(state) }) });
    }
    return saveableView;
};


/***/ }),

/***/ 310:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export labelToRelationship */
/* unused harmony export labelToIncluded */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return taskToTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return variableToTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return dashboardToTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return templateToExport; });
/* unused harmony export addOrgIDToTemplate */
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_views_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(150);
/* harmony import */ var src_resources_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(24);
/* harmony import */ var _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(98);




const CURRENT_TEMPLATE_VERSION = '1';
const blankTemplate = () => ({
    meta: { version: CURRENT_TEMPLATE_VERSION },
    content: { data: {}, included: [] },
    labels: [],
});
const blankTaskTemplate = () => {
    const baseTemplate = blankTemplate();
    return Object.assign(Object.assign({}, baseTemplate), { meta: Object.assign(Object.assign({}, baseTemplate.meta), { type: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Task }), content: Object.assign(Object.assign({}, baseTemplate.content), { data: Object.assign(Object.assign({}, baseTemplate.content.data), { type: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Task }) }) });
};
const blankVariableTemplate = () => {
    const baseTemplate = blankTemplate();
    return Object.assign(Object.assign({}, baseTemplate), { meta: Object.assign(Object.assign({}, baseTemplate.meta), { type: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Variable }), content: Object.assign(Object.assign({}, baseTemplate.content), { data: Object.assign(Object.assign({}, baseTemplate.content.data), { type: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Variable }) }) });
};
const blankDashboardTemplate = () => {
    const baseTemplate = blankTemplate();
    return Object.assign(Object.assign({}, baseTemplate), { meta: Object.assign(Object.assign({}, baseTemplate.meta), { type: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Dashboard }), content: Object.assign(Object.assign({}, baseTemplate.content), { data: Object.assign(Object.assign({}, baseTemplate.content.data), { type: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Dashboard }) }) });
};
const labelToRelationship = (l) => {
    return { type: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Label, id: l.id };
};
const labelToIncluded = (l) => {
    return {
        type: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Label,
        id: l.id,
        attributes: {
            name: l.name,
            properties: l.properties,
        },
    };
};
const taskToTemplate = (state, task, baseTemplate = blankTaskTemplate()) => {
    const taskName = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(task, 'name', '');
    const templateName = `${taskName}-Template`;
    const taskAttributes = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["pick"])(task, [
        'status',
        'name',
        'flux',
        'every',
        'cron',
        'offset',
    ]);
    const taskLabels = Object(src_resources_selectors__WEBPACK_IMPORTED_MODULE_2__[/* getLabels */ "c"])(state, task.labels);
    const includedLabels = taskLabels.map(label => labelToIncluded(label));
    const relationshipsLabels = taskLabels.map(label => labelToRelationship(label));
    const template = Object.assign(Object.assign({}, baseTemplate), { meta: Object.assign(Object.assign({}, baseTemplate.meta), { name: templateName, description: `template created from task: ${taskName}` }), content: Object.assign(Object.assign({}, baseTemplate.content), { data: Object.assign(Object.assign({}, baseTemplate.content.data), { type: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Task, attributes: taskAttributes, relationships: {
                    [_influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Label]: { data: relationshipsLabels },
                } }), included: [...baseTemplate.content.included, ...includedLabels] }) });
    return template;
};
const viewToIncluded = (view) => {
    let properties = view.properties;
    if ('queries' in properties) {
        const sanitizedQueries = properties.queries.map((q) => {
            return Object.assign(Object.assign({}, q), { editMode: 'advanced', builderConfig: Object(src_views_helpers__WEBPACK_IMPORTED_MODULE_1__[/* defaultBuilderConfig */ "b"])() });
        });
        properties = Object.assign(Object.assign({}, properties), { queries: sanitizedQueries });
    }
    return {
        type: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].View,
        id: view.id,
        attributes: { name: view.name, properties },
    };
};
const viewToRelationship = (view) => ({
    type: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].View,
    id: view.id,
});
const cellToIncluded = (cell, views) => {
    const cellView = views.find(v => v.id === cell.id);
    const viewRelationship = viewToRelationship(cellView);
    const cellAttributes = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["pick"])(cell, ['x', 'y', 'w', 'h']);
    return {
        id: cell.id,
        type: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Cell,
        attributes: cellAttributes,
        relationships: {
            [_influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].View]: {
                data: viewRelationship,
            },
        },
    };
};
const cellToRelationship = (cell) => ({
    type: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Cell,
    id: cell.id,
});
const variableToTemplate = (state, v, dependencies, baseTemplate = blankVariableTemplate()) => {
    const labelsByID = state.resources.labels.byID;
    const variableName = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(v, 'name', '');
    const templateName = `${variableName}-Template`;
    const variableData = variableToIncluded(v, labelsByID);
    const variableRelationships = dependencies.map(d => variableToRelationship(d));
    const includedDependencies = dependencies.map(d => variableToIncluded(d, labelsByID));
    const vLabels = Object(src_resources_selectors__WEBPACK_IMPORTED_MODULE_2__[/* getLabels */ "c"])(state, v.labels);
    const includedLabels = vLabels.map(label => labelToIncluded(label));
    const labelRelationships = vLabels.map(label => labelToRelationship(label));
    const includedDependentLabels = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["flatMap"])(dependencies, d => {
        const dLabels = Object(src_resources_selectors__WEBPACK_IMPORTED_MODULE_2__[/* getLabels */ "c"])(state, d.labels);
        return dLabels.map(label => labelToIncluded(label));
    });
    return Object.assign(Object.assign({}, baseTemplate), { meta: Object.assign(Object.assign({}, baseTemplate.meta), { name: templateName, description: `template created from variable: ${variableName}` }), content: Object.assign(Object.assign({}, baseTemplate.content), { data: Object.assign(Object.assign(Object.assign({}, baseTemplate.content.data), variableData), { relationships: {
                    [_influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Variable]: {
                        data: [...variableRelationships],
                    },
                    [_influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Label]: {
                        data: [...labelRelationships],
                    },
                } }), included: [
                ...includedDependencies,
                ...includedLabels,
                ...includedDependentLabels,
            ] }) });
};
const variableToIncluded = (v, labelsByID) => {
    const variableAttributes = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["pick"])(v, ['name', 'arguments', 'selected']);
    const labelRelationships = v.labels
        .map(labelID => {
        const label = labelsByID[labelID];
        if (!label) {
            return null;
        }
        return labelToRelationship(label);
    })
        .filter(label => !!label);
    return {
        id: v.id,
        type: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Variable,
        attributes: variableAttributes,
        relationships: {
            [_influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Label]: {
                data: [...labelRelationships],
            },
        },
    };
};
const variableToRelationship = (v) => ({
    type: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Variable,
    id: v.id,
});
const dashboardToTemplate = (state, dashboard, cells, views, variables, baseTemplate = blankDashboardTemplate()) => {
    const labelsByID = state.resources.labels.byID;
    const dashboardName = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(dashboard, 'name', '');
    const templateName = `${dashboardName}-Template`;
    const dashboardAttributes = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["pick"])(dashboard, ['name', 'description']);
    const dashboardLabels = Object(src_resources_selectors__WEBPACK_IMPORTED_MODULE_2__[/* getLabels */ "c"])(state, dashboard.labels);
    const dashboardIncludedLabels = dashboardLabels.map(label => labelToIncluded(label));
    const relationshipsLabels = dashboardLabels.map(label => labelToRelationship(label));
    const includedCells = cells.map(c => cellToIncluded(c, views));
    const relationshipsCells = cells.map(c => cellToRelationship(c));
    const includedVariables = variables.map(v => variableToIncluded(v, labelsByID));
    const variableIncludedLabels = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["flatMap"])(variables, v => Object(src_resources_selectors__WEBPACK_IMPORTED_MODULE_2__[/* getLabels */ "c"])(state, v.labels).map(label => labelToIncluded(label)));
    const relationshipsVariables = variables.map(v => variableToRelationship(v));
    const includedViews = views.map(v => viewToIncluded(v));
    const includedLabels = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["uniqBy"])([...dashboardIncludedLabels, ...variableIncludedLabels], 'id');
    const template = Object.assign(Object.assign({}, baseTemplate), { meta: Object.assign(Object.assign({}, baseTemplate.meta), { name: templateName, description: `template created from dashboard: ${dashboardName}` }), content: Object.assign(Object.assign({}, baseTemplate.content), { data: Object.assign(Object.assign({}, baseTemplate.content.data), { type: _influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Dashboard, attributes: dashboardAttributes, relationships: {
                    [_influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Label]: { data: relationshipsLabels },
                    [_influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Cell]: { data: relationshipsCells },
                    [_influxdata_influx__WEBPACK_IMPORTED_MODULE_3__[/* TemplateType */ "z"].Variable]: { data: relationshipsVariables },
                } }), included: [
                ...baseTemplate.content.included,
                ...includedLabels,
                ...includedCells,
                ...includedViews,
                ...includedVariables,
            ] }) });
    return template;
};
const templateToExport = (template) => {
    const pickedTemplate = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["pick"])(template, ['meta', 'content']);
    const labelsArray = template.labels.map(l => l.name);
    const templateWithLabels = Object.assign(Object.assign({}, pickedTemplate), { labels: labelsArray });
    return templateWithLabels;
};
const addOrgIDToTemplate = (template, orgID) => {
    return Object.assign(Object.assign({}, template), { orgID });
};


/***/ }),

/***/ 311:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export ErrorTypes */
/* unused harmony export getInvalidDataMessage */
/* unused harmony export resolveFieldOptions */
/* unused harmony export calculateColumnWidths */
/* unused harmony export filterTableColumns */
/* unused harmony export orderTableColumns */
/* unused harmony export sortTableData */
/* unused harmony export excludeNoisyColumns */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return transformTableData; });
/* unused harmony export isNumerical */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return findHoverTimeIndex; });
/* unused harmony export getUnixISODiff */
/* unused harmony export findTableNameHeaders */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return resolveTimeFormat; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_utils_fast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(743);
/* harmony import */ var src_shared_constants_tableGraph__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(242);
/* harmony import */ var src_dashboards_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(70);
/* harmony import */ var src_shared_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(32);





const calculateSize = (message) => {
    return message.length * 7;
};
var ErrorTypes;
(function (ErrorTypes) {
    ErrorTypes["MetaQueryCombo"] = "MetaQueryCombo";
    ErrorTypes["GeneralError"] = "Error";
})(ErrorTypes || (ErrorTypes = {}));
const getInvalidDataMessage = (errorType) => {
    switch (errorType) {
        case ErrorTypes.MetaQueryCombo:
            return 'Cannot display data for meta queries mixed with data queries';
        default:
            return null;
    }
};
const calculateTimeColumnWidth = (timeFormat) => {
    timeFormat = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.replace(timeFormat, 'MMMM', 'September');
    timeFormat = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.replace(timeFormat, 'dddd', 'Wednesday');
    timeFormat = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.replace(timeFormat, 'A', 'AM');
    timeFormat = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.replace(timeFormat, 'h', '00');
    timeFormat = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.replace(timeFormat, 'X', '1522286058');
    timeFormat = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.replace(timeFormat, 'x', '1536106867461');
    const width = calculateSize(timeFormat);
    return width + src_shared_constants_tableGraph__WEBPACK_IMPORTED_MODULE_2__[/* CELL_HORIZONTAL_PADDING */ "b"];
};
const updateMaxWidths = (row, maxColumnWidths, topRow, isTopRow, fieldOptions, timeFormatWidth, verticalTimeAxis, decimalPlaces) => {
    const maxWidths = Object(src_utils_fast__WEBPACK_IMPORTED_MODULE_1__[/* fastReduce */ "c"])(row, (acc, col, c) => {
        const foundField = fieldOptions.find(field => field.internalName === col);
        let colValue = `${col}`;
        if (foundField && foundField.displayName) {
            colValue = foundField.displayName;
        }
        else if (!isNaN(+col) && decimalPlaces.isEnforced) {
            colValue = (+col).toFixed(decimalPlaces.digits);
        }
        const columnLabel = topRow[c];
        const isTimeColumn = columnLabel === src_dashboards_constants__WEBPACK_IMPORTED_MODULE_3__[/* DEFAULT_TIME_FIELD */ "h"].internalName;
        const isTimeRow = topRow[0] === src_dashboards_constants__WEBPACK_IMPORTED_MODULE_3__[/* DEFAULT_TIME_FIELD */ "h"].internalName;
        const useTimeWidth = (isTimeColumn && verticalTimeAxis && !isTopRow) ||
            (!verticalTimeAxis && isTopRow && isTimeRow && c !== 0);
        const currentWidth = useTimeWidth
            ? timeFormatWidth
            : calculateSize(colValue.toString().trim()) + src_shared_constants_tableGraph__WEBPACK_IMPORTED_MODULE_2__[/* CELL_HORIZONTAL_PADDING */ "b"];
        const { widths: Widths } = maxColumnWidths;
        const maxWidth = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.get(Widths, `${columnLabel}`, 0);
        if (isTopRow || currentWidth > maxWidth) {
            acc.widths[columnLabel] = currentWidth;
            acc.totalWidths += currentWidth - maxWidth;
        }
        return acc;
    }, Object.assign({}, maxColumnWidths));
    return maxWidths;
};
const resolveFieldOptions = (existingFieldOptions, labels) => {
    let astNames = [];
    labels.forEach(label => {
        const field = {
            internalName: label,
            displayName: '',
            visible: true,
        };
        astNames = [...astNames, field];
    });
    const intersection = existingFieldOptions.filter(f => {
        return astNames.find(a => a.internalName === f.internalName);
    });
    const newFields = astNames.filter(a => {
        return !existingFieldOptions.find(f => f.internalName === a.internalName);
    });
    return [...intersection, ...newFields];
};
const calculateColumnWidths = (data, fieldOptions, timeFormat, verticalTimeAxis, decimalPlaces) => {
    const timeFormatWidth = calculateTimeColumnWidth(timeFormat === '' ? src_shared_constants__WEBPACK_IMPORTED_MODULE_4__[/* DEFAULT_TIME_FORMAT */ "o"] : timeFormat);
    return Object(src_utils_fast__WEBPACK_IMPORTED_MODULE_1__[/* fastReduce */ "c"])(data, (acc, row, r) => {
        return updateMaxWidths(row, acc, data[0], r === 0, fieldOptions, timeFormatWidth, verticalTimeAxis, decimalPlaces);
    }, { widths: {}, totalWidths: 0 });
};
const filterTableColumns = (data, fieldOptions) => {
    const visibility = {};
    const filteredData = Object(src_utils_fast__WEBPACK_IMPORTED_MODULE_1__[/* fastMap */ "b"])(data, (row, i) => {
        return Object(src_utils_fast__WEBPACK_IMPORTED_MODULE_1__[/* fastFilter */ "a"])(row, (col, j) => {
            if (i === 0) {
                const foundField = fieldOptions.find(field => field.internalName === col);
                visibility[j] = foundField ? foundField.visible : true;
            }
            return visibility[j];
        });
    });
    return filteredData[0].length ? filteredData : [[]];
};
const orderTableColumns = (data, fieldOptions) => {
    const fieldsSortOrder = fieldOptions.map(fieldOption => {
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.findIndex(data[0], dataLabel => {
            return dataLabel === fieldOption.internalName;
        });
    });
    const filteredFieldSortOrder = fieldsSortOrder.filter(f => f !== -1);
    const orderedData = Object(src_utils_fast__WEBPACK_IMPORTED_MODULE_1__[/* fastMap */ "b"])(data, (row) => {
        return row.map((__, j, arr) => arr[filteredFieldSortOrder[j]]);
    });
    return orderedData[0].length ? orderedData : [[]];
};
const sortTableData = (data, sort) => {
    const headerSet = new Set(data[0]);
    let sortIndex = 0;
    if (headerSet.has(sort.field)) {
        sortIndex = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.indexOf(data[0], sort.field);
    }
    const dataValues = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.drop(data, 1);
    const sortedData = [
        data[0],
        ...lodash__WEBPACK_IMPORTED_MODULE_0___default.a.orderBy(dataValues, row => {
            const sortedValue = row[sortIndex];
            if (isNaN(Number(sortedValue))) {
                return sortedValue;
            }
            return Number(sortedValue);
        }, [sort.direction]),
    ];
    const sortedTimeVals = Object(src_utils_fast__WEBPACK_IMPORTED_MODULE_1__[/* fastMap */ "b"])(sortedData, (r) => r[sortIndex]);
    return { sortedData, sortedTimeVals };
};
const excludeNoisyColumns = (data) => {
    const IGNORED_COLUMNS = ['', 'result', 'table'];
    const header = data[0];
    const ignoredIndices = IGNORED_COLUMNS.map(name => header.indexOf(name));
    const excludedData = data.map(row => {
        return row.filter((__, i) => !ignoredIndices.includes(i));
    });
    return excludedData;
};
const transformTableData = (data, sortOptions, fieldOptions, tableOptions, timeFormat, decimalPlaces) => {
    const { verticalTimeAxis } = tableOptions;
    const excludedData = excludeNoisyColumns(data);
    const resolvedFieldOptions = resolveFieldOptions(fieldOptions, excludedData[0]);
    const { sortedData, sortedTimeVals } = sortTableData(excludedData, sortOptions);
    const filteredData = filterTableColumns(sortedData, resolvedFieldOptions);
    const orderedData = orderTableColumns(filteredData, resolvedFieldOptions);
    const transformedData = verticalTimeAxis ? orderedData : lodash__WEBPACK_IMPORTED_MODULE_0___default.a.unzip(orderedData);
    const columnWidths = calculateColumnWidths(transformedData, resolvedFieldOptions, timeFormat, verticalTimeAxis, decimalPlaces);
    return {
        transformedData,
        sortedTimeVals,
        columnWidths,
        resolvedFieldOptions,
        sortOptions,
    };
};
const isNumerical = (x) => !isNaN(Number(x)) && !isNaN(parseFloat(x));
const findHoverTimeIndex = (sortedTimeVals, hoverTime) => {
    if (sortedTimeVals.length < 2) {
        return -1;
    }
    const firstDiff = getUnixISODiff(hoverTime, sortedTimeVals[1]);
    const hoverTimeFound = Object(src_utils_fast__WEBPACK_IMPORTED_MODULE_1__[/* fastReduce */ "c"])(sortedTimeVals, (acc, currentTime, index) => {
        const thisDiff = getUnixISODiff(hoverTime, currentTime);
        if (thisDiff < acc.diff) {
            return { index, diff: thisDiff };
        }
        return acc;
    }, { index: 1, diff: firstDiff });
    return hoverTimeFound.index;
};
const getUnixISODiff = (unixMs, isoTime) => {
    return Math.abs(unixMs - new Date(isoTime).valueOf());
};
const findTableNameHeaders = (tables, name) => {
    const foundTable = tables.find(t => t.name === name);
    return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.get(foundTable, 'data.0', []);
};
const resolveTimeFormat = (timeFormat) => {
    if (src_dashboards_constants__WEBPACK_IMPORTED_MODULE_3__[/* FORMAT_OPTIONS */ "k"].find(d => d.text === timeFormat)) {
        return timeFormat;
    }
    return src_shared_constants__WEBPACK_IMPORTED_MODULE_4__[/* DEFAULT_TIME_FORMAT */ "o"];
};


/***/ }),

/***/ 312:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return incrementCloneName; });
const incrementCloneName = (namesList, cloneName) => {
    const root = cloneName.replace(/\s\(clone\s(\d)+\)/g, '').replace(/\)/, '');
    const filteredNames = namesList.filter(n => n.includes(root));
    const highestNumberedClone = filteredNames.reduce((acc, name) => {
        if (name.match(/\(clone(\s|\d)+\)/)) {
            const strippedName = name
                .replace(root, '')
                .replace(/\(clone/, '')
                .replace(/\)/, '');
            const cloneNumber = Number(strippedName);
            return cloneNumber >= acc ? cloneNumber : acc;
        }
        return acc;
    }, 0);
    if (highestNumberedClone) {
        const newCloneNumber = highestNumberedClone + 1;
        return `${cloneName.replace(/\(clone\s(\d)+\)/, '')} (clone ${newCloneNumber})`;
    }
    return `${cloneName} (clone 1)`;
};


/***/ }),

/***/ 313:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getAuthorizations; });
/* unused harmony export getAuthorization */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createAuthorization; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return updateAuthorization; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return deleteAuthorization; });
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var src_authorizations_apis__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(748);
/* harmony import */ var src_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14);
/* harmony import */ var src_schemas_authorizations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(304);
/* harmony import */ var src_authorizations_actions_creators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(406);
/* harmony import */ var src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(33);
/* harmony import */ var src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(35);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(5);
/* harmony import */ var src_organizations_selectors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(19);









const getAuthorizations = () => async (dispatch, getState) => {
    try {
        dispatch(Object(src_authorizations_actions_creators__WEBPACK_IMPORTED_MODULE_4__[/* setAuthorizations */ "g"])(src_types__WEBPACK_IMPORTED_MODULE_7__["RemoteDataState"].Loading));
        const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_8__[/* getOrg */ "a"])(getState());
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_2__[/* getAuthorizations */ "u"]({ query: { orgID: org.id } });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const auths = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data.authorizations, src_schemas_authorizations__WEBPACK_IMPORTED_MODULE_3__[/* arrayOfAuths */ "a"]);
        dispatch(Object(src_authorizations_actions_creators__WEBPACK_IMPORTED_MODULE_4__[/* setAuthorizations */ "g"])(src_types__WEBPACK_IMPORTED_MODULE_7__["RemoteDataState"].Done, auths));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_authorizations_actions_creators__WEBPACK_IMPORTED_MODULE_4__[/* setAuthorizations */ "g"])(src_types__WEBPACK_IMPORTED_MODULE_7__["RemoteDataState"].Error));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* authorizationsGetFailed */ "z"])()));
    }
};
const getAuthorization = async (authID) => {
    try {
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_2__[/* getAuthorization */ "t"]({ authID });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        return resp.data;
    }
    catch (error) {
        console.error(error);
    }
};
const createAuthorization = (auth) => async (dispatch) => {
    try {
        const resp = await src_authorizations_apis__WEBPACK_IMPORTED_MODULE_1__[/* createAuthorization */ "a"](auth);
        const newAuth = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp, src_schemas_authorizations__WEBPACK_IMPORTED_MODULE_3__[/* authSchema */ "b"]);
        dispatch(Object(src_authorizations_actions_creators__WEBPACK_IMPORTED_MODULE_4__[/* addAuthorization */ "e"])(newAuth));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* authorizationCreateSuccess */ "u"])()));
    }
    catch (error) {
        console.error(error.message);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* authorizationCreateFailed */ "t"])()));
        throw error;
    }
};
const updateAuthorization = (authorization) => async (dispatch) => {
    try {
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_2__[/* patchAuthorization */ "Q"]({
            authID: authorization.id,
            data: authorization,
        });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        dispatch(getAuthorizations());
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* authorizationUpdateSuccess */ "y"])()));
    }
    catch (e) {
        console.error(e);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* authorizationUpdateFailed */ "x"])(authorization.id)));
    }
};
const deleteAuthorization = (id, name = '') => async (dispatch) => {
    try {
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_2__[/* deleteAuthorization */ "a"]({ authID: id });
        if (resp.status !== 204) {
            throw new Error(resp.data.message);
        }
        dispatch(Object(src_authorizations_actions_creators__WEBPACK_IMPORTED_MODULE_4__[/* removeAuthorization */ "f"])(id));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* authorizationDeleteSuccess */ "w"])()));
    }
    catch (e) {
        console.error(e);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* authorizationDeleteFailed */ "v"])(name)));
    }
};


/***/ }),

/***/ 314:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return getNotificationRules; });
/* unused harmony export getCurrentRule */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return createRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return updateRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return updateRuleProperties; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return deleteRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addRuleLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return deleteRuleLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return cloneRule; });
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(35);
/* harmony import */ var src_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14);
/* harmony import */ var src_schemas_rules__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(307);
/* harmony import */ var src_schemas_labels__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(76);
/* harmony import */ var src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(33);
/* harmony import */ var src_notifications_rules_actions_creators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(728);
/* harmony import */ var src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(72);
/* harmony import */ var src_labels_actions_creators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(135);
/* harmony import */ var src_notifications_rules_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(190);
/* harmony import */ var src_organizations_selectors__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(19);
/* harmony import */ var src_resources_selectors__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(24);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(5);
/* harmony import */ var src_utils_naming__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(312);














const getNotificationRules = () => async (dispatch, getState) => {
    try {
        dispatch(Object(src_notifications_rules_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* setRules */ "j"])(src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Loading));
        const { id: orgID } = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_10__[/* getOrg */ "a"])(getState());
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_2__[/* getNotificationRules */ "F"]({ query: { orgID } });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const rules = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data.notificationRules, src_schemas_rules__WEBPACK_IMPORTED_MODULE_3__[/* arrayOfRules */ "a"]);
        dispatch(Object(src_notifications_rules_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* setRules */ "j"])(src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Done, rules));
        dispatch(Object(src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_7__[/* checkRulesLimits */ "g"])());
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_notifications_rules_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* setRules */ "j"])(src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Error));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_1__[/* getNotificationRulesFailed */ "tb"](error.message)));
    }
};
const getCurrentRule = (ruleID) => async (dispatch) => {
    try {
        dispatch(Object(src_notifications_rules_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* setCurrentRule */ "h"])(src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Loading));
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_2__[/* getNotificationRule */ "E"]({ ruleID });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const rule = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data, src_schemas_rules__WEBPACK_IMPORTED_MODULE_3__[/* ruleSchema */ "b"]);
        dispatch(Object(src_notifications_rules_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* setCurrentRule */ "h"])(src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Done, rule));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_notifications_rules_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* setCurrentRule */ "h"])(src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Error));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_1__[/* getNotificationRuleFailed */ "sb"](error.message)));
    }
};
const createRule = (rule) => async (dispatch) => {
    const data = Object(src_notifications_rules_utils__WEBPACK_IMPORTED_MODULE_9__[/* draftRuleToPostRule */ "d"])(rule);
    try {
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_2__[/* postNotificationRule */ "mb"]({ data });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        const rule = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data, src_schemas_rules__WEBPACK_IMPORTED_MODULE_3__[/* ruleSchema */ "b"]);
        dispatch(Object(src_notifications_rules_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* setRule */ "i"])(resp.data.id, src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Done, rule));
        dispatch(Object(src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_7__[/* checkRulesLimits */ "g"])());
    }
    catch (error) {
        console.error(error);
    }
};
const updateRule = (rule) => async (dispatch) => {
    if (rule.offset == '') {
        throw new Error('Notification Rule offset field can not be empty');
    }
    if (rule.every == '') {
        throw new Error('Notification Rule every field can not be empty');
    }
    dispatch(Object(src_notifications_rules_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* setRule */ "i"])(rule.id, src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Loading));
    try {
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_2__[/* putNotificationRule */ "Cb"]({
            ruleID: rule.id,
            data: Object(src_notifications_rules_utils__WEBPACK_IMPORTED_MODULE_9__[/* draftRuleToPostRule */ "d"])(rule),
        });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const normRule = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data, src_schemas_rules__WEBPACK_IMPORTED_MODULE_3__[/* ruleSchema */ "b"]);
        dispatch(Object(src_notifications_rules_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* setRule */ "i"])(rule.id, src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Done, normRule));
    }
    catch (error) {
        console.error(error);
    }
};
const updateRuleProperties = (ruleID, properties) => async (dispatch) => {
    try {
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_2__[/* patchNotificationRule */ "X"]({
            ruleID,
            data: properties,
        });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const rule = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data, src_schemas_rules__WEBPACK_IMPORTED_MODULE_3__[/* ruleSchema */ "b"]);
        dispatch(Object(src_notifications_rules_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* setRule */ "i"])(ruleID, src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Done, rule));
    }
    catch (error) {
        console.error(error);
    }
};
const deleteRule = (ruleID) => async (dispatch) => {
    try {
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_2__[/* deleteNotificationRule */ "l"]({ ruleID });
        if (resp.status !== 204) {
            throw new Error(resp.data.message);
        }
        dispatch(Object(src_notifications_rules_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* removeRule */ "g"])(ruleID));
        dispatch(Object(src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_7__[/* checkRulesLimits */ "g"])());
    }
    catch (error) {
        console.error(error);
    }
};
const addRuleLabel = (ruleID, label) => async (dispatch) => {
    try {
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_2__[/* postNotificationRulesLabel */ "nb"]({
            ruleID,
            data: { labelID: label.id },
        });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        const normLabel = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data.label, src_schemas_labels__WEBPACK_IMPORTED_MODULE_4__[/* labelSchema */ "b"]);
        dispatch(Object(src_labels_actions_creators__WEBPACK_IMPORTED_MODULE_8__[/* setLabelOnResource */ "g"])(ruleID, normLabel));
    }
    catch (error) {
        console.error(error);
    }
};
const deleteRuleLabel = (ruleID, labelID) => async (dispatch) => {
    try {
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_2__[/* deleteNotificationRulesLabel */ "m"]({
            ruleID,
            labelID,
        });
        if (resp.status !== 204) {
            throw new Error(resp.data.message);
        }
        dispatch(Object(src_notifications_rules_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* removeLabelFromRule */ "f"])(ruleID, labelID));
    }
    catch (error) {
        console.error(error);
    }
};
const cloneRule = (draftRule) => async (dispatch, getState) => {
    try {
        const state = getState();
        const rules = Object(src_resources_selectors__WEBPACK_IMPORTED_MODULE_11__[/* getAll */ "a"])(state, src_types__WEBPACK_IMPORTED_MODULE_12__["ResourceType"].NotificationRules);
        const rule = Object(src_notifications_rules_utils__WEBPACK_IMPORTED_MODULE_9__[/* draftRuleToPostRule */ "d"])(draftRule);
        const allRuleNames = rules.map(r => r.name);
        const clonedName = Object(src_utils_naming__WEBPACK_IMPORTED_MODULE_13__[/* incrementCloneName */ "a"])(allRuleNames, rule.name);
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_2__[/* postNotificationRule */ "mb"]({
            data: Object.assign(Object.assign({}, rule), { name: clonedName }),
        });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        const normRule = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data, src_schemas_rules__WEBPACK_IMPORTED_MODULE_3__[/* ruleSchema */ "b"]);
        dispatch(Object(src_notifications_rules_actions_creators__WEBPACK_IMPORTED_MODULE_6__[/* setRule */ "i"])(resp.data.id, src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Done, normRule));
        dispatch(Object(src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_7__[/* checkRulesLimits */ "g"])());
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_1__[/* createRuleFailed */ "T"](error.message)));
    }
};


/***/ }),

/***/ 32:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return DEFAULT_TIME_FORMAT; });
/* unused harmony export DROPDOWN_MENU_MAX_HEIGHT */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "E", function() { return PRESENTATION_MODE_ANIMATION_DELAY; });
/* unused harmony export HTTP_UNAUTHORIZED */
/* unused harmony export HTTP_FORBIDDEN */
/* unused harmony export HTTP_NOT_FOUND */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return AUTOREFRESH_DEFAULT_INTERVAL; });
/* unused harmony export AUTOREFRESH_DEFAULT_STATUS */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return AUTOREFRESH_DEFAULT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "z", function() { return LAYOUT_MARGIN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return DASHBOARD_LAYOUT_ROW_HEIGHT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "D", function() { return NOTIFICATION_TRANSITION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return FIVE_SECONDS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F", function() { return TEN_SECONDS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "y", function() { return INFINITE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "x", function() { return HOMEPAGE_PATHNAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "w", function() { return HANDLE_VERTICAL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return HANDLE_HORIZONTAL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return HANDLE_NONE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return HANDLE_PIXELS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "B", function() { return MIN_HANDLE_PIXELS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "A", function() { return MAX_SIZE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "C", function() { return MIN_SIZE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "G", function() { return VERSION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return GIT_SHA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return BASE_PATH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return API_BASE_PATH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return CLOUD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return CLOUD_SIGNIN_PATHNAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return CLOUD_BILLING_VISIBLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return CLOUD_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return CLOUD_CHECKOUT_PATH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return CLOUD_BILLING_PATH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return CLOUD_USAGE_PATH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return CLOUD_LOGOUT_PATH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return CLOUD_USERS_PATH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return FLUX_RESPONSE_BYTES_LIMIT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "H", function() { return VIS_SIG_DIGITS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "I", function() { return VIS_THEME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return GIRAFFE_COLOR_SCHEMES; });
/* harmony import */ var _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85);
/* harmony import */ var _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_influxdata_giraffe__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);



const DEFAULT_TIME_FORMAT = 'YYYY-MM-DD HH:mm:ss ZZ';
const DROPDOWN_MENU_MAX_HEIGHT = 240;
const PRESENTATION_MODE_ANIMATION_DELAY = 0;
const HTTP_UNAUTHORIZED = 401;
const HTTP_FORBIDDEN = 403;
const HTTP_NOT_FOUND = 404;
const AUTOREFRESH_DEFAULT_INTERVAL = 0;
const AUTOREFRESH_DEFAULT_STATUS = src_types__WEBPACK_IMPORTED_MODULE_2__["AutoRefreshStatus"].Paused;
const AUTOREFRESH_DEFAULT = {
    status: AUTOREFRESH_DEFAULT_STATUS,
    interval: AUTOREFRESH_DEFAULT_INTERVAL,
};
const LAYOUT_MARGIN = 4;
const DASHBOARD_LAYOUT_ROW_HEIGHT = 83.5;
const NOTIFICATION_TRANSITION = 250;
const FIVE_SECONDS = 5000;
const TEN_SECONDS = 10000;
const INFINITE = -1;
const HOMEPAGE_PATHNAME = 'me';
const HANDLE_VERTICAL = 'vertical';
const HANDLE_HORIZONTAL = 'horizontal';
const HANDLE_NONE = 'none';
const HANDLE_PIXELS = 20;
const MIN_HANDLE_PIXELS = 20;
const MAX_SIZE = 1;
const MIN_SIZE = 0;
const VERSION = "2.0.0";
const GIT_SHA = "d96f3dc5abb6bb187374caa9e7c7a876b4799bd2\n";
const BASE_PATH = "/";
const API_BASE_PATH = "/";
const CLOUD = !!process.env.CLOUD_URL;
const CLOUD_SIGNIN_PATHNAME = '/api/v2/signin';
const CLOUD_BILLING_VISIBLE = CLOUD;
const CLOUD_URL = process.env.CLOUD_URL;
const CLOUD_CHECKOUT_PATH = '/checkout';
const CLOUD_BILLING_PATH = '/billing';
const CLOUD_USAGE_PATH = '/usage';
const CLOUD_LOGOUT_PATH = '/logout';
const CLOUD_USERS_PATH = '/users/index';
const FLUX_RESPONSE_BYTES_LIMIT = CLOUD
    ? 10 * 1024 * 1024
    : 100 * 1024 * 1024;
const VIS_SIG_DIGITS = 4;
const VIS_THEME = {
    axisColor: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["InfluxColors"].Onyx,
    gridColor: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["InfluxColors"].Onyx,
    gridOpacity: 1,
    tickFont: 'bold 10px Roboto',
    tickFontColor: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["InfluxColors"].Chromium,
    legendFont: '12px Roboto',
    legendFontColor: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["InfluxColors"].Wolf,
    legendFontBrightColor: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["InfluxColors"].Chromium,
    legendBackgroundColor: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["InfluxColors"].Raven,
    legendBorder: `1px solid ${_influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["InfluxColors"].Kevlar}`,
    legendCrosshairColor: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["InfluxColors"].Smoke,
};
const GIRAFFE_COLOR_SCHEMES = [
    { name: 'Nineteen Eighty Four', colors: _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_0__["NINETEEN_EIGHTY_FOUR"] },
    { name: 'Atlantis', colors: _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_0__["ATLANTIS"] },
    { name: 'Do Androids Dream of Electric Sheep?', colors: _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_0__["DO_ANDROIDS_DREAM"] },
    { name: 'Delorean', colors: _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_0__["DELOREAN"] },
    { name: 'Cthulhu', colors: _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_0__["CTHULHU"] },
    { name: 'Ectoplasm', colors: _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_0__["ECTOPLASM"] },
    { name: 'T-MAX 400 Film', colors: _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_0__["T_MAX_400_FILM"] },
];

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(80)))

/***/ }),

/***/ 33:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return notify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return dismissNotification; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return dismissAllNotifications; });
const notify = (notification) => ({
    type: 'PUBLISH_NOTIFICATION',
    payload: { notification },
});
const dismissNotification = (id) => ({
    type: 'DISMISS_NOTIFICATION',
    payload: { id },
});
const dismissAllNotifications = () => ({
    type: 'DISMISS_ALL_NOTIFICATIONS',
});


/***/ }),

/***/ 336:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var src_shared_decorators_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(11);
/* harmony import */ var src_shared_components_fancy_scrollbar_FancyScrollbar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(67);
/* harmony import */ var src_shared_components_CopyButton__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(450);





let CodeSnippet = class CodeSnippet extends react__WEBPACK_IMPORTED_MODULE_1__["PureComponent"] {
    render() {
        const { copyText, label, onCopyText } = this.props;
        const testID = this.props.testID || 'code-snippet';
        return (react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: "code-snippet", "data-testid": testID },
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(src_shared_components_fancy_scrollbar_FancyScrollbar__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"], { autoHide: false, autoHeight: true, maxHeight: 400, className: "code-snippet--scroll" },
                react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: "code-snippet--text" },
                    react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("pre", null,
                        react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("code", null, copyText)))),
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { className: "code-snippet--footer" },
                react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(src_shared_components_CopyButton__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"], { textToCopy: copyText, onCopyText: onCopyText, contentName: "Script" }),
                react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("label", { className: "code-snippet--label" }, label))));
    }
};
CodeSnippet.defaultProps = {
    label: 'Code Snippet',
};
CodeSnippet = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __decorate */ "a"])([
    src_shared_decorators_errors__WEBPACK_IMPORTED_MODULE_2__[/* ErrorHandling */ "a"]
], CodeSnippet);
/* harmony default export */ __webpack_exports__["a"] = (CodeSnippet);


/***/ }),

/***/ 35:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/@influxdata/giraffe/dist/index.js
var dist = __webpack_require__(85);

// EXTERNAL MODULE: ./src/types/notifications.ts
var notifications = __webpack_require__(395);

// EXTERNAL MODULE: ./src/shared/constants/index.ts
var constants = __webpack_require__(32);

// EXTERNAL MODULE: ./src/dataLoaders/constants/pluginConfigs.ts + 18 modules
var pluginConfigs = __webpack_require__(233);

// CONCATENATED MODULE: ./src/onboarding/constants/index.ts
const QUICKSTART_DASHBOARD_NAME = 'InfluxDB 2.0 OSS Metrics';

// CONCATENATED MODULE: ./src/shared/copy/notifications.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Mb", function() { return newVersion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Hb", function() { return loadLocalSettingsFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vb", function() { return presentationMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "qc", function() { return sessionTimedOut; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hc", function() { return resultTooLarge; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return SetupSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return SetupError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return SigninError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return QuickstartScraperCreationSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return QuickstartScraperCreationError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return QuickstartDashboardCreationSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return QuickstartDashboardCreationError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return TelegrafConfigCreationSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return TelegrafConfigCreationError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return addTaskLabelFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ac", function() { return removeTaskLabelFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cb", function() { return dashboardGetFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "db", function() { return dashboardUpdateFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bb", function() { return dashboardDeleted; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Z", function() { return dashboardCreateFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ab", function() { return dashboardDeleteFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Y", function() { return dashboardCopySuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "X", function() { return dashboardCopyFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "I", function() { return cellAdded; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "H", function() { return cellAddFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "K", function() { return cellUpdateFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "J", function() { return cellDeleted; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return addDashboardLabelFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ec", function() { return removedDashboardLabelFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Gb", function() { return invalidTimeRangeValueInURLQuery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wb", function() { return getVariablesFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "vb", function() { return getVariableFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "V", function() { return createVariableFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "W", function() { return createVariableSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "jb", function() { return deleteVariableFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "kb", function() { return deleteVariableSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pc", function() { return updateVariableFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Qc", function() { return updateVariableSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "O", function() { return copyToClipboardSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "N", function() { return copyToClipboardFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return addTemplateLabelFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cc", function() { return removeTemplateLabelFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return TelegrafDashboardCreated; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return TelegrafDashboardFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Bb", function() { return importTaskSucceeded; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ab", function() { return importTaskFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zb", function() { return importDashboardSucceeded; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "yb", function() { return importDashboardFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Db", function() { return importTemplateSucceeded; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Cb", function() { return importTemplateFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "U", function() { return createTemplateFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "S", function() { return createResourceFromTemplateFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Oc", function() { return updateTemplateSucceeded; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Nc", function() { return updateTemplateFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hb", function() { return deleteTemplateFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ib", function() { return deleteTemplateSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "L", function() { return cloneTemplateFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "M", function() { return cloneTemplateSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gc", function() { return resourceSavedAsTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ic", function() { return saveResourceAsTemplateFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rb", function() { return getLabelsFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "R", function() { return createLabelFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Mc", function() { return updateLabelFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gb", function() { return deleteLabelFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mb", function() { return getBucketsFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lb", function() { return getBucketFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Yb", function() { return readWriteCardinalityLimitReached; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Xb", function() { return readLimitReached; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Wb", function() { return rateLimitReached; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fc", function() { return resourceLimitReached; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zc", function() { return taskNotCreated; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "vc", function() { return taskCreatedSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ac", function() { return taskNotFound; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fc", function() { return tasksFetchFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wc", function() { return taskDeleteFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "xc", function() { return taskDeleteSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uc", function() { return taskCloneSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tc", function() { return taskCloneFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dc", function() { return taskUpdateFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ec", function() { return taskUpdateSuccess; });
/* unused harmony export taskImportFailed */
/* unused harmony export taskImportSuccess */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Cc", function() { return taskRunSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Bc", function() { return taskRunFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "yc", function() { return taskGetFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ub", function() { return getTelegrafConfigFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "jc", function() { return savingNoteFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "C", function() { return bucketDeleteFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tb", function() { return predicateDeleteFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rc", function() { return setFilterKeyFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sc", function() { return setFilterValueFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "B", function() { return bucketCreateSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "A", function() { return bucketCreateFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "G", function() { return bucketUpdateSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ub", function() { return predicateDeleteSucceeded; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F", function() { return bucketUpdateFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "E", function() { return bucketRenameSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "D", function() { return bucketRenameFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return addBucketLabelFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Zb", function() { return removeBucketLabelFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ob", function() { return orgCreateSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Nb", function() { return orgCreateFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Qb", function() { return orgEditSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pb", function() { return orgEditFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sb", function() { return orgRenameSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Rb", function() { return orgRenameFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nc", function() { return scraperDeleteSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mc", function() { return scraperDeleteFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lc", function() { return scraperCreateSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "kc", function() { return scraperCreateFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pc", function() { return scraperUpdateSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "oc", function() { return scraperUpdateFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ic", function() { return telegrafGetFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Gc", function() { return telegrafCreateFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Jc", function() { return telegrafUpdateFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return addTelegrafLabelFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bc", function() { return removeTelegrafLabelFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "z", function() { return authorizationsGetFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return authorizationCreateSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return authorizationCreateFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "y", function() { return authorizationUpdateSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "x", function() { return authorizationUpdateFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "w", function() { return authorizationDeleteSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return authorizationDeleteFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return authorizationCopySuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return authorizationCopyFailed; });
/* unused harmony export telegrafDeleteSuccess */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Hc", function() { return telegrafDeleteFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Jb", function() { return memberAddSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ib", function() { return memberAddFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Lb", function() { return memberRemoveSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Kb", function() { return memberRemoveFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return addVariableLabelFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dc", function() { return removeVariableLabelFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fb", function() { return invalidMapType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ob", function() { return getChecksFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nb", function() { return getCheckFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tb", function() { return getNotificationRulesFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sb", function() { return getNotificationRuleFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "P", function() { return createCheckFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Kc", function() { return updateCheckFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eb", function() { return deleteCheckFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "T", function() { return createRuleFailed; });
/* unused harmony export updateRuleFailed */
/* unused harmony export deleteRuleFailed */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "xb", function() { return getViewFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pb", function() { return getEndpointFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "qb", function() { return getEndpointsFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Q", function() { return createEndpointFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Lc", function() { return updateEndpointFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fb", function() { return deleteEndpointFailed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Eb", function() { return invalidJSON; });





const bytesFormatter = Object(dist["binaryPrefixFormatter"])({
    suffix: 'B',
    significantDigits: 2,
    trimZeros: true,
});
const defaultErrorNotification = {
    style: notifications["a" /* NotificationStyle */].Error,
    icon: 'alert-triangle',
    duration: constants["F" /* TEN_SECONDS */],
};
const defaultSuccessNotification = {
    style: notifications["a" /* NotificationStyle */].Success,
    icon: 'checkmark',
    duration: constants["p" /* FIVE_SECONDS */],
};
const defaultDeletionNotification = {
    style: notifications["a" /* NotificationStyle */].Primary,
    icon: 'trash',
    duration: constants["p" /* FIVE_SECONDS */],
};
const newVersion = (version) => ({
    style: notifications["a" /* NotificationStyle */].Info,
    icon: 'cubo-uniform',
    duration: constants["y" /* INFINITE */],
    message: `Welcome to the latest Chronograf${version}. Local settings cleared.`,
});
const loadLocalSettingsFailed = (error) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Loading local settings failed: ${error}` }));
const presentationMode = () => ({
    style: notifications["a" /* NotificationStyle */].Primary,
    icon: 'expand-b',
    duration: 7500,
    message: 'Press ESC to exit Presentation Mode.',
});
const sessionTimedOut = () => ({
    style: notifications["a" /* NotificationStyle */].Primary,
    icon: 'triangle',
    duration: constants["y" /* INFINITE */],
    message: 'Your session has timed out. Log in again to continue.',
});
const resultTooLarge = (bytesRead) => ({
    style: notifications["a" /* NotificationStyle */].Error,
    icon: 'triangle',
    duration: constants["p" /* FIVE_SECONDS */],
    message: `Large response truncated to first ${bytesFormatter(bytesRead)}`,
});
const SetupSuccess = Object.assign(Object.assign({}, defaultSuccessNotification), { message: 'Initial user details have been successfully set' });
const SetupError = (message) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Could not set up admin user: ${message}` }));
const SigninError = Object.assign(Object.assign({}, defaultErrorNotification), { message: `Could not sign in` });
const QuickstartScraperCreationSuccess = Object.assign(Object.assign({}, defaultSuccessNotification), { message: `The InfluxDB Scraper has been configured for ${pluginConfigs["c" /* QUICKSTART_SCRAPER_TARGET_URL */]}` });
const QuickstartScraperCreationError = Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to configure InfluxDB Scraper` });
const QuickstartDashboardCreationSuccess = Object.assign(Object.assign({}, defaultSuccessNotification), { message: `The ${QUICKSTART_DASHBOARD_NAME} Dashboard has been created` });
const QuickstartDashboardCreationError = Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to create ${QUICKSTART_DASHBOARD_NAME} Dashboard` });
const TelegrafConfigCreationSuccess = Object.assign(Object.assign({}, defaultSuccessNotification), { message: `Your configurations have been saved` });
const TelegrafConfigCreationError = Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to save configurations` });
const addTaskLabelFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to add label to task' }));
const removeTaskLabelFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to remove label from task' }));
const dashboardGetFailed = (dashboardID, error) => (Object.assign(Object.assign({}, defaultErrorNotification), { icon: 'dash-h', message: `Failed to load dashboard with id "${dashboardID}": ${error}` }));
const dashboardUpdateFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { icon: 'dash-h', message: 'Could not update dashboard' }));
const dashboardDeleted = (name) => (Object.assign(Object.assign({}, defaultSuccessNotification), { icon: 'dash-h', message: `Dashboard ${name} deleted successfully.` }));
const dashboardCreateFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to create dashboard.' }));
const dashboardDeleteFailed = (name, errorMessage) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to delete Dashboard ${name}: ${errorMessage}.` }));
const dashboardCopySuccess = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: 'Copied dashboard to the clipboard!' }));
const dashboardCopyFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to copy dashboard.' }));
const cellAdded = (cellName, dashboardName) => (Object.assign(Object.assign({}, defaultSuccessNotification), { icon: 'dash-h', message: `Added new cell ${cellName + ' '}to dashboard ${dashboardName}` }));
const cellAddFailed = (cellName, dashboardName) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to add cell ${cellName + ' '}to dashboard ${dashboardName}` }));
const cellUpdateFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to update cell` }));
const cellDeleted = () => (Object.assign(Object.assign({}, defaultDeletionNotification), { icon: 'dash-h', duration: 1900, message: `Cell deleted from dashboard.` }));
const addDashboardLabelFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to add label to dashboard' }));
const removedDashboardLabelFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to remove label from dashboard' }));
const invalidTimeRangeValueInURLQuery = () => (Object.assign(Object.assign({}, defaultErrorNotification), { icon: 'cube', message: `Invalid URL query value supplied for lower or upper time range.` }));
const getVariablesFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to fetch variables' }));
const getVariableFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to fetch variable' }));
const createVariableFailed = (error) => (Object.assign(Object.assign({}, defaultErrorNotification), { icon: 'cube', message: `Failed to create variable: ${error}` }));
const createVariableSuccess = (name) => (Object.assign(Object.assign({}, defaultSuccessNotification), { icon: 'cube', message: `Successfully created new variable: ${name}.` }));
const deleteVariableFailed = (error) => (Object.assign(Object.assign({}, defaultErrorNotification), { icon: 'cube', message: `Failed to delete variable: ${error}` }));
const deleteVariableSuccess = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { icon: 'cube', message: 'Successfully deleted the variable' }));
const updateVariableFailed = (error) => (Object.assign(Object.assign({}, defaultErrorNotification), { icon: 'cube', message: `Failed to update variable: ${error}` }));
const updateVariableSuccess = (name) => (Object.assign(Object.assign({}, defaultSuccessNotification), { icon: 'cube', message: `Successfully updated variable: ${name}.` }));
const copyToClipboardSuccess = (text, title = '') => (Object.assign(Object.assign({}, defaultSuccessNotification), { icon: 'dash-h', type: 'copyToClipboardSuccess', message: `${title} '${text}' has been copied to clipboard.` }));
const copyToClipboardFailed = (text, title = '') => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `${title}'${text}' was not copied to clipboard.` }));
const addTemplateLabelFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to add label to template' }));
const removeTemplateLabelFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to remove label from template' }));
const TelegrafDashboardCreated = (configs) => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: `Successfully created dashboards for telegraf plugin${configs.length > 1 ? 's' : ''}: ${configs.join(', ')}.` }));
const TelegrafDashboardFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Could not create dashboards for one or more plugins` }));
const importTaskSucceeded = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: `Successfully imported task.` }));
const importTaskFailed = (error) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to import task: ${error}` }));
const importDashboardSucceeded = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: `Successfully imported dashboard.` }));
const importDashboardFailed = (error) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to import dashboard: ${error}` }));
const importTemplateSucceeded = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: `Successfully imported template.` }));
const importTemplateFailed = (error) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to import template: ${error}` }));
const createTemplateFailed = (error) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to  resource as template: ${error}` }));
const createResourceFromTemplateFailed = (error) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to create from template: ${error}` }));
const updateTemplateSucceeded = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: `Successfully updated template.` }));
const updateTemplateFailed = (error) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to update template: ${error}` }));
const deleteTemplateFailed = (error) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to delete template: ${error}` }));
const deleteTemplateSuccess = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: 'Template was deleted successfully' }));
const cloneTemplateFailed = (error) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to clone template: ${error}` }));
const cloneTemplateSuccess = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: 'Template cloned successfully' }));
const resourceSavedAsTemplate = (resourceName) => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: `Successfully saved ${resourceName.toLowerCase()} as template.` }));
const saveResourceAsTemplateFailed = (resourceName, error) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to save ${resourceName.toLowerCase()} as template: ${error}` }));
const getLabelsFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to fetch labels' }));
const createLabelFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to create label' }));
const updateLabelFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to update label' }));
const deleteLabelFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to delete label' }));
const getBucketsFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to fetch buckets' }));
const getBucketFailed = (bucketID, error) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to fetch bucket with id ${bucketID}: ${error}` }));
const readWriteCardinalityLimitReached = (message) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to write data due to plan limits: ${message}`, duration: constants["p" /* FIVE_SECONDS */], type: 'readWriteCardinalityLimitReached' }));
const readLimitReached = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Exceeded query limits.`, duration: constants["p" /* FIVE_SECONDS */], type: 'readLimitReached' }));
const rateLimitReached = (secs) => {
    const retryText = ` Please try again in ${secs} seconds`;
    return Object.assign(Object.assign({}, defaultErrorNotification), { message: `Exceeded rate limits.${secs ? retryText : ''} `, duration: constants["p" /* FIVE_SECONDS */], type: 'rateLimitReached' });
};
const resourceLimitReached = (resourceName) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Oops. It looks like you have reached the maximum number of ${resourceName} allowed as part of your plan. If you would like to upgrade and remove this restriction, reach out to support@influxdata.com.`, duration: constants["p" /* FIVE_SECONDS */], type: 'resourceLimitReached' }));
const taskNotCreated = (additionalMessage) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to create new task: ${additionalMessage}` }));
const taskCreatedSuccess = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: 'New task created successfully' }));
const taskNotFound = (additionalMessage) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to find task: ${additionalMessage}` }));
const tasksFetchFailed = (additionalMessage) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to get tasks from server: ${additionalMessage}` }));
const taskDeleteFailed = (additionalMessage) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to delete task: ${additionalMessage}` }));
const taskDeleteSuccess = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: 'Task was deleted successfully' }));
const taskCloneSuccess = (taskName) => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: `Successfully cloned task ${taskName}` }));
const taskCloneFailed = (taskName, additionalMessage) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to clone task ${taskName}: ${additionalMessage} ` }));
const taskUpdateFailed = (additionalMessage) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to update task: ${additionalMessage}` }));
const taskUpdateSuccess = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: 'Task was updated successfully' }));
const taskImportFailed = (errorMessage) => (Object.assign(Object.assign({}, defaultErrorNotification), { duration: constants["y" /* INFINITE */], message: `Failed to import Task: ${errorMessage}.` }));
const taskImportSuccess = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { duration: constants["p" /* FIVE_SECONDS */], message: `Successfully imported task.` }));
const taskRunSuccess = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { duration: constants["p" /* FIVE_SECONDS */], message: 'Task scheduled successfully' }));
const taskRunFailed = (error) => (Object.assign(Object.assign({}, defaultErrorNotification), { duration: constants["p" /* FIVE_SECONDS */], message: `Failed to run task: ${error}` }));
const taskGetFailed = (error) => (Object.assign(Object.assign({}, defaultErrorNotification), { duration: constants["p" /* FIVE_SECONDS */], message: `Failed to get runs: ${error}` }));
const getTelegrafConfigFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to get telegraf config' }));
const savingNoteFailed = (error) => (Object.assign(Object.assign({}, defaultErrorNotification), { duration: constants["p" /* FIVE_SECONDS */], message: `Failed to save note: ${error}` }));
const bucketDeleteFailed = (bucketName) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to delete bucket: "${bucketName}"` }));
const predicateDeleteFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to delete data with predicate' }));
const setFilterKeyFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to set the filter key tag' }));
const setFilterValueFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to set the filter value tag' }));
const bucketCreateSuccess = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: 'Bucket was successfully created' }));
const bucketCreateFailed = (error) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to create bucket: ${error}` }));
const bucketUpdateSuccess = (bucketName) => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: `Bucket "${bucketName}" was successfully updated` }));
const predicateDeleteSucceeded = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: 'Successfully deleted data with predicate!' }));
const bucketUpdateFailed = (error) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to update bucket: "${error}"` }));
const bucketRenameSuccess = (bucketName) => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: `Bucket was successfully renamed "${bucketName}"` }));
const bucketRenameFailed = (bucketName) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to rename bucket "${bucketName}"` }));
const addBucketLabelFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to add label to bucket' }));
const removeBucketLabelFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to remove label from bucket' }));
const orgCreateSuccess = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: 'Organization was successfully created' }));
const orgCreateFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to create organization' }));
const orgEditSuccess = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: 'Organization was successfully updated' }));
const orgEditFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to update organization' }));
const orgRenameSuccess = (orgName) => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: `Organization was successfully renamed "${orgName}"` }));
const orgRenameFailed = (orgName) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to update organization "${orgName}"` }));
const scraperDeleteSuccess = (scraperName) => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: `Scraper "${scraperName}" was successfully deleted` }));
const scraperDeleteFailed = (scraperName) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to delete scraper: "${scraperName}"` }));
const scraperCreateSuccess = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: 'Scraper was created successfully' }));
const scraperCreateFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to create scraper' }));
const scraperUpdateSuccess = (scraperName) => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: `Scraper "${scraperName}" was updated successfully` }));
const scraperUpdateFailed = (scraperName) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to update scraper: "${scraperName}"` }));
const telegrafGetFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to get telegraf configs' }));
const telegrafCreateFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to create telegraf' }));
const telegrafUpdateFailed = (telegrafName) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to update telegraf: "${telegrafName}"` }));
const addTelegrafLabelFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to add label to telegraf config` }));
const removeTelegrafLabelFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to remove label from telegraf config` }));
const authorizationsGetFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to get tokens' }));
const authorizationCreateSuccess = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: 'Token was created successfully' }));
const authorizationCreateFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to create tokens' }));
const authorizationUpdateSuccess = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: 'Token was updated successfully' }));
const authorizationUpdateFailed = (desc) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to update token: "${desc}"` }));
const authorizationDeleteSuccess = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: 'Token was deleted successfully' }));
const authorizationDeleteFailed = (desc) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to delete token: "${desc}"` }));
const authorizationCopySuccess = () => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: 'Token has been copied to clipboard' }));
const authorizationCopyFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: 'Failed to copy token to clipboard' }));
const telegrafDeleteSuccess = (telegrafName) => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: `Telegraf "${telegrafName}" was deleted successfully` }));
const telegrafDeleteFailed = (telegrafName) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to delete telegraf: "${telegrafName}"` }));
const memberAddSuccess = (username) => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: `Member "${username}" was added successfully` }));
const memberAddFailed = (message) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to add members: "${message}"` }));
const memberRemoveSuccess = (memberName) => (Object.assign(Object.assign({}, defaultSuccessNotification), { message: `Member "${memberName}" was removed successfully` }));
const memberRemoveFailed = (message) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to remove members: "${message}"` }));
const addVariableLabelFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to add label to variables` }));
const removeVariableLabelFailed = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to remove label from variables` }));
const invalidMapType = () => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Variables of type map accept two comma separated values per line` }));
const getChecksFailed = (message) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to get checks: ${message}` }));
const getCheckFailed = (message) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to get check: ${message}` }));
const getNotificationRulesFailed = (message) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to get notification rules: ${message}` }));
const getNotificationRuleFailed = (message) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to get notification rule: ${message}` }));
const createCheckFailed = (message) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to create check: ${message}` }));
const updateCheckFailed = (message) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to update check: ${message}` }));
const deleteCheckFailed = (message) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to delete check: ${message}` }));
const createRuleFailed = (message) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to create notification rule: ${message}` }));
const updateRuleFailed = (message) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to update notification rule: ${message}` }));
const deleteRuleFailed = (message) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to delete notification rule: ${message}` }));
const getViewFailed = (message) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to load resources for cell: ${message}` }));
const getEndpointFailed = (message) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to get endpoint: ${message}` }));
const getEndpointsFailed = (message) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to get endpoints: ${message}` }));
const createEndpointFailed = (message) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to create endpoint: ${message}` }));
const updateEndpointFailed = (message) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to update endpoint: ${message}` }));
const deleteEndpointFailed = (message) => (Object.assign(Object.assign({}, defaultErrorNotification), { message: `Failed to delete endpoint: ${message}` }));
const invalidJSON = (message) => {
    return Object.assign(Object.assign({}, defaultErrorNotification), { message: message
            ? `We couldn’t parse the JSON you entered because it failed with message:\n'${message}'`
            : 'We couldn’t parse the JSON you entered because it isn’t valid. Please check the formatting and try again.' });
};


/***/ }),

/***/ 359:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/normalizr/dist/normalizr.es.js
var normalizr_es = __webpack_require__(41);

// EXTERNAL MODULE: ./src/shared/actions/notifications.ts
var notifications = __webpack_require__(33);

// EXTERNAL MODULE: ./src/cloud/actions/limits.ts + 1 modules
var limits = __webpack_require__(72);

// EXTERNAL MODULE: ./src/notifications/endpoints/actions/creators.ts
var creators = __webpack_require__(729);

// EXTERNAL MODULE: ./src/labels/actions/creators.ts
var actions_creators = __webpack_require__(135);

// EXTERNAL MODULE: ./src/schemas/endpoints.ts
var schemas_endpoints = __webpack_require__(306);

// EXTERNAL MODULE: ./src/schemas/labels.ts
var labels = __webpack_require__(76);

// EXTERNAL MODULE: ./src/client/index.ts + 1 modules
var client = __webpack_require__(14);

// EXTERNAL MODULE: ./src/utils/naming.ts
var naming = __webpack_require__(312);

// EXTERNAL MODULE: ./src/organizations/selectors/index.ts
var selectors = __webpack_require__(19);

// EXTERNAL MODULE: ./src/resources/selectors/index.ts
var resources_selectors = __webpack_require__(24);

// CONCATENATED MODULE: ./src/notifications/endpoints/utils/index.ts
const toPostNotificationEndpoint = (endpoint) => {
    return Object.assign(Object.assign({}, endpoint), { status: endpoint.activeStatus });
};

// EXTERNAL MODULE: ./src/shared/copy/notifications.ts + 1 modules
var copy_notifications = __webpack_require__(35);

// EXTERNAL MODULE: ./src/types/index.ts
var types = __webpack_require__(5);

// CONCATENATED MODULE: ./src/notifications/endpoints/actions/thunks.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return getEndpoints; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return createEndpoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return updateEndpoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return updateEndpointProperties; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return deleteEndpoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addEndpointLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return deleteEndpointLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return cloneEndpoint; });














const getEndpoints = () => async (dispatch, getState) => {
    try {
        dispatch(Object(creators["h" /* setEndpoints */])(types["RemoteDataState"].Loading));
        const { id: orgID } = Object(selectors["a" /* getOrg */])(getState());
        const resp = await client["D" /* getNotificationEndpoints */]({
            query: { orgID },
        });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const endpoints = Object(normalizr_es["a" /* normalize */])(resp.data.notificationEndpoints, schemas_endpoints["a" /* arrayOfEndpoints */]);
        dispatch(Object(creators["h" /* setEndpoints */])(types["RemoteDataState"].Done, endpoints));
        dispatch(Object(limits["f" /* checkEndpointsLimits */])());
    }
    catch (error) {
        console.error(error);
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["qb" /* getEndpointsFailed */](error.message)));
        dispatch(Object(creators["h" /* setEndpoints */])(types["RemoteDataState"].Error));
    }
};
const createEndpoint = (endpoint) => async (dispatch) => {
    const data = toPostNotificationEndpoint(endpoint);
    try {
        const resp = await client["kb" /* postNotificationEndpoint */]({ data });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        const newEndpoint = Object(normalizr_es["a" /* normalize */])(resp.data, schemas_endpoints["b" /* endpointSchema */]);
        dispatch(Object(creators["g" /* setEndpoint */])(resp.data.id, types["RemoteDataState"].Done, newEndpoint));
        dispatch(Object(limits["f" /* checkEndpointsLimits */])());
    }
    catch (error) {
        console.error(error);
    }
};
const updateEndpoint = (endpoint) => async (dispatch) => {
    dispatch(Object(creators["g" /* setEndpoint */])(endpoint.id, types["RemoteDataState"].Loading));
    const data = toPostNotificationEndpoint(endpoint);
    try {
        const resp = await client["Bb" /* putNotificationEndpoint */]({
            endpointID: endpoint.id,
            data,
        });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const updates = Object(normalizr_es["a" /* normalize */])(resp.data, schemas_endpoints["b" /* endpointSchema */]);
        dispatch(Object(creators["g" /* setEndpoint */])(endpoint.id, types["RemoteDataState"].Done, updates));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(creators["g" /* setEndpoint */])(endpoint.id, types["RemoteDataState"].Error));
    }
};
const updateEndpointProperties = (endpointID, properties) => async (dispatch) => {
    dispatch(Object(creators["g" /* setEndpoint */])(endpointID, types["RemoteDataState"].Loading));
    try {
        const resp = await client["W" /* patchNotificationEndpoint */]({
            endpointID,
            data: properties,
        });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const updates = Object(normalizr_es["a" /* normalize */])(resp.data, schemas_endpoints["b" /* endpointSchema */]);
        dispatch(Object(creators["g" /* setEndpoint */])(endpointID, types["RemoteDataState"].Done, updates));
    }
    catch (error) {
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["Lc" /* updateEndpointFailed */](error.message)));
        dispatch(Object(creators["g" /* setEndpoint */])(endpointID, types["RemoteDataState"].Error));
    }
};
const deleteEndpoint = (endpointID) => async (dispatch) => {
    try {
        const resp = await client["j" /* deleteNotificationEndpoint */]({ endpointID });
        if (resp.status !== 204) {
            throw new Error(resp.data.message);
        }
        dispatch(Object(creators["e" /* removeEndpoint */])(endpointID));
        dispatch(Object(limits["f" /* checkEndpointsLimits */])());
    }
    catch (error) {
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["fb" /* deleteEndpointFailed */](error.message)));
    }
};
const addEndpointLabel = (endpointID, label) => async (dispatch) => {
    try {
        const resp = await client["lb" /* postNotificationEndpointsLabel */]({
            endpointID,
            data: { labelID: label.id },
        });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        const normLabel = Object(normalizr_es["a" /* normalize */])(resp.data.label, labels["b" /* labelSchema */]);
        dispatch(Object(actions_creators["g" /* setLabelOnResource */])(endpointID, normLabel));
    }
    catch (error) {
        console.error(error);
    }
};
const deleteEndpointLabel = (endpointID, labelID) => async (dispatch) => {
    try {
        const resp = await client["k" /* deleteNotificationEndpointsLabel */]({
            endpointID,
            labelID,
        });
        if (resp.status !== 204) {
            throw new Error(resp.data.message);
        }
        dispatch(Object(creators["f" /* removeLabelFromEndpoint */])(endpointID, labelID));
    }
    catch (error) {
        console.error(error);
    }
};
const cloneEndpoint = (endpoint) => async (dispatch, getState) => {
    try {
        const state = getState();
        const endpoints = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].NotificationEndpoints);
        const allEndpointNames = endpoints.map(r => r.name);
        const clonedName = Object(naming["a" /* incrementCloneName */])(allEndpointNames, endpoint.name);
        const resp = await client["kb" /* postNotificationEndpoint */]({
            data: Object.assign(Object.assign({}, toPostNotificationEndpoint(endpoint)), { name: clonedName }),
        });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        const clone = Object(normalizr_es["a" /* normalize */])(resp.data, schemas_endpoints["b" /* endpointSchema */]);
        dispatch(Object(creators["g" /* setEndpoint */])(resp.data.id, types["RemoteDataState"].Done, clone));
        dispatch(Object(limits["f" /* checkEndpointsLimits */])());
    }
    catch (error) {
        console.error(error);
        dispatch(Object(notifications["c" /* notify */])(copy_notifications["Q" /* createEndpointFailed */](error.message)));
    }
};


/***/ }),

/***/ 360:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/normalizr/dist/normalizr.es.js
var normalizr_es = __webpack_require__(41);

// EXTERNAL MODULE: ./src/client/index.ts + 1 modules
var client = __webpack_require__(14);

// EXTERNAL MODULE: ./src/schemas/labels.ts
var schemas_labels = __webpack_require__(76);

// EXTERNAL MODULE: ./src/types/index.ts
var types = __webpack_require__(5);

// EXTERNAL MODULE: ./src/shared/actions/notifications.ts
var notifications = __webpack_require__(33);

// EXTERNAL MODULE: ./src/shared/copy/notifications.ts + 1 modules
var copy_notifications = __webpack_require__(35);

// EXTERNAL MODULE: ./src/labels/actions/creators.ts
var creators = __webpack_require__(135);

// EXTERNAL MODULE: ./src/organizations/selectors/index.ts
var selectors = __webpack_require__(19);

// EXTERNAL MODULE: ./src/labels/constants/index.ts
var constants = __webpack_require__(247);

// CONCATENATED MODULE: ./src/labels/selectors/index.ts

const viewableLabels = (labels) => labels.filter(l => !l.name.startsWith(constants["c" /* INFLUX_LABEL_PREFIX */]));

// CONCATENATED MODULE: ./src/labels/actions/thunks.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getLabels; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return updateLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return deleteLabel; });









const getLabels = () => async (dispatch, getState) => {
    try {
        const org = Object(selectors["a" /* getOrg */])(getState());
        dispatch(Object(creators["h" /* setLabels */])(types["RemoteDataState"].Loading));
        const resp = await Object(client["C" /* getLabels */])({ query: { orgID: org.id } });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const labels = Object(normalizr_es["a" /* normalize */])(viewableLabels(resp.data.labels), schemas_labels["a" /* arrayOfLabels */]);
        dispatch(Object(creators["h" /* setLabels */])(types["RemoteDataState"].Done, labels));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(creators["h" /* setLabels */])(types["RemoteDataState"].Error));
        dispatch(Object(notifications["c" /* notify */])(Object(copy_notifications["rb" /* getLabelsFailed */])()));
    }
};
const createLabel = (name, properties) => async (dispatch, getState) => {
    const org = Object(selectors["a" /* getOrg */])(getState());
    try {
        const resp = await Object(client["jb" /* postLabel */])({
            data: {
                orgID: org.id,
                name,
                properties,
            },
        });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        const label = Object(normalizr_es["a" /* normalize */])(resp.data.label, schemas_labels["b" /* labelSchema */]);
        dispatch(Object(creators["f" /* setLabel */])(resp.data.label.id, types["RemoteDataState"].Done, label));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(notifications["c" /* notify */])(Object(copy_notifications["R" /* createLabelFailed */])()));
    }
};
const updateLabel = (id, l) => async (dispatch) => {
    try {
        dispatch(Object(creators["f" /* setLabel */])(id, types["RemoteDataState"].Loading));
        const resp = await Object(client["V" /* patchLabel */])({ labelID: id, data: l });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const label = Object(normalizr_es["a" /* normalize */])(resp.data.label, schemas_labels["b" /* labelSchema */]);
        dispatch(Object(creators["f" /* setLabel */])(id, types["RemoteDataState"].Done, label));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(notifications["c" /* notify */])(Object(copy_notifications["Mc" /* updateLabelFailed */])()));
    }
};
const deleteLabel = (id) => async (dispatch) => {
    try {
        const resp = await Object(client["i" /* deleteLabel */])({ labelID: id });
        if (resp.status !== 204) {
            throw new Error(resp.data.message);
        }
        dispatch(Object(creators["e" /* removeLabel */])(id));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(notifications["c" /* notify */])(Object(copy_notifications["gb" /* deleteLabelFailed */])()));
    }
};


/***/ }),

/***/ 393:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LabelColorType; });
var LabelColorType;
(function (LabelColorType) {
    LabelColorType["Preset"] = "preset";
    LabelColorType["Custom"] = "custom";
})(LabelColorType || (LabelColorType = {}));


/***/ }),

/***/ 394:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NoteEditorMode; });
/* harmony import */ var src_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);
var NoteEditorMode;
(function (NoteEditorMode) {
    NoteEditorMode["Adding"] = "adding";
    NoteEditorMode["Editing"] = "editing";
})(NoteEditorMode || (NoteEditorMode = {}));



/***/ }),

/***/ 395:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NotificationStyle; });
var NotificationStyle;
(function (NotificationStyle) {
    NotificationStyle["Error"] = "error";
    NotificationStyle["Success"] = "success";
    NotificationStyle["Info"] = "info";
    NotificationStyle["Primary"] = "primary";
    NotificationStyle["Warning"] = "warning";
})(NotificationStyle || (NotificationStyle = {}));


/***/ }),

/***/ 396:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return OverlayState; });
var OverlayState;
(function (OverlayState) {
    OverlayState["Open"] = "open";
    OverlayState["Closed"] = "closed";
})(OverlayState || (OverlayState = {}));


/***/ }),

/***/ 397:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CancellationError; });
class CancellationError extends Error {
    constructor(...args) {
        super(...args);
        this.name = 'CancellationError';
    }
}


/***/ }),

/***/ 398:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return timeZones; });
const timeZones = [
    'Local',
    'UTC',
    'Africa/Abidjan',
    'Africa/Accra',
    'Africa/Addis_Ababa',
    'Africa/Algiers',
    'Africa/Asmara',
    'Africa/Bamako',
    'Africa/Bangui',
    'Africa/Banjul',
    'Africa/Bissau',
    'Africa/Blantyre',
    'Africa/Brazzaville',
    'Africa/Bujumbura',
    'Africa/Cairo',
    'Africa/Casablanca',
    'Africa/Ceuta',
    'Africa/Conakry',
    'Africa/Dakar',
    'Africa/Dar_es_Salaam',
    'Africa/Djibouti',
    'Africa/Douala',
    'Africa/El_Aaiun',
    'Africa/Freetown',
    'Africa/Gaborone',
    'Africa/Harare',
    'Africa/Johannesburg',
    'Africa/Juba',
    'Africa/Kampala',
    'Africa/Khartoum',
    'Africa/Kigali',
    'Africa/Kinshasa',
    'Africa/Lagos',
    'Africa/Libreville',
    'Africa/Lome',
    'Africa/Luanda',
    'Africa/Lubumbashi',
    'Africa/Lusaka',
    'Africa/Malabo',
    'Africa/Maputo',
    'Africa/Maseru',
    'Africa/Mbabane',
    'Africa/Mogadishu',
    'Africa/Monrovia',
    'Africa/Nairobi',
    'Africa/Ndjamena',
    'Africa/Niamey',
    'Africa/Nouakchott',
    'Africa/Ouagadougou',
    'Africa/Porto-Novo',
    'Africa/Sao_Tome',
    'Africa/Timbuktu',
    'Africa/Tripoli',
    'Africa/Tunis',
    'Africa/Windhoek',
    'America/Adak',
    'America/Anchorage',
    'America/Anguilla',
    'America/Antigua',
    'America/Araguaina',
    'America/Argentina/Buenos_Aires',
    'America/Argentina/Catamarca',
    'America/Argentina/ComodRivadavia',
    'America/Argentina/Cordoba',
    'America/Argentina/Jujuy',
    'America/Argentina/La_Rioja',
    'America/Argentina/Mendoza',
    'America/Argentina/Rio_Gallegos',
    'America/Argentina/Salta',
    'America/Argentina/San_Juan',
    'America/Argentina/San_Luis',
    'America/Argentina/Tucuman',
    'America/Argentina/Ushuaia',
    'America/Aruba',
    'America/Asuncion',
    'America/Atikokan',
    'America/Atka',
    'America/Bahia',
    'America/Bahia_Banderas',
    'America/Barbados',
    'America/Belem',
    'America/Belize',
    'America/Blanc-Sablon',
    'America/Boa_Vista',
    'America/Bogota',
    'America/Boise',
    'America/Buenos_Aires',
    'America/Cambridge_Bay',
    'America/Campo_Grande',
    'America/Cancun',
    'America/Caracas',
    'America/Catamarca',
    'America/Cayenne',
    'America/Cayman',
    'America/Chicago',
    'America/Chihuahua',
    'America/Coral_Harbour',
    'America/Cordoba',
    'America/Costa_Rica',
    'America/Creston',
    'America/Cuiaba',
    'America/Curacao',
    'America/Danmarkshavn',
    'America/Dawson',
    'America/Dawson_Creek',
    'America/Denver',
    'America/Detroit',
    'America/Dominica',
    'America/Edmonton',
    'America/Eirunepe',
    'America/El_Salvador',
    'America/Ensenada',
    'America/Fort_Nelson',
    'America/Fort_Wayne',
    'America/Fortaleza',
    'America/Glace_Bay',
    'America/Godthab',
    'America/Goose_Bay',
    'America/Grand_Turk',
    'America/Grenada',
    'America/Guadeloupe',
    'America/Guatemala',
    'America/Guayaquil',
    'America/Guyana',
    'America/Halifax',
    'America/Havana',
    'America/Hermosillo',
    'America/Indiana/Indianapolis',
    'America/Indiana/Knox',
    'America/Indiana/Marengo',
    'America/Indiana/Petersburg',
    'America/Indiana/Tell_City',
    'America/Indiana/Vevay',
    'America/Indiana/Vincennes',
    'America/Indiana/Winamac',
    'America/Indianapolis',
    'America/Inuvik',
    'America/Iqaluit',
    'America/Jamaica',
    'America/Jujuy',
    'America/Juneau',
    'America/Kentucky/Louisville',
    'America/Kentucky/Monticello',
    'America/Knox_IN',
    'America/Kralendijk',
    'America/La_Paz',
    'America/Lima',
    'America/Los_Angeles',
    'America/Louisville',
    'America/Lower_Princes',
    'America/Maceio',
    'America/Managua',
    'America/Manaus',
    'America/Marigot',
    'America/Martinique',
    'America/Matamoros',
    'America/Mazatlan',
    'America/Mendoza',
    'America/Menominee',
    'America/Merida',
    'America/Metlakatla',
    'America/Mexico_City',
    'America/Miquelon',
    'America/Moncton',
    'America/Monterrey',
    'America/Montevideo',
    'America/Montreal',
    'America/Montserrat',
    'America/Nassau',
    'America/New_York',
    'America/Nipigon',
    'America/Nome',
    'America/Noronha',
    'America/North_Dakota/Beulah',
    'America/North_Dakota/Center',
    'America/North_Dakota/New_Salem',
    'America/Ojinaga',
    'America/Panama',
    'America/Pangnirtung',
    'America/Paramaribo',
    'America/Phoenix',
    'America/Port_of_Spain',
    'America/Port-au-Prince',
    'America/Porto_Acre',
    'America/Porto_Velho',
    'America/Puerto_Rico',
    'America/Punta_Arenas',
    'America/Rainy_River',
    'America/Rankin_Inlet',
    'America/Recife',
    'America/Regina',
    'America/Resolute',
    'America/Rio_Branco',
    'America/Rosario',
    'America/Santa_Isabel',
    'America/Santarem',
    'America/Santiago',
    'America/Santo_Domingo',
    'America/Sao_Paulo',
    'America/Scoresbysund',
    'America/Shiprock',
    'America/Sitka',
    'America/St_Barthelemy',
    'America/St_Johns',
    'America/St_Kitts',
    'America/St_Lucia',
    'America/St_Thomas',
    'America/St_Vincent',
    'America/Swift_Current',
    'America/Tegucigalpa',
    'America/Thule',
    'America/Thunder_Bay',
    'America/Tijuana',
    'America/Toronto',
    'America/Tortola',
    'America/Vancouver',
    'America/Virgin',
    'America/Whitehorse',
    'America/Winnipeg',
    'America/Yakutat',
    'America/Yellowknife',
    'Antarctica/Casey',
    'Antarctica/Davis',
    'Antarctica/DumontDUrville',
    'Antarctica/Macquarie',
    'Antarctica/Mawson',
    'Antarctica/McMurdo',
    'Antarctica/Palmer',
    'Antarctica/Rothera',
    'Antarctica/South_Pole',
    'Antarctica/Syowa',
    'Antarctica/Troll',
    'Antarctica/Vostok',
    'Arctic/Longyearbyen',
    'Asia/Aden',
    'Asia/Almaty',
    'Asia/Amman',
    'Asia/Anadyr',
    'Asia/Aqtau',
    'Asia/Aqtobe',
    'Asia/Ashgabat',
    'Asia/Ashkhabad',
    'Asia/Atyrau',
    'Asia/Baghdad',
    'Asia/Bahrain',
    'Asia/Baku',
    'Asia/Bangkok',
    'Asia/Barnaul',
    'Asia/Beirut',
    'Asia/Bishkek',
    'Asia/Brunei',
    'Asia/Calcutta',
    'Asia/Chita',
    'Asia/Choibalsan',
    'Asia/Chongqing',
    'Asia/Chungking',
    'Asia/Colombo',
    'Asia/Dacca',
    'Asia/Damascus',
    'Asia/Dhaka',
    'Asia/Dili',
    'Asia/Dubai',
    'Asia/Dushanbe',
    'Asia/Famagusta',
    'Asia/Gaza',
    'Asia/Harbin',
    'Asia/Hebron',
    'Asia/Ho_Chi_Minh',
    'Asia/Hong_Kong',
    'Asia/Hovd',
    'Asia/Irkutsk',
    'Asia/Istanbul',
    'Asia/Jakarta',
    'Asia/Jayapura',
    'Asia/Jerusalem',
    'Asia/Kabul',
    'Asia/Kamchatka',
    'Asia/Karachi',
    'Asia/Kashgar',
    'Asia/Kathmandu',
    'Asia/Katmandu',
    'Asia/Khandyga',
    'Asia/Kolkata',
    'Asia/Krasnoyarsk',
    'Asia/Kuala_Lumpur',
    'Asia/Kuching',
    'Asia/Kuwait',
    'Asia/Macao',
    'Asia/Macau',
    'Asia/Magadan',
    'Asia/Makassar',
    'Asia/Manila',
    'Asia/Muscat',
    'Asia/Novokuznetsk',
    'Asia/Novosibirsk',
    'Asia/Omsk',
    'Asia/Oral',
    'Asia/Phnom_Penh',
    'Asia/Pontianak',
    'Asia/Pyongyang',
    'Asia/Qatar',
    'Asia/Qyzylorda',
    'Asia/Rangoon',
    'Asia/Riyadh',
    'Asia/Saigon',
    'Asia/Sakhalin',
    'Asia/Samarkand',
    'Asia/Seoul',
    'Asia/Shanghai',
    'Asia/Singapore',
    'Asia/Srednekolymsk',
    'Asia/Taipei',
    'Asia/Tashkent',
    'Asia/Tbilisi',
    'Asia/Tehran',
    'Asia/Tel_Aviv',
    'Asia/Thimbu',
    'Asia/Thimphu',
    'Asia/Tokyo',
    'Asia/Tomsk',
    'Asia/Ujung_Pandang',
    'Asia/Ulaanbaatar',
    'Asia/Ulan_Bator',
    'Asia/Urumqi',
    'Asia/Ust-Nera',
    'Asia/Vientiane',
    'Asia/Vladivostok',
    'Asia/Yakutsk',
    'Asia/Yangon',
    'Asia/Yekaterinburg',
    'Asia/Yerevan',
    'Atlantic/Azores',
    'Atlantic/Bermuda',
    'Atlantic/Canary',
    'Atlantic/Cape_Verde',
    'Atlantic/Faeroe',
    'Atlantic/Faroe',
    'Atlantic/Jan_Mayen',
    'Atlantic/Madeira',
    'Atlantic/Reykjavik',
    'Atlantic/South_Georgia',
    'Atlantic/St_Helena',
    'Atlantic/Stanley',
    'Australia/ACT',
    'Australia/Adelaide',
    'Australia/Brisbane',
    'Australia/Broken_Hill',
    'Australia/Canberra',
    'Australia/Currie',
    'Australia/Darwin',
    'Australia/Eucla',
    'Australia/Hobart',
    'Australia/LHI',
    'Australia/Lindeman',
    'Australia/Lord_Howe',
    'Australia/Melbourne',
    'Australia/North',
    'Australia/NSW',
    'Australia/Perth',
    'Australia/Queensland',
    'Australia/South',
    'Australia/Sydney',
    'Australia/Tasmania',
    'Australia/Victoria',
    'Australia/West',
    'Australia/Yancowinna',
    'Brazil/Acre',
    'Brazil/DeNoronha',
    'Brazil/East',
    'Brazil/West',
    'Canada/Atlantic',
    'Canada/Central',
    'Canada/Eastern',
    'Canada/Mountain',
    'Canada/Newfoundland',
    'Canada/Pacific',
    'Canada/Saskatchewan',
    'Canada/Yukon',
    'CET',
    'Chile/Continental',
    'Chile/EasterIsland',
    'CST6CDT',
    'Cuba',
    'EET',
    'Egypt',
    'Eire',
    'EST',
    'EST5EDT',
    'Etc/GMT',
    'Etc/GMT+0',
    'Etc/GMT+1',
    'Etc/GMT+10',
    'Etc/GMT+11',
    'Etc/GMT+12',
    'Etc/GMT+2',
    'Etc/GMT+3',
    'Etc/GMT+4',
    'Etc/GMT+5',
    'Etc/GMT+6',
    'Etc/GMT+7',
    'Etc/GMT+8',
    'Etc/GMT+9',
    'Etc/GMT0',
    'Etc/GMT-0',
    'Etc/GMT-1',
    'Etc/GMT-10',
    'Etc/GMT-11',
    'Etc/GMT-12',
    'Etc/GMT-13',
    'Etc/GMT-14',
    'Etc/GMT-2',
    'Etc/GMT-3',
    'Etc/GMT-4',
    'Etc/GMT-5',
    'Etc/GMT-6',
    'Etc/GMT-7',
    'Etc/GMT-8',
    'Etc/GMT-9',
    'Etc/Greenwich',
    'Etc/UCT',
    'Etc/Universal',
    'Etc/UTC',
    'Etc/Zulu',
    'Europe/Amsterdam',
    'Europe/Andorra',
    'Europe/Astrakhan',
    'Europe/Athens',
    'Europe/Belfast',
    'Europe/Belgrade',
    'Europe/Berlin',
    'Europe/Bratislava',
    'Europe/Brussels',
    'Europe/Bucharest',
    'Europe/Budapest',
    'Europe/Busingen',
    'Europe/Chisinau',
    'Europe/Copenhagen',
    'Europe/Dublin',
    'Europe/Gibraltar',
    'Europe/Guernsey',
    'Europe/Helsinki',
    'Europe/Isle_of_Man',
    'Europe/Istanbul',
    'Europe/Jersey',
    'Europe/Kaliningrad',
    'Europe/Kiev',
    'Europe/Kirov',
    'Europe/Lisbon',
    'Europe/Ljubljana',
    'Europe/London',
    'Europe/Luxembourg',
    'Europe/Madrid',
    'Europe/Malta',
    'Europe/Mariehamn',
    'Europe/Minsk',
    'Europe/Monaco',
    'Europe/Moscow',
    'Asia/Nicosia',
    'Europe/Oslo',
    'Europe/Paris',
    'Europe/Podgorica',
    'Europe/Prague',
    'Europe/Riga',
    'Europe/Rome',
    'Europe/Samara',
    'Europe/San_Marino',
    'Europe/Sarajevo',
    'Europe/Saratov',
    'Europe/Simferopol',
    'Europe/Skopje',
    'Europe/Sofia',
    'Europe/Stockholm',
    'Europe/Tallinn',
    'Europe/Tirane',
    'Europe/Tiraspol',
    'Europe/Ulyanovsk',
    'Europe/Uzhgorod',
    'Europe/Vaduz',
    'Europe/Vatican',
    'Europe/Vienna',
    'Europe/Vilnius',
    'Europe/Volgograd',
    'Europe/Warsaw',
    'Europe/Zagreb',
    'Europe/Zaporozhye',
    'Europe/Zurich',
    'GB',
    'GB-Eire',
    'GMT',
    'GMT+0',
    'GMT0',
    'GMT−0',
    'Greenwich',
    'Hongkong',
    'HST',
    'Iceland',
    'Indian/Antananarivo',
    'Indian/Chagos',
    'Indian/Christmas',
    'Indian/Cocos',
    'Indian/Comoro',
    'Indian/Kerguelen',
    'Indian/Mahe',
    'Indian/Maldives',
    'Indian/Mauritius',
    'Indian/Mayotte',
    'Indian/Reunion',
    'Iran',
    'Israel',
    'Jamaica',
    'Japan',
    'Kwajalein',
    'Libya',
    'MET',
    'Mexico/BajaNorte',
    'Mexico/BajaSur',
    'Mexico/General',
    'MST',
    'MST7MDT',
    'Navajo',
    'NZ',
    'NZ-CHAT',
    'Pacific/Apia',
    'Pacific/Auckland',
    'Pacific/Bougainville',
    'Pacific/Chatham',
    'Pacific/Chuuk',
    'Pacific/Easter',
    'Pacific/Efate',
    'Pacific/Enderbury',
    'Pacific/Fakaofo',
    'Pacific/Fiji',
    'Pacific/Funafuti',
    'Pacific/Galapagos',
    'Pacific/Gambier',
    'Pacific/Guadalcanal',
    'Pacific/Guam',
    'Pacific/Honolulu',
    'Pacific/Johnston',
    'Pacific/Kiritimati',
    'Pacific/Kosrae',
    'Pacific/Kwajalein',
    'Pacific/Majuro',
    'Pacific/Marquesas',
    'Pacific/Midway',
    'Pacific/Nauru',
    'Pacific/Niue',
    'Pacific/Norfolk',
    'Pacific/Noumea',
    'Pacific/Pago_Pago',
    'Pacific/Palau',
    'Pacific/Pitcairn',
    'Pacific/Pohnpei',
    'Pacific/Ponape',
    'Pacific/Port_Moresby',
    'Pacific/Rarotonga',
    'Pacific/Saipan',
    'Pacific/Samoa',
    'Pacific/Tahiti',
    'Pacific/Tarawa',
    'Pacific/Tongatapu',
    'Pacific/Truk',
    'Pacific/Wake',
    'Pacific/Wallis',
    'Pacific/Yap',
    'Poland',
    'Portugal',
    'PRC',
    'PST8PDT',
    'ROC',
    'ROK',
    'Singapore',
    'Turkey',
    'UCT',
    'Universal',
    'US/Alaska',
    'US/Aleutian',
    'US/Arizona',
    'US/Central',
    'US/Eastern',
    'US/East-Indiana',
    'US/Hawaii',
    'US/Indiana-Starke',
    'US/Michigan',
    'US/Mountain',
    'US/Pacific',
    'US/Pacific-New',
    'US/Samoa',
    'UTC',
    'WET',
    'W-SU',
    'Zulu',
];


/***/ }),

/***/ 400:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getAJAX; });
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1078);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_utils_basepath__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(239);


const addBasepath = (url, excludeBasepath) => {
    return excludeBasepath ? url : `${Object(src_utils_basepath__WEBPACK_IMPORTED_MODULE_1__[/* getAPIBasepath */ "a"])()}${url}`;
};
async function AJAX({ url, method = 'GET', data = {}, params = {}, headers = {}, auth = null, }, excludeBasepath = false) {
    try {
        url = addBasepath(url, excludeBasepath);
        const response = await axios__WEBPACK_IMPORTED_MODULE_0___default.a.request({
            url,
            method,
            data,
            params,
            headers,
            auth,
        });
        return response;
    }
    catch (error) {
        const { response } = error;
        throw response;
    }
}
async function getAJAX(url) {
    try {
        return await axios__WEBPACK_IMPORTED_MODULE_0___default.a.request({ method: 'GET', url: addBasepath(url, false) });
    }
    catch (error) {
        console.error(error);
        throw error;
    }
}
/* harmony default export */ __webpack_exports__["a"] = (AJAX);


/***/ }),

/***/ 402:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SET_CELL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SET_CELLS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return REMOVE_CELL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return setCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return removeCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return setCells; });
const SET_CELL = 'SET_CELL';
const SET_CELLS = 'SET_CELLS';
const REMOVE_CELL = 'REMOVE_CELL';
const setCell = (id, status, schema) => ({ type: SET_CELL, id, status, schema });
const removeCell = ({ dashboardID, id }) => ({
    type: REMOVE_CELL,
    dashboardID,
    id,
});
const setCells = (dashboardID, status, schema) => ({
    type: SET_CELLS,
    dashboardID,
    status,
    schema,
});


/***/ }),

/***/ 403:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getConfigFields; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return updateConfigFields; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createNewPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return isPluginUniqueToBundle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return isPluginInBundle; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_dataLoaders_constants_pluginConfigs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(233);


const getConfigFields = (pluginName) => {
    return src_dataLoaders_constants_pluginConfigs__WEBPACK_IMPORTED_MODULE_1__[/* telegrafPluginsInfo */ "e"][pluginName].fields;
};
const updateConfigFields = (plugin, fieldName, value) => {
    return Object.assign({}, plugin, {
        config: Object.assign({}, lodash__WEBPACK_IMPORTED_MODULE_0___default.a.get(plugin, 'config', {}), {
            [fieldName]: value,
        }),
    });
};
const createNewPlugin = (name) => {
    return src_dataLoaders_constants_pluginConfigs__WEBPACK_IMPORTED_MODULE_1__[/* telegrafPluginsInfo */ "e"][name].defaults;
};
const isPluginUniqueToBundle = (telegrafPlugin, bundle, bundles) => {
    return bundles.reduce((acc, b) => {
        if (b === bundle) {
            return acc;
        }
        src_dataLoaders_constants_pluginConfigs__WEBPACK_IMPORTED_MODULE_1__[/* pluginsByBundle */ "d"][b].forEach(p => {
            if (p === telegrafPlugin) {
                acc = false;
            }
        });
        return acc;
    }, true);
};
const isPluginInBundle = (telegrafPlugin, bundle) => {
    return !!src_dataLoaders_constants_pluginConfigs__WEBPACK_IMPORTED_MODULE_1__[/* pluginsByBundle */ "d"][bundle].find(p => p === telegrafPlugin);
};


/***/ }),

/***/ 404:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return validateURI; });
const validateURI = (value) => {
    const regex = /http[s]?:\/\//;
    if (regex.test(value)) {
        return true;
    }
    return false;
};


/***/ }),

/***/ 405:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return SET_TELEGRAFS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ADD_TELEGRAF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return EDIT_TELEGRAF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return REMOVE_TELEGRAF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return SET_CURRENT_CONFIG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return setTelegrafs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return addTelegraf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return editTelegraf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return removeTelegraf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return setCurrentConfig; });
const SET_TELEGRAFS = 'SET_TELEGRAFS';
const ADD_TELEGRAF = 'ADD_TELEGRAF';
const EDIT_TELEGRAF = 'EDIT_TELEGRAF';
const REMOVE_TELEGRAF = 'REMOVE_TELEGRAF';
const SET_CURRENT_CONFIG = 'SET_CURRENT_CONFIG';
const setTelegrafs = (status, schema) => ({
    type: SET_TELEGRAFS,
    status,
    schema,
});
const addTelegraf = (schema) => ({
    type: ADD_TELEGRAF,
    schema,
});
const editTelegraf = (schema) => ({
    type: EDIT_TELEGRAF,
    schema,
});
const removeTelegraf = (id) => ({
    type: REMOVE_TELEGRAF,
    id,
});
const setCurrentConfig = (status, item) => ({
    type: SET_CURRENT_CONFIG,
    status,
    item,
});


/***/ }),

/***/ 406:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return SET_AUTH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ADD_AUTH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return EDIT_AUTH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return REMOVE_AUTH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return setAuthorizations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return addAuthorization; });
/* unused harmony export editAuthorization */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return removeAuthorization; });
const SET_AUTH = 'SET_AUTH';
const ADD_AUTH = 'ADD_AUTH';
const EDIT_AUTH = 'EDIT_AUTH';
const REMOVE_AUTH = 'REMOVE_AUTH';
const setAuthorizations = (status, schema) => ({
    type: SET_AUTH,
    status,
    schema,
});
const addAuthorization = (schema) => ({
    type: ADD_AUTH,
    schema,
});
const editAuthorization = (schema) => ({
    type: EDIT_AUTH,
    schema,
});
const removeAuthorization = (id) => ({
    type: REMOVE_AUTH,
    id,
});


/***/ }),

/***/ 414:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return updateView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return cloneUtilFunc; });
/* harmony import */ var src_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);


const getView = async (dashboardID, cellID) => {
    const resp = await src_client__WEBPACK_IMPORTED_MODULE_0__[/* getDashboardsCellsView */ "B"]({ dashboardID, cellID });
    if (resp.status !== 200) {
        throw new Error(resp.data.message);
    }
    return Object.assign(Object.assign({}, resp.data), { dashboardID, cellID, status: src_types__WEBPACK_IMPORTED_MODULE_1__["RemoteDataState"].Done });
};
const updateView = async (dashboardID, cellID, view) => {
    const resp = await src_client__WEBPACK_IMPORTED_MODULE_0__[/* patchDashboardsCellsView */ "U"]({
        dashboardID,
        cellID,
        data: view,
    });
    if (resp.status !== 200) {
        throw new Error(resp.data.message);
    }
    const viewWithIDs = Object.assign(Object.assign({}, resp.data), { dashboardID,
        cellID, status: src_types__WEBPACK_IMPORTED_MODULE_1__["RemoteDataState"].Done });
    return viewWithIDs;
};
const cloneUtilFunc = async (cells, oldDashID, clonedDashID) => {
    const pendingViews = cells.map(cell => src_client__WEBPACK_IMPORTED_MODULE_0__[/* getDashboardsCellsView */ "B"]({
        dashboardID: oldDashID,
        cellID: cell.id,
    })
        .then(res => {
        return Object.assign(Object.assign({}, res), { cellID: cell.id });
    }));
    const views = await Promise.all(pendingViews);
    if (views.length > 0 && views.some(v => v.status !== 200)) {
        throw new Error('An error occurred cloning the dashboard');
    }
    return views.map(async (v) => {
        const view = v.data;
        const cell = cells.find(c => c.id === view.id);
        if (cell) {
            const newCell = await src_client__WEBPACK_IMPORTED_MODULE_0__[/* postDashboardsCell */ "gb"]({
                dashboardID: clonedDashID,
                data: cell,
            });
            if (newCell.status !== 201) {
                throw new Error('An error occurred cloning the dashboard');
            }
            return src_client__WEBPACK_IMPORTED_MODULE_0__[/* patchDashboardsCellsView */ "U"]({
                dashboardID: clonedDashID,
                cellID: newCell.data.id,
                data: view,
            });
        }
    });
};


/***/ }),

/***/ 415:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export getView */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return updateView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return updateViewAndVariables; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getViewForTimeMachine; });
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var src_dashboards_apis__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(414);
/* harmony import */ var src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(35);
/* harmony import */ var src_schemas__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(175);
/* harmony import */ var src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(33);
/* harmony import */ var src_timeMachine_actions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(42);
/* harmony import */ var src_timeMachine_actions_queries__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(137);
/* harmony import */ var src_views_actions_creators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(241);
/* harmony import */ var src_views_selectors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(747);
/* harmony import */ var src_dashboards_selectors_index__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(217);
/* harmony import */ var src_resources_selectors__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(24);
/* harmony import */ var src_dashboards_actions_thunks__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(77);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(5);













const getView = (dashboardID, cellID) => async (dispatch) => {
    dispatch(Object(src_views_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* setView */ "e"])(cellID, src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Loading));
    try {
        const view = await Object(src_dashboards_apis__WEBPACK_IMPORTED_MODULE_1__[/* getView */ "b"])(dashboardID, cellID);
        const normView = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(view, src_schemas__WEBPACK_IMPORTED_MODULE_3__[/* viewSchema */ "p"]);
        dispatch(Object(src_views_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* setView */ "e"])(cellID, src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Done, normView));
    }
    catch (_a) {
        dispatch(Object(src_views_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* setView */ "e"])(cellID, src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Error));
    }
};
const updateView = (dashboardID, view) => async (dispatch) => {
    const viewID = view.cellID;
    dispatch(Object(src_views_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* setView */ "e"])(viewID, src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Loading));
    try {
        const newView = await Object(src_dashboards_apis__WEBPACK_IMPORTED_MODULE_1__[/* updateView */ "c"])(dashboardID, viewID, view);
        const normView = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(newView, src_schemas__WEBPACK_IMPORTED_MODULE_3__[/* viewSchema */ "p"]);
        dispatch(Object(src_views_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* setView */ "e"])(viewID, src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Done, normView));
        return newView;
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_views_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* setView */ "e"])(viewID, src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Error));
    }
};
const updateViewAndVariables = (dashboardID, view) => async (dispatch, getState) => {
    const cellID = view.cellID;
    try {
        const newView = await Object(src_dashboards_apis__WEBPACK_IMPORTED_MODULE_1__[/* updateView */ "c"])(dashboardID, cellID, view);
        const views = Object(src_views_selectors__WEBPACK_IMPORTED_MODULE_8__[/* getViewsForDashboard */ "a"])(getState(), dashboardID);
        views.splice(views.findIndex(v => v.id === newView.id), 1, newView);
        await dispatch(Object(src_dashboards_actions_thunks__WEBPACK_IMPORTED_MODULE_11__[/* refreshDashboardVariableValues */ "i"])(dashboardID, views));
        const normView = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(newView, src_schemas__WEBPACK_IMPORTED_MODULE_3__[/* viewSchema */ "p"]);
        dispatch(Object(src_views_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* setView */ "e"])(cellID, src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Done, normView));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_4__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_2__[/* cellUpdateFailed */ "K"]()));
        dispatch(Object(src_views_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* setView */ "e"])(cellID, src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Error));
    }
};
const getViewForTimeMachine = (dashboardID, cellID, timeMachineID) => async (dispatch, getState) => {
    try {
        const state = getState();
        let view = Object(src_resources_selectors__WEBPACK_IMPORTED_MODULE_10__[/* getByID */ "b"])(state, src_types__WEBPACK_IMPORTED_MODULE_12__["ResourceType"].Views, cellID);
        const timeRange = Object(src_dashboards_selectors_index__WEBPACK_IMPORTED_MODULE_9__[/* getTimeRangeByDashboardID */ "a"])(state, dashboardID);
        if (!view) {
            dispatch(Object(src_views_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* setView */ "e"])(cellID, src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Loading));
            view = (await Object(src_dashboards_apis__WEBPACK_IMPORTED_MODULE_1__[/* getView */ "b"])(dashboardID, cellID));
        }
        dispatch(Object(src_timeMachine_actions__WEBPACK_IMPORTED_MODULE_5__[/* setActiveTimeMachine */ "j"])(timeMachineID, { view, timeRange }));
        dispatch(Object(src_timeMachine_actions_queries__WEBPACK_IMPORTED_MODULE_6__[/* executeQueries */ "c"])(dashboardID));
    }
    catch (error) {
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_4__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_2__[/* getViewFailed */ "xb"](error.message)));
        dispatch(Object(src_views_actions_creators__WEBPACK_IMPORTED_MODULE_7__[/* setView */ "e"])(cellID, src_types__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"].Error));
    }
};


/***/ }),

/***/ 416:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return findBuckets; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return findKeys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return findValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return extractBoxedCol; });
/* unused harmony export extractCol */
/* unused harmony export formatTagFilterPredicate */
/* unused harmony export formatTagKeyFilterCall */
/* unused harmony export formatSearchFilterCall */
/* unused harmony export formatTimeRangeArguments */
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_shared_apis_query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(152);
/* harmony import */ var src_shared_parsing_flux_response__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(250);
/* harmony import */ var src_variables_utils_getTimeRangeVars__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(210);
/* harmony import */ var src_variables_utils_formatExpression__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(739);
/* harmony import */ var src_timeMachine_utils_queryBuilder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(300);
/* harmony import */ var src_shared_constants_timeRanges__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(134);







const DEFAULT_TIME_RANGE = src_shared_constants_timeRanges__WEBPACK_IMPORTED_MODULE_6__[/* pastThirtyDaysTimeRange */ "f"];
const DEFAULT_LIMIT = 200;
function findBuckets({ orgID }) {
    const query = `buckets()
  |> sort(columns: ["name"])
  |> limit(n: ${DEFAULT_LIMIT})`;
    return extractBoxedCol(Object(src_shared_apis_query__WEBPACK_IMPORTED_MODULE_1__[/* runQuery */ "a"])(orgID, query), 'name');
}
function findKeys({ orgID, bucket, tagsSelections, searchTerm = '', timeRange = DEFAULT_TIME_RANGE, limit = DEFAULT_LIMIT, }) {
    const tagFilters = formatTagFilterPredicate(tagsSelections);
    const searchFilter = formatSearchFilterCall(searchTerm);
    const previousKeyFilter = formatTagKeyFilterCall(tagsSelections);
    const timeRangeArguments = formatTimeRangeArguments(timeRange);
    const query = `from(bucket: "${bucket}")
  |> range(${timeRangeArguments})
  |> filter(fn: ${tagFilters})
  |> keys()
  |> keep(columns: ["_value"])
  |> distinct()${searchFilter}${previousKeyFilter}
  |> filter(fn: (r) => r._value != "_time" and r._value != "_start" and r._value !=  "_stop" and r._value != "_value")
  |> sort()
  |> limit(n: ${limit})`;
    return extractBoxedCol(Object(src_shared_apis_query__WEBPACK_IMPORTED_MODULE_1__[/* runQuery */ "a"])(orgID, query), '_value');
}
function findValues({ orgID, bucket, tagsSelections, key, searchTerm = '', timeRange = DEFAULT_TIME_RANGE, limit = DEFAULT_LIMIT, }) {
    const tagFilters = formatTagFilterPredicate(tagsSelections);
    const searchFilter = formatSearchFilterCall(searchTerm);
    const timeRangeArguments = formatTimeRangeArguments(timeRange);
    const query = `from(bucket: "${bucket}")
  |> range(${timeRangeArguments})
  |> filter(fn: ${tagFilters})
  |> keep(columns: ["${key}"])
  |> group()
  |> distinct(column: "${key}")${searchFilter}
  |> limit(n: ${limit})
  |> sort()`;
    return extractBoxedCol(Object(src_shared_apis_query__WEBPACK_IMPORTED_MODULE_1__[/* runQuery */ "a"])(orgID, query), '_value');
}
function extractBoxedCol(resp, colName) {
    const promise = resp.promise.then(result => {
        if (result.type !== 'SUCCESS') {
            return Promise.reject(new Error(result.message));
        }
        return extractCol(result.csv, colName);
    });
    return { promise, cancel: resp.cancel };
}
function extractCol(csv, colName) {
    const tables = Object(src_shared_parsing_flux_response__WEBPACK_IMPORTED_MODULE_2__[/* parseResponse */ "b"])(csv);
    const data = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(tables, '0.data', []);
    if (!data.length) {
        return [];
    }
    const colIndex = data[0].findIndex(d => d === colName);
    if (colIndex === -1) {
        throw new Error(`could not find column "${colName}" in response`);
    }
    const colValues = [];
    for (let i = 1; i < data.length; i++) {
        colValues.push(data[i][colIndex]);
    }
    return colValues;
}
function formatTagFilterPredicate(tagsSelections) {
    const validSelections = tagsSelections.filter(({ key, values }) => key && values.length);
    if (!validSelections.length) {
        return '(r) => true';
    }
    const calls = validSelections.map(tag => `(${Object(src_timeMachine_utils_queryBuilder__WEBPACK_IMPORTED_MODULE_5__[/* tagToFlux */ "g"])(tag)})`).join(' and ');
    return `(r) => ${calls}`;
}
function formatTagKeyFilterCall(tagsSelections) {
    const keys = tagsSelections.map(({ key }) => key);
    if (!keys.length) {
        return '';
    }
    const fnBody = keys.map(key => `r._value != "${key}"`).join(' and ');
    return `\n  |> filter(fn: (r) => ${fnBody})`;
}
function formatSearchFilterCall(searchTerm) {
    if (!searchTerm) {
        return '';
    }
    return `\n  |> filter(fn: (r) => r._value =~ /(?i:${searchTerm})/)`;
}
function formatTimeRangeArguments(timeRange) {
    const [start, stop] = Object(src_variables_utils_getTimeRangeVars__WEBPACK_IMPORTED_MODULE_3__[/* getTimeRangeVars */ "a"])(timeRange).map(assignment => Object(src_variables_utils_formatExpression__WEBPACK_IMPORTED_MODULE_4__[/* formatExpression */ "a"])(assignment.init));
    return `start: ${start}, stop: ${stop}`;
}


/***/ }),

/***/ 417:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getCheckVisTimeRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return useCheckYDomain; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_shared_utils_duration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(86);
/* harmony import */ var src_shared_utils_useOneWayState__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(418);
/* harmony import */ var src_shared_utils_vis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(71);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_4__);





const POINTS_PER_CHECK_PLOT = 300;
const getCheckVisTimeRange = (durationStr) => {
    const durationMultiple = Object(src_shared_utils_duration__WEBPACK_IMPORTED_MODULE_1__[/* parseDuration */ "h"])(durationStr)
        .map(({ magnitude, unit }) => `${magnitude * POINTS_PER_CHECK_PLOT}${unit}`)
        .join('');
    const lower = `now() - ${durationMultiple}`;
    return { upper: null, lower, type: 'duration' };
};
const useCheckYDomain = (data, thresholds) => {
    const dataDomain = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => Object(src_shared_utils_vis__WEBPACK_IMPORTED_MODULE_3__[/* extent */ "e"])(data), [data]);
    const initialDomain = Object(react__WEBPACK_IMPORTED_MODULE_0__["useMemo"])(() => {
        const extrema = Object(lodash__WEBPACK_IMPORTED_MODULE_4__["flatMap"])(thresholds || [], (t) => [
            t.value,
            t.min,
            t.max,
        ])
            .filter(v => v !== undefined && v !== null)
            .concat(dataDomain);
        return Object(src_shared_utils_vis__WEBPACK_IMPORTED_MODULE_3__[/* extent */ "e"])(extrema);
    }, [dataDomain, thresholds]);
    const [domain, setDomain] = Object(src_shared_utils_useOneWayState__WEBPACK_IMPORTED_MODULE_2__[/* useOneWayState */ "a"])(initialDomain);
    const resetDomain = () => setDomain(initialDomain);
    return [domain, setDomain, resetDomain];
};


/***/ }),

/***/ 418:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return useOneWayState; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

const useOneWayState = (defaultState) => {
    const isFirstRender = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])(true);
    const [state, setState] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(defaultState);
    Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
        if (isFirstRender.current) {
            isFirstRender.current = false;
            return;
        }
        setState(defaultState);
    }, [defaultState]);
    return [state, setState];
};


/***/ }),

/***/ 42:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/lodash/lodash.js
var lodash = __webpack_require__(6);

// EXTERNAL MODULE: ./src/timeMachine/actions/queryBuilder.ts
var queryBuilder = __webpack_require__(216);

// EXTERNAL MODULE: ./src/timeMachine/actions/queries.ts
var queries = __webpack_require__(137);

// EXTERNAL MODULE: ./src/variables/actions/creators.ts
var creators = __webpack_require__(164);

// EXTERNAL MODULE: ./src/alerting/actions/alertBuilder.ts
var actions_alertBuilder = __webpack_require__(128);

// EXTERNAL MODULE: ./src/dashboards/selectors/index.ts
var selectors = __webpack_require__(217);

// EXTERNAL MODULE: ./src/timeMachine/selectors/index.ts
var timeMachine_selectors = __webpack_require__(31);

// EXTERNAL MODULE: ./src/views/helpers/index.ts
var helpers = __webpack_require__(150);

// CONCATENATED MODULE: ./src/alerting/utils/customCheck.ts

function createCheckQueryFromAlertBuilder(builderConfig, { statusMessageTemplate, tags, id, name, every, offset, type, staleTime, level, timeSince, thresholds, }) {
    const dataFrom = `data = from(bucket: "${builderConfig.buckets[0]}")`;
    const filterStatements = builderConfig.tags
        .filter(tag => !!tag.values[0])
        .map(tag => `  |> filter(fn: (r) => r.${tag.key} == "${tag.values[0]}")`);
    const messageFn = `messageFn = (r) =>("${statusMessageTemplate}")`;
    const checkTags = tags
        ? tags
            .filter(t => t.key && t.value)
            .map(t => `${t.key}: "${t.value}"`)
            .join(',')
        : '';
    const checkStatement = [
        'check = {',
        `  _check_id: "${id || ''}",`,
        `  _check_name: "${name}",`,
        `  _type: "custom",`,
        `  tags: {${checkTags}},`,
        `  every: ${every}`,
        '}',
    ];
    const optionTask = [
        'option task = {',
        `  name: "${name}",`,
        `  every: ${every}, // expected to match check.every`,
        `  offset: ${offset}`,
        '}',
    ];
    if (type === 'deadman') {
        const imports = [
            'package main',
            'import "influxdata/influxdb/monitor"',
            'import "experimental"',
            'import "influxdata/influxdb/v1"',
        ];
        const dataRange = `  |> range(start: -${staleTime})`;
        const dataDefinition = [dataFrom, dataRange, ...filterStatements];
        const levelFunction = `${level.toLowerCase()} = (r) => (r.dead)`;
        const checkLevel = `${level.toLowerCase()}:${level.toLowerCase()}`;
        const queryStatement = [
            'data',
            '  |> v1.fieldsAsCols()',
            `  |> monitor.deadman(t: experimental.subDuration(from: now(), d: ${timeSince}))`,
            `  |> monitor.check(data: check, messageFn: messageFn,${checkLevel})`,
        ];
        const script = [
            imports.join('\n'),
            checkStatement.join('\n'),
            optionTask.join('\n'),
            levelFunction,
            messageFn,
            dataDefinition.join('\n'),
            queryStatement.join('\n'),
        ];
        return script.join('\n\n');
    }
    if (type === 'threshold') {
        const imports = [
            'package main',
            'import "influxdata/influxdb/monitor"',
            'import "influxdata/influxdb/v1"',
        ];
        const dataRange = `  |> range(start: -check.every)`;
        const aggregateFunction = `  |> aggregateWindow(every: check.every, fn: ${builderConfig.functions[0].name}, createEmpty: false)`;
        const dataDefinition = [
            dataFrom,
            dataRange,
            ...filterStatements,
            aggregateFunction,
        ];
        const thresholdExpressions = thresholds.map(t => {
            const fieldTag = builderConfig.tags.find(t => t.key === '_field');
            const fieldSelection = Object(lodash["get"])(fieldTag, 'values[0]');
            const beginning = `${t.level.toLowerCase()} = (r) =>(r.${fieldSelection}`;
            if (t.type === 'range') {
                if (t.within) {
                    return `${beginning} > ${t.min}) and r.${fieldSelection} < ${t.max})`;
                }
                return `${beginning} < ${t.min} and r.${fieldSelection} > ${t.max})`;
            }
            const operator = t.type === 'greater' ? '>' : '<';
            return `${beginning} ${operator} ${t.value})`;
        });
        const thresholdsDefined = thresholds.map(t => ` ${t.level.toLowerCase()}:${t.level.toLowerCase()}`);
        const queryStatement = [
            'data',
            '  |> v1.fieldsAsCols()',
            `  |> monitor.check(data: check, messageFn: messageFn,${thresholdsDefined})`,
        ];
        const script = [
            imports.join('\n'),
            checkStatement.join('\n'),
            optionTask.join('\n'),
            thresholdExpressions.join('\n'),
            messageFn,
            dataDefinition.join('\n'),
            queryStatement.join('\n'),
        ];
        return script.join('\n\n');
    }
}

// EXTERNAL MODULE: ./src/types/index.ts
var types = __webpack_require__(5);

// CONCATENATED MODULE: ./src/timeMachine/actions/index.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return setActiveTimeMachine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return setActiveTab; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "U", function() { return toggleVisOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "z", function() { return setName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "J", function() { return setTimeRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return setAutoRefresh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "K", function() { return setType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return setActiveQueryText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "x", function() { return setIsViewingRawData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return setGeom; });
/* unused harmony export setAxes */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Q", function() { return setYAxisLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "P", function() { return setYAxisBounds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return setAxisPrefix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return setAxisSuffix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "O", function() { return setYAxisBase; });
/* unused harmony export setYAxisScale */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "A", function() { return setPrefix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "G", function() { return setTickPrefix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "C", function() { return setSuffix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "H", function() { return setTickSuffix; });
/* unused harmony export setStaticLegend */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return setColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return setDecimalPlaces; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return setBackgroundThresholdColoring; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "F", function() { return setTextThresholdColoring; });
/* unused harmony export editActiveQueryWithBuilderSync */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return editActiveQueryWithBuilder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return editActiveQueryAsFlux; });
/* unused harmony export setActiveQueryIndexSync */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return setActiveQueryIndex; });
/* unused harmony export addQuerySync */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addQuery; });
/* unused harmony export removeQuerySync */
/* unused harmony export toggleQuerySync */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return removeQuery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "T", function() { return toggleQuery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "V", function() { return updateActiveQueryName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return setFieldOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "W", function() { return updateFieldOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "E", function() { return setTableOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "I", function() { return setTimeFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "M", function() { return setXColumn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "R", function() { return setYColumn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "B", function() { return setShadeBelow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return setBinSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return setColorHexes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return setFillColumns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "D", function() { return setSymbolColumns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return setBinCount; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "w", function() { return setHistogramPosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "y", function() { return setLinePosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "N", function() { return setXDomain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "S", function() { return setYDomain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "L", function() { return setXAxisLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return loadNewVEO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return loadCustomCheckQueryState; });











const setActiveTimeMachine = (activeTimeMachineID, initialState = {}) => ({
    type: 'SET_ACTIVE_TIME_MACHINE',
    payload: { activeTimeMachineID, initialState },
});
const setActiveTab = (activeTab) => ({
    type: 'SET_ACTIVE_TAB',
    payload: { activeTab },
});
const toggleVisOptions = () => ({
    type: 'TOGGLE_VIS_OPTIONS',
});
const setName = (name) => ({
    type: 'SET_VIEW_NAME',
    payload: { name },
});
const setTimeRangeSync = (timeRange) => ({
    type: 'SET_TIME_RANGE',
    payload: { timeRange },
});
const setTimeRange = (timeRange) => dispatch => {
    dispatch(setTimeRangeSync(timeRange));
    dispatch(Object(queries["e" /* saveAndExecuteQueries */])());
    dispatch(Object(queryBuilder["c" /* reloadTagSelectors */])());
};
const setAutoRefresh = (autoRefresh) => ({
    type: 'SET_AUTO_REFRESH',
    payload: { autoRefresh },
});
const setType = (type) => ({
    type: 'SET_VIEW_TYPE',
    payload: { type },
});
const setActiveQueryText = (text) => ({
    type: 'SET_ACTIVE_QUERY_TEXT',
    payload: { text },
});
const setIsViewingRawData = (isViewingRawData) => ({
    type: 'SET_IS_VIEWING_RAW_DATA',
    payload: { isViewingRawData },
});
const setGeom = (geom) => ({
    type: 'SET_GEOM',
    payload: { geom },
});
const setAxes = (axes) => ({
    type: 'SET_AXES',
    payload: { axes },
});
const setYAxisLabel = (yAxisLabel) => ({
    type: 'SET_Y_AXIS_LABEL',
    payload: { yAxisLabel },
});
const setYAxisBounds = (bounds) => ({
    type: 'SET_Y_AXIS_BOUNDS',
    payload: { bounds },
});
const setAxisPrefix = (prefix, axis) => ({
    type: 'SET_AXIS_PREFIX',
    payload: { prefix, axis },
});
const setAxisSuffix = (suffix, axis) => ({
    type: 'SET_AXIS_SUFFIX',
    payload: { suffix, axis },
});
const setYAxisBase = (base) => ({
    type: 'SET_Y_AXIS_BASE',
    payload: { base },
});
const setYAxisScale = (scale) => ({
    type: 'SET_Y_AXIS_SCALE',
    payload: { scale },
});
const setPrefix = (prefix) => ({
    type: 'SET_PREFIX',
    payload: { prefix },
});
const setTickPrefix = (tickPrefix) => ({
    type: 'SET_TICK_PREFIX',
    payload: { tickPrefix },
});
const setSuffix = (suffix) => ({
    type: 'SET_SUFFIX',
    payload: { suffix },
});
const setTickSuffix = (tickSuffix) => ({
    type: 'SET_TICK_SUFFIX',
    payload: { tickSuffix },
});
const setStaticLegend = (staticLegend) => ({
    type: 'SET_STATIC_LEGEND',
    payload: { staticLegend },
});
const setColors = (colors) => ({
    type: 'SET_COLORS',
    payload: { colors },
});
const setDecimalPlaces = (decimalPlaces) => ({
    type: 'SET_DECIMAL_PLACES',
    payload: { decimalPlaces },
});
const setBackgroundThresholdColoring = () => ({
    type: 'SET_BACKGROUND_THRESHOLD_COLORING',
});
const setTextThresholdColoring = () => ({
    type: 'SET_TEXT_THRESHOLD_COLORING',
});
const editActiveQueryWithBuilderSync = () => ({
    type: 'EDIT_ACTIVE_QUERY_WITH_BUILDER',
});
const editActiveQueryWithBuilder = () => dispatch => {
    dispatch(editActiveQueryWithBuilderSync());
    dispatch(Object(queries["e" /* saveAndExecuteQueries */])());
};
const editActiveQueryAsFlux = () => ({
    type: 'EDIT_ACTIVE_QUERY_AS_FLUX',
});
const setActiveQueryIndexSync = (activeQueryIndex) => ({
    type: 'SET_ACTIVE_QUERY_INDEX',
    payload: { activeQueryIndex },
});
const setActiveQueryIndex = (activeQueryIndex) => (dispatch) => {
    dispatch(setActiveQueryIndexSync(activeQueryIndex));
    dispatch(Object(queryBuilder["b" /* loadBuckets */])());
};
const addQuerySync = () => ({
    type: 'ADD_QUERY',
});
const addQuery = () => (dispatch) => {
    dispatch(addQuerySync());
    dispatch(Object(queryBuilder["b" /* loadBuckets */])());
};
const removeQuerySync = (queryIndex) => ({
    type: 'REMOVE_QUERY',
    payload: { queryIndex },
});
const toggleQuerySync = (queryIndex) => ({
    type: 'TOGGLE_QUERY',
    payload: { queryIndex },
});
const removeQuery = (queryIndex) => (dispatch) => {
    dispatch(removeQuerySync(queryIndex));
    dispatch(Object(queryBuilder["b" /* loadBuckets */])());
    dispatch(Object(queries["e" /* saveAndExecuteQueries */])());
};
const toggleQuery = (queryIndex) => (dispatch) => {
    dispatch(toggleQuerySync(queryIndex));
    dispatch(Object(queries["e" /* saveAndExecuteQueries */])());
};
const updateActiveQueryName = (queryName) => ({
    type: 'UPDATE_ACTIVE_QUERY_NAME',
    payload: { queryName },
});
const setFieldOptions = (fieldOptions) => ({
    type: 'SET_FIELD_OPTIONS',
    payload: { fieldOptions },
});
const updateFieldOption = (option) => ({
    type: 'UPDATE_FIELD_OPTION',
    payload: { option },
});
const setTableOptions = (tableOptions) => ({
    type: 'SET_TABLE_OPTIONS',
    payload: { tableOptions },
});
const setTimeFormat = (timeFormat) => ({
    type: 'SET_TIME_FORMAT',
    payload: { timeFormat },
});
const setXColumn = (xColumn) => ({
    type: 'SET_X_COLUMN',
    payload: { xColumn },
});
const setYColumn = (yColumn) => ({
    type: 'SET_Y_COLUMN',
    payload: { yColumn },
});
const setShadeBelow = (shadeBelow) => ({
    type: 'SET_SHADE_BELOW',
    payload: { shadeBelow },
});
const setBinSize = (binSize) => ({
    type: 'SET_BIN_SIZE',
    payload: { binSize },
});
const setColorHexes = (colors) => ({
    type: 'SET_COLOR_HEXES',
    payload: { colors },
});
const setFillColumns = (fillColumns) => ({
    type: 'SET_FILL_COLUMNS',
    payload: { fillColumns },
});
const setSymbolColumns = (symbolColumns) => ({
    type: 'SET_SYMBOL_COLUMNS',
    payload: { symbolColumns },
});
const setBinCount = (binCount) => ({
    type: 'SET_BIN_COUNT',
    payload: { binCount },
});
const setHistogramPosition = (position) => ({
    type: 'SET_HISTOGRAM_POSITION',
    payload: { position },
});
const setLinePosition = (position) => ({
    type: 'SET_LINE_POSITION',
    payload: { position },
});
const setXDomain = (xDomain) => ({
    type: 'SET_VIEW_X_DOMAIN',
    payload: { xDomain },
});
const setYDomain = (yDomain) => ({
    type: 'SET_VIEW_Y_DOMAIN',
    payload: { yDomain },
});
const setXAxisLabel = (xAxisLabel) => ({
    type: 'SET_X_AXIS_LABEL',
    payload: { xAxisLabel },
});
const loadNewVEO = (dashboardID) => (dispatch, getState) => {
    const state = getState();
    const timeRange = Object(selectors["a" /* getTimeRangeByDashboardID */])(state, dashboardID);
    dispatch(setActiveTimeMachine('veo', {
        view: Object(helpers["a" /* createView */])('xy'),
        timeRange,
    }));
    const values = Object(lodash["get"])(state, `resources.variables.values.${dashboardID}.values`, {});
    if (!Object(lodash["isEmpty"])(values)) {
        dispatch(Object(creators["q" /* setValues */])('veo', types["RemoteDataState"].Done, values));
    }
};
const loadCustomCheckQueryState = () => (dispatch, getState) => {
    const state = getState();
    const { alertBuilder } = state;
    const { builderConfig } = Object(timeMachine_selectors["a" /* getActiveQuery */])(state);
    dispatch(setActiveQueryText(createCheckQueryFromAlertBuilder(builderConfig, alertBuilder)));
    dispatch(setType('table'));
    dispatch(Object(actions_alertBuilder["a" /* convertCheckToCustom */])());
    dispatch(setActiveTab('customCheckQuery'));
};


/***/ }),

/***/ 420:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return checkQueryResult; });
const checkQueryResult = (file) => {
    const fileHead = file.slice(0, findNthIndex(file, '\n', 6));
    const lines = fileHead.split('\n').filter(line => !line.startsWith('#'));
    if (!lines.length || !lines[0].includes('error') || !lines[1]) {
        return;
    }
    const header = lines[0].split(',').map(s => s.trim());
    const row = lines[1].split(',').map(s => s.trim());
    const index = header.indexOf('error');
    if (index === -1 || !row[index]) {
        return;
    }
    const errorMessage = row[index].replace(/^"/, '').replace(/"$/, '');
    throw new Error(errorMessage);
};
const findNthIndex = (s, c, n) => {
    let count = 0;
    let i = 0;
    while (i < s.length) {
        if (s[i] == c) {
            count += 1;
        }
        if (count === n) {
            return i;
        }
        i += 1;
    }
};


/***/ }),

/***/ 421:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getScrapers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createScraper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return updateScraper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return deleteScraper; });
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var src_utils_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(87);
/* harmony import */ var src_schemas__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(175);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var src_scrapers_actions_creators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(724);
/* harmony import */ var src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(33);
/* harmony import */ var src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(35);
/* harmony import */ var src_organizations_selectors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(19);








const getScrapers = () => async (dispatch, getState) => {
    try {
        const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_7__[/* getOrg */ "a"])(getState());
        dispatch(Object(src_scrapers_actions_creators__WEBPACK_IMPORTED_MODULE_4__[/* setScrapers */ "h"])(src_types__WEBPACK_IMPORTED_MODULE_3__["RemoteDataState"].Loading));
        const resp = await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].scrapers.getAll(org.id);
        const normalized = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp, src_schemas__WEBPACK_IMPORTED_MODULE_2__[/* arrayOfScrapers */ "f"]);
        dispatch(Object(src_scrapers_actions_creators__WEBPACK_IMPORTED_MODULE_4__[/* setScrapers */ "h"])(src_types__WEBPACK_IMPORTED_MODULE_3__["RemoteDataState"].Done, normalized));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_scrapers_actions_creators__WEBPACK_IMPORTED_MODULE_4__[/* setScrapers */ "h"])(src_types__WEBPACK_IMPORTED_MODULE_3__["RemoteDataState"].Error));
    }
};
const createScraper = (scraper) => async (dispatch) => {
    try {
        const resp = await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].scrapers.create(scraper);
        const normalized = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp, src_schemas__WEBPACK_IMPORTED_MODULE_2__[/* scraperSchema */ "o"]);
        dispatch(Object(src_scrapers_actions_creators__WEBPACK_IMPORTED_MODULE_4__[/* addScraper */ "e"])(normalized));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* scraperCreateSuccess */ "lc"])()));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* scraperCreateFailed */ "kc"])()));
    }
};
const updateScraper = (scraper) => async (dispatch) => {
    try {
        const resp = await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].scrapers.update(scraper.id, scraper);
        const normalized = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp, src_schemas__WEBPACK_IMPORTED_MODULE_2__[/* scraperSchema */ "o"]);
        dispatch(Object(src_scrapers_actions_creators__WEBPACK_IMPORTED_MODULE_4__[/* editScraper */ "f"])(normalized));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* scraperUpdateSuccess */ "pc"])(scraper.name)));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* scraperUpdateFailed */ "oc"])(scraper.name)));
    }
};
const deleteScraper = (scraper) => async (dispatch) => {
    try {
        await src_utils_api__WEBPACK_IMPORTED_MODULE_1__[/* client */ "a"].scrapers.delete(scraper.id);
        dispatch(Object(src_scrapers_actions_creators__WEBPACK_IMPORTED_MODULE_4__[/* removeScraper */ "g"])(scraper.id));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* scraperDeleteSuccess */ "nc"])(scraper.name)));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_6__[/* scraperDeleteFailed */ "mc"])(scraper.name)));
    }
};


/***/ }),

/***/ 450:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_copy_to_clipboard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(451);
/* harmony import */ var react_copy_to_clipboard__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_copy_to_clipboard__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _influxdata_clockface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3);
/* harmony import */ var _influxdata_clockface__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_influxdata_clockface__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(35);
/* harmony import */ var src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(33);






class CopyButton extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleClickCopy = (e) => {
            e.stopPropagation();
            e.preventDefault();
        };
        this.handleCopyAttempt = (copiedText, isSuccessful) => {
            const { notify, onCopyText } = this.props;
            if (onCopyText) {
                notify(onCopyText(copiedText, isSuccessful));
                return;
            }
            const { contentName } = this.props;
            const text = copiedText.slice(0, 30).trimRight();
            const truncatedText = `${text}...`;
            if (isSuccessful) {
                notify(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_4__[/* copyToClipboardSuccess */ "O"])(truncatedText, contentName));
            }
            else {
                notify(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_4__[/* copyToClipboardFailed */ "N"])(truncatedText, contentName));
            }
        };
    }
    render() {
        const { textToCopy, color, size } = this.props;
        return (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_copy_to_clipboard__WEBPACK_IMPORTED_MODULE_1___default.a, { text: textToCopy, onCopy: this.handleCopyAttempt },
            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_influxdata_clockface__WEBPACK_IMPORTED_MODULE_3__["Button"], { size: size, color: color, titleText: "Copy to Clipboard", text: "Copy to Clipboard", onClick: this.handleClickCopy, testID: "button-copy" })));
    }
}
CopyButton.defaultProps = {
    size: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_3__["ComponentSize"].ExtraSmall,
    color: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_3__["ComponentColor"].Secondary,
};
const mdtp = {
    notify: src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_5__[/* notify */ "c"],
};
/* harmony default export */ __webpack_exports__["a"] = (Object(react_redux__WEBPACK_IMPORTED_MODULE_2__[/* connect */ "b"])(null, mdtp)(CopyButton));


/***/ }),

/***/ 452:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var src_buckets_constants_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(218);



class BucketsDropdown extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
    render() {
        return (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["Dropdown"], { testID: "bucket-dropdown", button: (active, onClick) => (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["Dropdown"].Button, { testID: "bucket-dropdown--button", active: active, onClick: onClick, status: this.status }, this.selectedBucketName)), menu: onCollapse => (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["Dropdown"].Menu, { onCollapse: onCollapse }, this.dropdownBuckets)) }));
    }
    get selectedBucketName() {
        const { selectedBucketID, buckets } = this.props;
        if (this.isBucketsEmpty) {
            return 'No buckets found';
        }
        return buckets.find(bucket => bucket.id === selectedBucketID).name;
    }
    get status() {
        if (this.isBucketsEmpty) {
            return _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["ComponentStatus"].Disabled;
        }
        return _influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["ComponentStatus"].Default;
    }
    get isBucketsEmpty() {
        const { buckets } = this.props;
        return !buckets || !buckets.length;
    }
    get dropdownBuckets() {
        const { buckets, onSelectBucket, selectedBucketID } = this.props;
        if (this.isBucketsEmpty) {
            return [];
        }
        const nonSystemBuckets = buckets.filter(bucket => !Object(src_buckets_constants_index__WEBPACK_IMPORTED_MODULE_2__[/* isSystemBucket */ "b"])(bucket.name));
        return nonSystemBuckets.map(b => (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_influxdata_clockface__WEBPACK_IMPORTED_MODULE_1__["Dropdown"].Item, { key: b.name, value: b, id: b.id, onClick: onSelectBucket, selected: b.id === selectedBucketID }, b.name)));
    }
}
/* harmony default export */ __webpack_exports__["a"] = (BucketsDropdown);


/***/ }),

/***/ 497:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./src/shared/apis/query.ts
var apis_query = __webpack_require__(152);

// CONCATENATED MODULE: ./src/variables/utils/resolveSelectedValue.ts
const resolveSelectedValue = (values, prevSelection, defaultSelection) => {
    if (values.includes(prevSelection)) {
        return prevSelection;
    }
    if (values.includes(defaultSelection)) {
        return defaultSelection;
    }
    return values[0];
};

// EXTERNAL MODULE: ./src/variables/utils/formatVarsOption.ts
var formatVarsOption = __webpack_require__(738);

// EXTERNAL MODULE: ./src/shared/parsing/flux/response.ts
var response = __webpack_require__(250);

// EXTERNAL MODULE: ./src/variables/utils/buildVarsOption.ts
var buildVarsOption = __webpack_require__(251);

// CONCATENATED MODULE: ./src/variables/utils/ValueFetcher.ts





const cacheKey = (url, orgID, query, variables) => {
    return `${query}\n\n${Object(formatVarsOption["a" /* formatVarsOption */])(variables)}\n\n${orgID}\n\n${url}`;
};
const extractValues = (csv, prevSelection, defaultSelection) => {
    const [table] = Object(response["b" /* parseResponse */])(csv);
    if (!table || !table.data.length) {
        throw new Error('empty variable response');
    }
    const [headerRow] = table.data;
    const valueColIndex = headerRow.indexOf('_value');
    if (valueColIndex === -1) {
        throw new Error("variable response does not contain a '_value' column");
    }
    let values = table.data.slice(1).map(row => row[valueColIndex]);
    values = [...new Set(values)];
    values.sort();
    return {
        values,
        valueType: table.dataTypes._value,
        selectedValue: resolveSelectedValue(values, prevSelection, defaultSelection),
    };
};
class ValueFetcher_DefaultValueFetcher {
    constructor() {
        this.cache = {};
    }
    fetch(url, orgID, query, variables, prevSelection, defaultSelection) {
        const key = cacheKey(url, orgID, query, variables);
        const cachedValues = this.cachedValues(key, prevSelection, defaultSelection);
        if (cachedValues) {
            return { promise: Promise.resolve(cachedValues), cancel: () => { } };
        }
        const extern = Object(buildVarsOption["a" /* buildVarsOption */])(variables);
        const request = Object(apis_query["a" /* runQuery */])(orgID, query, extern);
        const promise = request.promise.then(result => {
            if (result.type !== 'SUCCESS') {
                return Promise.reject(result.message);
            }
            const values = extractValues(result.csv, prevSelection, defaultSelection);
            this.cache[key] = values;
            return values;
        });
        return {
            promise,
            cancel: request.cancel,
        };
    }
    cachedValues(key, prevSelection, defaultSelection) {
        const cachedValues = this.cache[key];
        if (!cachedValues) {
            return null;
        }
        return Object.assign(Object.assign({}, cachedValues), { selectedValue: resolveSelectedValue(cachedValues.values, prevSelection, defaultSelection) });
    }
}
const valueFetcher = new ValueFetcher_DefaultValueFetcher();

// CONCATENATED MODULE: ./src/utils/Deferred.ts
class Deferred {
    constructor() {
        this.promise = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        });
    }
}
/* harmony default export */ var utils_Deferred = (Deferred);

// EXTERNAL MODULE: ./src/variables/utils/getVarAssignment.ts
var getVarAssignment = __webpack_require__(740);

// EXTERNAL MODULE: ./src/variables/constants/index.ts
var constants = __webpack_require__(149);

// EXTERNAL MODULE: ./src/types/index.ts
var types = __webpack_require__(5);

// EXTERNAL MODULE: ./src/types/promises.ts
var promises = __webpack_require__(397);

// CONCATENATED MODULE: ./src/variables/utils/hydrateVars.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return createVariableGraph; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return isInQuery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return collectDescendants; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return hydrateVars; });







const createVariableGraph = (allVariables) => {
    const nodesByID = {};
    for (const variable of allVariables) {
        nodesByID[variable.id] = {
            variable,
            values: null,
            parents: [],
            children: [],
            status: types["RemoteDataState"].NotStarted,
            cancel: () => { },
        };
    }
    for (const variable of allVariables) {
        if (!isQueryVar(variable)) {
            continue;
        }
        const childIDs = getVarChildren(variable, allVariables).map(child => child.id);
        for (const childID of childIDs) {
            nodesByID[variable.id].children.push(nodesByID[childID]);
            nodesByID[childID].parents.push(nodesByID[variable.id]);
        }
    }
    return Object.values(nodesByID);
};
const isQueryVar = (v) => v.arguments.type === 'query';
const isInQuery = (query, v) => !!query.match(new RegExp(`${constants["a" /* BOUNDARY_GROUP */]}${constants["b" /* OPTION_NAME */]}.${v.name}${constants["a" /* BOUNDARY_GROUP */]}`));
const getVarChildren = ({ arguments: { values: { query }, }, }, allVariables) => allVariables.filter(maybeChild => isInQuery(query, maybeChild));
const collectAncestors = (node, acc = new Set()) => {
    for (const parent of node.parents) {
        if (!acc.has(parent)) {
            acc.add(parent);
            collectAncestors(parent, acc);
        }
    }
    return [...acc];
};
const findSubgraph = (graph, variables) => {
    const subgraph = new Set();
    for (const node of graph) {
        const shouldKeep = variables.includes(node.variable) ||
            collectAncestors(node).some(ancestor => variables.includes(ancestor.variable));
        if (shouldKeep) {
            subgraph.add(node);
        }
    }
    for (const node of subgraph) {
        node.parents = node.parents.filter(node => subgraph.has(node));
        node.children = node.children.filter(node => subgraph.has(node));
    }
    return [...subgraph];
};
const errorVariableValues = (message = 'Failed to load values for variable') => ({
    values: null,
    selectedValue: null,
    valueType: null,
    error: message,
});
const mapVariableValues = (variable, prevSelection, defaultSelection) => {
    const values = Object.keys(variable.arguments.values);
    return {
        valueType: 'string',
        values,
        selectedValue: resolveSelectedValue(values, prevSelection, defaultSelection),
    };
};
const constVariableValues = (variable, prevSelection, defaultSelection) => {
    const { values } = variable.arguments;
    return {
        valueType: 'string',
        values,
        selectedValue: resolveSelectedValue(values, prevSelection, defaultSelection),
    };
};
const collectDescendants = (node, acc = new Set()) => {
    for (const child of node.children) {
        if (!acc.has(child)) {
            acc.add(child);
            collectDescendants(child, acc);
        }
    }
    return [...acc];
};
const hydrateVarsHelper = async (node, options) => {
    const variableType = node.variable.arguments.type;
    const prevSelection = options.selections[node.variable.id];
    const defaultSelection = node.variable.selected
        ? node.variable.selected[0]
        : null;
    if (variableType === 'map') {
        return mapVariableValues(node.variable, prevSelection, defaultSelection);
    }
    if (variableType === 'constant') {
        return constVariableValues(node.variable, prevSelection, defaultSelection);
    }
    const descendants = collectDescendants(node);
    const assignments = descendants.map(node => Object(getVarAssignment["a" /* getVarAssignment */])(node.variable.name, node.values));
    const { url, orgID } = options;
    const { query } = node.variable.arguments.values;
    const fetcher = options.fetcher || valueFetcher;
    const request = fetcher.fetch(url, orgID, query, assignments, prevSelection, defaultSelection);
    node.cancel = request.cancel;
    const values = await request.promise;
    return values;
};
const readyToResolve = (parent) => parent.status === types["RemoteDataState"].NotStarted &&
    parent.children.every(child => child.status === types["RemoteDataState"].Done);
const findLeaves = (graph) => graph.filter(node => node.children.length === 0 && node.status === types["RemoteDataState"].NotStarted);
const findCyclicPath = (node) => {
    try {
        findCyclicPathHelper(node, []);
    }
    catch (cyclicPath) {
        return cyclicPath;
    }
    return null;
};
const findCyclicPathHelper = (node, seen) => {
    if (seen.includes(node)) {
        throw seen;
    }
    for (const child of node.children) {
        findCyclicPathHelper(child, [...seen, node]);
    }
};
const invalidateCycles = (graph) => {
    for (const node of graph) {
        const cyclicPath = findCyclicPath(node);
        if (cyclicPath) {
            for (const invalidNode of cyclicPath) {
                invalidNode.status = types["RemoteDataState"].Error;
            }
        }
    }
};
const invalidateAncestors = (node) => {
    const ancestors = collectAncestors(node);
    for (const ancestor of ancestors) {
        ancestor.status = types["RemoteDataState"].Error;
    }
};
const extractResult = (graph) => {
    const result = {};
    for (const node of graph) {
        if (node.status === types["RemoteDataState"].Error) {
            node.values = errorVariableValues();
        }
        result[node.variable.id] = node.values;
    }
    return result;
};
const hydrateVars = (variables, allVariables, options) => {
    const graph = findSubgraph(createVariableGraph(allVariables), variables);
    invalidateCycles(graph);
    let isCancelled = false;
    const resolve = async (node) => {
        if (isCancelled) {
            return;
        }
        node.status === types["RemoteDataState"].Loading;
        try {
            node.values = await hydrateVarsHelper(node, options);
            node.status = types["RemoteDataState"].Done;
            return Promise.all(node.parents.filter(readyToResolve).map(resolve));
        }
        catch (e) {
            if (e.name === 'CancellationError') {
                return;
            }
            node.status = types["RemoteDataState"].Error;
            invalidateAncestors(node);
        }
    };
    const deferred = new utils_Deferred();
    const cancel = () => {
        isCancelled = true;
        graph.forEach(node => node.cancel());
        deferred.reject(new promises["a" /* CancellationError */]());
    };
    Promise.all(findLeaves(graph).map(resolve)).then(() => {
        deferred.resolve(extractResult(graph));
    });
    return { promise: deferred.promise, cancel };
};


/***/ }),

/***/ 5:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _alerting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(548);
/* harmony import */ var _arguments__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(550);
/* harmony import */ var _arguments__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_arguments__WEBPACK_IMPORTED_MODULE_1__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_arguments__WEBPACK_IMPORTED_MODULE_1__, "AutoRefreshStatus")) __webpack_require__.d(__webpack_exports__, "AutoRefreshStatus", function() { return _arguments__WEBPACK_IMPORTED_MODULE_1__["AutoRefreshStatus"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_arguments__WEBPACK_IMPORTED_MODULE_1__, "BundleName")) __webpack_require__.d(__webpack_exports__, "BundleName", function() { return _arguments__WEBPACK_IMPORTED_MODULE_1__["BundleName"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_arguments__WEBPACK_IMPORTED_MODULE_1__, "CancellationError")) __webpack_require__.d(__webpack_exports__, "CancellationError", function() { return _arguments__WEBPACK_IMPORTED_MODULE_1__["CancellationError"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_arguments__WEBPACK_IMPORTED_MODULE_1__, "ConfigFieldType")) __webpack_require__.d(__webpack_exports__, "ConfigFieldType", function() { return _arguments__WEBPACK_IMPORTED_MODULE_1__["ConfigFieldType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_arguments__WEBPACK_IMPORTED_MODULE_1__, "ConfigurationState")) __webpack_require__.d(__webpack_exports__, "ConfigurationState", function() { return _arguments__WEBPACK_IMPORTED_MODULE_1__["ConfigurationState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_arguments__WEBPACK_IMPORTED_MODULE_1__, "LineProtocolStep")) __webpack_require__.d(__webpack_exports__, "LineProtocolStep", function() { return _arguments__WEBPACK_IMPORTED_MODULE_1__["LineProtocolStep"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_arguments__WEBPACK_IMPORTED_MODULE_1__, "LineProtocolTab")) __webpack_require__.d(__webpack_exports__, "LineProtocolTab", function() { return _arguments__WEBPACK_IMPORTED_MODULE_1__["LineProtocolTab"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_arguments__WEBPACK_IMPORTED_MODULE_1__, "NoteEditorMode")) __webpack_require__.d(__webpack_exports__, "NoteEditorMode", function() { return _arguments__WEBPACK_IMPORTED_MODULE_1__["NoteEditorMode"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_arguments__WEBPACK_IMPORTED_MODULE_1__, "OverlayState")) __webpack_require__.d(__webpack_exports__, "OverlayState", function() { return _arguments__WEBPACK_IMPORTED_MODULE_1__["OverlayState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_arguments__WEBPACK_IMPORTED_MODULE_1__, "RemoteDataState")) __webpack_require__.d(__webpack_exports__, "RemoteDataState", function() { return _arguments__WEBPACK_IMPORTED_MODULE_1__["RemoteDataState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_arguments__WEBPACK_IMPORTED_MODULE_1__, "ResourceType")) __webpack_require__.d(__webpack_exports__, "ResourceType", function() { return _arguments__WEBPACK_IMPORTED_MODULE_1__["ResourceType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_arguments__WEBPACK_IMPORTED_MODULE_1__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _arguments__WEBPACK_IMPORTED_MODULE_1__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_arguments__WEBPACK_IMPORTED_MODULE_1__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _arguments__WEBPACK_IMPORTED_MODULE_1__["TemplateType"]; });

/* harmony import */ var _ast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(551);
/* harmony import */ var _ast__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ast__WEBPACK_IMPORTED_MODULE_2__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_ast__WEBPACK_IMPORTED_MODULE_2__, "AutoRefreshStatus")) __webpack_require__.d(__webpack_exports__, "AutoRefreshStatus", function() { return _ast__WEBPACK_IMPORTED_MODULE_2__["AutoRefreshStatus"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_ast__WEBPACK_IMPORTED_MODULE_2__, "BundleName")) __webpack_require__.d(__webpack_exports__, "BundleName", function() { return _ast__WEBPACK_IMPORTED_MODULE_2__["BundleName"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_ast__WEBPACK_IMPORTED_MODULE_2__, "CancellationError")) __webpack_require__.d(__webpack_exports__, "CancellationError", function() { return _ast__WEBPACK_IMPORTED_MODULE_2__["CancellationError"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_ast__WEBPACK_IMPORTED_MODULE_2__, "ConfigFieldType")) __webpack_require__.d(__webpack_exports__, "ConfigFieldType", function() { return _ast__WEBPACK_IMPORTED_MODULE_2__["ConfigFieldType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_ast__WEBPACK_IMPORTED_MODULE_2__, "ConfigurationState")) __webpack_require__.d(__webpack_exports__, "ConfigurationState", function() { return _ast__WEBPACK_IMPORTED_MODULE_2__["ConfigurationState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_ast__WEBPACK_IMPORTED_MODULE_2__, "LineProtocolStep")) __webpack_require__.d(__webpack_exports__, "LineProtocolStep", function() { return _ast__WEBPACK_IMPORTED_MODULE_2__["LineProtocolStep"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_ast__WEBPACK_IMPORTED_MODULE_2__, "LineProtocolTab")) __webpack_require__.d(__webpack_exports__, "LineProtocolTab", function() { return _ast__WEBPACK_IMPORTED_MODULE_2__["LineProtocolTab"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_ast__WEBPACK_IMPORTED_MODULE_2__, "NoteEditorMode")) __webpack_require__.d(__webpack_exports__, "NoteEditorMode", function() { return _ast__WEBPACK_IMPORTED_MODULE_2__["NoteEditorMode"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_ast__WEBPACK_IMPORTED_MODULE_2__, "OverlayState")) __webpack_require__.d(__webpack_exports__, "OverlayState", function() { return _ast__WEBPACK_IMPORTED_MODULE_2__["OverlayState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_ast__WEBPACK_IMPORTED_MODULE_2__, "RemoteDataState")) __webpack_require__.d(__webpack_exports__, "RemoteDataState", function() { return _ast__WEBPACK_IMPORTED_MODULE_2__["RemoteDataState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_ast__WEBPACK_IMPORTED_MODULE_2__, "ResourceType")) __webpack_require__.d(__webpack_exports__, "ResourceType", function() { return _ast__WEBPACK_IMPORTED_MODULE_2__["ResourceType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_ast__WEBPACK_IMPORTED_MODULE_2__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _ast__WEBPACK_IMPORTED_MODULE_2__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_ast__WEBPACK_IMPORTED_MODULE_2__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _ast__WEBPACK_IMPORTED_MODULE_2__["TemplateType"]; });

/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(552);
/* harmony import */ var _autoRefresh__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(553);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AutoRefreshStatus", function() { return _autoRefresh__WEBPACK_IMPORTED_MODULE_4__["a"]; });

/* harmony import */ var _buckets__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(554);
/* harmony import */ var _cloud__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(555);
/* harmony import */ var _cloud__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_cloud__WEBPACK_IMPORTED_MODULE_6__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_cloud__WEBPACK_IMPORTED_MODULE_6__, "BundleName")) __webpack_require__.d(__webpack_exports__, "BundleName", function() { return _cloud__WEBPACK_IMPORTED_MODULE_6__["BundleName"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_cloud__WEBPACK_IMPORTED_MODULE_6__, "CancellationError")) __webpack_require__.d(__webpack_exports__, "CancellationError", function() { return _cloud__WEBPACK_IMPORTED_MODULE_6__["CancellationError"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_cloud__WEBPACK_IMPORTED_MODULE_6__, "ConfigFieldType")) __webpack_require__.d(__webpack_exports__, "ConfigFieldType", function() { return _cloud__WEBPACK_IMPORTED_MODULE_6__["ConfigFieldType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_cloud__WEBPACK_IMPORTED_MODULE_6__, "ConfigurationState")) __webpack_require__.d(__webpack_exports__, "ConfigurationState", function() { return _cloud__WEBPACK_IMPORTED_MODULE_6__["ConfigurationState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_cloud__WEBPACK_IMPORTED_MODULE_6__, "LineProtocolStep")) __webpack_require__.d(__webpack_exports__, "LineProtocolStep", function() { return _cloud__WEBPACK_IMPORTED_MODULE_6__["LineProtocolStep"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_cloud__WEBPACK_IMPORTED_MODULE_6__, "LineProtocolTab")) __webpack_require__.d(__webpack_exports__, "LineProtocolTab", function() { return _cloud__WEBPACK_IMPORTED_MODULE_6__["LineProtocolTab"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_cloud__WEBPACK_IMPORTED_MODULE_6__, "NoteEditorMode")) __webpack_require__.d(__webpack_exports__, "NoteEditorMode", function() { return _cloud__WEBPACK_IMPORTED_MODULE_6__["NoteEditorMode"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_cloud__WEBPACK_IMPORTED_MODULE_6__, "OverlayState")) __webpack_require__.d(__webpack_exports__, "OverlayState", function() { return _cloud__WEBPACK_IMPORTED_MODULE_6__["OverlayState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_cloud__WEBPACK_IMPORTED_MODULE_6__, "RemoteDataState")) __webpack_require__.d(__webpack_exports__, "RemoteDataState", function() { return _cloud__WEBPACK_IMPORTED_MODULE_6__["RemoteDataState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_cloud__WEBPACK_IMPORTED_MODULE_6__, "ResourceType")) __webpack_require__.d(__webpack_exports__, "ResourceType", function() { return _cloud__WEBPACK_IMPORTED_MODULE_6__["ResourceType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_cloud__WEBPACK_IMPORTED_MODULE_6__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _cloud__WEBPACK_IMPORTED_MODULE_6__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_cloud__WEBPACK_IMPORTED_MODULE_6__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _cloud__WEBPACK_IMPORTED_MODULE_6__["TemplateType"]; });

/* harmony import */ var _codemirror__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(556);
/* harmony import */ var _codemirror__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_codemirror__WEBPACK_IMPORTED_MODULE_7__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_codemirror__WEBPACK_IMPORTED_MODULE_7__, "BundleName")) __webpack_require__.d(__webpack_exports__, "BundleName", function() { return _codemirror__WEBPACK_IMPORTED_MODULE_7__["BundleName"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_codemirror__WEBPACK_IMPORTED_MODULE_7__, "CancellationError")) __webpack_require__.d(__webpack_exports__, "CancellationError", function() { return _codemirror__WEBPACK_IMPORTED_MODULE_7__["CancellationError"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_codemirror__WEBPACK_IMPORTED_MODULE_7__, "ConfigFieldType")) __webpack_require__.d(__webpack_exports__, "ConfigFieldType", function() { return _codemirror__WEBPACK_IMPORTED_MODULE_7__["ConfigFieldType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_codemirror__WEBPACK_IMPORTED_MODULE_7__, "ConfigurationState")) __webpack_require__.d(__webpack_exports__, "ConfigurationState", function() { return _codemirror__WEBPACK_IMPORTED_MODULE_7__["ConfigurationState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_codemirror__WEBPACK_IMPORTED_MODULE_7__, "LineProtocolStep")) __webpack_require__.d(__webpack_exports__, "LineProtocolStep", function() { return _codemirror__WEBPACK_IMPORTED_MODULE_7__["LineProtocolStep"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_codemirror__WEBPACK_IMPORTED_MODULE_7__, "LineProtocolTab")) __webpack_require__.d(__webpack_exports__, "LineProtocolTab", function() { return _codemirror__WEBPACK_IMPORTED_MODULE_7__["LineProtocolTab"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_codemirror__WEBPACK_IMPORTED_MODULE_7__, "NoteEditorMode")) __webpack_require__.d(__webpack_exports__, "NoteEditorMode", function() { return _codemirror__WEBPACK_IMPORTED_MODULE_7__["NoteEditorMode"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_codemirror__WEBPACK_IMPORTED_MODULE_7__, "OverlayState")) __webpack_require__.d(__webpack_exports__, "OverlayState", function() { return _codemirror__WEBPACK_IMPORTED_MODULE_7__["OverlayState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_codemirror__WEBPACK_IMPORTED_MODULE_7__, "RemoteDataState")) __webpack_require__.d(__webpack_exports__, "RemoteDataState", function() { return _codemirror__WEBPACK_IMPORTED_MODULE_7__["RemoteDataState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_codemirror__WEBPACK_IMPORTED_MODULE_7__, "ResourceType")) __webpack_require__.d(__webpack_exports__, "ResourceType", function() { return _codemirror__WEBPACK_IMPORTED_MODULE_7__["ResourceType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_codemirror__WEBPACK_IMPORTED_MODULE_7__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _codemirror__WEBPACK_IMPORTED_MODULE_7__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_codemirror__WEBPACK_IMPORTED_MODULE_7__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _codemirror__WEBPACK_IMPORTED_MODULE_7__["TemplateType"]; });

/* harmony import */ var _colors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(393);
/* harmony import */ var _dashboards__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(394);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NoteEditorMode", function() { return _dashboards__WEBPACK_IMPORTED_MODULE_9__["a"]; });

/* harmony import */ var _dataExplorer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(557);
/* harmony import */ var _dataLoaders__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(126);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BundleName", function() { return _dataLoaders__WEBPACK_IMPORTED_MODULE_11__["a"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConfigFieldType", function() { return _dataLoaders__WEBPACK_IMPORTED_MODULE_11__["c"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConfigurationState", function() { return _dataLoaders__WEBPACK_IMPORTED_MODULE_11__["d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LineProtocolStep", function() { return _dataLoaders__WEBPACK_IMPORTED_MODULE_11__["f"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LineProtocolTab", function() { return _dataLoaders__WEBPACK_IMPORTED_MODULE_11__["g"]; });

/* harmony import */ var _filterEditor__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(558);
/* harmony import */ var _filterEditor__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_filterEditor__WEBPACK_IMPORTED_MODULE_12__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_filterEditor__WEBPACK_IMPORTED_MODULE_12__, "CancellationError")) __webpack_require__.d(__webpack_exports__, "CancellationError", function() { return _filterEditor__WEBPACK_IMPORTED_MODULE_12__["CancellationError"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_filterEditor__WEBPACK_IMPORTED_MODULE_12__, "OverlayState")) __webpack_require__.d(__webpack_exports__, "OverlayState", function() { return _filterEditor__WEBPACK_IMPORTED_MODULE_12__["OverlayState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_filterEditor__WEBPACK_IMPORTED_MODULE_12__, "RemoteDataState")) __webpack_require__.d(__webpack_exports__, "RemoteDataState", function() { return _filterEditor__WEBPACK_IMPORTED_MODULE_12__["RemoteDataState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_filterEditor__WEBPACK_IMPORTED_MODULE_12__, "ResourceType")) __webpack_require__.d(__webpack_exports__, "ResourceType", function() { return _filterEditor__WEBPACK_IMPORTED_MODULE_12__["ResourceType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_filterEditor__WEBPACK_IMPORTED_MODULE_12__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _filterEditor__WEBPACK_IMPORTED_MODULE_12__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_filterEditor__WEBPACK_IMPORTED_MODULE_12__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _filterEditor__WEBPACK_IMPORTED_MODULE_12__["TemplateType"]; });

/* harmony import */ var _flux__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(559);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RemoteDataState", function() { return _flux__WEBPACK_IMPORTED_MODULE_13__["a"]; });

/* harmony import */ var _histogram__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(560);
/* harmony import */ var _histogram__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_histogram__WEBPACK_IMPORTED_MODULE_14__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_histogram__WEBPACK_IMPORTED_MODULE_14__, "CancellationError")) __webpack_require__.d(__webpack_exports__, "CancellationError", function() { return _histogram__WEBPACK_IMPORTED_MODULE_14__["CancellationError"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_histogram__WEBPACK_IMPORTED_MODULE_14__, "OverlayState")) __webpack_require__.d(__webpack_exports__, "OverlayState", function() { return _histogram__WEBPACK_IMPORTED_MODULE_14__["OverlayState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_histogram__WEBPACK_IMPORTED_MODULE_14__, "ResourceType")) __webpack_require__.d(__webpack_exports__, "ResourceType", function() { return _histogram__WEBPACK_IMPORTED_MODULE_14__["ResourceType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_histogram__WEBPACK_IMPORTED_MODULE_14__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _histogram__WEBPACK_IMPORTED_MODULE_14__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_histogram__WEBPACK_IMPORTED_MODULE_14__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _histogram__WEBPACK_IMPORTED_MODULE_14__["TemplateType"]; });

/* harmony import */ var _hosts__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(561);
/* harmony import */ var _hosts__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_hosts__WEBPACK_IMPORTED_MODULE_15__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_hosts__WEBPACK_IMPORTED_MODULE_15__, "CancellationError")) __webpack_require__.d(__webpack_exports__, "CancellationError", function() { return _hosts__WEBPACK_IMPORTED_MODULE_15__["CancellationError"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_hosts__WEBPACK_IMPORTED_MODULE_15__, "OverlayState")) __webpack_require__.d(__webpack_exports__, "OverlayState", function() { return _hosts__WEBPACK_IMPORTED_MODULE_15__["OverlayState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_hosts__WEBPACK_IMPORTED_MODULE_15__, "ResourceType")) __webpack_require__.d(__webpack_exports__, "ResourceType", function() { return _hosts__WEBPACK_IMPORTED_MODULE_15__["ResourceType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_hosts__WEBPACK_IMPORTED_MODULE_15__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _hosts__WEBPACK_IMPORTED_MODULE_15__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_hosts__WEBPACK_IMPORTED_MODULE_15__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _hosts__WEBPACK_IMPORTED_MODULE_15__["TemplateType"]; });

/* harmony import */ var _influxAdmin__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(562);
/* harmony import */ var _influxAdmin__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_influxAdmin__WEBPACK_IMPORTED_MODULE_16__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_influxAdmin__WEBPACK_IMPORTED_MODULE_16__, "CancellationError")) __webpack_require__.d(__webpack_exports__, "CancellationError", function() { return _influxAdmin__WEBPACK_IMPORTED_MODULE_16__["CancellationError"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_influxAdmin__WEBPACK_IMPORTED_MODULE_16__, "OverlayState")) __webpack_require__.d(__webpack_exports__, "OverlayState", function() { return _influxAdmin__WEBPACK_IMPORTED_MODULE_16__["OverlayState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_influxAdmin__WEBPACK_IMPORTED_MODULE_16__, "ResourceType")) __webpack_require__.d(__webpack_exports__, "ResourceType", function() { return _influxAdmin__WEBPACK_IMPORTED_MODULE_16__["ResourceType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_influxAdmin__WEBPACK_IMPORTED_MODULE_16__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _influxAdmin__WEBPACK_IMPORTED_MODULE_16__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_influxAdmin__WEBPACK_IMPORTED_MODULE_16__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _influxAdmin__WEBPACK_IMPORTED_MODULE_16__["TemplateType"]; });

/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(563);
/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_labels__WEBPACK_IMPORTED_MODULE_17__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_labels__WEBPACK_IMPORTED_MODULE_17__, "CancellationError")) __webpack_require__.d(__webpack_exports__, "CancellationError", function() { return _labels__WEBPACK_IMPORTED_MODULE_17__["CancellationError"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_labels__WEBPACK_IMPORTED_MODULE_17__, "OverlayState")) __webpack_require__.d(__webpack_exports__, "OverlayState", function() { return _labels__WEBPACK_IMPORTED_MODULE_17__["OverlayState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_labels__WEBPACK_IMPORTED_MODULE_17__, "ResourceType")) __webpack_require__.d(__webpack_exports__, "ResourceType", function() { return _labels__WEBPACK_IMPORTED_MODULE_17__["ResourceType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_labels__WEBPACK_IMPORTED_MODULE_17__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _labels__WEBPACK_IMPORTED_MODULE_17__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_labels__WEBPACK_IMPORTED_MODULE_17__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _labels__WEBPACK_IMPORTED_MODULE_17__["TemplateType"]; });

/* harmony import */ var _layouts__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(298);
/* harmony import */ var _layouts__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(_layouts__WEBPACK_IMPORTED_MODULE_18__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_layouts__WEBPACK_IMPORTED_MODULE_18__, "CancellationError")) __webpack_require__.d(__webpack_exports__, "CancellationError", function() { return _layouts__WEBPACK_IMPORTED_MODULE_18__["CancellationError"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_layouts__WEBPACK_IMPORTED_MODULE_18__, "OverlayState")) __webpack_require__.d(__webpack_exports__, "OverlayState", function() { return _layouts__WEBPACK_IMPORTED_MODULE_18__["OverlayState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_layouts__WEBPACK_IMPORTED_MODULE_18__, "ResourceType")) __webpack_require__.d(__webpack_exports__, "ResourceType", function() { return _layouts__WEBPACK_IMPORTED_MODULE_18__["ResourceType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_layouts__WEBPACK_IMPORTED_MODULE_18__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _layouts__WEBPACK_IMPORTED_MODULE_18__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_layouts__WEBPACK_IMPORTED_MODULE_18__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _layouts__WEBPACK_IMPORTED_MODULE_18__["TemplateType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_layouts__WEBPACK_IMPORTED_MODULE_18__, "CancellationError")) __webpack_require__.d(__webpack_exports__, "CancellationError", function() { return _layouts__WEBPACK_IMPORTED_MODULE_18__["CancellationError"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_layouts__WEBPACK_IMPORTED_MODULE_18__, "OverlayState")) __webpack_require__.d(__webpack_exports__, "OverlayState", function() { return _layouts__WEBPACK_IMPORTED_MODULE_18__["OverlayState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_layouts__WEBPACK_IMPORTED_MODULE_18__, "ResourceType")) __webpack_require__.d(__webpack_exports__, "ResourceType", function() { return _layouts__WEBPACK_IMPORTED_MODULE_18__["ResourceType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_layouts__WEBPACK_IMPORTED_MODULE_18__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _layouts__WEBPACK_IMPORTED_MODULE_18__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_layouts__WEBPACK_IMPORTED_MODULE_18__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _layouts__WEBPACK_IMPORTED_MODULE_18__["TemplateType"]; });

/* harmony import */ var _links__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(564);
/* harmony import */ var _links__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(_links__WEBPACK_IMPORTED_MODULE_19__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_links__WEBPACK_IMPORTED_MODULE_19__, "CancellationError")) __webpack_require__.d(__webpack_exports__, "CancellationError", function() { return _links__WEBPACK_IMPORTED_MODULE_19__["CancellationError"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_links__WEBPACK_IMPORTED_MODULE_19__, "OverlayState")) __webpack_require__.d(__webpack_exports__, "OverlayState", function() { return _links__WEBPACK_IMPORTED_MODULE_19__["OverlayState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_links__WEBPACK_IMPORTED_MODULE_19__, "ResourceType")) __webpack_require__.d(__webpack_exports__, "ResourceType", function() { return _links__WEBPACK_IMPORTED_MODULE_19__["ResourceType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_links__WEBPACK_IMPORTED_MODULE_19__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _links__WEBPACK_IMPORTED_MODULE_19__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_links__WEBPACK_IMPORTED_MODULE_19__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _links__WEBPACK_IMPORTED_MODULE_19__["TemplateType"]; });

/* harmony import */ var _localStorage__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(565);
/* harmony import */ var _localStorage__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(_localStorage__WEBPACK_IMPORTED_MODULE_20__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_localStorage__WEBPACK_IMPORTED_MODULE_20__, "CancellationError")) __webpack_require__.d(__webpack_exports__, "CancellationError", function() { return _localStorage__WEBPACK_IMPORTED_MODULE_20__["CancellationError"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_localStorage__WEBPACK_IMPORTED_MODULE_20__, "OverlayState")) __webpack_require__.d(__webpack_exports__, "OverlayState", function() { return _localStorage__WEBPACK_IMPORTED_MODULE_20__["OverlayState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_localStorage__WEBPACK_IMPORTED_MODULE_20__, "ResourceType")) __webpack_require__.d(__webpack_exports__, "ResourceType", function() { return _localStorage__WEBPACK_IMPORTED_MODULE_20__["ResourceType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_localStorage__WEBPACK_IMPORTED_MODULE_20__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _localStorage__WEBPACK_IMPORTED_MODULE_20__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_localStorage__WEBPACK_IMPORTED_MODULE_20__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _localStorage__WEBPACK_IMPORTED_MODULE_20__["TemplateType"]; });

/* harmony import */ var _logEvent__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(566);
/* harmony import */ var _members__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(567);
/* harmony import */ var _members__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(_members__WEBPACK_IMPORTED_MODULE_22__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_members__WEBPACK_IMPORTED_MODULE_22__, "CancellationError")) __webpack_require__.d(__webpack_exports__, "CancellationError", function() { return _members__WEBPACK_IMPORTED_MODULE_22__["CancellationError"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_members__WEBPACK_IMPORTED_MODULE_22__, "OverlayState")) __webpack_require__.d(__webpack_exports__, "OverlayState", function() { return _members__WEBPACK_IMPORTED_MODULE_22__["OverlayState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_members__WEBPACK_IMPORTED_MODULE_22__, "ResourceType")) __webpack_require__.d(__webpack_exports__, "ResourceType", function() { return _members__WEBPACK_IMPORTED_MODULE_22__["ResourceType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_members__WEBPACK_IMPORTED_MODULE_22__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _members__WEBPACK_IMPORTED_MODULE_22__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_members__WEBPACK_IMPORTED_MODULE_22__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _members__WEBPACK_IMPORTED_MODULE_22__["TemplateType"]; });

/* harmony import */ var _monaco__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(568);
/* harmony import */ var _monaco__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(_monaco__WEBPACK_IMPORTED_MODULE_23__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_monaco__WEBPACK_IMPORTED_MODULE_23__, "CancellationError")) __webpack_require__.d(__webpack_exports__, "CancellationError", function() { return _monaco__WEBPACK_IMPORTED_MODULE_23__["CancellationError"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_monaco__WEBPACK_IMPORTED_MODULE_23__, "OverlayState")) __webpack_require__.d(__webpack_exports__, "OverlayState", function() { return _monaco__WEBPACK_IMPORTED_MODULE_23__["OverlayState"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_monaco__WEBPACK_IMPORTED_MODULE_23__, "ResourceType")) __webpack_require__.d(__webpack_exports__, "ResourceType", function() { return _monaco__WEBPACK_IMPORTED_MODULE_23__["ResourceType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_monaco__WEBPACK_IMPORTED_MODULE_23__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _monaco__WEBPACK_IMPORTED_MODULE_23__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_monaco__WEBPACK_IMPORTED_MODULE_23__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _monaco__WEBPACK_IMPORTED_MODULE_23__["TemplateType"]; });

/* harmony import */ var _notifications__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(395);
/* harmony import */ var _orgs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(569);
/* harmony import */ var _overlay__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(396);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OverlayState", function() { return _overlay__WEBPACK_IMPORTED_MODULE_26__["a"]; });

/* harmony import */ var _predicates__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(570);
/* harmony import */ var _predicates__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(_predicates__WEBPACK_IMPORTED_MODULE_27__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_predicates__WEBPACK_IMPORTED_MODULE_27__, "CancellationError")) __webpack_require__.d(__webpack_exports__, "CancellationError", function() { return _predicates__WEBPACK_IMPORTED_MODULE_27__["CancellationError"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_predicates__WEBPACK_IMPORTED_MODULE_27__, "ResourceType")) __webpack_require__.d(__webpack_exports__, "ResourceType", function() { return _predicates__WEBPACK_IMPORTED_MODULE_27__["ResourceType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_predicates__WEBPACK_IMPORTED_MODULE_27__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _predicates__WEBPACK_IMPORTED_MODULE_27__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_predicates__WEBPACK_IMPORTED_MODULE_27__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _predicates__WEBPACK_IMPORTED_MODULE_27__["TemplateType"]; });

/* harmony import */ var _promises__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(397);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CancellationError", function() { return _promises__WEBPACK_IMPORTED_MODULE_28__["a"]; });

/* harmony import */ var _queries__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(571);
/* harmony import */ var _redux__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(572);
/* harmony import */ var _redux__WEBPACK_IMPORTED_MODULE_30___default = /*#__PURE__*/__webpack_require__.n(_redux__WEBPACK_IMPORTED_MODULE_30__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_redux__WEBPACK_IMPORTED_MODULE_30__, "ResourceType")) __webpack_require__.d(__webpack_exports__, "ResourceType", function() { return _redux__WEBPACK_IMPORTED_MODULE_30__["ResourceType"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_redux__WEBPACK_IMPORTED_MODULE_30__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _redux__WEBPACK_IMPORTED_MODULE_30__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_redux__WEBPACK_IMPORTED_MODULE_30__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _redux__WEBPACK_IMPORTED_MODULE_30__["TemplateType"]; });

/* harmony import */ var _resources__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(573);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ResourceType", function() { return _resources__WEBPACK_IMPORTED_MODULE_31__["a"]; });

/* harmony import */ var _run__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(574);
/* harmony import */ var _run__WEBPACK_IMPORTED_MODULE_32___default = /*#__PURE__*/__webpack_require__.n(_run__WEBPACK_IMPORTED_MODULE_32__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_run__WEBPACK_IMPORTED_MODULE_32__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _run__WEBPACK_IMPORTED_MODULE_32__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_run__WEBPACK_IMPORTED_MODULE_32__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _run__WEBPACK_IMPORTED_MODULE_32__["TemplateType"]; });

/* harmony import */ var _schemas__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(575);
/* harmony import */ var _schemas__WEBPACK_IMPORTED_MODULE_33___default = /*#__PURE__*/__webpack_require__.n(_schemas__WEBPACK_IMPORTED_MODULE_33__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_schemas__WEBPACK_IMPORTED_MODULE_33__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _schemas__WEBPACK_IMPORTED_MODULE_33__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_schemas__WEBPACK_IMPORTED_MODULE_33__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _schemas__WEBPACK_IMPORTED_MODULE_33__["TemplateType"]; });

/* harmony import */ var _scrapers__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(576);
/* harmony import */ var _scrapers__WEBPACK_IMPORTED_MODULE_34___default = /*#__PURE__*/__webpack_require__.n(_scrapers__WEBPACK_IMPORTED_MODULE_34__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_scrapers__WEBPACK_IMPORTED_MODULE_34__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _scrapers__WEBPACK_IMPORTED_MODULE_34__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_scrapers__WEBPACK_IMPORTED_MODULE_34__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _scrapers__WEBPACK_IMPORTED_MODULE_34__["TemplateType"]; });

/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(577);
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_35___default = /*#__PURE__*/__webpack_require__.n(_services__WEBPACK_IMPORTED_MODULE_35__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_services__WEBPACK_IMPORTED_MODULE_35__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _services__WEBPACK_IMPORTED_MODULE_35__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_services__WEBPACK_IMPORTED_MODULE_35__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _services__WEBPACK_IMPORTED_MODULE_35__["TemplateType"]; });

/* harmony import */ var _shared__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(578);
/* harmony import */ var _shared__WEBPACK_IMPORTED_MODULE_36___default = /*#__PURE__*/__webpack_require__.n(_shared__WEBPACK_IMPORTED_MODULE_36__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_shared__WEBPACK_IMPORTED_MODULE_36__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _shared__WEBPACK_IMPORTED_MODULE_36__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_shared__WEBPACK_IMPORTED_MODULE_36__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _shared__WEBPACK_IMPORTED_MODULE_36__["TemplateType"]; });

/* harmony import */ var _sources__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(579);
/* harmony import */ var _stores__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(580);
/* harmony import */ var _stores__WEBPACK_IMPORTED_MODULE_38___default = /*#__PURE__*/__webpack_require__.n(_stores__WEBPACK_IMPORTED_MODULE_38__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_stores__WEBPACK_IMPORTED_MODULE_38__, "TaskSchedule")) __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _stores__WEBPACK_IMPORTED_MODULE_38__["TaskSchedule"]; });

/* harmony reexport (checked) */ if(__webpack_require__.o(_stores__WEBPACK_IMPORTED_MODULE_38__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _stores__WEBPACK_IMPORTED_MODULE_38__["TemplateType"]; });

/* harmony import */ var _tasks__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(581);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TaskSchedule", function() { return _tasks__WEBPACK_IMPORTED_MODULE_39__["a"]; });

/* harmony import */ var _telegraf__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(582);
/* harmony import */ var _telegraf__WEBPACK_IMPORTED_MODULE_40___default = /*#__PURE__*/__webpack_require__.n(_telegraf__WEBPACK_IMPORTED_MODULE_40__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_telegraf__WEBPACK_IMPORTED_MODULE_40__, "TemplateType")) __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _telegraf__WEBPACK_IMPORTED_MODULE_40__["TemplateType"]; });

/* harmony import */ var _templates__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(583);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TemplateType", function() { return _templates__WEBPACK_IMPORTED_MODULE_41__["a"]; });

/* harmony import */ var _timeMachine__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(584);
/* harmony import */ var _timeMachine__WEBPACK_IMPORTED_MODULE_42___default = /*#__PURE__*/__webpack_require__.n(_timeMachine__WEBPACK_IMPORTED_MODULE_42__);
/* harmony import */ var _timeZones__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(398);
/* harmony import */ var _variables__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(585);
/* harmony import */ var _views__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(586);
/* harmony import */ var _views__WEBPACK_IMPORTED_MODULE_45___default = /*#__PURE__*/__webpack_require__.n(_views__WEBPACK_IMPORTED_MODULE_45__);

















































/***/ }),

/***/ 51:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(10);

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(2);
var react_default = /*#__PURE__*/__webpack_require__.n(react);

// EXTERNAL MODULE: ./node_modules/react-redux/es/index.js + 19 modules
var es = __webpack_require__(4);

// EXTERNAL MODULE: ./src/authorizations/actions/thunks.ts
var thunks = __webpack_require__(313);

// EXTERNAL MODULE: ./src/buckets/actions/thunks.ts
var actions_thunks = __webpack_require__(252);

// EXTERNAL MODULE: ./src/checks/actions/thunks.ts + 2 modules
var checks_actions_thunks = __webpack_require__(276);

// EXTERNAL MODULE: ./src/dashboards/actions/thunks.ts
var dashboards_actions_thunks = __webpack_require__(77);

// EXTERNAL MODULE: ./src/notifications/endpoints/actions/thunks.ts + 1 modules
var endpoints_actions_thunks = __webpack_require__(359);

// EXTERNAL MODULE: ./src/labels/actions/thunks.ts + 1 modules
var labels_actions_thunks = __webpack_require__(360);

// EXTERNAL MODULE: ./src/members/actions/thunks.ts
var members_actions_thunks = __webpack_require__(749);

// EXTERNAL MODULE: ./src/notifications/rules/actions/thunks.ts
var rules_actions_thunks = __webpack_require__(314);

// EXTERNAL MODULE: ./src/dataLoaders/actions/telegrafEditor.ts
var telegrafEditor = __webpack_require__(253);

// EXTERNAL MODULE: ./src/scrapers/actions/thunks.ts
var scrapers_actions_thunks = __webpack_require__(421);

// EXTERNAL MODULE: ./src/tasks/actions/thunks.ts + 1 modules
var tasks_actions_thunks = __webpack_require__(121);

// EXTERNAL MODULE: ./src/telegrafs/actions/thunks.ts
var telegrafs_actions_thunks = __webpack_require__(254);

// EXTERNAL MODULE: ./src/templates/actions/thunks.ts
var templates_actions_thunks = __webpack_require__(112);

// EXTERNAL MODULE: ./src/variables/actions/thunks.ts
var variables_actions_thunks = __webpack_require__(127);

// EXTERNAL MODULE: ./src/types/index.ts
var types = __webpack_require__(5);

// EXTERNAL MODULE: ./src/shared/decorators/errors.tsx
var errors = __webpack_require__(11);

// EXTERNAL MODULE: ./node_modules/@influxdata/clockface/dist/index.js
var dist = __webpack_require__(3);

// CONCATENATED MODULE: ./src/resources/selectors/getResourcesStatus.ts

const getResourcesStatus = (state, resources) => {
    const statuses = resources.map(resource => {
        if (!state.resources || !state.resources[resource].status) {
            throw new Error(`RemoteDataState status for resource "${resource}" is undefined in getResourcesStatus`);
        }
        return state.resources[resource].status;
    });
    let status = types["RemoteDataState"].NotStarted;
    if (statuses.every(s => s === types["RemoteDataState"].Done)) {
        status = types["RemoteDataState"].Done;
    }
    else if (statuses.includes(types["RemoteDataState"].Error)) {
        status = types["RemoteDataState"].Error;
    }
    else if (statuses.includes(types["RemoteDataState"].Loading)) {
        status = types["RemoteDataState"].Loading;
    }
    return status;
};

// CONCATENATED MODULE: ./src/resources/components/GetResources.tsx





















let GetResources_GetResources = class GetResources extends react["PureComponent"] {
    componentDidMount() {
        const { resources } = this.props;
        const promises = [];
        resources.forEach(resource => {
            promises.push(this.getResourceDetails(resource));
        });
        Promise.all(promises);
    }
    getResourceDetails(resource) {
        switch (resource) {
            case types["ResourceType"].Dashboards: {
                return this.props.getDashboards();
            }
            case types["ResourceType"].Labels: {
                return this.props.getLabels();
            }
            case types["ResourceType"].Buckets: {
                return this.props.getBuckets();
            }
            case types["ResourceType"].Telegrafs: {
                return this.props.getTelegrafs();
            }
            case types["ResourceType"].Plugins: {
                return this.props.getPlugins();
            }
            case types["ResourceType"].Scrapers: {
                return this.props.getScrapers();
            }
            case types["ResourceType"].Variables: {
                return this.props.getVariables();
            }
            case types["ResourceType"].Tasks: {
                return this.props.getTasks();
            }
            case types["ResourceType"].Authorizations: {
                return this.props.getAuthorizations();
            }
            case types["ResourceType"].Templates: {
                return this.props.getTemplates();
            }
            case types["ResourceType"].Members: {
                return this.props.getMembers();
            }
            case types["ResourceType"].Checks: {
                return this.props.getChecks();
            }
            case types["ResourceType"].NotificationRules: {
                return this.props.getNotificationRules();
            }
            case types["ResourceType"].NotificationEndpoints: {
                return this.props.getEndpoints();
            }
            default: {
                throw new Error('incorrect resource type provided');
            }
        }
    }
    render() {
        const { children, remoteDataState } = this.props;
        return (react_default.a.createElement(dist["SpinnerContainer"], { loading: remoteDataState, spinnerComponent: react_default.a.createElement(dist["TechnoSpinner"], null) }, children));
    }
};
GetResources_GetResources = Object(tslib_es6["a" /* __decorate */])([
    errors["a" /* ErrorHandling */]
], GetResources_GetResources);
const mstp = (state, { resources }) => {
    const remoteDataState = getResourcesStatus(state, resources);
    return {
        remoteDataState,
    };
};
const mdtp = {
    getLabels: labels_actions_thunks["c" /* getLabels */],
    getBuckets: actions_thunks["e" /* getBuckets */],
    getTelegrafs: telegrafs_actions_thunks["d" /* getTelegrafs */],
    getPlugins: telegrafEditor["a" /* getPlugins */],
    getVariables: variables_actions_thunks["f" /* getVariables */],
    getScrapers: scrapers_actions_thunks["c" /* getScrapers */],
    getAuthorizations: thunks["c" /* getAuthorizations */],
    getDashboards: dashboards_actions_thunks["h" /* getDashboards */],
    getTasks: tasks_actions_thunks["j" /* getTasks */],
    getTemplates: templates_actions_thunks["k" /* getTemplates */],
    getMembers: members_actions_thunks["b" /* getMembers */],
    getChecks: checks_actions_thunks["g" /* getChecks */],
    getNotificationRules: rules_actions_thunks["f" /* getNotificationRules */],
    getEndpoints: endpoints_actions_thunks["f" /* getEndpoints */],
};
/* harmony default export */ var components_GetResources = __webpack_exports__["a"] = (Object(es["b" /* connect */])(mstp, mdtp)(GetResources_GetResources));


/***/ }),

/***/ 53:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(10);

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(2);
var react_default = /*#__PURE__*/__webpack_require__.n(react);

// EXTERNAL MODULE: ./node_modules/lodash/lodash.js
var lodash = __webpack_require__(6);
var lodash_default = /*#__PURE__*/__webpack_require__.n(lodash);

// EXTERNAL MODULE: ./node_modules/@influxdata/clockface/dist/index.js
var dist = __webpack_require__(3);

// EXTERNAL MODULE: ./node_modules/uuid/index.js
var uuid = __webpack_require__(109);
var uuid_default = /*#__PURE__*/__webpack_require__.n(uuid);

// EXTERNAL MODULE: ./src/shared/decorators/errors.tsx
var errors = __webpack_require__(11);

// EXTERNAL MODULE: ./node_modules/classnames/index.js
var classnames = __webpack_require__(34);
var classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);

// EXTERNAL MODULE: ./src/shared/components/ClickOutside.tsx
var ClickOutside = __webpack_require__(265);

// CONCATENATED MODULE: ./src/shared/components/editable_description/EditableDescription.tsx







let EditableDescription_EditableDescription = class EditableDescription extends react["Component"] {
    constructor(props) {
        super(props);
        this.handleStartEditing = () => {
            this.setState({ isEditing: true });
        };
        this.handleStopEditing = () => {
            const { workingDescription } = this.state;
            const { onUpdate } = this.props;
            onUpdate(workingDescription);
            this.setState({ isEditing: false });
        };
        this.handleInputChange = (e) => {
            this.setState({ workingDescription: e.target.value });
        };
        this.handleKeyDown = (e) => {
            const { onUpdate, description } = this.props;
            const { workingDescription } = this.state;
            if (e.key === 'Enter') {
                onUpdate(workingDescription);
                this.setState({ isEditing: false });
            }
            if (e.key === 'Escape') {
                this.setState({ isEditing: false, workingDescription: description });
            }
        };
        this.handleInputFocus = (e) => {
            e.currentTarget.select();
        };
        this.state = {
            isEditing: false,
            workingDescription: props.description,
        };
    }
    render() {
        const { description } = this.props;
        const { isEditing } = this.state;
        if (isEditing) {
            return (react_default.a.createElement("div", { className: "editable-description" },
                react_default.a.createElement(ClickOutside["a" /* ClickOutside */], { onClickOutside: this.handleStopEditing }, this.input)));
        }
        return (react_default.a.createElement("div", { className: "editable-description" },
            react_default.a.createElement("div", { className: this.previewClassName, onClick: this.handleStartEditing },
                description || 'No description',
                react_default.a.createElement(dist["Icon"], { glyph: dist["IconFont"].Pencil }))));
    }
    get input() {
        const { placeholder } = this.props;
        const { workingDescription } = this.state;
        return (react_default.a.createElement(dist["Input"], { size: dist["ComponentSize"].ExtraSmall, maxLength: 90, autoFocus: true, spellCheck: false, placeholder: placeholder, onFocus: this.handleInputFocus, onChange: this.handleInputChange, onKeyDown: this.handleKeyDown, className: "editable-description--input", value: workingDescription }));
    }
    get previewClassName() {
        const { description } = this.props;
        return classnames_default()('editable-description--preview', {
            untitled: !description,
        });
    }
};
EditableDescription_EditableDescription = Object(tslib_es6["a" /* __decorate */])([
    errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], EditableDescription_EditableDescription);
/* harmony default export */ var editable_description_EditableDescription = (EditableDescription_EditableDescription);

// CONCATENATED MODULE: ./src/clockface/components/inputs/multipleInput/Row.tsx






let Row_Row = class Row extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleClickDelete = (item) => {
            this.props.onDelete(item);
        };
        this.handleKeyDown = (value) => {
            const { onChange, index } = this.props;
            onChange(index, value);
        };
    }
    render() {
        const { item, fieldName } = this.props;
        return (react_default.a.createElement(dist["IndexList"], null,
            react_default.a.createElement(dist["IndexList"].Body, { emptyState: react_default.a.createElement("div", null), columnCount: 2 },
                react_default.a.createElement(dist["IndexList"].Row, { key: uuid_default.a.v4(), disabled: false },
                    react_default.a.createElement(dist["IndexList"].Cell, null,
                        react_default.a.createElement(editable_description_EditableDescription, { description: item.text, placeholder: `Edit ${fieldName}`, onUpdate: this.handleKeyDown })),
                    react_default.a.createElement(dist["IndexList"].Cell, { alignment: dist["Alignment"].Right },
                        react_default.a.createElement(dist["ConfirmationButton"], { onConfirm: this.handleClickDelete, returnValue: item, text: "Delete", popoverColor: dist["ComponentColor"].Danger, popoverAppearance: dist["Appearance"].Outline, color: dist["ComponentColor"].Danger, confirmationLabel: "", confirmationButtonColor: dist["ComponentColor"].Danger, confirmationButtonText: "Confirm", size: dist["ComponentSize"].ExtraSmall }))))));
    }
};
Row_Row.defaultProps = {
    confirmText: 'Delete',
};
Row_Row = Object(tslib_es6["a" /* __decorate */])([
    errors["a" /* ErrorHandling */]
], Row_Row);
/* harmony default export */ var multipleInput_Row = (Row_Row);

// CONCATENATED MODULE: ./src/clockface/components/inputs/multipleInput/MultipleRows.tsx



const Rows = ({ tags, onDeleteTag, onChange }) => {
    return (react_default.a.createElement("div", { className: "input-tag-list" }, tags.map(item => {
        return (react_default.a.createElement(multipleInput_Row, { index: tags.indexOf(item), key: uuid_default.a.v4(), item: item, onDelete: onDeleteTag, onChange: onChange }));
    })));
};
/* harmony default export */ var MultipleRows = (Rows);

// EXTERNAL MODULE: ./src/shared/utils/validateURI.ts
var validateURI = __webpack_require__(404);

// CONCATENATED MODULE: ./src/clockface/components/inputs/multipleInput/MultipleInput.tsx








const VALIDATE_DEBOUNCE_MS = 350;
var MultiInputType;
(function (MultiInputType) {
    MultiInputType["String"] = "string";
    MultiInputType["URI"] = "uri";
})(MultiInputType || (MultiInputType = {}));
let MultipleInput_MultipleInput = class MultipleInput extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleInputChange = (e) => {
            const { inputType } = this.props;
            const { value } = e.target;
            this.setState({ editingText: value });
            if (inputType === MultiInputType.URI) {
                this.debouncedValidate(value);
            }
        };
        this.handleSubmit = e => {
            e.preventDefault();
            const newItem = this.inputRef.current.value.trim();
            const { tags, onAddRow } = this.props;
            if (!this.shouldAddToList(newItem, tags)) {
                return;
            }
            this.setState({ editingText: '' });
            onAddRow(this.inputRef.current.value);
        };
        this.handleKeyDown = e => {
            if (e.key === 'Enter') {
                e.preventDefault();
                const newItem = e.target.value.trim();
                const { tags, onAddRow } = this.props;
                if (!this.shouldAddToList(newItem, tags)) {
                    return;
                }
                this.setState({ editingText: '' });
                onAddRow(e.target.value);
            }
        };
        this.handleDeleteRow = (item) => {
            this.props.onDeleteRow(item.name || item.text);
        };
        this.handleValidateURI = (value) => {
            if (Object(validateURI["a" /* validateURI */])(value)) {
                this.setState({ status: dist["ComponentStatus"].Valid });
            }
            else {
                this.setState({ status: dist["ComponentStatus"].Error });
            }
        };
        this.state = { editingText: '', status: dist["ComponentStatus"].Default };
        this.inputRef = react_default.a.createRef();
        this.debouncedValidate = lodash_default.a.debounce(this.handleValidateURI, VALIDATE_DEBOUNCE_MS);
    }
    render() {
        const { title, helpText, tags, autoFocus, onEditRow } = this.props;
        const { editingText } = this.state;
        return (react_default.a.createElement(dist["Grid"], null,
            react_default.a.createElement(dist["Grid"].Row, null,
                react_default.a.createElement(dist["Grid"].Column, { widthXS: dist["Columns"].Eight, offsetXS: dist["Columns"].One },
                    react_default.a.createElement(dist["Form"].Element, { label: title, key: title, helpText: helpText },
                        react_default.a.createElement(dist["Input"], { placeholder: `Type and hit 'Enter' to add to list of ${title}`, autocomplete: dist["AutoComplete"].Off, type: dist["InputType"].Text, onKeyDown: this.handleKeyDown, autoFocus: autoFocus || false, value: editingText, status: this.state.status, onChange: this.handleInputChange, size: dist["ComponentSize"].Medium, titleText: title, ref: this.inputRef }))),
                react_default.a.createElement(dist["Grid"].Column, { widthXS: dist["Columns"].Two },
                    react_default.a.createElement(dist["Form"].Element, { key: "submit", label: "\u00A0", style: { minHeight: '15px' } },
                        react_default.a.createElement(dist["Button"], { color: dist["ComponentColor"].Secondary, onClick: this.handleSubmit, size: dist["ComponentSize"].Medium, text: "Add", titleText: `Add to list of ${title}` })))),
            react_default.a.createElement(dist["Grid"].Row, null,
                react_default.a.createElement(dist["Grid"].Column, { widthXS: dist["Columns"].Ten, offsetXS: dist["Columns"].One },
                    react_default.a.createElement(MultipleRows, { tags: tags, onDeleteTag: this.handleDeleteRow, onChange: onEditRow })))));
    }
    shouldAddToList(item, tags) {
        return !lodash_default.a.isEmpty(item) && !tags.find(l => l === item);
    }
};
MultipleInput_MultipleInput = Object(tslib_es6["a" /* __decorate */])([
    errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], MultipleInput_MultipleInput);
/* harmony default export */ var multipleInput_MultipleInput = (MultipleInput_MultipleInput);

// CONCATENATED MODULE: ./src/clockface/components/wizard/WizardFullScreen.tsx

const WizardFullScreen = (props) => {
    return (react_default.a.createElement(react_default.a.Fragment, null,
        react_default.a.createElement("div", { className: "wizard--full-screen" },
            props.children,
            react_default.a.createElement("div", { className: "wizard--credits", "data-testid": "credits" },
                "Powered by ",
                react_default.a.createElement("span", { className: "icon cubo-uniform" }),
                ' ',
                react_default.a.createElement("a", { href: "https://www.influxdata.com/", target: "_blank" }, "InfluxData"))),
        react_default.a.createElement("div", { className: "auth-image" })));
};
/* harmony default export */ var wizard_WizardFullScreen = (WizardFullScreen);

// CONCATENATED MODULE: ./src/clockface/components/wizard/WizardOverlay.tsx




let WizardOverlay_WizardOverlay = class WizardOverlay extends react["PureComponent"] {
    render() {
        const { title, maxWidth, children, footer, onDismiss } = this.props;
        return (react_default.a.createElement(dist["Overlay"], { visible: true },
            react_default.a.createElement(dist["Overlay"].Container, { maxWidth: maxWidth },
                react_default.a.createElement(dist["Overlay"].Header, { title: title, onDismiss: onDismiss }),
                react_default.a.createElement(dist["Overlay"].Body, null,
                    react_default.a.createElement("div", { className: "data-loading--overlay" }, children)),
                footer && react_default.a.createElement(dist["Overlay"].Footer, null, footer))));
    }
};
WizardOverlay_WizardOverlay.defaultProps = {
    maxWidth: 1200,
};
WizardOverlay_WizardOverlay = Object(tslib_es6["a" /* __decorate */])([
    errors["a" /* ErrorHandling */]
], WizardOverlay_WizardOverlay);
/* harmony default export */ var wizard_WizardOverlay = (WizardOverlay_WizardOverlay);

// CONCATENATED MODULE: ./src/clockface/components/wizard/WizardProgressHeader.tsx

const WizardProgressHeader = (props) => {
    const { children } = props;
    return react_default.a.createElement("div", { className: "wizard--progress-header" }, children);
};
/* harmony default export */ var wizard_WizardProgressHeader = (WizardProgressHeader);

// EXTERNAL MODULE: ./src/clockface/constants/wizard.ts
var wizard = __webpack_require__(244);

// CONCATENATED MODULE: ./src/clockface/components/wizard/ProgressBar.tsx





let ProgressBar_ProgressBar = class ProgressBar extends react["PureComponent"] {
    constructor() {
        super(...arguments);
        this.handleSetCurrentStep = (i) => () => {
            const { handleSetCurrentStep, currentStepIndex } = this.props;
            const isAfterCurrentUnskippableStep = !this.isStepSkippable && i > currentStepIndex;
            const isAfterNextUnskippableStep = this.nextNonSkippableStep !== -1 && i > this.nextNonSkippableStep;
            const preventSkip = isAfterCurrentUnskippableStep || isAfterNextUnskippableStep;
            if (preventSkip) {
                return;
            }
            handleSetCurrentStep(i);
        };
    }
    render() {
        return react_default.a.createElement("div", { className: "wizard--progress-bar" }, this.WizardProgress);
    }
    get nextNonSkippableStep() {
        const { currentStepIndex, stepSkippable, stepStatuses } = this.props;
        return lodash_default.a.findIndex(stepSkippable, (isSkippable, i) => {
            return (!isSkippable &&
                i > currentStepIndex &&
                stepStatuses[i] !== wizard["b" /* StepStatus */].Complete);
        });
    }
    get isStepSkippable() {
        const { stepSkippable, stepStatuses, currentStepIndex } = this.props;
        return (stepSkippable[currentStepIndex] ||
            stepStatuses[currentStepIndex] === wizard["b" /* StepStatus */].Complete);
    }
    getStepClass(i) {
        if (!this.isStepSkippable && i > this.props.currentStepIndex) {
            return 'wizard--progress-button unclickable';
        }
        return 'wizard--progress-button';
    }
    get WizardProgress() {
        const { hideFirstStep, stepStatuses, stepTitles, stepTestIds, currentStepIndex, } = this.props;
        const lastIndex = stepStatuses.length - 1;
        const progressBar = stepStatuses.reduce((acc, stepStatus, i) => {
            if (hideFirstStep && i === 0) {
                return [...acc];
            }
            let currentStep = '';
            if (i === currentStepIndex && stepStatus !== wizard["b" /* StepStatus */].Error) {
                currentStep = 'current';
            }
            const stepEle = (react_default.a.createElement("div", { key: `stepEle${i}`, className: this.getStepClass(i), onClick: this.handleSetCurrentStep(i) },
                react_default.a.createElement("span", { className: `wizard--progress-icon ${currentStep || stepStatus}` },
                    react_default.a.createElement("span", { className: `icon ${stepStatus}` })),
                react_default.a.createElement("div", { className: `wizard--progress-title ${currentStep || stepStatus}`, "data-testid": stepTestIds[i] }, stepTitles[i])));
            if (i === lastIndex) {
                return [...acc, stepEle];
            }
            let connectorStatus = wizard["a" /* ConnectorState */].None;
            if (i === currentStepIndex && stepStatus !== wizard["b" /* StepStatus */].Error) {
                connectorStatus = wizard["a" /* ConnectorState */].Some;
            }
            if (i === lastIndex || stepStatus === wizard["b" /* StepStatus */].Complete) {
                connectorStatus = wizard["a" /* ConnectorState */].Full;
            }
            const connectorEle = (react_default.a.createElement("span", { key: i, className: `wizard--progress-connector wizard--progress-connector--${connectorStatus ||
                    wizard["a" /* ConnectorState */].None}` }));
            return [...acc, stepEle, connectorEle];
        }, []);
        return progressBar;
    }
};
ProgressBar_ProgressBar = Object(tslib_es6["a" /* __decorate */])([
    errors["a" /* ErrorHandling */]
], ProgressBar_ProgressBar);
/* harmony default export */ var wizard_ProgressBar = (ProgressBar_ProgressBar);

// CONCATENATED MODULE: ./src/clockface/components/context_menu/ContextMenuItem.tsx


class ContextMenuItem_ContextMenuItem extends react["Component"] {
    constructor() {
        super(...arguments);
        this.handleClick = () => {
            const { action, onCollapseMenu, value } = this.props;
            action(value);
            if (onCollapseMenu) {
                onCollapseMenu();
            }
        };
    }
    render() {
        const { label, disabled, testID } = this.props;
        return (react_default.a.createElement("button", { className: this.className, onClick: this.handleClick, disabled: disabled, "data-testid": testID },
            label,
            this.description));
    }
    get className() {
        const { disabled } = this.props;
        return classnames_default()('context-menu--item', {
            'context-menu--item__disabled': disabled,
        });
    }
    get description() {
        const { description } = this.props;
        if (description) {
            return react_default.a.createElement("div", { className: "contex-menu--item-description" }, description);
        }
    }
}
ContextMenuItem_ContextMenuItem.defaultProps = {
    description: '',
    testID: 'context-menu-item',
};
/* harmony default export */ var context_menu_ContextMenuItem = (ContextMenuItem_ContextMenuItem);

// CONCATENATED MODULE: ./src/clockface/components/context_menu/ContextMenu.tsx








let ContextMenu_ContextMenu = class ContextMenu extends react["Component"] {
    constructor(props) {
        super(props);
        this.handleExpandMenu = () => {
            const { onBoostZIndex } = this.props;
            if (onBoostZIndex) {
                onBoostZIndex(true);
            }
            this.setState({ isExpanded: true });
        };
        this.handleCollapseMenu = () => {
            const { onBoostZIndex } = this.props;
            if (onBoostZIndex) {
                onBoostZIndex(false);
            }
            this.setState({ isExpanded: false });
        };
        this.state = {
            isExpanded: false,
        };
    }
    render() {
        const { icon, text, shape, color, testID } = this.props;
        return (react_default.a.createElement(ClickOutside["a" /* ClickOutside */], { onClickOutside: this.handleCollapseMenu },
            react_default.a.createElement("div", { className: "context-menu--container" },
                react_default.a.createElement(dist["Button"], { className: this.toggleClassName, onClick: this.handleExpandMenu, text: text, shape: shape, icon: icon, size: dist["ComponentSize"].ExtraSmall, color: color, testID: testID }),
                this.menu)));
    }
    get menu() {
        const { children } = this.props;
        return (react_default.a.createElement("div", { className: this.menuClassName },
            react_default.a.createElement("div", { className: this.listClassName }, react_default.a.Children.map(children, (child) => {
                if (child.type === context_menu_ContextMenuItem) {
                    return (react_default.a.createElement(context_menu_ContextMenuItem, Object.assign({}, child.props, { onCollapseMenu: this.handleCollapseMenu })));
                }
                else {
                    return child;
                }
            }))));
    }
    get listClassName() {
        const { color } = this.props;
        return classnames_default()('context-menu--list', {
            [`context-menu--${color}`]: color,
        });
    }
    get menuClassName() {
        const { isExpanded } = this.state;
        return classnames_default()('context-menu--list-container', { open: isExpanded });
    }
    get toggleClassName() {
        const { color } = this.props;
        const { isExpanded } = this.state;
        return classnames_default()('context-menu--toggle', {
            [`context-menu--${color}`]: color,
            active: isExpanded,
        });
    }
};
ContextMenu_ContextMenu.defaultProps = {
    color: dist["ComponentColor"].Primary,
    shape: dist["ButtonShape"].Square,
    text: '',
    testID: 'context-menu',
};
ContextMenu_ContextMenu = Object(tslib_es6["a" /* __decorate */])([
    errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], ContextMenu_ContextMenu);
/* harmony default export */ var context_menu_ContextMenu = (ContextMenu_ContextMenu);

// CONCATENATED MODULE: ./src/clockface/types/index.ts
var ComponentColor;
(function (ComponentColor) {
    ComponentColor["Default"] = "default";
    ComponentColor["Primary"] = "primary";
    ComponentColor["Secondary"] = "secondary";
    ComponentColor["Success"] = "success";
    ComponentColor["Warning"] = "warning";
    ComponentColor["Danger"] = "danger";
    ComponentColor["Alert"] = "alert";
})(ComponentColor || (ComponentColor = {}));
var ComponentSize;
(function (ComponentSize) {
    ComponentSize["ExtraSmall"] = "xs";
    ComponentSize["Small"] = "sm";
    ComponentSize["Medium"] = "md";
    ComponentSize["Large"] = "lg";
})(ComponentSize || (ComponentSize = {}));
var ComponentStatus;
(function (ComponentStatus) {
    ComponentStatus["Default"] = "default";
    ComponentStatus["Loading"] = "loading";
    ComponentStatus["Error"] = "error";
    ComponentStatus["Valid"] = "valid";
    ComponentStatus["Disabled"] = "disabled";
})(ComponentStatus || (ComponentStatus = {}));
var DropdownMenuColors;
(function (DropdownMenuColors) {
    DropdownMenuColors["Amethyst"] = "amethyst";
    DropdownMenuColors["Malachite"] = "malachite";
    DropdownMenuColors["Sapphire"] = "sapphire";
    DropdownMenuColors["Onyx"] = "onyx";
})(DropdownMenuColors || (DropdownMenuColors = {}));
var DropdownMenuPosition;
(function (DropdownMenuPosition) {
    DropdownMenuPosition["Above"] = "above";
    DropdownMenuPosition["Below"] = "below";
})(DropdownMenuPosition || (DropdownMenuPosition = {}));
var ButtonShape;
(function (ButtonShape) {
    ButtonShape["Default"] = "none";
    ButtonShape["Square"] = "square";
    ButtonShape["StretchToFit"] = "stretch";
})(ButtonShape || (ButtonShape = {}));
var ButtonType;
(function (ButtonType) {
    ButtonType["Button"] = "button";
    ButtonType["Submit"] = "submit";
})(ButtonType || (ButtonType = {}));
var Greys;
(function (Greys) {
    Greys["Obsidian"] = "#0f0e15";
    Greys["Raven"] = "#181820";
    Greys["Kevlar"] = "#202028";
    Greys["Castle"] = "#292933";
    Greys["Onyx"] = "#31313d";
    Greys["Pepper"] = "#383846";
    Greys["Smoke"] = "#434453";
    Greys["Graphite"] = "#545667";
    Greys["Storm"] = "#676978";
    Greys["Mountain"] = "#757888";
    Greys["Wolf"] = "#8e91a1";
    Greys["Sidewalk"] = "#999dab";
    Greys["Forge"] = "#a4a8b6";
    Greys["Mist"] = "#bec2cc";
    Greys["Chromium"] = "#c6cad3";
    Greys["Platinum"] = "#d4d7dd";
    Greys["Pearl"] = "#e7e8eb";
    Greys["Whisper"] = "#eeeff2";
    Greys["Cloud"] = "#f6f6f8";
    Greys["Ghost"] = "#fafafc";
    Greys["White"] = "#ffffff";
})(Greys || (Greys = {}));
var IconFont;
(function (IconFont) {
    IconFont["AddCell"] = "add-cell";
    IconFont["AlertTriangle"] = "alert-triangle";
    IconFont["Alerts"] = "alerts";
    IconFont["Annotate"] = "annotate";
    IconFont["AnnotatePlus"] = "annotate-plus";
    IconFont["AuthZero"] = "authzero";
    IconFont["BarChart"] = "bar-chart";
    IconFont["Bell"] = "bell";
    IconFont["BellRinging"] = "bell-ringing";
    IconFont["BellSolid"] = "bell-solid";
    IconFont["Calendar"] = "calendar";
    IconFont["Capacitor"] = "capacitor2";
    IconFont["CaretDown"] = "caret-down";
    IconFont["CaretLeft"] = "caret-left";
    IconFont["CaretRight"] = "caret-right";
    IconFont["CaretUp"] = "caret-up";
    IconFont["Chat"] = "chat";
    IconFont["Checkmark"] = "checkmark";
    IconFont["Circle"] = "circle";
    IconFont["CircleThick"] = "circle-thick";
    IconFont["Clock"] = "clock";
    IconFont["CogOutline"] = "cog-outline";
    IconFont["CogThick"] = "cog-thick";
    IconFont["Collapse"] = "collapse";
    IconFont["CrownOutline"] = "crown-outline";
    IconFont["CrownSolid"] = "crown2";
    IconFont["Cube"] = "cube";
    IconFont["Cubouniform"] = "cubo-uniform";
    IconFont["CuboNav"] = "cubo-nav";
    IconFont["Dashboards"] = "dashboards";
    IconFont["DashF"] = "dash-f";
    IconFont["DashH"] = "dash-h";
    IconFont["DashJ"] = "dash-j";
    IconFont["Disks"] = "disks";
    IconFont["Download"] = "download";
    IconFont["Duplicate"] = "duplicate";
    IconFont["ExpandA"] = "expand-a";
    IconFont["ExpandB"] = "expand-b";
    IconFont["Export"] = "export";
    IconFont["Eye"] = "eye";
    IconFont["EyeClosed"] = "eye-closed";
    IconFont["EyeOpen"] = "eye-open";
    IconFont["GitHub"] = "github";
    IconFont["Google"] = "google";
    IconFont["GraphLine"] = "graphline-2";
    IconFont["Group"] = "group";
    IconFont["Heroku"] = "heroku";
    IconFont["HerokuSimple"] = "";
    IconFont["Import"] = "import";
    IconFont["Link"] = "link";
    IconFont["OAuth"] = "oauth";
    IconFont["Octagon"] = "octagon";
    IconFont["Okta"] = "okta";
    IconFont["Pause"] = "pause";
    IconFont["Pencil"] = "pencil";
    IconFont["Play"] = "play";
    IconFont["Plus"] = "plus";
    IconFont["PlusSkinny"] = "plus-skinny";
    IconFont["Pulse"] = "pulse-c";
    IconFont["Refresh"] = "refresh";
    IconFont["Remove"] = "remove";
    IconFont["Search"] = "search";
    IconFont["Server"] = "server2";
    IconFont["Shuffle"] = "shuffle";
    IconFont["Square"] = "square";
    IconFont["TextBlock"] = "text-block";
    IconFont["Trash"] = "trash";
    IconFont["Triangle"] = "triangle";
    IconFont["User"] = "user";
    IconFont["UserAdd"] = "user-add";
    IconFont["UserOutline"] = "user-outline";
    IconFont["UserRemove"] = "user-remove";
    IconFont["UsersDuo"] = "users-duo";
    IconFont["UsersTrio"] = "users-trio";
    IconFont["Wood"] = "wood";
    IconFont["Wrench"] = "wrench";
    IconFont["Star"] = "star";
    IconFont["Stop"] = "stop";
    IconFont["Zap"] = "zap";
})(IconFont || (IconFont = {}));
var Columns;
(function (Columns) {
    Columns[Columns["One"] = 1] = "One";
    Columns[Columns["Two"] = 2] = "Two";
    Columns[Columns["Three"] = 3] = "Three";
    Columns[Columns["Four"] = 4] = "Four";
    Columns[Columns["Five"] = 5] = "Five";
    Columns[Columns["Six"] = 6] = "Six";
    Columns[Columns["Seven"] = 7] = "Seven";
    Columns[Columns["Eight"] = 8] = "Eight";
    Columns[Columns["Nine"] = 9] = "Nine";
    Columns[Columns["Ten"] = 10] = "Ten";
    Columns[Columns["Eleven"] = 11] = "Eleven";
    Columns[Columns["Twelve"] = 12] = "Twelve";
})(Columns || (Columns = {}));
var Alignment;
(function (Alignment) {
    Alignment["Left"] = "left";
    Alignment["Center"] = "center";
    Alignment["Right"] = "right";
})(Alignment || (Alignment = {}));
var Sort;
(function (Sort) {
    Sort["Descending"] = "desc";
    Sort["Ascending"] = "asc";
    Sort["None"] = "none";
})(Sort || (Sort = {}));
var Stack;
(function (Stack) {
    Stack["Rows"] = "rows";
    Stack["Columns"] = "columns";
})(Stack || (Stack = {}));
var NavMenuType;
(function (NavMenuType) {
    NavMenuType["RouterLink"] = "router";
    NavMenuType["HTTPLink"] = "http";
    NavMenuType["ShowDropdown"] = "showDropdown";
})(NavMenuType || (NavMenuType = {}));

// CONCATENATED MODULE: ./src/clockface/components/context_menu/Context.tsx







let Context_Context = class Context extends react["PureComponent"] {
    constructor(props) {
        super(props);
        this.handleBoostZIndex = (boostZIndex) => {
            this.setState({ boostZIndex });
        };
        this.state = {
            boostZIndex: false,
        };
    }
    render() {
        const { children } = this.props;
        return (react_default.a.createElement("div", { className: this.className }, react_default.a.Children.map(children, (child) => {
            if (child.type === context_menu_ContextMenu) {
                return (react_default.a.createElement(context_menu_ContextMenu, Object.assign({}, child.props, { onBoostZIndex: this.handleBoostZIndex })));
            }
            else {
                return child;
            }
        })));
    }
    get className() {
        const { align, className } = this.props;
        const { boostZIndex } = this.state;
        return classnames_default()('context-menu', {
            [`${className}`]: className,
            'context-menu--boost-z': boostZIndex,
            'context-menu--align-left': align === Alignment.Left,
            'context-menu--align-right': align === Alignment.Right,
        });
    }
};
Context_Context.defaultProps = {
    align: Alignment.Right,
};
Context_Context.Menu = context_menu_ContextMenu;
Context_Context.Item = context_menu_ContextMenuItem;
Context_Context = Object(tslib_es6["a" /* __decorate */])([
    errors["a" /* ErrorHandling */],
    Object(tslib_es6["b" /* __metadata */])("design:paramtypes", [Object])
], Context_Context);
/* harmony default export */ var context_menu_Context = (Context_Context);

// CONCATENATED MODULE: ./src/clockface/components/Select.tsx

const Select = ({ type, children, strict = false, count = Infinity, }) => (react_default.a.createElement(react_default.a.Fragment, null, react_default.a.Children.map(children, (child) => {
    if (child.type === type && count-- > 0) {
        return child;
    }
    else if (strict && child.type !== type) {
        throw new Error(`Expected ${type} but received ${child.type}`);
    }
})));
/* harmony default export */ var components_Select = (Select);

// CONCATENATED MODULE: ./src/clockface/index.ts
/* concated harmony reexport Alignment */__webpack_require__.d(__webpack_exports__, "a", function() { return Alignment; });
/* concated harmony reexport ButtonType */__webpack_require__.d(__webpack_exports__, "c", function() { return ButtonType; });
/* concated harmony reexport ButtonShape */__webpack_require__.d(__webpack_exports__, "b", function() { return ButtonShape; });
/* unused concated harmony import Columns */
/* unused concated harmony import ComponentColor */
/* concated harmony reexport ComponentSize */__webpack_require__.d(__webpack_exports__, "d", function() { return ComponentSize; });
/* concated harmony reexport ComponentStatus */__webpack_require__.d(__webpack_exports__, "e", function() { return ComponentStatus; });
/* concated harmony reexport Context */__webpack_require__.d(__webpack_exports__, "f", function() { return context_menu_Context; });
/* unused concated harmony import DropdownChild */
/* unused concated harmony import DropdownMenuColors */
/* unused concated harmony import DropdownMenuPosition */
/* unused concated harmony import Greys */
/* concated harmony reexport IconFont */__webpack_require__.d(__webpack_exports__, "g", function() { return IconFont; });
/* concated harmony reexport MultiInputType */__webpack_require__.d(__webpack_exports__, "h", function() { return MultiInputType; });
/* concated harmony reexport MultipleInput */__webpack_require__.d(__webpack_exports__, "i", function() { return multipleInput_MultipleInput; });
/* unused concated harmony import NavMenuType */
/* concated harmony reexport ProgressBar */__webpack_require__.d(__webpack_exports__, "j", function() { return wizard_ProgressBar; });
/* unused concated harmony import Select */
/* concated harmony reexport Sort */__webpack_require__.d(__webpack_exports__, "k", function() { return Sort; });
/* unused concated harmony import Stack */
/* concated harmony reexport WizardFullScreen */__webpack_require__.d(__webpack_exports__, "l", function() { return wizard_WizardFullScreen; });
/* concated harmony reexport WizardProgressHeader */__webpack_require__.d(__webpack_exports__, "m", function() { return wizard_WizardProgressHeader; });
/* unused concated harmony import WizardOverlay */











/***/ }),

/***/ 548:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);



/***/ }),

/***/ 549:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getRootNode; });
const getRootNode = () => document.getElementById('react-root');


/***/ }),

/***/ 550:
/***/ (function(module, exports) {



/***/ }),

/***/ 551:
/***/ (function(module, exports) {



/***/ }),

/***/ 552:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var src_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);



/***/ }),

/***/ 553:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AutoRefreshStatus; });
var AutoRefreshStatus;
(function (AutoRefreshStatus) {
    AutoRefreshStatus["Active"] = "active";
    AutoRefreshStatus["Disabled"] = "disabled";
    AutoRefreshStatus["Paused"] = "paused";
})(AutoRefreshStatus || (AutoRefreshStatus = {}));


/***/ }),

/***/ 554:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export RetentionRuleTypes */
var RetentionRuleTypes;
(function (RetentionRuleTypes) {
    RetentionRuleTypes["Expire"] = "expire";
    RetentionRuleTypes["Forever"] = "forever";
})(RetentionRuleTypes || (RetentionRuleTypes = {}));


/***/ }),

/***/ 555:
/***/ (function(module, exports) {



/***/ }),

/***/ 556:
/***/ (function(module, exports) {



/***/ }),

/***/ 557:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export WriteDataMode */
var WriteDataMode;
(function (WriteDataMode) {
    WriteDataMode["Manual"] = "Manual Entry";
    WriteDataMode["File"] = "File Upload";
})(WriteDataMode || (WriteDataMode = {}));


/***/ }),

/***/ 558:
/***/ (function(module, exports) {



/***/ }),

/***/ 559:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RemoteDataState; });
var RemoteDataState;
(function (RemoteDataState) {
    RemoteDataState["NotStarted"] = "NotStarted";
    RemoteDataState["Loading"] = "Loading";
    RemoteDataState["Done"] = "Done";
    RemoteDataState["Error"] = "Error";
})(RemoteDataState || (RemoteDataState = {}));


/***/ }),

/***/ 560:
/***/ (function(module, exports) {



/***/ }),

/***/ 561:
/***/ (function(module, exports) {



/***/ }),

/***/ 562:
/***/ (function(module, exports) {



/***/ }),

/***/ 563:
/***/ (function(module, exports) {



/***/ }),

/***/ 564:
/***/ (function(module, exports) {



/***/ }),

/***/ 565:
/***/ (function(module, exports) {



/***/ }),

/***/ 566:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var src_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);



/***/ }),

/***/ 567:
/***/ (function(module, exports) {



/***/ }),

/***/ 568:
/***/ (function(module, exports) {



/***/ }),

/***/ 569:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var src_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);



/***/ }),

/***/ 570:
/***/ (function(module, exports) {



/***/ }),

/***/ 571:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var src_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);



/***/ }),

/***/ 572:
/***/ (function(module, exports) {



/***/ }),

/***/ 573:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ResourceType; });
var ResourceType;
(function (ResourceType) {
    ResourceType["Authorizations"] = "tokens";
    ResourceType["Buckets"] = "buckets";
    ResourceType["Cells"] = "cells";
    ResourceType["Checks"] = "checks";
    ResourceType["Dashboards"] = "dashboards";
    ResourceType["Labels"] = "labels";
    ResourceType["Orgs"] = "orgs";
    ResourceType["Members"] = "members";
    ResourceType["NotificationRules"] = "rules";
    ResourceType["NotificationEndpoints"] = "endpoints";
    ResourceType["Plugins"] = "plugins";
    ResourceType["Scrapers"] = "scrapers";
    ResourceType["Tasks"] = "tasks";
    ResourceType["Templates"] = "templates";
    ResourceType["Telegrafs"] = "telegrafs";
    ResourceType["Variables"] = "variables";
    ResourceType["Views"] = "views";
})(ResourceType || (ResourceType = {}));


/***/ }),

/***/ 574:
/***/ (function(module, exports) {



/***/ }),

/***/ 575:
/***/ (function(module, exports) {



/***/ }),

/***/ 576:
/***/ (function(module, exports) {



/***/ }),

/***/ 577:
/***/ (function(module, exports) {



/***/ }),

/***/ 578:
/***/ (function(module, exports) {



/***/ }),

/***/ 579:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export SourceAuthenticationMethod */
var SourceAuthenticationMethod;
(function (SourceAuthenticationMethod) {
    SourceAuthenticationMethod["LDAP"] = "ldap";
    SourceAuthenticationMethod["Basic"] = "basic";
    SourceAuthenticationMethod["Shared"] = "shared";
    SourceAuthenticationMethod["Unknown"] = "unknown";
})(SourceAuthenticationMethod || (SourceAuthenticationMethod = {}));


/***/ }),

/***/ 580:
/***/ (function(module, exports) {



/***/ }),

/***/ 581:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TaskSchedule; });
var TaskSchedule;
(function (TaskSchedule) {
    TaskSchedule["interval"] = "interval";
    TaskSchedule["cron"] = "cron";
    TaskSchedule["unselected"] = "";
})(TaskSchedule || (TaskSchedule = {}));


/***/ }),

/***/ 582:
/***/ (function(module, exports) {



/***/ }),

/***/ 583:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _influxdata_influx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(98);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _influxdata_influx__WEBPACK_IMPORTED_MODULE_0__["z"]; });





/***/ }),

/***/ 584:
/***/ (function(module, exports) {



/***/ }),

/***/ 585:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var src_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);



/***/ }),

/***/ 586:
/***/ (function(module, exports) {



/***/ }),

/***/ 599:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export millisecondTimeRange */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return validateAndTypeRange; });
/* harmony import */ var src_shared_constants_timeRanges__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(134);
/* harmony import */ var src_variables_utils_getTimeRangeVars__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(210);
/* harmony import */ var src_shared_utils_duration__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(86);



const millisecondTimeRange = ({ seconds, lower, upper, }) => {
    if (seconds) {
        return { since: Date.now() - seconds * 1000, until: null };
    }
    const since = Date.parse(lower);
    let until;
    if (upper === 'now()') {
        until = Date.now();
    }
    else {
        until = Date.parse(upper);
    }
    return { since, until };
};
const validateAndTypeRange = (timeRange) => {
    const { lower, upper } = timeRange;
    if (Object(src_variables_utils_getTimeRangeVars__WEBPACK_IMPORTED_MODULE_1__[/* isDateParseable */ "b"])(lower) && Object(src_variables_utils_getTimeRangeVars__WEBPACK_IMPORTED_MODULE_1__[/* isDateParseable */ "b"])(upper)) {
        return Object.assign(Object.assign({}, timeRange), { type: 'custom' });
    }
    if (Object(src_shared_utils_duration__WEBPACK_IMPORTED_MODULE_2__[/* isDurationWithNowParseable */ "f"])(lower)) {
        const selectableTimeRange = src_shared_constants_timeRanges__WEBPACK_IMPORTED_MODULE_0__[/* SELECTABLE_TIME_RANGES */ "c"].find(r => r.lower === lower);
        if (selectableTimeRange) {
            return selectableTimeRange;
        }
        return {
            lower,
            upper: null,
            type: 'duration',
        };
    }
    return null;
};


/***/ }),

/***/ 67:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(34);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _influxdata_react_custom_scrollbars__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1176);
/* harmony import */ var _influxdata_react_custom_scrollbars__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_influxdata_react_custom_scrollbars__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var src_shared_decorators_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(11);






let FancyScrollbar = class FancyScrollbar extends react__WEBPACK_IMPORTED_MODULE_1__["Component"] {
    constructor(props) {
        super(props);
        this.ref = react__WEBPACK_IMPORTED_MODULE_1___default.a.createRef();
    }
    updateScroll() {
        const ref = this.ref.current;
        if (ref && !lodash__WEBPACK_IMPORTED_MODULE_2___default.a.isNil(this.props.scrollTop)) {
            ref.scrollTop(this.props.scrollTop);
        }
        if (ref && !lodash__WEBPACK_IMPORTED_MODULE_2___default.a.isNil(this.props.scrollLeft)) {
            ref.scrollLeft(this.props.scrollLeft);
        }
    }
    componentDidMount() {
        this.updateScroll();
    }
    componentDidUpdate() {
        this.updateScroll();
    }
    render() {
        const { autoHide, autoHeight, children, className, maxHeight, setScrollTop, style, thumbStartColor, thumbStopColor, hideTracksWhenNotNeeded, } = this.props;
        return (react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_influxdata_react_custom_scrollbars__WEBPACK_IMPORTED_MODULE_4__["Scrollbars"], { className: classnames__WEBPACK_IMPORTED_MODULE_3___default()('fancy-scroll--container', {
                [className]: className,
            }), ref: this.ref, style: style, onScroll: setScrollTop, autoHide: autoHide, autoHideTimeout: 1000, autoHideDuration: 250, autoHeight: autoHeight, autoHeightMax: maxHeight, thumbStartColor: thumbStartColor, thumbStopColor: thumbStopColor, hideTracksWhenNotNeeded: hideTracksWhenNotNeeded }, children));
    }
};
FancyScrollbar.defaultProps = {
    className: '',
    autoHide: true,
    autoHeight: false,
    hideTracksWhenNotNeeded: true,
    maxHeight: null,
    style: {},
    setScrollTop: () => { },
};
FancyScrollbar = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __decorate */ "a"])([
    src_shared_decorators_errors__WEBPACK_IMPORTED_MODULE_5__[/* ErrorHandling */ "a"],
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __metadata */ "b"])("design:paramtypes", [Object])
], FancyScrollbar);
/* harmony default export */ __webpack_exports__["a"] = (FancyScrollbar);


/***/ }),

/***/ 70:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return UNTITLED_GRAPH; });
/* unused harmony export DEFAULT_DECIMAL_PLACES */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return DEFAULT_TIME_FIELD; });
/* unused harmony export DEFAULT_TABLE_OPTIONS */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return FORMAT_OPTIONS; });
/* unused harmony export NEW_DEFAULT_DASHBOARD_CELL */
/* unused harmony export EMPTY_DASHBOARD */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return DashboardTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return DEFAULT_CELL_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return DEFAULT_DASHBOARD_NAME; });
/* unused harmony export DEFAULT_BUCKET_NAME */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return DEFAULT_COLLECTOR_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return DEFAULT_TASK_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return DEFAULT_SCRAPER_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return DEFAULT_TOKEN_DESCRIPTION; });
/* unused harmony export NEW_DASHBOARD */
/* unused harmony export TYPE_QUERY_CONFIG */
/* unused harmony export TYPE_SHIFTED */
/* unused harmony export TYPE_FLUX */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return DASHBOARD_NAME_MAX_LENGTH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CELL_NAME_MAX_LENGTH; });
/* unused harmony export CEOTabs */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return MIN_DECIMAL_PLACES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return MAX_DECIMAL_PLACES; });
/* unused harmony export DYNAMIC_SOURCE */
/* unused harmony export DYNAMIC_SOURCE_INFO */
/* unused harmony export UPDATED_AT_TIME_FORMAT */
/* harmony import */ var src_shared_constants_tableGraph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(242);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var src_shared_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(32);



const UNTITLED_GRAPH = 'Untitled Graph';
const DEFAULT_DECIMAL_PLACES = {
    isEnforced: true,
    digits: 2,
};
const DEFAULT_TIME_FIELD = {
    internalName: '_time',
    displayName: 'time',
    visible: true,
};
const DEFAULT_TABLE_OPTIONS = {
    verticalTimeAxis: src_shared_constants_tableGraph__WEBPACK_IMPORTED_MODULE_0__[/* DEFAULT_VERTICAL_TIME_AXIS */ "e"],
    sortBy: DEFAULT_TIME_FIELD,
    wrapping: 'truncate',
    fixFirstColumn: src_shared_constants_tableGraph__WEBPACK_IMPORTED_MODULE_0__[/* DEFAULT_FIX_FIRST_COLUMN */ "c"],
};
const FORMAT_OPTIONS = [
    { text: src_shared_constants__WEBPACK_IMPORTED_MODULE_2__[/* DEFAULT_TIME_FORMAT */ "o"] },
    { text: 'DD/MM/YYYY HH:mm:ss.sss' },
    { text: 'MM/DD/YYYY HH:mm:ss.sss' },
    { text: 'YYYY/MM/DD HH:mm:ss' },
    { text: 'hh:mm a' },
    { text: 'HH:mm' },
    { text: 'HH:mm:ss' },
    { text: 'HH:mm:ss ZZ' },
    { text: 'HH:mm:ss.sss' },
    { text: 'MMMM D, YYYY HH:mm:ss' },
    { text: 'dddd, MMMM D, YYYY HH:mm:ss' },
];
const NEW_DEFAULT_DASHBOARD_CELL = {
    x: 0,
    y: 0,
    w: 4,
    h: 4,
    status: src_types__WEBPACK_IMPORTED_MODULE_1__["RemoteDataState"].Done,
};
const EMPTY_DASHBOARD = {
    id: '0',
    name: '',
    cells: [NEW_DEFAULT_DASHBOARD_CELL],
    status: src_types__WEBPACK_IMPORTED_MODULE_1__["RemoteDataState"].Done,
};
const DashboardTemplate = {
    id: '0',
    name: 'Create a New Dashboard',
    cells: [],
    status: src_types__WEBPACK_IMPORTED_MODULE_1__["RemoteDataState"].Done,
};
const DEFAULT_CELL_NAME = 'Name this Cell';
const DEFAULT_DASHBOARD_NAME = 'Name this Dashboard';
const DEFAULT_BUCKET_NAME = 'Name this Bucket';
const DEFAULT_COLLECTOR_NAME = 'Name this Collector';
const DEFAULT_TASK_NAME = 'Name this Task';
const DEFAULT_SCRAPER_NAME = 'Name this Scraper';
const DEFAULT_TOKEN_DESCRIPTION = 'Describe this Token';
const NEW_DASHBOARD = {
    name: DEFAULT_DASHBOARD_NAME,
    cells: [NEW_DEFAULT_DASHBOARD_CELL],
};
const TYPE_QUERY_CONFIG = 'queryConfig';
const TYPE_SHIFTED = 'shifted queryConfig';
const TYPE_FLUX = 'flux';
const DASHBOARD_NAME_MAX_LENGTH = 50;
const CELL_NAME_MAX_LENGTH = 68;
var CEOTabs;
(function (CEOTabs) {
    CEOTabs["Queries"] = "Queries";
    CEOTabs["Vis"] = "Visualization";
})(CEOTabs || (CEOTabs = {}));
const MIN_DECIMAL_PLACES = 0;
const MAX_DECIMAL_PLACES = 10;
const DYNAMIC_SOURCE = 'dynamic';
const DYNAMIC_SOURCE_INFO = {
    name: 'Dynamic Source',
    id: DYNAMIC_SOURCE,
    link: '',
};
const UPDATED_AT_TIME_FORMAT = 'YYYY-MM-DD HH:MM:ss';


/***/ }),

/***/ 71:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return resolveGeom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return geomToInterpolation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return getFormatter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return filterNoisyColumns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return parseBounds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return extent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return checkResultsLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return getNumericColumns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return getGroupableColumns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return defaultXColumn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return defaultYColumn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return isInDomain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return clamp; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85);
/* harmony import */ var _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_influxdata_giraffe__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var src_shared_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(32);
/* harmony import */ var src_dashboards_utils_tableGraph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(311);




const resolveGeom = (geom) => {
    if (geom === 'step' || geom === 'monotoneX') {
        return geom;
    }
    return 'line';
};
const geomToInterpolation = (geom) => {
    const resolvedGeom = resolveGeom(geom);
    switch (resolvedGeom) {
        case 'step':
            return 'step';
        case 'monotoneX':
            return 'monotoneX';
        default:
            return 'linear';
    }
};
const getFormatter = (columnType, { prefix, suffix, base, timeZone, trimZeros = true, timeFormat = src_shared_constants__WEBPACK_IMPORTED_MODULE_2__[/* DEFAULT_TIME_FORMAT */ "o"], } = {}) => {
    if (columnType === 'number' && base === '2') {
        return Object(_influxdata_giraffe__WEBPACK_IMPORTED_MODULE_1__["binaryPrefixFormatter"])({
            prefix,
            suffix,
            significantDigits: src_shared_constants__WEBPACK_IMPORTED_MODULE_2__[/* VIS_SIG_DIGITS */ "H"],
        });
    }
    if (columnType === 'number') {
        return Object(_influxdata_giraffe__WEBPACK_IMPORTED_MODULE_1__["siPrefixFormatter"])({
            prefix,
            suffix,
            significantDigits: src_shared_constants__WEBPACK_IMPORTED_MODULE_2__[/* VIS_SIG_DIGITS */ "H"],
            trimZeros,
        });
    }
    if (columnType === 'time') {
        return Object(_influxdata_giraffe__WEBPACK_IMPORTED_MODULE_1__["timeFormatter"])({
            timeZone: timeZone === 'Local' ? undefined : timeZone,
            format: Object(src_dashboards_utils_tableGraph__WEBPACK_IMPORTED_MODULE_3__[/* resolveTimeFormat */ "b"])(timeFormat),
        });
    }
    return null;
};
const NOISY_LEGEND_COLUMNS = new Set(['_start', '_stop', 'result']);
const filterNoisyColumns = (columns, table) => columns.filter(key => {
    if (!NOISY_LEGEND_COLUMNS.has(key)) {
        return true;
    }
    const keyData = table.getColumn(key);
    for (const d of keyData) {
        if (d !== keyData[0]) {
            return true;
        }
    }
    return false;
});
const parseBounds = (bounds) => {
    if (!bounds ||
        !bounds[0] ||
        !bounds[1] ||
        isNaN(+bounds[0]) ||
        isNaN(+bounds[1])) {
        return null;
    }
    return [+bounds[0], +bounds[1]];
};
const extent = (xs) => {
    if (!xs || !xs.length) {
        return null;
    }
    let low = Infinity;
    let high = -Infinity;
    for (const x of xs) {
        if (x < low) {
            low = x;
        }
        if (x > high) {
            high = x;
        }
    }
    if (low === Infinity || high === -Infinity) {
        return null;
    }
    return [low, high];
};
const checkResultsLength = (giraffeResult) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(giraffeResult, 'table.length', 0) > 0;
};
const getNumericColumns = (table) => {
    const numericColumnKeys = table.columnKeys.filter(k => {
        if (k === 'result' || k === 'table') {
            return false;
        }
        const columnType = table.getColumnType(k);
        return columnType === 'time' || columnType === 'number';
    });
    return numericColumnKeys;
};
const getGroupableColumns = (table) => {
    const invalidGroupColumns = new Set(['_value', '_time', 'table']);
    const groupableColumns = table.columnKeys.filter(name => !invalidGroupColumns.has(name));
    return groupableColumns;
};
const defaultXColumn = (table, preferredColumnKey) => {
    const validColumnKeys = getNumericColumns(table);
    if (validColumnKeys.includes(preferredColumnKey)) {
        return preferredColumnKey;
    }
    for (const key of ['_time', '_stop', '_start']) {
        if (validColumnKeys.includes(key)) {
            return key;
        }
    }
    if (validColumnKeys.length) {
        return validColumnKeys[0];
    }
    return null;
};
const defaultYColumn = (table, preferredColumnKey) => {
    const validColumnKeys = getNumericColumns(table);
    if (validColumnKeys.includes(preferredColumnKey)) {
        return preferredColumnKey;
    }
    for (const key of validColumnKeys) {
        if (key.startsWith('_value')) {
            return key;
        }
    }
    if (validColumnKeys.length) {
        return validColumnKeys[0];
    }
    return null;
};
const isInDomain = (value, domain) => value >= domain[0] && value <= domain[1];
const clamp = (value, domain) => {
    if (value < domain[0]) {
        return domain[0];
    }
    if (value > domain[1]) {
        return domain[1];
    }
    return value;
};


/***/ }),

/***/ 72:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./src/utils/ajax.ts
var ajax = __webpack_require__(400);

// CONCATENATED MODULE: ./src/cloud/apis/limits.ts

const getReadWriteCardinalityLimits = async (orgID) => {
    try {
        const { data } = await Object(ajax["a" /* default */])({
            method: 'GET',
            url: `/api/v2private/orgs/${orgID}/limits/status`,
        });
        return data;
    }
    catch (error) {
        console.error(error);
        throw error;
    }
};
const getLimits = async (orgID) => {
    try {
        const { data } = await Object(ajax["a" /* default */])({
            method: 'GET',
            url: `/api/v2private/orgs/${orgID}/limits`,
        });
        return data;
    }
    catch (error) {
        console.error(error);
        throw error;
    }
};

// EXTERNAL MODULE: ./src/shared/actions/notifications.ts
var notifications = __webpack_require__(33);

// EXTERNAL MODULE: ./src/shared/copy/notifications.ts + 1 modules
var copy_notifications = __webpack_require__(35);

// EXTERNAL MODULE: ./src/types/index.ts
var types = __webpack_require__(5);

// EXTERNAL MODULE: ./src/cloud/utils/limits.ts
var utils_limits = __webpack_require__(100);

// EXTERNAL MODULE: ./src/organizations/selectors/index.ts
var selectors = __webpack_require__(19);

// EXTERNAL MODULE: ./src/resources/selectors/index.ts
var resources_selectors = __webpack_require__(24);

// CONCATENATED MODULE: ./src/cloud/actions/limits.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return LimitStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ActionTypes; });
/* unused harmony export setLimits */
/* unused harmony export setDashboardLimitStatus */
/* unused harmony export setBucketLimitStatus */
/* unused harmony export setTaskLimitStatus */
/* unused harmony export setChecksLimitStatus */
/* unused harmony export setRulesLimitStatus */
/* unused harmony export setEndpointsLimitStatus */
/* unused harmony export setReadRateLimitStatus */
/* unused harmony export setWriteRateLimitStatus */
/* unused harmony export setCardinalityLimitStatus */
/* unused harmony export setLimitsStatus */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return limits_getReadWriteCardinalityLimits; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return getAssetLimits; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return checkDashboardLimits; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return checkBucketLimits; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return checkTaskLimits; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return checkChecksLimits; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return checkRulesLimits; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return checkEndpointsLimits; });







var LimitStatus;
(function (LimitStatus) {
    LimitStatus["OK"] = "ok";
    LimitStatus["EXCEEDED"] = "exceeded";
})(LimitStatus || (LimitStatus = {}));
var ActionTypes;
(function (ActionTypes) {
    ActionTypes["SetLimits"] = "SET_LIMITS";
    ActionTypes["SetLimitsStatus"] = "SET_LIMITS_STATUS";
    ActionTypes["SetDashboardLimitStatus"] = "SET_DASHBOARD_LIMIT_STATUS";
    ActionTypes["SetBucketLimitStatus"] = "SET_BUCKET_LIMIT_STATUS";
    ActionTypes["SetTaskLimitStatus"] = "SET_TASK_LIMIT_STATUS";
    ActionTypes["SetChecksLimitStatus"] = "SET_CHECKS_LIMIT_STATUS";
    ActionTypes["SetRulesLimitStatus"] = "SET_RULES_LIMIT_STATUS";
    ActionTypes["SetEndpointsLimitStatus"] = "SET_ENDPOINTS_LIMIT_STATUS";
    ActionTypes["SetReadRateLimitStatus"] = "SET_READ_RATE_LIMIT_STATUS";
    ActionTypes["SetWriteRateLimitStatus"] = "SET_WRITE_RATE_LIMIT_STATUS";
    ActionTypes["SetCardinalityLimitStatus"] = "SET_CARDINALITY_LIMIT_STATUS";
})(ActionTypes || (ActionTypes = {}));
const setLimits = (limits) => {
    return {
        type: ActionTypes.SetLimits,
        payload: { limits },
    };
};
const setDashboardLimitStatus = (limitStatus) => {
    return {
        type: ActionTypes.SetDashboardLimitStatus,
        payload: { limitStatus },
    };
};
const setBucketLimitStatus = (limitStatus) => {
    return {
        type: ActionTypes.SetBucketLimitStatus,
        payload: { limitStatus },
    };
};
const setTaskLimitStatus = (limitStatus) => {
    return {
        type: ActionTypes.SetTaskLimitStatus,
        payload: { limitStatus },
    };
};
const setChecksLimitStatus = (limitStatus) => {
    return {
        type: ActionTypes.SetChecksLimitStatus,
        payload: { limitStatus },
    };
};
const setRulesLimitStatus = (limitStatus) => {
    return {
        type: ActionTypes.SetRulesLimitStatus,
        payload: { limitStatus },
    };
};
const setEndpointsLimitStatus = (limitStatus) => {
    return {
        type: ActionTypes.SetEndpointsLimitStatus,
        payload: { limitStatus },
    };
};
const setReadRateLimitStatus = (limitStatus) => {
    return {
        type: ActionTypes.SetReadRateLimitStatus,
        payload: { limitStatus },
    };
};
const setWriteRateLimitStatus = (limitStatus) => {
    return {
        type: ActionTypes.SetWriteRateLimitStatus,
        payload: { limitStatus },
    };
};
const setCardinalityLimitStatus = (limitStatus) => {
    return {
        type: ActionTypes.SetCardinalityLimitStatus,
        payload: { limitStatus },
    };
};
const setLimitsStatus = (status) => {
    return {
        type: ActionTypes.SetLimitsStatus,
        payload: { status },
    };
};
const limits_getReadWriteCardinalityLimits = () => async (dispatch, getState) => {
    try {
        const org = Object(selectors["a" /* getOrg */])(getState());
        const limits = await getReadWriteCardinalityLimits(org.id);
        if (limits.read.status === LimitStatus.EXCEEDED) {
            dispatch(Object(notifications["c" /* notify */])(Object(copy_notifications["Xb" /* readLimitReached */])()));
            dispatch(setReadRateLimitStatus(LimitStatus.EXCEEDED));
        }
        else {
            dispatch(setReadRateLimitStatus(LimitStatus.OK));
        }
        if (limits.write.status === LimitStatus.EXCEEDED) {
            dispatch(setWriteRateLimitStatus(LimitStatus.EXCEEDED));
        }
        else {
            dispatch(setWriteRateLimitStatus(LimitStatus.OK));
        }
        if (limits.cardinality.status === LimitStatus.EXCEEDED) {
            dispatch(setCardinalityLimitStatus(LimitStatus.EXCEEDED));
        }
        else {
            dispatch(setCardinalityLimitStatus(LimitStatus.OK));
        }
    }
    catch (error) {
        console.error(error);
    }
};
const getAssetLimits = () => async (dispatch, getState) => {
    dispatch(setLimitsStatus(types["RemoteDataState"].Loading));
    try {
        const org = Object(selectors["a" /* getOrg */])(getState());
        const limits = await getLimits(org.id);
        dispatch(setLimits(limits));
        dispatch(setLimitsStatus(types["RemoteDataState"].Done));
    }
    catch (error) {
        console.error(error);
        dispatch(setLimitsStatus(types["RemoteDataState"].Error));
    }
};
const checkDashboardLimits = () => (dispatch, getState) => {
    try {
        const state = getState();
        const { cloud: { limits }, resources, } = state;
        const dashboardsMax = Object(utils_limits["g" /* extractDashboardMax */])(limits);
        const dashboardsCount = resources.dashboards.allIDs.length;
        if (dashboardsCount >= dashboardsMax) {
            dispatch(setDashboardLimitStatus(LimitStatus.EXCEEDED));
        }
        else {
            dispatch(setDashboardLimitStatus(LimitStatus.OK));
        }
    }
    catch (error) {
        console.error(error);
    }
};
const checkBucketLimits = () => (dispatch, getState) => {
    try {
        const state = getState();
        const { cloud: { limits }, } = state;
        const allBuckets = Object(resources_selectors["a" /* getAll */])(state, types["ResourceType"].Buckets);
        const bucketsMax = Object(utils_limits["c" /* extractBucketMax */])(limits);
        const buckets = allBuckets.filter(bucket => {
            return bucket.type == 'user';
        });
        const bucketsCount = buckets.length;
        if (bucketsCount >= bucketsMax) {
            dispatch(setBucketLimitStatus(LimitStatus.EXCEEDED));
        }
        else {
            dispatch(setBucketLimitStatus(LimitStatus.OK));
        }
    }
    catch (error) {
        console.error(error);
    }
};
const checkTaskLimits = () => (dispatch, getState) => {
    try {
        const { cloud: { limits }, resources, } = getState();
        const tasksMax = Object(utils_limits["o" /* extractTaskMax */])(limits);
        const tasksCount = resources.tasks.allIDs.length;
        if (tasksCount >= tasksMax) {
            dispatch(setTaskLimitStatus(LimitStatus.EXCEEDED));
        }
        else {
            dispatch(setTaskLimitStatus(LimitStatus.OK));
        }
    }
    catch (error) {
        console.error(error);
    }
};
const checkChecksLimits = () => (dispatch, getState) => {
    try {
        const { resources, cloud: { limits }, } = getState();
        const checksMax = Object(utils_limits["e" /* extractChecksMax */])(limits);
        const checksCount = resources.checks.allIDs.length;
        if (checksCount >= checksMax) {
            dispatch(setChecksLimitStatus(LimitStatus.EXCEEDED));
        }
        else {
            dispatch(setChecksLimitStatus(LimitStatus.OK));
        }
    }
    catch (error) {
        console.error(error);
    }
};
const checkRulesLimits = () => (dispatch, getState) => {
    try {
        const { resources, cloud: { limits }, } = getState();
        const rulesMax = Object(utils_limits["m" /* extractRulesMax */])(limits);
        const rulesCount = resources.rules.allIDs.length;
        if (rulesCount >= rulesMax) {
            dispatch(setRulesLimitStatus(LimitStatus.EXCEEDED));
        }
        else {
            dispatch(setRulesLimitStatus(LimitStatus.OK));
        }
    }
    catch (error) {
        console.error(error);
    }
};
const checkEndpointsLimits = () => (dispatch, getState) => {
    try {
        const state = getState();
        const endpointsCount = state.resources.endpoints.allIDs.length;
        const endpointsMax = Object(utils_limits["h" /* extractEndpointsMax */])(state.cloud.limits);
        if (endpointsCount >= endpointsMax) {
            dispatch(setEndpointsLimitStatus(LimitStatus.EXCEEDED));
        }
        else {
            dispatch(setEndpointsLimitStatus(LimitStatus.OK));
        }
    }
    catch (error) {
        console.error(error);
    }
};


/***/ }),

/***/ 723:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return SET_BUCKETS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ADD_BUCKET; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return EDIT_BUCKET; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return REMOVE_BUCKET; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return setBuckets; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return addBucket; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return editBucket; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return removeBucket; });
const SET_BUCKETS = 'SET_BUCKETS';
const ADD_BUCKET = 'ADD_BUCKET';
const EDIT_BUCKET = 'EDIT_BUCKET';
const REMOVE_BUCKET = 'REMOVE_BUCKET';
const setBuckets = (status, schema) => ({
    type: SET_BUCKETS,
    status,
    schema,
});
const addBucket = (schema) => ({
    type: ADD_BUCKET,
    schema,
});
const editBucket = (schema) => ({
    type: EDIT_BUCKET,
    schema,
});
const removeBucket = (id) => ({
    type: REMOVE_BUCKET,
    id,
});


/***/ }),

/***/ 724:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return SET_SCRAPERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ADD_SCRAPER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return EDIT_SCRAPER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return REMOVE_SCRAPER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return setScrapers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return addScraper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return editScraper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return removeScraper; });
const SET_SCRAPERS = 'SET_SCRAPERS';
const ADD_SCRAPER = 'ADD_SCRAPERS';
const EDIT_SCRAPER = 'EDIT_SCRAPERS';
const REMOVE_SCRAPER = 'REMOVE_SCRAPERS';
const setScrapers = (status, schema) => ({
    type: SET_SCRAPERS,
    status,
    schema,
});
const addScraper = (schema) => ({
    type: ADD_SCRAPER,
    schema,
});
const editScraper = (schema) => ({
    type: EDIT_SCRAPER,
    schema,
});
const removeScraper = (id) => ({
    type: REMOVE_SCRAPER,
    id,
});


/***/ }),

/***/ 725:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SET_MEMBERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ADD_MEMBER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return REMOVE_MEMBER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return setMembers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return addMember; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return removeMember; });
const SET_MEMBERS = 'SET_MEMBERS';
const ADD_MEMBER = 'ADD_MEMBER';
const REMOVE_MEMBER = 'REMOVE_MEMBER';
const setMembers = (status, schema) => ({
    type: SET_MEMBERS,
    status,
    schema,
});
const addMember = (schema) => ({
    type: ADD_MEMBER,
    schema,
});
const removeMember = (id) => ({
    type: REMOVE_MEMBER,
    id,
});


/***/ }),

/***/ 726:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return RATE_LIMIT_ERROR_STATUS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return RATE_LIMIT_ERROR_TEXT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ASSET_LIMIT_ERROR_STATUS; });
/* unused harmony export ASSET_LIMIT_ERROR_TEXT */
const RATE_LIMIT_ERROR_STATUS = 429;
const RATE_LIMIT_ERROR_TEXT = 'Oops. It looks like you have exceeded the query limits allowed as part of your plan. If you would like to increase your query limits, reach out to support@influxdata.com.';
const ASSET_LIMIT_ERROR_STATUS = 403;
const ASSET_LIMIT_ERROR_TEXT = 'Oops. It looks like you have exceeded the asset limits allowed as part of your plan. If you would like to increase your limits, reach out to support@influxdata.com.';


/***/ }),

/***/ 727:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return SET_CHECKS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SET_CHECK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return REMOVE_CHECK; });
/* unused harmony export ADD_LABEL_TO_CHECK */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return REMOVE_LABEL_FROM_CHECK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return setChecks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return setCheck; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return removeCheck; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return removeLabelFromCheck; });
const SET_CHECKS = 'SET_CHECKS';
const SET_CHECK = 'SET_CHECK';
const REMOVE_CHECK = 'REMOVE_CHECK';
const ADD_LABEL_TO_CHECK = 'ADD_LABEL_TO_CHECK';
const REMOVE_LABEL_FROM_CHECK = 'REMOVE_LABEL_FROM_CHECK';
const setChecks = (status, schema) => ({
    type: SET_CHECKS,
    status,
    schema,
});
const setCheck = (id, status, schema) => ({
    type: SET_CHECK,
    id,
    status,
    schema,
});
const removeCheck = (id) => ({
    type: REMOVE_CHECK,
    id,
});
const removeLabelFromCheck = (checkID, labelID) => ({
    type: REMOVE_LABEL_FROM_CHECK,
    checkID,
    labelID,
});


/***/ }),

/***/ 728:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return SET_RULES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return SET_RULE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SET_CURRENT_RULE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return REMOVE_RULE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return REMOVE_LABEL_FROM_RULE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return setRules; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return setRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return setCurrentRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return removeRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return removeLabelFromRule; });
const SET_RULES = 'SET_RULES';
const SET_RULE = 'SET_RULE';
const SET_CURRENT_RULE = 'SET_CURRENT_RULE';
const REMOVE_RULE = 'REMOVE_RULE';
const REMOVE_LABEL_FROM_RULE = 'REMOVE_LABEL_FROM_RULE';
const setRules = (status, schema) => ({
    type: SET_RULES,
    status,
    schema,
});
const setRule = (id, status, schema) => ({
    type: SET_RULE,
    id,
    status,
    schema,
});
const setCurrentRule = (status, schema) => ({
    type: SET_CURRENT_RULE,
    status,
    schema,
});
const removeRule = (id) => ({
    type: REMOVE_RULE,
    id,
});
const removeLabelFromRule = (ruleID, labelID) => ({
    type: REMOVE_LABEL_FROM_RULE,
    ruleID,
    labelID,
});


/***/ }),

/***/ 729:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SET_ENDPOINT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return REMOVE_ENDPOINT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return SET_ENDPOINTS; });
/* unused harmony export ADD_LABEL_TO_ENDPOINT */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return REMOVE_LABEL_FROM_ENDPOINT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return removeEndpoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return setEndpoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return setEndpoints; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return removeLabelFromEndpoint; });
const SET_ENDPOINT = 'SET_ENDPOINT';
const REMOVE_ENDPOINT = 'REMOVE_ENDPOINT';
const SET_ENDPOINTS = 'SET_ENDPOINTS';
const ADD_LABEL_TO_ENDPOINT = 'ADD_LABEL_TO_ENDPOINT';
const REMOVE_LABEL_FROM_ENDPOINT = 'REMOVE_LABEL_FROM_ENDPOINT';
const removeEndpoint = (id) => ({ type: REMOVE_ENDPOINT, id });
const setEndpoint = (id, status, schema) => ({
    type: SET_ENDPOINT,
    id,
    status,
    schema,
});
const setEndpoints = (status, schema) => ({
    type: SET_ENDPOINTS,
    status,
    schema,
});
const removeLabelFromEndpoint = (endpointID, labelID) => ({
    type: REMOVE_LABEL_FROM_ENDPOINT,
    endpointID,
    labelID,
});


/***/ }),

/***/ 730:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

const DefaultErrorMessage = () => {
    return (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p", { className: "default-error-message", style: { display: 'flex', placeContent: 'center' } },
        "An InfluxDB error has occurred. Please report the issue\u00A0",
        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", { href: "https://github.com/influxdata/influxdb/issues" }, "here"),
        "."));
};
/* harmony default export */ __webpack_exports__["a"] = (DefaultErrorMessage);


/***/ }),

/***/ 738:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return formatVarsOption; });
/* harmony import */ var src_variables_constants_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(149);
/* harmony import */ var src_variables_utils_formatExpression__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(739);


const formatVarsOption = (variables) => {
    if (!variables.length) {
        return '';
    }
    const lines = variables.map(v => `${v.id.name}: ${Object(src_variables_utils_formatExpression__WEBPACK_IMPORTED_MODULE_1__[/* formatExpression */ "a"])(v.init)}`);
    const option = `option ${src_variables_constants_index__WEBPACK_IMPORTED_MODULE_0__[/* OPTION_NAME */ "b"]} = {
  ${lines.join(',\n  ')}
}`;
    return option;
};


/***/ }),

/***/ 739:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return formatExpression; });
const formatExpression = (expr) => {
    switch (expr.type) {
        case 'DateTimeLiteral':
        case 'BooleanLiteral':
        case 'UnsignedIntegerLiteral':
        case 'IntegerLiteral':
            return String(expr.value);
        case 'StringLiteral':
            return `"${expr.value}"`;
        case 'DurationLiteral':
            return expr.values.reduce((acc, { magnitude, unit }) => `${acc}${magnitude}${unit}`, '');
        case 'FloatLiteral':
            return String(expr.value).includes('.')
                ? String(expr.value)
                : expr.value.toFixed(1);
        case 'UnaryExpression':
            return `${expr.operator}${formatExpression(expr.argument)}`;
        case 'BinaryExpression':
            return `${formatExpression(expr.left)} ${expr.operator} ${formatExpression(expr.right)}`;
        case 'CallExpression':
            return `${formatExpression(expr.callee)}()`;
        case 'Identifier':
            return expr.name;
        default:
            throw new Error(`cant format expression of type ${expr.type}`);
    }
};


/***/ }),

/***/ 740:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getVarAssignment; });
/* harmony import */ var src_shared_utils_duration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(86);

const getVarAssignment = (name, { selectedValue, valueType }) => {
    const assignment = {
        type: 'VariableAssignment',
        id: { type: 'Identifier', name },
    };
    switch (valueType) {
        case 'boolean':
            return Object.assign(Object.assign({}, assignment), { init: {
                    type: 'BooleanLiteral',
                    value: selectedValue === 'true' ? true : false,
                } });
        case 'unsignedLong':
            return Object.assign(Object.assign({}, assignment), { init: {
                    type: 'UnsignedIntegerLiteral',
                    value: Number(selectedValue),
                } });
        case 'long':
            return Object.assign(Object.assign({}, assignment), { init: {
                    type: 'IntegerLiteral',
                    value: Number(selectedValue),
                } });
        case 'double':
            return Object.assign(Object.assign({}, assignment), { init: {
                    type: 'FloatLiteral',
                    value: Number(selectedValue),
                } });
        case 'string':
            return Object.assign(Object.assign({}, assignment), { init: {
                    type: 'StringLiteral',
                    value: selectedValue,
                } });
        case 'dateTime':
            return Object.assign(Object.assign({}, assignment), { init: {
                    type: 'DateTimeLiteral',
                    value: selectedValue,
                } });
        case 'duration':
            return Object.assign(Object.assign({}, assignment), { init: {
                    type: 'DurationLiteral',
                    values: Object(src_shared_utils_duration__WEBPACK_IMPORTED_MODULE_0__[/* parseDuration */ "h"])(selectedValue),
                } });
        default:
            throw new Error(`cannot form VariableAssignment from value of type "${valueType}"`);
    }
};


/***/ }),

/***/ 741:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return findDependentVariables; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return exportVariables; });
/* harmony import */ var src_variables_utils_hydrateVars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(497);

const getDescendantsFromGraph = (variable, varGraph) => {
    const node = varGraph.find(n => n.variable.id === variable.id);
    return Object(src_variables_utils_hydrateVars__WEBPACK_IMPORTED_MODULE_0__[/* collectDescendants */ "a"])(node).map(n => n.variable);
};
const findDependentVariables = (variable, allVariables) => {
    const varGraph = Object(src_variables_utils_hydrateVars__WEBPACK_IMPORTED_MODULE_0__[/* createVariableGraph */ "b"])(allVariables);
    return getDescendantsFromGraph(variable, varGraph);
};
const exportVariables = (variables, allVariables) => {
    const varSet = new Set();
    const varGraph = Object(src_variables_utils_hydrateVars__WEBPACK_IMPORTED_MODULE_0__[/* createVariableGraph */ "b"])(allVariables);
    for (const v of variables) {
        if (varSet.has(v)) {
            continue;
        }
        varSet.add(v);
        for (const d of getDescendantsFromGraph(v, varGraph)) {
            varSet.add(d);
        }
    }
    return [...varSet];
};


/***/ }),

/***/ 742:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return queryBuilderFetcher; });
/* harmony import */ var src_timeMachine_apis_queryBuilder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(416);

class QueryBuilderFetcher {
    constructor() {
        this.findKeysQueries = [];
        this.findValuesQueries = [];
        this.findKeysCache = {};
        this.findValuesCache = {};
        this.findBucketsCache = {};
    }
    async findBuckets(options) {
        this.cancelFindBuckets();
        const cacheKey = JSON.stringify(options);
        const cachedResult = this.findBucketsCache[cacheKey];
        if (cachedResult) {
            return Promise.resolve(cachedResult);
        }
        const pendingResult = Object(src_timeMachine_apis_queryBuilder__WEBPACK_IMPORTED_MODULE_0__[/* findBuckets */ "b"])(options);
        pendingResult.promise
            .then(result => {
            this.findBucketsCache[cacheKey] = result;
        })
            .catch(() => { });
        return pendingResult.promise;
    }
    cancelFindBuckets() {
        if (this.findBucketsQuery) {
            this.findBucketsQuery.cancel();
        }
    }
    async findKeys(index, options) {
        this.cancelFindKeys(index);
        const cacheKey = JSON.stringify(options);
        const cachedResult = this.findKeysCache[cacheKey];
        if (cachedResult) {
            return Promise.resolve(cachedResult);
        }
        const pendingResult = Object(src_timeMachine_apis_queryBuilder__WEBPACK_IMPORTED_MODULE_0__[/* findKeys */ "c"])(options);
        this.findKeysQueries[index] = pendingResult;
        pendingResult.promise
            .then(result => {
            this.findKeysCache[cacheKey] = result;
        })
            .catch(() => { });
        return pendingResult.promise;
    }
    cancelFindKeys(index) {
        if (this.findKeysQueries[index]) {
            this.findKeysQueries[index].cancel();
        }
    }
    async findValues(index, options) {
        this.cancelFindValues(index);
        const cacheKey = JSON.stringify(options);
        const cachedResult = this.findValuesCache[cacheKey];
        if (cachedResult) {
            return Promise.resolve(cachedResult);
        }
        const pendingResult = Object(src_timeMachine_apis_queryBuilder__WEBPACK_IMPORTED_MODULE_0__[/* findValues */ "d"])(options);
        this.findValuesQueries[index] = pendingResult;
        pendingResult.promise
            .then(result => {
            this.findValuesCache[cacheKey] = result;
        })
            .catch(() => { });
        return pendingResult.promise;
    }
    cancelFindValues(index) {
        if (this.findValuesQueries[index]) {
            this.findValuesQueries[index].cancel();
        }
    }
    clearCache() {
        this.findBucketsCache = {};
        this.findKeysCache = {};
        this.findValuesCache = {};
    }
}
const queryBuilderFetcher = new QueryBuilderFetcher();


/***/ }),

/***/ 743:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return fastReduce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return fastMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return fastFilter; });
/* unused harmony export fastForEach */
/* unused harmony export fastConcat */
/* unused harmony export fastCloneArray */
function fastReduce(subject, iterator, initialValue) {
    const length = subject.length;
    let i;
    let result;
    if (initialValue === undefined) {
        i = 1;
        result = subject[0];
    }
    else {
        i = 0;
        result = initialValue;
    }
    for (; i < length; i++) {
        result = iterator(result, subject[i], i, subject);
    }
    return result;
}
function fastMap(subject, iterator) {
    const length = subject.length;
    const result = new Array(length);
    for (let i = 0; i < length; i++) {
        result[i] = iterator(subject[i], i, subject);
    }
    return result;
}
function fastFilter(subject, iterator) {
    const length = subject.length;
    const result = [];
    for (let i = 0; i < length; i++) {
        if (iterator(subject[i], i, subject)) {
            result.push(subject[i]);
        }
    }
    return result;
}
function fastForEach(subject, iterator) {
    const length = subject.length;
    for (let i = 0; i < length; i++) {
        iterator(subject[i], i, subject);
    }
}
function fastConcat(...args) {
    const length = args.length;
    const arr = [];
    let item = [];
    let childLength = 0;
    for (let i = 0; i < length; i++) {
        item = args[i];
        if (Array.isArray(item)) {
            childLength = item.length;
            for (let j = 0; j < childLength; j++) {
                arr.push(item[j]);
            }
        }
        else {
            arr.push(item);
        }
    }
    return arr;
}
function fastCloneArray(input) {
    const length = input.length;
    const cloned = new Array(length);
    for (let i = 0; i < length; i++) {
        cloned[i] = input[i];
    }
    return cloned;
}


/***/ }),

/***/ 744:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return findNodes; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);

const findNodes = (node, predicate, acc = []) => {
    if (predicate(node)) {
        acc.push(node);
    }
    for (const value of Object.values(node)) {
        if (Object(lodash__WEBPACK_IMPORTED_MODULE_0__["isObject"])(value)) {
            findNodes(value, predicate, acc);
        }
        else if (Object(lodash__WEBPACK_IMPORTED_MODULE_0__["isArray"])(value)) {
            for (const innerValue of value) {
                findNodes(innerValue, predicate, acc);
            }
        }
    }
    return acc;
};


/***/ }),

/***/ 745:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return runStatusesQuery; });
/* unused harmony export processStatusesResponse */
/* harmony import */ var src_shared_apis_query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(152);
/* harmony import */ var _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85);
/* harmony import */ var _influxdata_giraffe__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_influxdata_giraffe__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var src_alerting_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(75);



const runStatusesQuery = (orgID, checkID, extern) => {
    const query = `
from(bucket: "${src_alerting_constants__WEBPACK_IMPORTED_MODULE_2__[/* MONITORING_BUCKET */ "n"]}")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r._measurement == "statuses" and r._field == "_message")
  |> filter(fn: (r) => exists r._check_id)
  |> filter(fn: (r) => exists r._check_name)
  |> filter(fn: (r) => exists r._level)
  |> keep(columns: ["_time", "_value", "_check_id", "_check_name", "_level"])
  |> window(every: 1s, timeColumn: "_time", startColumn: "_start", stopColumn: "_stop")
  |> group(columns: ["_start", "_stop"])
  |> filter(fn: (r) => r["_check_id"] == "${checkID}")
  |> rename(columns: {"_time": "time",
                      "_value": "message",
                      "_check_id": "checkID",
                      "_check_name": "checkName",
                      "_level": "level"})
`;
    return processStatusesResponse(Object(src_shared_apis_query__WEBPACK_IMPORTED_MODULE_0__[/* runQuery */ "a"])(orgID, query, extern));
};
const processStatusesResponse = ({ promise: queryPromise, cancel, }) => {
    const promise = queryPromise.then(resp => {
        if (resp.type !== 'SUCCESS') {
            return Promise.reject(new Error(resp.message));
        }
        const { table } = Object(_influxdata_giraffe__WEBPACK_IMPORTED_MODULE_1__["fromFlux"])(resp.csv);
        const rows = [[]];
        for (let i = 0; i < table.length; i++) {
            const row = {};
            for (const key of table.columnKeys) {
                row[key] = table.getColumn(key)[i];
            }
            const tableIndex = row['table'];
            if (!rows[tableIndex]) {
                rows[tableIndex] = [row];
            }
            else {
                rows[tableIndex].push(row);
            }
        }
        return rows;
    });
    return {
        promise,
        cancel,
    };
};


/***/ }),

/***/ 746:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return filterUnusedVars; });
/* harmony import */ var src_variables_utils_hydrateVars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(497);

function isQueryViewProperties(vp) {
    return vp.queries !== undefined;
}
const filterUnusedVars = (variables, views) => {
    const viewProperties = views.map(v => v.properties).filter(vp => !!vp);
    const queryViewProperties = viewProperties.filter(isQueryViewProperties);
    const queryTexts = queryViewProperties.reduce((acc, vp) => [...acc, ...vp.queries.map(query => query.text)], []);
    const varsInUse = variables.filter(variable => queryTexts.some(text => Object(src_variables_utils_hydrateVars__WEBPACK_IMPORTED_MODULE_0__[/* isInQuery */ "d"])(text, variable)));
    return varsInUse;
};


/***/ }),

/***/ 747:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getViewsForDashboard; });
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var src_resources_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(24);


const getViewsForDashboard = (state, dashboardID) => {
    const dashboard = Object(src_resources_selectors__WEBPACK_IMPORTED_MODULE_1__[/* getByID */ "b"])(state, src_types__WEBPACK_IMPORTED_MODULE_0__["ResourceType"].Dashboards, dashboardID);
    const cellIDs = new Set(dashboard.cells.map(cellID => cellID));
    const views = Object.values(state.resources.views.byID).filter(view => view && cellIDs.has(view.cellID));
    return views;
};


/***/ }),

/***/ 748:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createAuthorization; });
/* harmony import */ var src_utils_ajax__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(400);

const createAuthorization = async (authorization) => {
    try {
        const { data } = await Object(src_utils_ajax__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])({
            method: 'POST',
            url: '/api/v2/authorizations',
            data: authorization,
        });
        return data;
    }
    catch (error) {
        console.error(error);
        throw error;
    }
};


/***/ }),

/***/ 749:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getMembers; });
/* unused harmony export addNewMember */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return deleteMember; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(41);
/* harmony import */ var src_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14);
/* harmony import */ var src_schemas__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(175);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var src_members_actions_creators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(725);
/* harmony import */ var src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(33);
/* harmony import */ var src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(35);
/* harmony import */ var src_organizations_selectors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(19);









const getMembers = () => async (dispatch, getState) => {
    try {
        const { id } = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_8__[/* getOrg */ "a"])(getState());
        dispatch(Object(src_members_actions_creators__WEBPACK_IMPORTED_MODULE_5__[/* setMembers */ "f"])(src_types__WEBPACK_IMPORTED_MODULE_4__["RemoteDataState"].Loading));
        const [ownersResp, membersResp] = await Promise.all([
            src_client__WEBPACK_IMPORTED_MODULE_2__[/* getOrgsOwners */ "I"]({ orgID: id }),
            src_client__WEBPACK_IMPORTED_MODULE_2__[/* getOrgsMembers */ "H"]({ orgID: id }),
        ]);
        if (ownersResp.status !== 200) {
            throw new Error(ownersResp.data.message);
        }
        if (membersResp.status !== 200) {
            throw new Error(membersResp.data.message);
        }
        const owners = ownersResp.data.users;
        const members = membersResp.data.users;
        const allMembers = [...owners, ...members];
        const normalized = Object(normalizr__WEBPACK_IMPORTED_MODULE_1__[/* normalize */ "a"])(allMembers, src_schemas__WEBPACK_IMPORTED_MODULE_3__[/* arrayOfMembers */ "d"]);
        dispatch(Object(src_members_actions_creators__WEBPACK_IMPORTED_MODULE_5__[/* setMembers */ "f"])(src_types__WEBPACK_IMPORTED_MODULE_4__["RemoteDataState"].Done, normalized));
    }
    catch (e) {
        console.error(e);
        dispatch(Object(src_members_actions_creators__WEBPACK_IMPORTED_MODULE_5__[/* setMembers */ "f"])(src_types__WEBPACK_IMPORTED_MODULE_4__["RemoteDataState"].Error));
    }
};
const addNewMember = (data) => async (dispatch, getState) => {
    try {
        const { id } = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_8__[/* getOrg */ "a"])(getState());
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_2__[/* postOrgsMember */ "pb"]({ orgID: id, data });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        const newMember = resp.data;
        const member = Object(normalizr__WEBPACK_IMPORTED_MODULE_1__[/* normalize */ "a"])(newMember, src_schemas__WEBPACK_IMPORTED_MODULE_3__[/* memberSchema */ "m"]);
        dispatch(Object(src_members_actions_creators__WEBPACK_IMPORTED_MODULE_5__[/* addMember */ "d"])(member));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_7__[/* memberAddSuccess */ "Jb"])(newMember.name)));
    }
    catch (e) {
        console.error(e);
        const message = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["get"])(e, 'response.data.message', 'Unknown error');
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_7__[/* memberAddFailed */ "Ib"])(message)));
        throw e;
    }
};
const deleteMember = (member) => async (dispatch, getState) => {
    try {
        const { id } = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_8__[/* getOrg */ "a"])(getState());
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_2__[/* deleteOrgsMember */ "o"]({ orgID: id, userID: member.id });
        if (resp.status !== 204) {
            throw new Error(resp.data.message);
        }
        dispatch(Object(src_members_actions_creators__WEBPACK_IMPORTED_MODULE_5__[/* removeMember */ "e"])(member.id));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_7__[/* memberRemoveSuccess */ "Lb"])(member.name)));
    }
    catch (e) {
        console.error(e);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_6__[/* notify */ "c"])(Object(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_7__[/* memberRemoveFailed */ "Kb"])(member.name)));
    }
};


/***/ }),

/***/ 75:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return DEFAULT_CHECK_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return DEFAULT_NOTIFICATION_RULE_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CHECK_NAME_MAX_LENGTH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return DEFAULT_CHECK_EVERY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return DEFAULT_CHECK_OFFSET; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return DEFAULT_CHECK_TAGS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return DEFAULT_CHECK_REPORT_ZERO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return DEFAULT_DEADMAN_LEVEL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return DEFAULT_STATUS_MESSAGE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return CHECK_OFFSET_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return MONITORING_BUCKET; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return LEVEL_COLORS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return LEVEL_COMPONENT_COLORS; });
/* unused harmony export DEFAULT_THRESHOLD_CHECK */
/* unused harmony export NEW_TAG_RULE_DRAFT */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return DEFAULT_ENDPOINT_URLS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return NEW_ENDPOINT_DRAFT; });
/* unused harmony export NEW_ENDPOINT_FIXTURES */
/* harmony import */ var _influxdata_clockface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
/* harmony import */ var _influxdata_clockface__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_influxdata_clockface__WEBPACK_IMPORTED_MODULE_0__);

const DEFAULT_CHECK_NAME = 'Name this Check';
const DEFAULT_NOTIFICATION_RULE_NAME = 'Name this Notification Rule';
const CHECK_NAME_MAX_LENGTH = 68;
const DEFAULT_CHECK_EVERY = '1m';
const DEFAULT_CHECK_OFFSET = '0s';
const DEFAULT_CHECK_TAGS = [];
const DEFAULT_CHECK_REPORT_ZERO = false;
const DEFAULT_DEADMAN_LEVEL = 'CRIT';
const DEFAULT_STATUS_MESSAGE = 'Check: ${ r._check_name } is: ${ r._level }';
const CHECK_OFFSET_OPTIONS = [
    '0s',
    '5s',
    '15s',
    '1m',
    '5m',
    '15m',
    '1h',
    '6h',
    '12h',
    '24h',
    '2d',
    '7d',
    '30d',
];
const MONITORING_BUCKET = '_monitoring';
const LEVEL_COLORS = {
    OK: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_0__["InfluxColors"].Viridian,
    INFO: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_0__["InfluxColors"].Ocean,
    WARN: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_0__["InfluxColors"].Thunder,
    CRIT: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_0__["InfluxColors"].Fire,
    UNKNOWN: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_0__["InfluxColors"].Amethyst,
};
const LEVEL_COMPONENT_COLORS = {
    OK: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_0__["ComponentColor"].Success,
    INFO: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_0__["ComponentColor"].Primary,
    WARN: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_0__["ComponentColor"].Warning,
    CRIT: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_0__["ComponentColor"].Danger,
};
const DEFAULT_THRESHOLD_CHECK = {
    name: DEFAULT_CHECK_NAME,
    type: 'threshold',
    activeStatus: 'active',
    thresholds: [],
    every: DEFAULT_CHECK_EVERY,
    offset: DEFAULT_CHECK_OFFSET,
    statusMessageTemplate: DEFAULT_STATUS_MESSAGE,
};
const NEW_TAG_RULE_DRAFT = {
    cid: '',
    value: {
        key: '',
        value: '',
        operator: 'equal',
    },
};
const DEFAULT_ENDPOINT_URLS = {
    slack: 'https://hooks.slack.com/services/X/X/X',
    pagerduty: 'https://events.pagerduty.com/v2/enqueue',
    http: 'https://www.example.com/endpoint',
};
const NEW_ENDPOINT_DRAFT = {
    name: 'Name this Endpoint',
    description: '',
    activeStatus: 'active',
    type: 'slack',
    token: '',
    url: DEFAULT_ENDPOINT_URLS['slack'],
    status: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_0__["RemoteDataState"].Done,
    labels: [],
};
const NEW_ENDPOINT_FIXTURES = [
    {
        id: '1',
        orgID: '1',
        userID: '1',
        description: 'interrupt everyone at work',
        name: 'Slack',
        activeStatus: 'active',
        type: 'slack',
        url: 'insert.slack.url.here',
        token: 'plerps',
        status: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_0__["RemoteDataState"].Done,
        labels: [],
    },
    {
        id: '3',
        orgID: '1',
        userID: '1',
        description: 'interrupt someone by all means known to man',
        name: 'PagerDuty',
        activeStatus: 'active',
        type: 'pagerduty',
        clientURL: 'insert.pagerduty.client.url.here',
        routingKey: 'plerps',
        status: _influxdata_clockface__WEBPACK_IMPORTED_MODULE_0__["RemoteDataState"].Done,
        labels: [],
    },
];


/***/ }),

/***/ 76:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return labelSchema; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return arrayOfLabels; });
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var src_labels_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(189);



const labelSchema = new normalizr__WEBPACK_IMPORTED_MODULE_0__[/* schema */ "b"].Entity(src_types__WEBPACK_IMPORTED_MODULE_1__["ResourceType"].Labels, {}, {
    processStrategy: (label) => Object(src_labels_utils__WEBPACK_IMPORTED_MODULE_2__[/* addLabelDefaults */ "a"])(label),
});
const arrayOfLabels = [labelSchema];


/***/ }),

/***/ 77:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return createDashboard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return cloneDashboard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return getDashboards; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return createDashboardFromTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return deleteDashboard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return refreshDashboardVariableValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return getDashboard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return updateDashboard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addDashboardLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return removeDashboardLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return selectVariableValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return convertToTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return saveVEOView; });
/* harmony import */ var normalizr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var react_router_redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(209);
/* harmony import */ var react_router_redux__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_router_redux__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var src_dashboards_apis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(414);
/* harmony import */ var src_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(14);
/* harmony import */ var src_templates_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(278);
/* harmony import */ var src_cells_actions_thunks__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(277);
/* harmony import */ var src_schemas__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(175);
/* harmony import */ var src_schemas_dashboards__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(136);
/* harmony import */ var src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(33);
/* harmony import */ var src_dashboards_actions_ranges__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(240);
/* harmony import */ var src_views_actions_creators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(241);
/* harmony import */ var src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(164);
/* harmony import */ var src_variables_actions_thunks__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(127);
/* harmony import */ var src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(245);
/* harmony import */ var src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(72);
/* harmony import */ var src_views_actions_thunks__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(415);
/* harmony import */ var src_labels_actions_creators__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(135);
/* harmony import */ var src_dashboards_actions_creators__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(299);
/* harmony import */ var src_shared_utils_filterUnusedVars__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(746);
/* harmony import */ var src_variables_selectors__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(88);
/* harmony import */ var src_shared_utils_resourceToTemplate__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(310);
/* harmony import */ var src_variables_utils_exportVariables__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(741);
/* harmony import */ var src_timeMachine_selectors__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(31);
/* harmony import */ var src_utils_naming__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(312);
/* harmony import */ var src_cloud_utils_limits__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(100);
/* harmony import */ var src_organizations_selectors__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(19);
/* harmony import */ var src_resources_selectors__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(24);
/* harmony import */ var src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(35);
/* harmony import */ var src_dashboards_constants_index__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(70);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(5);
/* harmony import */ var src_schemas_variables__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(215);































const createDashboard = () => async (dispatch, getState) => {
    try {
        const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_25__[/* getOrg */ "a"])(getState());
        const newDashboard = {
            name: src_dashboards_constants_index__WEBPACK_IMPORTED_MODULE_28__[/* DEFAULT_DASHBOARD_NAME */ "e"],
            cells: [],
            orgID: org.id,
        };
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_3__[/* postDashboard */ "fb"]({ data: newDashboard });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        dispatch(Object(react_router_redux__WEBPACK_IMPORTED_MODULE_1__["push"])(`/orgs/${org.id}/dashboards/${resp.data.id}`));
        dispatch(Object(src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_14__[/* checkDashboardLimits */ "e"])());
    }
    catch (error) {
        console.error(error);
        if (Object(src_cloud_utils_limits__WEBPACK_IMPORTED_MODULE_24__[/* isLimitError */ "p"])(error)) {
            dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_8__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_27__[/* resourceLimitReached */ "fc"]('dashboards')));
        }
        else {
            dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_8__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_27__[/* dashboardCreateFailed */ "Z"]()));
        }
    }
};
const cloneDashboard = (dashboardID, dashboardName) => async (dispatch, getState) => {
    try {
        const state = getState();
        const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_25__[/* getOrg */ "a"])(state);
        const dashboards = Object(src_resources_selectors__WEBPACK_IMPORTED_MODULE_26__[/* getAll */ "a"])(state, src_types__WEBPACK_IMPORTED_MODULE_29__["ResourceType"].Dashboards);
        const allDashboardNames = dashboards.map(d => d.name);
        const clonedName = Object(src_utils_naming__WEBPACK_IMPORTED_MODULE_23__[/* incrementCloneName */ "a"])(allDashboardNames, dashboardName);
        const getResp = await src_client__WEBPACK_IMPORTED_MODULE_3__[/* getDashboard */ "z"]({
            dashboardID,
            query: { include: 'properties' },
        });
        if (getResp.status !== 200) {
            throw new Error(getResp.data.message);
        }
        const { entities, result } = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(getResp.data, src_schemas__WEBPACK_IMPORTED_MODULE_6__[/* dashboardSchema */ "k"]);
        const dash = entities.dashboards[result];
        const cells = Object.values(entities.cells || {});
        const postResp = await src_client__WEBPACK_IMPORTED_MODULE_3__[/* postDashboard */ "fb"]({
            data: {
                orgID: org.id,
                name: clonedName,
                description: dash.description || '',
            },
        });
        if (postResp.status !== 201) {
            throw new Error(postResp.data.message);
        }
        const pendingLabels = getResp.data.labels.map(l => src_client__WEBPACK_IMPORTED_MODULE_3__[/* postDashboardsLabel */ "hb"]({
            dashboardID: postResp.data.id,
            data: { labelID: l.id },
        }));
        const mappedLabels = await Promise.all(pendingLabels);
        if (mappedLabels.length > 0 && mappedLabels.some(l => l.status !== 201)) {
            throw new Error('An error occurred cloning the labels for this dashboard');
        }
        const clonedDashboardID = postResp.data.id;
        const clonedViews = await src_dashboards_apis__WEBPACK_IMPORTED_MODULE_2__[/* cloneUtilFunc */ "a"](cells, dashboardID, clonedDashboardID);
        const newViews = await Promise.all(clonedViews);
        if (newViews.length > 0 && newViews.some(v => v.status !== 200)) {
            throw new Error('An error occurred cloning the dashboard');
        }
        dispatch(Object(src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_14__[/* checkDashboardLimits */ "e"])());
        dispatch(Object(react_router_redux__WEBPACK_IMPORTED_MODULE_1__["push"])(`/orgs/${org.id}/dashboards/${postResp.data.id}`));
    }
    catch (error) {
        console.error(error);
        if (Object(src_cloud_utils_limits__WEBPACK_IMPORTED_MODULE_24__[/* isLimitError */ "p"])(error)) {
            dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_8__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_27__[/* resourceLimitReached */ "fc"]('dashboards')));
        }
        else {
            dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_8__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_27__[/* dashboardCreateFailed */ "Z"]()));
        }
    }
};
const getDashboards = () => async (dispatch, getState) => {
    try {
        const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_25__[/* getOrg */ "a"])(getState());
        const { setDashboards } = src_dashboards_actions_creators__WEBPACK_IMPORTED_MODULE_17__;
        dispatch(setDashboards(src_types__WEBPACK_IMPORTED_MODULE_29__["RemoteDataState"].Loading));
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_3__[/* getDashboards */ "A"]({ query: { orgID: org.id } });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const dashboards = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data.dashboards, src_schemas__WEBPACK_IMPORTED_MODULE_6__[/* arrayOfDashboards */ "c"]);
        dispatch(setDashboards(src_types__WEBPACK_IMPORTED_MODULE_29__["RemoteDataState"].Done, dashboards));
    }
    catch (error) {
        dispatch(src_dashboards_actions_creators__WEBPACK_IMPORTED_MODULE_17__["setDashboards"](src_types__WEBPACK_IMPORTED_MODULE_29__["RemoteDataState"].Error));
        console.error(error);
        throw error;
    }
};
const createDashboardFromTemplate = (template) => async (dispatch, getState) => {
    try {
        const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_25__[/* getOrg */ "a"])(getState());
        await src_templates_api__WEBPACK_IMPORTED_MODULE_4__[/* createDashboardFromTemplate */ "a"](template, org.id);
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_3__[/* getDashboards */ "A"]({ query: { orgID: org.id } });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const dashboards = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data.dashboards, src_schemas__WEBPACK_IMPORTED_MODULE_6__[/* arrayOfDashboards */ "c"]);
        dispatch(src_dashboards_actions_creators__WEBPACK_IMPORTED_MODULE_17__["setDashboards"](src_types__WEBPACK_IMPORTED_MODULE_29__["RemoteDataState"].Done, dashboards));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_8__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_27__[/* importDashboardSucceeded */ "zb"]()));
        dispatch(Object(src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_14__[/* checkDashboardLimits */ "e"])());
    }
    catch (error) {
        if (Object(src_cloud_utils_limits__WEBPACK_IMPORTED_MODULE_24__[/* isLimitError */ "p"])(error)) {
            dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_8__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_27__[/* resourceLimitReached */ "fc"]('dashboards')));
        }
        else {
            dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_8__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_27__[/* importDashboardFailed */ "yb"](error)));
        }
    }
};
const deleteDashboard = (dashboardID, name) => async (dispatch) => {
    dispatch(src_dashboards_actions_creators__WEBPACK_IMPORTED_MODULE_17__["removeDashboard"](dashboardID));
    dispatch(Object(src_dashboards_actions_ranges__WEBPACK_IMPORTED_MODULE_9__[/* deleteTimeRange */ "b"])(dashboardID));
    try {
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_3__[/* deleteDashboard */ "f"]({ dashboardID });
        if (resp.status !== 204) {
            throw new Error(resp.data.message);
        }
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_8__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_27__[/* dashboardDeleted */ "bb"](name)));
        dispatch(Object(src_cloud_actions_limits__WEBPACK_IMPORTED_MODULE_14__[/* checkDashboardLimits */ "e"])());
    }
    catch (error) {
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_8__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_27__[/* dashboardDeleteFailed */ "ab"](name, error.data.message)));
    }
};
const refreshDashboardVariableValues = (dashboardID, nextViews) => (dispatch, getState) => {
    const variables = Object(src_variables_selectors__WEBPACK_IMPORTED_MODULE_19__[/* extractVariablesList */ "f"])(getState());
    const variablesInUse = Object(src_shared_utils_filterUnusedVars__WEBPACK_IMPORTED_MODULE_18__[/* filterUnusedVars */ "a"])(variables, nextViews);
    return dispatch(Object(src_variables_actions_thunks__WEBPACK_IMPORTED_MODULE_12__[/* refreshVariableValues */ "g"])(dashboardID, variablesInUse));
};
const getDashboard = (dashboardID) => async (dispatch, getState) => {
    try {
        dispatch(src_dashboards_actions_creators__WEBPACK_IMPORTED_MODULE_17__["setDashboard"](dashboardID, src_types__WEBPACK_IMPORTED_MODULE_29__["RemoteDataState"].Loading));
        const [resp] = await Promise.all([
            src_client__WEBPACK_IMPORTED_MODULE_3__[/* getDashboard */ "z"]({ dashboardID, query: { include: 'properties' } }),
            dispatch(Object(src_variables_actions_thunks__WEBPACK_IMPORTED_MODULE_12__[/* getVariables */ "f"])()),
        ]);
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const normDash = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data, src_schemas__WEBPACK_IMPORTED_MODULE_6__[/* dashboardSchema */ "k"]);
        const cellViews = resp.data.cells || [];
        const viewsData = Object(src_schemas_dashboards__WEBPACK_IMPORTED_MODULE_7__[/* viewsFromCells */ "h"])(cellViews, dashboardID);
        const normViews = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(viewsData, src_schemas__WEBPACK_IMPORTED_MODULE_6__[/* arrayOfViews */ "g"]);
        dispatch(Object(src_views_actions_creators__WEBPACK_IMPORTED_MODULE_10__[/* setViews */ "f"])(src_types__WEBPACK_IMPORTED_MODULE_29__["RemoteDataState"].Done, normViews));
        await dispatch(refreshDashboardVariableValues(dashboardID, viewsData));
        dispatch(src_dashboards_actions_creators__WEBPACK_IMPORTED_MODULE_17__["setDashboard"](dashboardID, src_types__WEBPACK_IMPORTED_MODULE_29__["RemoteDataState"].Done, normDash));
        dispatch(Object(src_dashboards_actions_ranges__WEBPACK_IMPORTED_MODULE_9__[/* updateTimeRangeFromQueryParams */ "f"])(dashboardID));
    }
    catch (error) {
        const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_25__[/* getOrg */ "a"])(getState());
        dispatch(Object(react_router_redux__WEBPACK_IMPORTED_MODULE_1__["push"])(`/orgs/${org.id}/dashboards`));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_8__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_27__[/* dashboardGetFailed */ "cb"](dashboardID, error.message)));
        return;
    }
};
const updateDashboard = (id, updates) => async (dispatch, getState) => {
    const state = getState();
    const currentDashboard = Object(src_resources_selectors__WEBPACK_IMPORTED_MODULE_26__[/* getByID */ "b"])(state, src_types__WEBPACK_IMPORTED_MODULE_29__["ResourceType"].Dashboards, id);
    const dashboard = Object.assign(Object.assign({}, currentDashboard), updates);
    try {
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_3__[/* patchDashboard */ "T"]({
            dashboardID: dashboard.id,
            data: dashboard,
        });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        const updatedDashboard = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data, src_schemas__WEBPACK_IMPORTED_MODULE_6__[/* dashboardSchema */ "k"]);
        dispatch(src_dashboards_actions_creators__WEBPACK_IMPORTED_MODULE_17__["editDashboard"](updatedDashboard));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_8__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_27__[/* dashboardUpdateFailed */ "db"]()));
    }
};
const addDashboardLabel = (dashboardID, label) => async (dispatch) => {
    try {
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_3__[/* postDashboardsLabel */ "hb"]({
            dashboardID,
            data: { labelID: label.id },
        });
        if (resp.status !== 201) {
            throw new Error(resp.data.message);
        }
        const normLabel = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data.label, src_schemas__WEBPACK_IMPORTED_MODULE_6__[/* labelSchema */ "l"]);
        dispatch(Object(src_labels_actions_creators__WEBPACK_IMPORTED_MODULE_16__[/* setLabelOnResource */ "g"])(dashboardID, normLabel));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_8__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_27__[/* addDashboardLabelFailed */ "m"]()));
    }
};
const removeDashboardLabel = (dashboardID, label) => async (dispatch) => {
    try {
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_3__[/* deleteDashboardsLabel */ "h"]({
            dashboardID,
            labelID: label.id,
        });
        if (resp.status !== 204) {
            throw new Error(resp.data.message);
        }
        dispatch(src_dashboards_actions_creators__WEBPACK_IMPORTED_MODULE_17__["removeDashboardLabel"](dashboardID, label.id));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_8__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_27__[/* removedDashboardLabelFailed */ "ec"]()));
    }
};
const selectVariableValue = (dashboardID, variableID, value) => async (dispatch, getState) => {
    const state = getState();
    const variables = Object(src_variables_selectors__WEBPACK_IMPORTED_MODULE_19__[/* getHydratedVariables */ "j"])(state, dashboardID);
    const dashboard = Object(src_resources_selectors__WEBPACK_IMPORTED_MODULE_26__[/* getByID */ "b"])(state, src_types__WEBPACK_IMPORTED_MODULE_29__["ResourceType"].Dashboards, dashboardID);
    dispatch(Object(src_variables_actions_creators__WEBPACK_IMPORTED_MODULE_11__[/* selectValue */ "p"])(dashboardID, variableID, value));
    await dispatch(Object(src_variables_actions_thunks__WEBPACK_IMPORTED_MODULE_12__[/* refreshVariableValues */ "g"])(dashboard.id, variables));
};
const convertToTemplate = (dashboardID) => async (dispatch, getState) => {
    try {
        dispatch(Object(src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_13__[/* setExportTemplate */ "j"])(src_types__WEBPACK_IMPORTED_MODULE_29__["RemoteDataState"].Loading));
        const state = getState();
        const org = Object(src_organizations_selectors__WEBPACK_IMPORTED_MODULE_25__[/* getOrg */ "a"])(state);
        const dashResp = await src_client__WEBPACK_IMPORTED_MODULE_3__[/* getDashboard */ "z"]({ dashboardID });
        if (dashResp.status !== 200) {
            throw new Error(dashResp.data.message);
        }
        const { entities, result } = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(dashResp.data, src_schemas__WEBPACK_IMPORTED_MODULE_6__[/* dashboardSchema */ "k"]);
        const dashboard = entities.dashboards[result];
        const cells = dashboard.cells.map(cellID => entities.cells[cellID]);
        const pendingViews = dashboard.cells.map(cellID => src_dashboards_apis__WEBPACK_IMPORTED_MODULE_2__[/* getView */ "b"](dashboardID, cellID));
        const views = await Promise.all(pendingViews);
        const resp = await src_client__WEBPACK_IMPORTED_MODULE_3__[/* getVariables */ "P"]({ query: { orgID: org.id } });
        if (resp.status !== 200) {
            throw new Error(resp.data.message);
        }
        let vars = [];
        if (resp.data.variables.length) {
            const normVars = Object(normalizr__WEBPACK_IMPORTED_MODULE_0__[/* normalize */ "a"])(resp.data.variables, src_schemas_variables__WEBPACK_IMPORTED_MODULE_30__[/* arrayOfVariables */ "a"]);
            vars = Object.values(normVars.entities.variables);
        }
        const variables = Object(src_shared_utils_filterUnusedVars__WEBPACK_IMPORTED_MODULE_18__[/* filterUnusedVars */ "a"])(vars, views);
        const exportedVariables = Object(src_variables_utils_exportVariables__WEBPACK_IMPORTED_MODULE_21__[/* exportVariables */ "a"])(variables, vars);
        const dashboardTemplate = Object(src_shared_utils_resourceToTemplate__WEBPACK_IMPORTED_MODULE_20__[/* dashboardToTemplate */ "a"])(state, dashboard, cells, views, exportedVariables);
        dispatch(Object(src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_13__[/* setExportTemplate */ "j"])(src_types__WEBPACK_IMPORTED_MODULE_29__["RemoteDataState"].Done, dashboardTemplate));
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_templates_actions_creators__WEBPACK_IMPORTED_MODULE_13__[/* setExportTemplate */ "j"])(src_types__WEBPACK_IMPORTED_MODULE_29__["RemoteDataState"].Error));
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_8__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_27__[/* createTemplateFailed */ "U"](error)));
    }
};
const saveVEOView = (dashboardID) => async (dispatch, getState) => {
    const view = Object(src_timeMachine_selectors__WEBPACK_IMPORTED_MODULE_22__[/* getSaveableView */ "k"])(getState());
    try {
        if (view.id) {
            await dispatch(Object(src_views_actions_thunks__WEBPACK_IMPORTED_MODULE_15__[/* updateViewAndVariables */ "c"])(dashboardID, view));
        }
        else {
            await dispatch(Object(src_cells_actions_thunks__WEBPACK_IMPORTED_MODULE_5__[/* createCellWithView */ "a"])(dashboardID, view));
        }
    }
    catch (error) {
        console.error(error);
        dispatch(Object(src_shared_actions_notifications__WEBPACK_IMPORTED_MODULE_8__[/* notify */ "c"])(src_shared_copy_notifications__WEBPACK_IMPORTED_MODULE_27__[/* cellAddFailed */ "H"]()));
        throw error;
    }
};


/***/ }),

/***/ 781:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return loader; });
/* harmony import */ var onigasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(782);
/* harmony import */ var onigasm__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(onigasm__WEBPACK_IMPORTED_MODULE_0__);

let wasm = false;
let loading = false;
const queue = [];
function loader() {
    return new Promise(resolve => {
        if (wasm) {
            resolve();
            return;
        }
        queue.push(resolve);
        if (loading) {
            return;
        }
        loading = true;
        Object(onigasm__WEBPACK_IMPORTED_MODULE_0__["loadWASM"])(__webpack_require__(1289)).then(() => {
            wasm = true;
            queue.forEach(c => c());
        });
    });
}


/***/ }),

/***/ 790:
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ 841:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getDataLoaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getSteps; });
const getDataLoaders = (state) => {
    return state.dataLoading.dataLoaders;
};
const getSteps = (state) => {
    return state.dataLoading.steps;
};


/***/ }),

/***/ 842:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var src_shared_decorators_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(11);
/* harmony import */ var src_shared_components_CodeSnippet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(336);




let TelegrafInstructions = class TelegrafInstructions extends react__WEBPACK_IMPORTED_MODULE_1__["PureComponent"] {
    render() {
        const { token, configID } = this.props;
        const exportToken = `export INFLUX_TOKEN=${token || ''}`;
        const configScript = `telegraf --config ${this.origin}/api/v2/telegrafs/${configID || ''}`;
        return (react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", { "data-testid": "setup-instructions", className: "telegraf-instructions" },
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h6", null, "1. Install the Latest Telegraf"),
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", null,
                "You can install the latest Telegraf by visiting the",
                ' ',
                react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", { href: "https://portal.influxdata.com/downloads/", target: "_blank", rel: "noopener noreferrer" }, "InfluxData Downloads\u00A0"),
                "page. If you already have Telegraf installed on your system, make sure it's up to date. You will need version 1.9.2 or higher."),
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h6", null, "2. Configure your API Token"),
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", null, "Your API token is required for pushing data into InfluxDB. You can copy the following command to your terminal window to set an environment variable with your token."),
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(src_shared_components_CodeSnippet__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"], { copyText: exportToken, label: "CLI" }),
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h6", null, "3. Start Telegraf"),
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", null, "Finally, you can run the following command to start the Telegraf agent running on your machine."),
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(src_shared_components_CodeSnippet__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"], { copyText: configScript, label: "CLI" })));
    }
    get origin() {
        return window.location.origin;
    }
};
TelegrafInstructions = Object(tslib__WEBPACK_IMPORTED_MODULE_0__[/* __decorate */ "a"])([
    src_shared_decorators_errors__WEBPACK_IMPORTED_MODULE_2__[/* ErrorHandling */ "a"]
], TelegrafInstructions);
/* harmony default export */ __webpack_exports__["a"] = (TelegrafInstructions);


/***/ }),

/***/ 846:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(2);
var react_default = /*#__PURE__*/__webpack_require__.n(react);

// EXTERNAL MODULE: ./node_modules/react-monaco-editor/lib/index.js
var lib = __webpack_require__(750);
var lib_default = /*#__PURE__*/__webpack_require__.n(lib);

// CONCATENATED MODULE: ./src/external/monaco.tomlTheme.ts
const THEME_NAME = 'tomlTheme';
/* harmony default export */ var monaco_tomlTheme = (function (monaco) {
    monaco.editor.defineTheme(THEME_NAME, {
        base: 'vs-dark',
        inherit: false,
        rules: [
            {
                token: 'punctuation.definition.comment.toml',
                foreground: '#676978',
            },
            {
                token: 'comment.line.number-sign.toml',
                foreground: '#676978',
            },
            {
                token: 'constant.numeric.integer.toml',
                foreground: '#7CE490',
            },
            {
                token: 'constant.numeric.float.toml',
                foreground: '#7CE490',
            },
            {
                token: 'string.quoted.double.toml',
                foreground: '#7CE490',
            },
            {
                token: 'constant.language.boolean.toml',
                foreground: '#32B08C',
            },
            {
                token: 'entity.name.section.toml',
                foreground: '#ff4d96',
            },
            {
                token: '',
                foreground: '#f8f8f8',
                background: '#202028',
            },
        ],
        colors: {
            'editor.foreground': '#F8F8F8',
            'editor.background': '#202028',
            'editorGutter.background': '#25252e',
            'editor.selectionBackground': '#353640',
            'editorLineNumber.foreground': '#666978',
            'editor.lineHighlightBackground': '#353640',
            'editorCursor.foreground': '#ffffff',
            'editorActiveLineNumber.foreground': '#bec2cc',
        },
    });
});

// EXTERNAL MODULE: ./src/external/monaco.onigasm.ts
var monaco_onigasm = __webpack_require__(781);

// EXTERNAL MODULE: ./node_modules/monaco-textmate/dist/main.js
var main = __webpack_require__(449);

// EXTERNAL MODULE: ./node_modules/monaco-editor-textmate/dist/index.js
var dist = __webpack_require__(789);

// CONCATENATED MODULE: ./src/external/monaco.tomlSyntax.ts



async function addSyntax(monaco) {
    await Object(monaco_onigasm["a" /* default */])();
    monaco.languages.register({ id: 'toml' });
    const registry = new main["Registry"]({
        getGrammarDefinition: async () => ({
            format: 'json',
            content: await __webpack_require__.e(/* import() */ 8).then(__webpack_require__.t.bind(null, 1549, 3)).then(data => {
                return JSON.stringify(data);
            }),
        }),
    });
    const grammars = new Map();
    grammars.set('toml', 'toml');
    await Object(dist["wireTmGrammars"])(monaco, registry, grammars);
}

// EXTERNAL MODULE: ./src/shared/components/FluxMonacoEditor.scss
var FluxMonacoEditor = __webpack_require__(790);

// CONCATENATED MODULE: ./src/shared/components/TomlMonacoEditor.tsx





const TomlEditorMonaco = props => {
    const editorWillMount = (monaco) => {
        monaco_tomlTheme(monaco);
        addSyntax(monaco);
    };
    const editorDidMount = (editor) => {
        editor.onDidChangeCursorPosition((evt) => {
            const { position } = evt;
            const { onCursorChange } = props;
            const pos = {
                line: position.lineNumber,
                ch: position.column,
            };
            if (onCursorChange) {
                onCursorChange(pos);
            }
        });
        editor.onKeyUp((evt) => {
            const { ctrlKey, code } = evt;
            const { onSubmitScript } = props;
            if (ctrlKey && code === 'Enter') {
                if (onSubmitScript) {
                    onSubmitScript();
                }
            }
        });
        if (props.willMount) {
            props.willMount(editor);
        }
    };
    const { script, onChangeScript, readOnly } = props;
    const testID = props.testID || 'toml-editor';
    const className = props.className || 'time-machine-editor--embedded';
    return (react_default.a.createElement("div", { className: className, "data-testid": testID },
        react_default.a.createElement(lib_default.a, { language: "toml", theme: THEME_NAME, value: script, onChange: onChangeScript, options: {
                fontSize: 13,
                fontFamily: '"RobotoMono", monospace',
                cursorWidth: 2,
                lineNumbersMinChars: 4,
                lineDecorationsWidth: 0,
                minimap: {
                    renderCharacters: false,
                },
                overviewRulerBorder: false,
                automaticLayout: true,
                readOnly: readOnly || false,
            }, editorWillMount: editorWillMount, editorDidMount: editorDidMount })));
};
/* harmony default export */ var TomlMonacoEditor = __webpack_exports__["a"] = (TomlEditorMonaco);


/***/ }),

/***/ 86:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export removeSpacesAndNow */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return isDurationWithNowParseable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return isDurationParseable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return parseDuration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return durationToMilliseconds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return millisecondsToDuration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return areDurationsEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return timeRangeToDuration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return convertTimeRangeToCustom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return getTimeRangeLabel; });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var src_shared_constants_timeRanges__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(134);


const removeSpacesAndNow = (input) => input.replace(/\s/g, '').replace(/now\(\)-/, '');
const isDurationWithNowParseable = (lower) => {
    const durationRegExp = /([0-9]+)(y|mo|w|d|h|ms|s|m|us|µs|ns)/g;
    if (!lower || !lower.includes('now()')) {
        return false;
    }
    const removedLower = removeSpacesAndNow(lower);
    return !!removedLower.match(durationRegExp);
};
const isDurationParseable = (duration) => {
    if (typeof duration !== 'string') {
        return false;
    }
    const durationRegExp = /^(([0-9]+)(y|mo|w|d|h|ms|s|m|us|µs|ns))+$/g;
    return !!duration.match(durationRegExp);
};
const parseDuration = (input) => {
    const result = [];
    const durationRegExp = /([0-9]+)(y|mo|w|d|h|ms|s|m|us|µs|ns)/g;
    let match = durationRegExp.exec(input);
    if (!match) {
        throw new Error(`could not parse "${input}" as duration`);
    }
    while (match) {
        result.push({
            magnitude: +match[1],
            unit: match[2],
        });
        match = durationRegExp.exec(input);
    }
    return result;
};
const UNIT_TO_APPROX_MS = {
    ns: 1 / 1000000,
    µs: 1 / 1000,
    us: 1 / 1000,
    ms: 1,
    s: 1000,
    m: 1000 * 60,
    h: 1000 * 60 * 60,
    d: 1000 * 60 * 60 * 24,
    w: 1000 * 60 * 60 * 24 * 7,
    mo: 1000 * 60 * 60 * 24 * 30,
    y: 1000 * 60 * 60 * 24 * 365,
};
const durationToMilliseconds = (duration) => duration.reduce((sum, { magnitude, unit }) => sum + magnitude * UNIT_TO_APPROX_MS[unit], 0);
const millisecondsToDuration = (value) => {
    const unitsAndMs = Object.entries(UNIT_TO_APPROX_MS).sort((a, b) => b[1] - a[1]);
    const durations = [];
    let unitIndex = 0;
    let remainder = value;
    while (unitIndex < unitsAndMs.length) {
        const [unit, unitAsMs] = unitsAndMs[unitIndex];
        const valueInUnit = remainder / unitAsMs;
        durations.push({ unit, magnitude: Math.floor(valueInUnit) });
        remainder = remainder - Math.floor(valueInUnit) * unitAsMs;
        unitIndex += 1;
    }
    return durations
        .filter(({ magnitude }) => magnitude > 0)
        .reduce((s, { unit, magnitude }) => `${s}${magnitude}${unit}`, '');
};
const areDurationsEqual = (a, b) => {
    try {
        return (durationToMilliseconds(parseDuration(a)) ===
            durationToMilliseconds(parseDuration(b)));
    }
    catch (_a) {
        return false;
    }
};
const timeRangeToDuration = (timeRange) => {
    if (timeRange.upper || !timeRange.lower || !timeRange.lower.includes('now')) {
        throw new Error('cannot convert time range to duration');
    }
    return removeSpacesAndNow(timeRange.lower);
};
const convertTimeRangeToCustom = (timeRange) => {
    if (timeRange.type === 'custom') {
        return timeRange;
    }
    const upper = new Date().toISOString();
    let lower = '';
    if (timeRange.type === 'selectable-duration') {
        lower = moment__WEBPACK_IMPORTED_MODULE_0___default()()
            .subtract(timeRange.seconds, 's')
            .toISOString();
    }
    else if (timeRange.type === 'duration') {
        const millisecondDuration = durationToMilliseconds(parseDuration(timeRangeToDuration(timeRange)));
        lower = moment__WEBPACK_IMPORTED_MODULE_0___default()()
            .subtract(millisecondDuration, 'milliseconds')
            .toISOString();
    }
    return {
        lower,
        upper,
        type: 'custom',
    };
};
const getTimeRangeLabel = (timeRange) => {
    if (timeRange.type === 'selectable-duration') {
        return timeRange.label;
    }
    if (timeRange.type === 'duration') {
        return timeRange.lower;
    }
    if (timeRange.type === 'custom') {
        return `${moment__WEBPACK_IMPORTED_MODULE_0___default()(timeRange.lower).format(src_shared_constants_timeRanges__WEBPACK_IMPORTED_MODULE_1__[/* TIME_RANGE_FORMAT */ "d"])} - ${moment__WEBPACK_IMPORTED_MODULE_0___default()(timeRange.upper).format(src_shared_constants_timeRanges__WEBPACK_IMPORTED_MODULE_1__[/* TIME_RANGE_FORMAT */ "d"])}`;
    }
};


/***/ }),

/***/ 87:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getErrorMessage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return client; });
/* harmony import */ var _influxdata_influx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(98);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var src_utils_basepath__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(239);



const basePath = `${Object(src_utils_basepath__WEBPACK_IMPORTED_MODULE_2__[/* getAPIBasepath */ "a"])()}/api/v2`;
const getErrorMessage = (e) => {
    let message = Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(e, 'response.data.error.message');
    if (!message) {
        message = Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(e, 'response.data.error');
    }
    if (!message) {
        message = Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(e, 'response.headers.x-influx-error');
    }
    if (!message) {
        message = Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(e, 'response.data.message');
    }
    if (!message) {
        message = Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(e, 'message');
    }
    if (!message) {
        message = 'unknown error';
    }
    return message;
};
const client = new _influxdata_influx__WEBPACK_IMPORTED_MODULE_0__[/* Client */ "a"](basePath);


/***/ }),

/***/ 88:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return extractVariablesList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return extractVariableEditorName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return extractVariableEditorType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return extractVariableEditorQuery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return extractVariableEditorMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return extractVariableEditorConstant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return getVariablesForDashboard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return getValuesForVariable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return getTypeForVariable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return getArgumentValuesForVariable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return getValueSelections; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return getVariableAssignments; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return getTimeMachineValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return getTimeMachineValuesStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return getDashboardVariablesStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return getDashboardValuesStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return getVariable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return getHydratedVariables; });
/* harmony import */ var memoize_one__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(78);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var src_variables_utils_getVarAssignment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(740);
/* harmony import */ var src_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);




const extractVariablesListMemoized = Object(memoize_one__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])((variablesState) => {
    return Object.values(variablesState).filter(v => v.status === src_types__WEBPACK_IMPORTED_MODULE_3__["RemoteDataState"].Done);
});
const extractVariablesList = (state) => {
    return extractVariablesListMemoized(state.resources.variables.byID);
};
const extractVariableEditorName = (state) => {
    return state.variableEditor.name;
};
const extractVariableEditorType = (state) => {
    return state.variableEditor.selected;
};
const extractVariableEditorQuery = (state) => {
    return (state.variableEditor.argsQuery || {
        type: 'query',
        values: {
            query: '',
            language: 'flux',
        },
    });
};
const extractVariableEditorMap = (state) => {
    return (state.variableEditor.argsMap || {
        type: 'map',
        values: {},
    });
};
const extractVariableEditorConstant = (state) => {
    return (state.variableEditor.argsConstant || {
        type: 'constant',
        values: [],
    });
};
const getVariablesForDashboardMemoized = Object(memoize_one__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])((variables, variableIDs) => {
    const variablesForDash = [];
    variableIDs.forEach(variableID => {
        const variable = Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(variables, `${variableID}`);
        if (variable) {
            variablesForDash.push(variable);
        }
    });
    return variablesForDash;
});
const getVariablesForDashboard = (state, dashboardID) => {
    const variableIDs = Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(state, `resources.variables.values.${dashboardID}.order`, []);
    return getVariablesForDashboardMemoized(state.resources.variables.byID, variableIDs);
};
const getValuesForVariable = (state, variableID, contextID) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(state, `resources.variables.values.${contextID}.values.${variableID}`);
};
const getTypeForVariable = (state, variableID) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(state, `resources.variables.byID.${variableID}.arguments.type`, '');
};
const getArgumentValuesForVariable = (state, variableID) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(state, `resources.variables.byID.${variableID}.arguments.values`, {});
};
const getValueSelections = (state, contextID) => {
    const contextValues = Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(state, `resources.variables.values.${contextID}.values`) || {};
    const selections = Object.keys(contextValues).reduce((acc, k) => {
        const selectedValue = Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(contextValues, `${k}.selectedValue`);
        if (!selectedValue) {
            return acc;
        }
        return Object.assign(Object.assign({}, acc), { [k]: selectedValue });
    }, {});
    return selections;
};
const getVariableAssignmentsMemoized = Object(memoize_one__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])((valuesState, variablesState) => {
    if (!valuesState || !valuesState.values) {
        return [];
    }
    const result = Object.entries(valuesState.values).reduce((acc, [variableID, values]) => {
        const variableName = Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(variablesState, [variableID, 'name']);
        if (!variableName || !values || !values.selectedValue) {
            return acc;
        }
        return [...acc, Object(src_variables_utils_getVarAssignment__WEBPACK_IMPORTED_MODULE_2__[/* getVarAssignment */ "a"])(variableName, values)];
    }, []);
    return result;
});
const getVariableAssignments = (state, contextID) => getVariableAssignmentsMemoized(state.resources.variables.values[contextID], state.resources.variables.byID);
const getTimeMachineValues = (state, variableID) => {
    const activeTimeMachineID = state.timeMachines.activeTimeMachineID;
    const values = Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(state, `resources.variables.values.${activeTimeMachineID}.values.${variableID}`);
    return values;
};
const getTimeMachineValuesStatus = (state) => {
    const activeTimeMachineID = state.timeMachines.activeTimeMachineID;
    const valuesStatus = Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(state, `resources.variables.values.${activeTimeMachineID}.status`);
    return valuesStatus;
};
const getDashboardVariablesStatus = (state) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(state, 'resources.variables.status');
};
const getDashboardValuesStatus = (state, dashboardID) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(state, `resources.variables.values.${dashboardID}.status`);
};
const getVariable = (state, variableID) => {
    return Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(state, `resources.variables.byID.${variableID}`);
};
const getHydratedVariables = (state, contextID) => {
    const hydratedVariableIDs = Object.keys(Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(state, `resources.variables.values.${contextID}.values`, {}));
    const hydratedVariables = Object.values(state.resources.variables.byID).filter(v => hydratedVariableIDs.includes(v.id));
    return hydratedVariables;
};


/***/ })

}]);
//# sourceMappingURL=2.index.js.map